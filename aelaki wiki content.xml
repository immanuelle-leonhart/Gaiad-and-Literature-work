<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>Evolutionism Wiki</sitename>
    <dbname>evolutionismwiki</dbname>
    <base>https://evolutionism.miraheze.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.43.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Evolutionism Wiki</namespace>
      <namespace key="5" case="first-letter">Evolutionism Wiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="460" case="first-letter">Campaign</namespace>
      <namespace key="461" case="first-letter">Campaign talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="3000" case="first-letter">Appendix</namespace>
      <namespace key="3001" case="first-letter">Appendix talk</namespace>
      <namespace key="3002" case="first-letter">Portal</namespace>
      <namespace key="3003" case="first-letter">Portal talk</namespace>
      <namespace key="3004" case="first-letter">Prompt</namespace>
      <namespace key="3005" case="first-letter">Prompt talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Ngornese</title>
    <ns>0</ns>
    <id>10474</id>
    <revision>
      <id>165471</id>
      <parentid>165325</parentid>
      <timestamp>2025-08-05T01:04:01Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Adding [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165471</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1786" sha1="3tgrlrmtmyg0u0c5i2fe5vz4n4dmnd4" xml:space="preserve">I am making a new page here because the old one was pretty bad

== Phonemes ==
Vowels
{| class="wikitable"
|+
! colspan="2" |Front
! colspan="2" |Back
!gender
!strength
|-
|i
|i~y
|u
|u
|child
|strong
|-
|ï
|ɪ
|ü
|ʊ
|child
|weak
|-
|e
|e
|o
|o
|female
|strong
|-
|æ
|æ
|ə
|ʌ
|male
|weak
|-
|a
| colspan="3" |a~ä~ɒ
|male
|strong
|}
Vowel rules:

weak vowels agree to the gender of the object slightly. They are not common. Full agreement to female, but male and child go to the corresponding vowels.

Consonants

== Word order ==
(Based on Greenberg’s universals as a VO language)
# SVO
# Preposition before described
# Number/demonstrative then noun

== Basic forms ==
1-a-2-u-3-u-g: Agentic noun

1-gs-2-ü-3-o-4-go: 

== New ==
kamuduru

== Transitive verb declension k-m-d-r ==
{| class="wikitable"
|+
!
!
!Notes
!
|-
|continuative
|
|
|
|-
|atelic
|kam
|
|
|-
|telic
|kamdel
|
|
|-
|
|
|
|
|}
ukamodoloth

ukæmedeluth

=== misc ===
= 

= 

= 

= 

=  

= 
{| class="wikitable"
|+
!telicity
!perfect
!pronounciaton
!meaning
!form
!notes
|-
|telic
|perfect
|kamder
|just finished a ritual
|1-a-2-3-e-r
|
|-
|telic
|imperfect
|kamdor
|doing a ritual
|1-a-2-3-o-r
|
|-
|atelic
|perfect
|kameder
|just finished worshipping
|1-a-2-e-3-e-r
|
|-
|atelic
|imperfect
|kamodor
|worshipping
|1-a-2-o-3-o-r
|
|-
|telic
|perfect
|kandeder
|
|
|
|-
|telic
|imperfect
|kandodor
|habitual worship
|1-a-2-3-o-3-o-4
|
|-
|telic
|perfect
|kandender
|
|
|
|-
|telic
|imperfect
|kandondor
|gnomic of worship
|1-a-2-3-a-2-3-o-4
|
|-
|atelic
|perfect
|kamedemeder
|
|
|
|-
|atelic
|imperfect
|kamodomodor
|gnomic worship
|
|
|-
| colspan="2" |imperative
|alakamadro
|
|
|irregular in 1st to 3rd person
|}

[[Category:Aelaki]]
[[Category:Aelaki book content]]
[[Category:Aelaki book content 2]]</text>
      <sha1>3tgrlrmtmyg0u0c5i2fe5vz4n4dmnd4</sha1>
    </revision>
  </page>
  <page>
    <title>The divine 60</title>
    <ns>0</ns>
    <id>17282</id>
    <revision>
      <id>165472</id>
      <parentid>165422</parentid>
      <timestamp>2025-08-05T01:04:06Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Adding [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165472</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="31832" sha1="2zc0gox5730a62tj61tqth4pdxbq9ut" xml:space="preserve">[[File:Lattice of the divisibility of 60.svg]]

== 2 Gaia-Luna (prime) ==

== 3 alo/genders (prime) ==
Alpha childhood
Lambda female
Omega male

=== 3x2 square ===
{| class="wikitable alternance droite"
! colspan="3" |Alo
|-
! colspan="1" style="background:red;color:white;" |[[Alpha]]
! colspan="1" style="background:green;color:white;" |[[Lambda]]
! colspan="1" style="background:blue;color:white;" |[[Omega]]
|- style="text-align:center;font-size:80%"
! style="border:5px solid #e77c7c;" |Alpha-Gaia
! style="border:5px solid #a3d977;" |Lambda-Luna
! style="border:5px solid #7ec0ee;" |Omega-Gaia
|- style="text-align:center;font-size:80%"
! style="border:5px solid #c66666;" |Alpha-Luna
! style="border:5px solid #8bbf6e;" |Lambda-Gaia
! style="border:5px solid #6ba8cc;" |Omega-Luna
|}
== 4 ==

=== 4x3 square ===
{| class="wikitable"
|+
!North
!East
!South
!West
|-
|Alpha-Gaia
|Lambda-Luna
|Omega-Gaia
|Alpha-Luna
|-
|Lambda-Gaia
|Omega-Luna
|Alpha-Gaia
|Lambda-Luna
|-
|Omega-Gaia
|Alpha-Luna
|Lambda-Gaia
|Omega-Luna
|}

== 5 seasons (prime) ==
Part of Aelaki religion
[[File:Elements.jpg|thumb|Seasons  references]]

5 seasons 

# Occultation super winter metal
# Winter water
# spring wood
# summer fire
# aufumn earth

=== 5x3 square ===
{| class="wikitable alternance droite"
! colspan="5" |[[Heavenly stems]]
|-
! colspan="1" style="background:green;color:white;" |[[En:Wood (wuxing)|Wood (木)]]
! colspan="1" style="background:red;color:white;" |[[En:Fire (wuxing)|Fire (火)]]
! colspan="1" style="background:orange;color:white;" |[[En:Earth (wuxing)|Earth (土)]]
! colspan="1" style="background:gray;color:white;" |[[En:Metal (wuxing)|Metal (金)]]
! colspan="1" style="background:blue;color:white;" |[[En:Water (wuxing)|Water (水)]]
|- style="text-align:center;font-size:80%"
| style="border:5px solid #a3d977;" |Alpha
| style="border:5px solid #e77c7c;" |Lambda
| style="border:5px solid #f4a460;" |Omega
| style="border:5px solid #b0b0b0;" |Alpha
| style="border:5px solid #7ec0ee;" |Lambda
|- style="text-align:center;font-size:80%"
| style="border:5px solid #8bbf6e;" |Omega
| style="border:5px solid #c66666;" |Alpha
| style="border:5px solid #d08d52;" |Lambda
| style="border:5px solid #999999;" |Omega
| style="border:5px solid #6ba8cc;" |Alpha
|-
|Lambda
|Omega
|Alpha
|Lambda
|Omega
|}

=== 5x4 square ===
{| class="wikitable alternance droite"
! colspan="5" |[[Heavenly stems]]
|-
! colspan="1" style="background:green;color:white;" |[[En:Wood (wuxing)|Wood (木)]]
! colspan="1" style="background:red;color:white;" |[[En:Fire (wuxing)|Fire (火)]]
! colspan="1" style="background:orange;color:white;" |[[En:Earth (wuxing)|Earth (土)]]
! colspan="1" style="background:gray;color:white;" |[[En:Metal (wuxing)|Metal (金)]]
! colspan="1" style="background:blue;color:white;" |[[En:Water (wuxing)|Water (水)]]
|- style="text-align:center;font-size:80%"
! style="border:5px solid #a3d977;" |Gaia
! style="border:5px solid #e77c7c;" |Luna
! style="border:5px solid #f4a460;" |Gaia
! style="border:5px solid #b0b0b0;" |Luna
! style="border:5px solid #7ec0ee;" |Gala
|- style="text-align:center;font-size:80%"
! style="border:5px solid #8bbf6e;" |Luna
! style="border:5px solid #c66666;" |Gaia
! style="border:5px solid #d08d52;" |Luna
! style="border:5px solid #999999;" |Gaia
! style="border:5px solid #6ba8cc;" |Luna
|}

==6 ?==
Alo and 2

*10 heavenly stems
* 12 zodiac animals
{| class="wikitable alternance droite"
! colspan="6" |Alo
|-
! colspan="1" style="background:red;color:white;" |Alpha
! colspan="1" style="background:green;color:white;" |Lambda
! colspan="1" style="background:blue;color:white;" |Omega
! colspan="1" style="background:red;color:white;" |Alpha
! colspan="1" style="background:green;color:white;" |Lambda
! colspan="1" style="background:blue;color:white;" |Omega
|- style="text-align:center;font-size:80%"
! style="border:5px solid #e77c7c;" |Gaia
! style="border:5px solid #a3d977;" |Luna
! style="border:5px solid #7ec0ee;" |Gaia
! style="border:5px solid #c66666;" |Luna
! style="border:5px solid #8bbf6e;" |Gaia
! style="border:5px solid #6ba8cc;" |Luna
|-
!East
!South
!West
!North
!Down
!Up
|}

==10==


{| class="wikitable alternance droite"
! colspan="10" style="background:#ccccff" |'''[[Sexagenary cycle]]'''
'''{{lang|zh-Hant|干支}}'''
|-
!Gaia
!Luna
!Gaia
!Luna
!Gaia
!Luna
!Gaia
!Luna
!Gaia
!Luna
|-
! colspan="2" style="background:green;color:white;" |[[En:Wood (wuxing)|Wood (木)]]
! colspan="2" style="background:red;color:white;" |[[En:Fire (wuxing)|Fire (火)]]
! colspan="2" style="background:orange;color:white;" |[[En:Earth (wuxing)|Earth (土)]]
! colspan="2" style="background:gray;color:white;" |[[En:Metal (wuxing)|Metal (金)]]
! colspan="2" style="background:blue;color:white;" |[[En:Water (wuxing)|Water (水)]]
|-
! colspan="10" |[[Heavenly Stems]]
|- style="text-align:center;font-size:80%"
! style="border:5px solid #a3d977;" |{{ill|Kinoe (甲)|cdo|Gák (tiĕng-găng)|fr|Jiagan|hak|Kap (thiên-kôn)|ja|Kinoe|ko|갑 (천간)|vi|Giáp (Thiên can)|za|Gyap (diengan)|zh_classical|甲|zh_min_nan|Kah (Thian-kan)|zh_yue|甲 (天干)|zh|甲 (天干)|lt=Kinoe (甲)}}
! style="border:5px solid #8bbf6e;" |{{ill|Kinoto (乙)|cdo|Ék (tiĕng-găng)|fr|Yi (tige céleste)|gan|乙|hak|Yet (thiên-kôn)|ja|Kinoto|ko|을|vi|Ất|za|Iet (diengan)|zh_min_nan|It (Thian-kan)|zh_yue|乙|zh|乙|lt=Kinoto (乙)}}
! style="border:5px solid #e77c7c;" |{{ill|Hinoe (丙)|cdo|Bīng (tiĕng-găng)|fr|Bing (tige céleste)|gan|丙|hak|Piáng (thiên-kôn)|ja|Hinoe|ko|병 (천간)|vi|Bính|za|Bingj (diengan)|zh_classical|丙|zh_min_nan|Piáⁿ (Thian-kan)|zh_yue|丙|zh|丙|lt=Hinoe (丙)}}
! style="border:5px solid #c66666;" |{{ill|Hinoto (丁)|cdo|Dĭng (tiĕng-găng)|fr|Ding (tige céleste)|gan|丁|hak|Tên (thiên-kôn)|ja|Hinoto|ko|정 (천간)|vi|Đinh (Thiên can)|za|Ding (diengan)|zh_classical|丁|zh_min_nan|Teng (Thian-kan)|zh_yue|丁|zh|丁 (天干)|lt=Hinoto (丁)}}
! style="border:5px solid #f4a460;" |{{ill|Tsuchinoe (戊)|cdo|Muô (tiĕng-găng)|fr|Wu (tige céleste)|gan|戊|hak|Vú (thiên-kôn)|ja|Tsuchinoe|ko|무 (천간)|vi|Mậu (Thiên can)|za|Fouh (diengan)|zh_min_nan|Bō͘ (Thian-kan)|zh_yue|戊|zh|戊|lt=Tsuchinoe (戊)}}
! style="border:5px solid #d08d52;" |{{ill|Tsuchinoto (己)|cdo|Gī (tiĕng-găng)|fr|Ji (tige céleste)|gan|己|hak|Kí (thiên-kôn)|ja|Tsuchinoto|ko|기 (천간)|vi|Kỷ (Thiên can)|za|Geij (diengan)|zh_min_nan|Kí (Thian-kan)|zh_yue|己 (天干)|zh|己 (天干)|lt=Tsuchinoto (己)}}
! style="border:5px solid #b0b0b0;" |{{ill|Kanoe (庚)|cdo|Gĕng (tiĕng-găng)|fr|Genggan|gan|庚|hak|Kâng (thiên-kôn)|ja|Kanoe|ko|경 (천간)|vi|Canh (Thiên can)|za|Geng (diengan)|zh_min_nan|Keⁿ (Thian-kan)|zh_yue|庚 (天干)|zh|庚|lt=Kanoe (庚)}}
! style="border:5px solid #999999;" |{{ill|Kanoto (辛)|cdo|Sĭng (tiĕng-găng)|fr|Xin (tige céleste)|gan|辛|hak|Sîn (thiên-kôn)|ja|Kanoto|ko|신 (천간)|vi|Tân (Thiên can)|za|Sin (diengan)|zh_min_nan|Sin (Thian-kan)|zh_yue|辛 (天干)|zh|辛 (天干)|lt=Kanoto (辛)}}
! style="border:5px solid #7ec0ee;" |{{ill|Mizunoe (壬)|cdo|Ìng (tiĕng-găng)|fr|Ren (tige céleste)|gan|壬|hak|Ngìm (thiên-kôn)|ja|Mizunoe|ko|임 (천간)|vi|Nhâm (Thiên can)|za|Nyaemz (diengan)|zh_min_nan|Jîm (Thian-kan)|zh_yue|壬 (天干)|zh|壬|lt=Mizunoe (壬)}}
! style="border:5px solid #6ba8cc;" |{{ill|Mizunoto (癸)|cdo|Gŭi (tiĕng-găng)|fr|Gui (tige céleste)|gan|癸|hak|Kui (thiên-kôn)|ja|Mizunoto|ko|계 (천간)|vi|Quý (Thiên can)|wuu|癸|za|Gveiq (diengan)|zh_min_nan|Kúi (Thian-kan)|zh_yue|癸|zh|癸|lt=Mizunoto (癸)}}
|- style="text-align:center;font-size:80%"
! style="border:5px solid #8bbf6e;" |{{ill|Kinoe (甲)|cdo|Gák (tiĕng-găng)|fr|Jiagan|hak|Kap (thiên-kôn)|ja|Kinoe|ko|갑 (천간)|vi|Giáp (Thiên can)|za|Gyap (diengan)|zh_classical|甲|zh_min_nan|Kah (Thian-kan)|zh_yue|甲 (天干)|zh|甲 (天干)|lt=Kinoe (甲)}}
! style="border:5px solid #8bbf6e;" |{{ill|Kinoto (乙)|cdo|Ék (tiĕng-găng)|fr|Yi (tige céleste)|gan|乙|hak|Yet (thiên-kôn)|ja|Kinoto|ko|을|vi|Ất|za|Iet (diengan)|zh_min_nan|It (Thian-kan)|zh_yue|乙|zh|乙|lt=Kinoto (乙)}}
! style="border:5px solid #e77c7c;" |{{ill|Hinoe (丙)|cdo|Bīng (tiĕng-găng)|fr|Bing (tige céleste)|gan|丙|hak|Piáng (thiên-kôn)|ja|Hinoe|ko|병 (천간)|vi|Bính|za|Bingj (diengan)|zh_classical|丙|zh_min_nan|Piáⁿ (Thian-kan)|zh_yue|丙|zh|丙|lt=Hinoe (丙)}}
! style="border:5px solid #c66666;" |{{ill|Hinoto (丁)|cdo|Dĭng (tiĕng-găng)|fr|Ding (tige céleste)|gan|丁|hak|Tên (thiên-kôn)|ja|Hinoto|ko|정 (천간)|vi|Đinh (Thiên can)|za|Ding (diengan)|zh_classical|丁|zh_min_nan|Teng (Thian-kan)|zh_yue|丁|zh|丁 (天干)|lt=Hinoto (丁)}}
! style="border:5px solid #f4a460;" |{{ill|Tsuchinoe (戊)|cdo|Muô (tiĕng-găng)|fr|Wu (tige céleste)|gan|戊|hak|Vú (thiên-kôn)|ja|Tsuchinoe|ko|무 (천간)|vi|Mậu (Thiên can)|za|Fouh (diengan)|zh_min_nan|Bō͘ (Thian-kan)|zh_yue|戊|zh|戊|lt=Tsuchinoe (戊)}}
! style="border:5px solid #d08d52;" |{{ill|Tsuchinoto (己)|cdo|Gī (tiĕng-găng)|fr|Ji (tige céleste)|gan|己|hak|Kí (thiên-kôn)|ja|Tsuchinoto|ko|기 (천간)|vi|Kỷ (Thiên can)|za|Geij (diengan)|zh_min_nan|Kí (Thian-kan)|zh_yue|己 (天干)|zh|己 (天干)|lt=Tsuchinoto (己)}}
! style="border:5px solid #b0b0b0;" |{{ill|Kanoe (庚)|cdo|Gĕng (tiĕng-găng)|fr|Genggan|gan|庚|hak|Kâng (thiên-kôn)|ja|Kanoe|ko|경 (천간)|vi|Canh (Thiên can)|za|Geng (diengan)|zh_min_nan|Keⁿ (Thian-kan)|zh_yue|庚 (天干)|zh|庚|lt=Kanoe (庚)}}
! style="border:5px solid #999999;" |{{ill|Kanoto (辛)|cdo|Sĭng (tiĕng-găng)|fr|Xin (tige céleste)|gan|辛|hak|Sîn (thiên-kôn)|ja|Kanoto|ko|신 (천간)|vi|Tân (Thiên can)|za|Sin (diengan)|zh_min_nan|Sin (Thian-kan)|zh_yue|辛 (天干)|zh|辛 (天干)|lt=Kanoto (辛)}}
! style="border:5px solid #7ec0ee;" |{{ill|Mizunoe (壬)|cdo|Ìng (tiĕng-găng)|fr|Ren (tige céleste)|gan|壬|hak|Ngìm (thiên-kôn)|ja|Mizunoe|ko|임 (천간)|vi|Nhâm (Thiên can)|za|Nyaemz (diengan)|zh_min_nan|Jîm (Thian-kan)|zh_yue|壬 (天干)|zh|壬|lt=Mizunoe (壬)}}
! style="border:5px solid #6ba8cc;" |{{ill|Mizunoto (癸)|cdo|Gŭi (tiĕng-găng)|fr|Gui (tige céleste)|gan|癸|hak|Kui (thiên-kôn)|ja|Mizunoto|ko|계 (천간)|vi|Quý (Thiên can)|wuu|癸|za|Gveiq (diengan)|zh_min_nan|Kúi (Thian-kan)|zh_yue|癸|zh|癸|lt=Mizunoto (癸)}}
|-
! colspan="1" |[[En:Wood (wuxing)|Wood (木)]]
! colspan="1" |[[En:Fire (wuxing)|Fire (火)]]
! colspan="1" |[[En:Earth (wuxing)|Earth (土)]]
! colspan="1" |[[En:Metal (wuxing)|Metal (金)]]
! colspan="1" |[[En:Water (wuxing)|Water (水)]]
! colspan="1" |[[En:Wood (wuxing)|Wood (木)]]
! colspan="1" |[[En:Fire (wuxing)|Fire (火)]]
! colspan="1" |[[En:Earth (wuxing)|Earth (土)]]
! colspan="1" |[[En:Metal (wuxing)|Metal (金)]]
! colspan="1" |[[En:Water (wuxing)|Water (水)]]
|-
!Alpha-Gaia
!Lambda-Luna
!Omega-Gaia
!Alpha-Luna
!Lambda-Gaia
!Omega-Luna
!Alpha-Gaia
!Lambda-Luna
!Omega-Gaia
!Alpha-Luna
|}


{| class="wikitable alternance droite"
! colspan="6" |[[Heavenly stems]]
|-
!Element
! colspan="1" style="background:green;color:white;" |[[En:Wood (wuxing)|Wood (木)]]
! colspan="1" style="background:red;color:white;" |[[En:Fire (wuxing)|Fire (火)]]
! colspan="1" style="background:orange;color:white;" |[[En:Earth (wuxing)|Earth (土)]]
! colspan="1" style="background:gray;color:white;" |[[En:Metal (wuxing)|Metal (金)]]
! colspan="1" style="background:blue;color:white;" |[[En:Water (wuxing)|Water (水)]]
|- style="text-align:center;font-size:80%"
!Gaia
! style="border:5px solid #a3d977;" |{{ill|Kinoe (甲)|cdo|Gák (tiĕng-găng)|fr|Jiagan|hak|Kap (thiên-kôn)|ja|Kinoe|ko|갑 (천간)|vi|Giáp (Thiên can)|za|Gyap (diengan)|zh_classical|甲|zh_min_nan|Kah (Thian-kan)|zh_yue|甲 (天干)|zh|甲 (天干)|lt=Kinoe (甲)}}
! style="border:5px solid #e77c7c;" |{{ill|Hinoe (丙)|cdo|Bīng (tiĕng-găng)|fr|Bing (tige céleste)|gan|丙|hak|Piáng (thiên-kôn)|ja|Hinoe|ko|병 (천간)|vi|Bính|za|Bingj (diengan)|zh_classical|丙|zh_min_nan|Piáⁿ (Thian-kan)|zh_yue|丙|zh|丙|lt=Hinoe (丙)}}
! style="border:5px solid #f4a460;" |{{ill|Tsuchinoe (戊)|cdo|Muô (tiĕng-găng)|fr|Wu (tige céleste)|gan|戊|hak|Vú (thiên-kôn)|ja|Tsuchinoe|ko|무 (천간)|vi|Mậu (Thiên can)|za|Fouh (diengan)|zh_min_nan|Bō͘ (Thian-kan)|zh_yue|戊|zh|戊|lt=Tsuchinoe (戊)}}
! style="border:5px solid #b0b0b0;" |{{ill|Kanoe (庚)|cdo|Gĕng (tiĕng-găng)|fr|Genggan|gan|庚|hak|Kâng (thiên-kôn)|ja|Kanoe|ko|경 (천간)|vi|Canh (Thiên can)|za|Geng (diengan)|zh_min_nan|Keⁿ (Thian-kan)|zh_yue|庚 (天干)|zh|庚|lt=Kanoe (庚)}}
! style="border:5px solid #7ec0ee;" |{{ill|Mizunoe (壬)|cdo|Ìng (tiĕng-găng)|fr|Ren (tige céleste)|gan|壬|hak|Ngìm (thiên-kôn)|ja|Mizunoe|ko|임 (천간)|vi|Nhâm (Thiên can)|za|Nyaemz (diengan)|zh_min_nan|Jîm (Thian-kan)|zh_yue|壬 (天干)|zh|壬|lt=Mizunoe (壬)}}
|- style="text-align:center;font-size:80%"
!Luna
! style="border:5px solid #8bbf6e;" |{{ill|Kinoto (乙)|cdo|Ék (tiĕng-găng)|fr|Yi (tige céleste)|gan|乙|hak|Yet (thiên-kôn)|ja|Kinoto|ko|을|vi|Ất|za|Iet (diengan)|zh_min_nan|It (Thian-kan)|zh_yue|乙|zh|乙|lt=Kinoto (乙)}}
! style="border:5px solid #c66666;" |{{ill|Hinoto (丁)|cdo|Dĭng (tiĕng-găng)|fr|Ding (tige céleste)|gan|丁|hak|Tên (thiên-kôn)|ja|Hinoto|ko|정 (천간)|vi|Đinh (Thiên can)|za|Ding (diengan)|zh_classical|丁|zh_min_nan|Teng (Thian-kan)|zh_yue|丁|zh|丁 (天干)|lt=Hinoto (丁)}}
! style="border:5px solid #d08d52;" |{{ill|Tsuchinoto (己)|cdo|Gī (tiĕng-găng)|fr|Ji (tige céleste)|gan|己|hak|Kí (thiên-kôn)|ja|Tsuchinoto|ko|기 (천간)|vi|Kỷ (Thiên can)|za|Geij (diengan)|zh_min_nan|Kí (Thian-kan)|zh_yue|己 (天干)|zh|己 (天干)|lt=Tsuchinoto (己)}}
! style="border:5px solid #999999;" |{{ill|Kanoto (辛)|cdo|Sĭng (tiĕng-găng)|fr|Xin (tige céleste)|gan|辛|hak|Sîn (thiên-kôn)|ja|Kanoto|ko|신 (천간)|vi|Tân (Thiên can)|za|Sin (diengan)|zh_min_nan|Sin (Thian-kan)|zh_yue|辛 (天干)|zh|辛 (天干)|lt=Kanoto (辛)}}
! style="border:5px solid #6ba8cc;" |{{ill|Mizunoto (癸)|cdo|Gŭi (tiĕng-găng)|fr|Gui (tige céleste)|gan|癸|hak|Kui (thiên-kôn)|ja|Mizunoto|ko|계 (천간)|vi|Quý (Thiên can)|wuu|癸|za|Gveiq (diengan)|zh_min_nan|Kúi (Thian-kan)|zh_yue|癸|zh|癸|lt=Mizunoto (癸)}}
|}

== 12 ==
{| class="wikitable alternance droite"
! colspan="12" |Alo
|-
! colspan="1" style="background:red;color:white;" |Alpha
! colspan="1" style="background:green;color:white;" |Lambda
! colspan="1" style="background:blue;color:white;" |Omega
! colspan="1" style="background:red;color:white;" |Alpha
! colspan="1" style="background:green;color:white;" |Lambda
! colspan="1" style="background:blue;color:white;" |Omega
! colspan="1" style="background:red;color:white;" |Alpha
! colspan="1" style="background:green;color:white;" |Lambda
! colspan="1" style="background:blue;color:white;" |Omega
! colspan="1" style="background:red;color:white;" |Alpha
! colspan="1" style="background:green;color:white;" |Lambda
! colspan="1" style="background:blue;color:white;" |Omega
|- style="text-align:center;font-size:80%"
! style="border:5px solid #e77c7c;" |Gaia
! style="border:5px solid #a3d977;" |Luna
! style="border:5px solid #7ec0ee;" |Gaia
! style="border:5px solid #c66666;" |Luna
! style="border:5px solid #8bbf6e;" |Gaia
! style="border:5px solid #6ba8cc;" |Luna
! style="border:5px solid #e77c7c;" |Gaia
! style="border:5px solid #a3d977;" |Luna
! style="border:5px solid #7ec0ee;" |Gaia
! style="border:5px solid #c66666;" |Luna
! style="border:5px solid #8bbf6e;" |Gaia
! style="border:5px solid #6ba8cc;" |Luna
|-
!East
!South
!West
!North
!Down
!Up
!East
!South
!West
!North
!Down
!Up
|-
!1st hour
!2nd hour
!3rd hour
!4th hour
!5th hour
!6th hour
!7th hour
!8th hour
!9th hour
!10th hour
!11th hour
!12th hour
|}
{| class="wikitable alternance droite"
! colspan="7" style="background-color:#ddd;" |[[十二支]]
|-
| style="border-right:1px solid #aaa;" |Gaia
|[[Rat (zodiac)|Rat (鼠)]]
|[[Tiger (zodiac)|Tiger (虎)]]
|[[Dragon (zodiac)|Dragon (龍)]]
|[[Horse (zodiac)|Horse (馬)]]
|[[Monkey (zodiac)|Monkey (猴)]]
|[[Dog (zodiac)|Dog (狗)]]
|- style="background-color:#eee;"
| style="border-right:1px solid #aaa;" |Luna
|[[Ox (zodiac)|Ox (牛)]]
|[[Rabbit (zodiac)|Rabbit (兔)]]
|[[Snake (zodiac)|Snake (蛇)]]
|[[Goat (zodiac)|Goat (羊)]]
|[[Rooster (zodiac)|Rooster (雞)]]
|[[Pig (zodiac)|Pig (豬)]]
|}

== 15 ==

== 20 ==

== 30 ==

==base list==
{| class="wikitable alternance droite"
! colspan="12" style="background:#ccccff" |'''[[Sexagenary cycle]]'''
'''{{lang|zh-Hant|干支}}'''
|-
!Gaia
!Luna
!Gaia
!Luna
!Gaia
!Luna
!Gaia
!Luna
!Gaia
!Luna
!Gaia
!Luna
|-
! colspan="2" style="background:green;color:white;" |[[En:Wood (wuxing)|Wood (木)]]
! colspan="2" style="background:red;color:white;" |[[En:Fire (wuxing)|Fire (火)]]
! colspan="2" style="background:orange;color:white;" |[[En:Earth (wuxing)|Earth (土)]]
! colspan="2" style="background:gray;color:white;" |[[En:Metal (wuxing)|Metal (金)]]
! colspan="2" style="background:blue;color:white;" |[[En:Water (wuxing)|Water (水)]]
! colspan="2" style="background:green;color:white;" |[[En:Wood (wuxing)|Wood (木)]]
|-
! colspan="12" |[[Earthly Branches]]
|-
![[Rat (zodiac)|Rat (鼠)]]
![[Ox (zodiac)|Ox (牛)]]
![[Tiger (zodiac)|Tiger (虎)]]
![[Rabbit (zodiac)|Rabbit (兔)]]
![[Dragon (zodiac)|Dragon (龍)]]
![[Snake (zodiac)|Snake (蛇)]]
![[Horse (zodiac)|Horse (馬)]]
![[Goat (zodiac)|Goat (羊)]]
![[Monkey (zodiac)|Monkey (猴)]]
![[Rooster (zodiac)|Rooster (雞)]]
![[Dog (zodiac)|Dog (狗)]]
![[Pig (zodiac)|Pig (豬)]]
|-
! colspan="10" |[[Heavenly Stems]]
! colspan="2" |repeating [[Heavenly Stems|stems]]
|- style="text-align:center;font-size:80%"
! style="border:5px solid #a3d977;" |{{ill|Kinoe (甲)|cdo|Gák (tiĕng-găng)|fr|Jiagan|hak|Kap (thiên-kôn)|ja|Kinoe|ko|갑 (천간)|vi|Giáp (Thiên can)|za|Gyap (diengan)|zh_classical|甲|zh_min_nan|Kah (Thian-kan)|zh_yue|甲 (天干)|zh|甲 (天干)|lt=Kinoe (甲)}}
! style="border:5px solid #8bbf6e;" |{{ill|Kinoto (乙)|cdo|Ék (tiĕng-găng)|fr|Yi (tige céleste)|gan|乙|hak|Yet (thiên-kôn)|ja|Kinoto|ko|을|vi|Ất|za|Iet (diengan)|zh_min_nan|It (Thian-kan)|zh_yue|乙|zh|乙|lt=Kinoto (乙)}}
! style="border:5px solid #e77c7c;" |{{ill|Hinoe (丙)|cdo|Bīng (tiĕng-găng)|fr|Bing (tige céleste)|gan|丙|hak|Piáng (thiên-kôn)|ja|Hinoe|ko|병 (천간)|vi|Bính|za|Bingj (diengan)|zh_classical|丙|zh_min_nan|Piáⁿ (Thian-kan)|zh_yue|丙|zh|丙|lt=Hinoe (丙)}}
! style="border:5px solid #c66666;" |{{ill|Hinoto (丁)|cdo|Dĭng (tiĕng-găng)|fr|Ding (tige céleste)|gan|丁|hak|Tên (thiên-kôn)|ja|Hinoto|ko|정 (천간)|vi|Đinh (Thiên can)|za|Ding (diengan)|zh_classical|丁|zh_min_nan|Teng (Thian-kan)|zh_yue|丁|zh|丁 (天干)|lt=Hinoto (丁)}}
! style="border:5px solid #f4a460;" |{{ill|Tsuchinoe (戊)|cdo|Muô (tiĕng-găng)|fr|Wu (tige céleste)|gan|戊|hak|Vú (thiên-kôn)|ja|Tsuchinoe|ko|무 (천간)|vi|Mậu (Thiên can)|za|Fouh (diengan)|zh_min_nan|Bō͘ (Thian-kan)|zh_yue|戊|zh|戊|lt=Tsuchinoe (戊)}}
! style="border:5px solid #d08d52;" |{{ill|Tsuchinoto (己)|cdo|Gī (tiĕng-găng)|fr|Ji (tige céleste)|gan|己|hak|Kí (thiên-kôn)|ja|Tsuchinoto|ko|기 (천간)|vi|Kỷ (Thiên can)|za|Geij (diengan)|zh_min_nan|Kí (Thian-kan)|zh_yue|己 (天干)|zh|己 (天干)|lt=Tsuchinoto (己)}}
! style="border:5px solid #b0b0b0;" |{{ill|Kanoe (庚)|cdo|Gĕng (tiĕng-găng)|fr|Genggan|gan|庚|hak|Kâng (thiên-kôn)|ja|Kanoe|ko|경 (천간)|vi|Canh (Thiên can)|za|Geng (diengan)|zh_min_nan|Keⁿ (Thian-kan)|zh_yue|庚 (天干)|zh|庚|lt=Kanoe (庚)}}
! style="border:5px solid #999999;" |{{ill|Kanoto (辛)|cdo|Sĭng (tiĕng-găng)|fr|Xin (tige céleste)|gan|辛|hak|Sîn (thiên-kôn)|ja|Kanoto|ko|신 (천간)|vi|Tân (Thiên can)|za|Sin (diengan)|zh_min_nan|Sin (Thian-kan)|zh_yue|辛 (天干)|zh|辛 (天干)|lt=Kanoto (辛)}}
! style="border:5px solid #7ec0ee;" |{{ill|Mizunoe (壬)|cdo|Ìng (tiĕng-găng)|fr|Ren (tige céleste)|gan|壬|hak|Ngìm (thiên-kôn)|ja|Mizunoe|ko|임 (천간)|vi|Nhâm (Thiên can)|za|Nyaemz (diengan)|zh_min_nan|Jîm (Thian-kan)|zh_yue|壬 (天干)|zh|壬|lt=Mizunoe (壬)}}
! style="border:5px solid #6ba8cc;" |{{ill|Mizunoto (癸)|cdo|Gŭi (tiĕng-găng)|fr|Gui (tige céleste)|gan|癸|hak|Kui (thiên-kôn)|ja|Mizunoto|ko|계 (천간)|vi|Quý (Thiên can)|wuu|癸|za|Gveiq (diengan)|zh_min_nan|Kúi (Thian-kan)|zh_yue|癸|zh|癸|lt=Mizunoto (癸)}}
! style="border:5px solid #a3d977;" |{{ill|Kinoe (甲)|cdo|Gák (tiĕng-găng)|fr|Jiagan|hak|Kap (thiên-kôn)|ja|Kinoe|ko|갑 (천간)|vi|Giáp (Thiên can)|za|Gyap (diengan)|zh_classical|甲|zh_min_nan|Kah (Thian-kan)|zh_yue|甲 (天干)|zh|甲 (天干)|lt=Kinoe (甲)}}
! style="border:5px solid #8bbf6e;" |{{ill|Kinoto (乙)|cdo|Ék (tiĕng-găng)|fr|Yi (tige céleste)|gan|乙|hak|Yet (thiên-kôn)|ja|Kinoto|ko|을|vi|Ất|za|Iet (diengan)|zh_min_nan|It (Thian-kan)|zh_yue|乙|zh|乙|lt=Kinoto (乙)}}
|- style="text-align:center;font-size:80%"
| style="border:5px solid #8bbf6e;" |{{ill|Yang Wood Rat|ja|甲子|zh|甲子|ko|갑자|fr|Rat de bois|de|Holz-Ratte|en|Wood Rat|lt_ko=갑자}}-1984
| style="border:5px solid #8bbf6e;" |{{ill|Yin Wood Ox|ja|乙丑|zh|乙丑|ko|을축|fr|Buffle de bois|de|Holz-Büffel|en|lt_ko=을축}}-1985
| style="border:5px solid #e77c7c;" |{{ill|Yang Fire Tiger|ja|丙寅|zh|丙寅|ko|병인|fr|Tigre de feu|de|Feuer-Tiger|en|lt_ko=병인}}-1986
| style="border:5px solid #c66666;" |{{ill|Yin Fire Rabbit|ja|丁卯|zh|丁卯|ko|정묘|fr|Lièvre de feu|de|Feuer-Hase|en|lt_ko=정묘}}-1987
| style="border:5px solid #f4a460;" |{{ill|Yang Earth Dragon|ja|戊辰|zh|戊辰|ko|무진 (간지)|fr|Dragon de terre|de|Erde-Drache|en|lt_ko=무진}}-1988
| style="border:5px solid #d08d52;" |{{ill|Yin Earth Snake|ja|己巳|zh|己巳|ko|기사 (간지)|fr|Serpent de terre|de|Erde-Schlange|en|lt_ko=기사}}-1989
| style="border:5px solid #b0b0b0;" |{{ill|Yang Metal Horse|ja|庚午|zh|庚午|ko|경오|fr|Cheval de métal|de|Metall-Pferd|en|lt_ko=경오}}-1990
| style="border:5px solid #999999;" |{{ill|Yin Metal Goat|ja|辛未|zh|辛未|ko|신미 (간지)|fr|Chèvre de métal|de|Metall-Schaf|en|lt_ko=신미}}-1991
| style="border:5px solid #7ec0ee;" |{{ill|Yang Water Monkey|ja|壬申|zh|壬申|ko|임신 (간지)|fr|Singe de eau|de|Wasser-Affe|en|lt_ko=임신}}-1992
| style="border:5px solid #6ba8cc;" |{{ill|Yin Water Rooster|ja|癸酉|zh|癸酉|ko|계유|fr|Coq de eau|de|Wasser-Hahn|en|lt_ko=계유}}-1993
| style="border:5px solid #8bbf6e;" |{{ill|Yang Wood Dog|ja|甲戌|zh|甲戌|ko|갑술|fr|Chien de bois|de|Holz-Hund|en|lt_ko=갑술}}-1994
| style="border:5px solid #8bbf6e;" |{{ill|Yin Wood Pig|ja|乙亥|zh|乙亥|ko|을해|fr|Cochon de bois|de|Holz-Schwein|en|lt_ko=을해}}-1995
|- style="text-align:center;font-size:80%"
| style="border:5px solid #e77c7c;" |{{ill|Yang Fire Rat|ja|丙子|zh|丙子|ko|병자|fr|Rat de feu|de|Feuer-Ratte|en|lt_ko=병자}}-1996
| style="border:5px solid #c66666;" |{{ill|Yin Fire Ox|ja|丁丑|zh|丁丑|ko|정축|fr|Buffle de feu|de|Feuer-Büffel|en|lt_ko=정축}}-1997
| style="border:5px solid #f4a460;" |{{ill|Yang Earth Tiger|ja|戊寅|zh|戊寅|ko|무인 (간지)|fr|Tigre de terre|de|Erde-Tiger|en|lt_ko=무인}}-1998
| style="border:5px solid #d08d52;" |{{ill|Yin Earth Rabbit|ja|己卯|zh|己卯|ko|기묘|fr|Lièvre de terre|de|Erde-Hase|en|lt_ko=기묘}}-1999
| style="border:5px solid #b0b0b0;" |{{ill|Yang Metal Dragon|ja|庚辰|zh|庚辰|ko|경진|fr|Dragon de métal|de|Metall-Drache|en|lt_ko=경진}}-2000
| style="border:5px solid #999999;" |{{ill|Yin Metal Snake|ja|辛巳|zh|辛巳|ko|신사 (간지)|fr|Serpent de métal|de|Metall-Schlange|en|lt_ko=신사}}-2001
| style="border:5px solid #7ec0ee;" |{{ill|Yang Water Horse|ja|壬午|zh|壬午|ko|임오|fr|Cheval de eau|de|Wasser-Pferd|en|lt_ko=임오}}-2002
| style="border:5px solid #6ba8cc;" |{{ill|Yin Water Goat|ja|癸未|zh|癸未|ko|계미|fr|Chèvre de eau|de|Wasser-Schaf|en|lt_ko=계미}}-2003
| style="border:5px solid #8bbf6e;" |{{ill|Yang Wood Monkey|ja|甲申|zh|甲申|ko|갑신|fr|Singe de bois|de|Holz-Affe|en|lt_ko=갑신}}-2004
| style="border:5px solid #8bbf6e;" |{{ill|Yin Wood Rooster|ja|乙酉|zh|乙酉|ko|을유|fr|Coq de bois|de|Holz-Hahn|en|lt_ko=을유}}-2005
| style="border:5px solid #e77c7c;" |{{ill|Yang Fire Dog|ja|丙戌|zh|丙戌|ko|병술|fr|Chien de feu|de|Feuer-Hund|en|lt_ko=병술}}-2006
| style="border:5px solid #c66666;" |{{ill|Yin Fire Pig|ja|丁亥|zh|丁亥|ko|정해|fr|Cochon de feu|de|Feuer-Schwein|en|lt_ko=정해}}-2007
|- style="text-align:center;font-size:80%"
| style="border:5px solid #f4a460;" |{{ill|Yang Earth Rat|ja|戊子|zh|戊子|ko|무자|fr|Rat de terre|de|Erde-Ratte|en|lt_ko=무자}}-2008
| style="border:5px solid #d08d52;" |{{ill|Yin Earth Ox|ja|己丑|zh|己丑|ko|기축|fr|Buffle de terre|de|Erde-Büffel|en|lt_ko=기축}}-2009
| style="border:5px solid #b0b0b0;" |{{ill|Yang Metal Tiger|ja|庚寅|zh|庚寅|ko|경인|fr|Tigre de métal|de|Metall-Tiger|en|lt_ko=경인}}-2010
| style="border:5px solid #999999;" |{{ill|Yin Metal Rabbit|ja|辛卯|zh|辛卯|ko|신묘|fr|Lièvre de métal|de|Metall-Hase|en|lt_ko=신묘}}-2011
| style="border:5px solid #7ec0ee;" |{{ill|Yang Water Dragon|ja|壬辰|zh|壬辰|ko|임진|fr|Dragon de eau|de|Wasser-Drache|en|lt_ko=임진}}-2012
| style="border:5px solid #6ba8cc;" |{{ill|Yin Water Snake|ja|癸巳|zh|癸巳|ko|계사 (간지)|fr|Serpent de eau|de|Wasser-Schlange|en|lt_ko=계사}}-2013
| style="border:5px solid #8bbf6e;" |{{ill|Yang Wood Horse|ja|甲午|zh|甲午|ko|갑오|fr|Cheval de bois|de|Holz-Pferd|en|lt_ko=갑오}}-2014
| style="border:5px solid #8bbf6e;" |{{ill|Yin Wood Goat|ja|乙未|zh|乙未|ko|을미|fr|Chèvre de bois|de|Holz-Schaf|en|lt_ko=을미}}-2015
| style="border:5px solid #e77c7c;" |{{ill|Yang Fire Monkey|ja|丙申|zh|丙申|ko|병신|fr|Singe de feu|de|Feuer-Affe|en|lt_ko=병신}}-2016
| style="border:5px solid #c66666;" |{{ill|Yin Fire Rooster|ja|丁酉|zh|丁酉|ko|정유 (간지)|fr|Coq de feu|de|Feuer-Hahn|en|lt_ko=정유}}-2017
| style="border:5px solid #f4a460;" |{{ill|Yang Earth Dog|ja|戊戌|zh|戊戌|ko|무술 (간지)|fr|Chien de terre|de|Erde-Hund|en|lt_ko=무술}}-2018
| style="border:5px solid #d08d52;" |{{ill|Yin Earth Pig|ja|己亥|zh|己亥|ko|기해|fr|Cochon de terre|de|Erde-Schwein|en|lt_ko=기해}}-2019
|- style="text-align:center;font-size:80%"
| style="border:5px solid #b0b0b0;" |{{ill|Yang Metal Rat|ja|庚子|zh|庚子|ko|경자|fr|Rat de métal|de|Metall-Ratte|en|lt_ko=경자}}-2020
| style="border:5px solid #999999;" |{{ill|Yin Metal Ox|ja|辛丑|zh|辛丑|ko|신축|fr|Buffle de métal|de|Metall-Büffel|en|lt_ko=신축}}-2021
| style="border:5px solid #7ec0ee;" |{{ill|Yang Water Tiger|ja|壬寅|zh|壬寅|ko|임인|fr|Tigre de eau|de|Wasser-Tiger|en|lt_ko=임인}}-2022
| style="border:5px solid #6ba8cc;" |{{ill|Yin Water Rabbit|ja|癸卯|zh|癸卯|ko|계묘|fr|Lièvre de eau|de|Wasser-Hase|en|lt_ko=계묘}}-2023
| style="border:5px solid #8bbf6e;" |{{ill|Yang Wood Dragon|ja|甲辰|zh|甲辰|ko|갑진|fr|Dragon de bois|de|Holz-Drache|en|lt_ko=갑진}}-2024
| style="border:5px solid #8bbf6e;" |{{ill|Yin Wood Snake|ja|乙巳|zh|乙巳|ko|을사|fr|Serpent de bois|de|Holz-Schlange|en|lt_ko=을사}}-2025
| style="border:5px solid #e77c7c;" |{{ill|Yang Fire Horse|ja|丙午|zh|丙午|ko|병오|fr|Cheval de feu|de|Feuer-Pferd|en|Fire Horse|lt_ko=병오}}-2026
| style="border:5px solid #c66666;" |{{ill|Yin Fire Goat|ja|丁未|zh|丁未|ko|정미|fr|Chèvre de feu|de|Feuer-Schaf|en|lt_ko=정미}}-2027
| style="border:5px solid #f4a460;" |{{ill|Yang Earth Monkey|ja|戊申|zh|戊申|ko|무신 (간지)|fr|Singe de terre|de|Erde-Affe|en|lt_ko=무신}}-2028
| style="border:5px solid #d08d52;" |{{ill|Yin Earth Rooster|ja|己酉|zh|己酉|ko|기유|fr|Coq de terre|de|Erde-Hahn|en|lt_ko=기유}}-2029
| style="border:5px solid #b0b0b0;" |{{ill|Yang Metal Dog|ja|庚戌|zh|庚戌|ko|경술|fr|Chien de métal|de|Metall-Hund|en|lt_ko=경술}}-2030
| style="border:5px solid #999999;" |{{ill|Yin Metal Pig|ja|辛亥|zh|辛亥|ko|신해|fr|Cochon de métal|de|Metall-Schwein|en|lt_ko=신해}}-2031
|- style="text-align:center;font-size:80%"
| style="border:5px solid #7ec0ee;" |{{ill|Yang Water Rat|ja|壬子|zh|壬子|ko|임자|fr|Rat de eau|de|Wasser-Ratte|en|lt_ko=임자}}-2032
| style="border:5px solid #6ba8cc;" |{{ill|Yin Water Ox|ja|癸丑|zh|癸丑|ko|계축|fr|Buffle de eau|de|Wasser-Büffel|en|lt_ko=계축}}-2033
| style="border:5px solid #8bbf6e;" |{{ill|Yang Wood Tiger|ja|甲寅|zh|甲寅|ko|갑인|fr|Tigre de bois|de|Holz-Tiger|en|lt_ko=갑인}}-2034
| style="border:5px solid #8bbf6e;" |{{ill|Yin Wood Rabbit|ja|乙卯|zh|乙卯|ko|을묘|fr|Lièvre de bois|de|Holz-Hase|en|lt_ko=을묘}}-2035
| style="border:5px solid #e77c7c;" |{{ill|Yang Fire Dragon|ja|丙辰|zh|丙辰|ko|병진 (간지)|fr|Dragon de feu|de|Feuer-Drache|en|lt_ko=병진}}-2036
| style="border:5px solid #c66666;" |{{ill|Yin Fire Snake|ja|丁巳|zh|丁巳|ko|정사 (간지)|fr|Serpent de feu|de|Feuer-Schlange|en|lt_ko=정사}}-2037
| style="border:5px solid #f4a460;" |{{ill|Yang Earth Horse|ja|戊午|zh|戊午|ko|무오|fr|Cheval de terre|de|Erde-Pferd|en|lt_ko=무오}}-2038
| style="border:5px solid #d08d52;" |{{ill|Yin Earth Goat|ja|己未|zh|己未|ko|기미|fr|Chèvre de terre|de|Erde-Schaf|en|lt_ko=기미}}-2039
| style="border:5px solid #b0b0b0;" |{{ill|Yang Metal Monkey|ja|庚申|zh|庚申|ko|경신|fr|Singe de métal|de|Metall-Affe|en|lt_ko=경신}}-2040
| style="border:5px solid #999999;" |{{ill|Yin Metal Rooster|ja|辛酉|zh|辛酉|ko|신유|fr|Coq de métal|de|Metall-Hahn|en|lt_ko=신유}}-2041
| style="border:5px solid #7ec0ee;" |{{ill|Yang Water Dog|ja|壬戌|zh|壬戌|ko|임술|fr|Chien de eau|de|Wasser-Hund|en|lt_ko=임술}}-2042
| style="border:5px solid #6ba8cc;" |{{ill|Yin Water Pig|ja|癸亥|zh|癸亥|ko|계해|fr|Cochon de eau|de|Wasser-Schwein|en|lt_ko=계해}}-2043
|}
&lt;noinclude&gt;
[[ja:template:干支]][[de:Vorlage:Ganzhi-1]][[fr:Modèle:Ganzhi]]

== See Also ==

* [[Template:Sexagenary cycle]] current english wikipedia one
* [[Template:干支]] current Japanese wikipedia one
* [[Sexagenary cycle german style]]

&lt;/noinclude&gt; &lt;noinclude&gt;
[[ja:template:干支]][[de:Vorlage:Ganzhi-1]][[fr:Modèle:Ganzhi]]

== See Also ==

* [[Template:Sexagenary cycle]] current english wikipedia one
* [[Template:干支]] current Japanese wikipedia one
* [[Sexagenary cycle german style]]

&lt;/noinclude&gt;6. Omega East Metal
7. Alpha South Water
8. Lambda West Wood
9. Omega North Fire
10. Alpha East Earth

11. Lambda South Metal
12. Omega West Water
13. Alpha North Wood
14. Lambda East Fire
15. Omega South Earth

16. Alpha West Metal
17. Lambda North Water
18. Omega East Wood
19. Alpha South Fire
20. Lambda West Earth

21. Omega North Metal
22. Alpha East Water
23. Lambda South Wood
24. Omega West Fire
25. Alpha North Earth

26. Lambda East Metal
27. Omega South Water
28. Alpha West Wood
29. Lambda North Fire
30. Omega East Earth

31. Alpha South Metal
32. Lambda West Water
33. Omega North Wood
34. Alpha East Fire
35. Lambda South Earth

36. Omega West Metal
37. Alpha North Water
38. Lambda East Wood
39. Omega South Fire
40. Alpha West Earth

41. Lambda North Metal
42. Omega East Water
43. Alpha South Wood
44. Lambda West Fire
45. Omega North Earth

46. Alpha East Metal
47. Lambda South Water
48. Omega West Wood
49. Alpha North Fire
50. Lambda East Earth

51. Omega South Metal
52. Alpha West Water
53. Lambda North Wood
54. Omega East Fire
55. Alpha South Earth

56. Lambda West Metal
57. Omega North Water
58. Alpha East Wood
59. Lambda South Fire
60. Omega West Earth

[[Category:Aelaki book content]]
[[Category:Aelaki book content 2]]</text>
      <sha1>2zc0gox5730a62tj61tqth4pdxbq9ut</sha1>
    </revision>
  </page>
  <page>
    <title>Aelaki declensions</title>
    <ns>0</ns>
    <id>10261</id>
    <revision>
      <id>165474</id>
      <parentid>165345</parentid>
      <timestamp>2025-08-05T01:04:23Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165474</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2366" sha1="1ne0hmmg4p420rus21hoqijgo3t9er4" xml:space="preserve">[[File:Cat_genders_in_Old_Aelaki.svg|thumb]]
8 declensions. Vowel ended and consonant ended inanimate, child, feminine, or masculine


examples with mak

[[File:Imageffffff.png|thumb]]
If language has one of the cases it tends to have all the ones above

# Subject -bhi
# Object -na 
# genitive -bu and -dzh
# dative
# locative
# ablative/instrumental -z
# comitative
# vocative -go

== Consonant ended class ==

=== Child ===
{| class="wikitable"
!
!
!
|-
| rowspan="7" |Singular
|Subject
|makɓi
|-
|Object
|makla
|-
|Intransitive
|mak
|-
|inalienable posessive
|makbu
|-
|alienable posessive
|makydzh
|-
|instrumental
|makyz
|-
|vocative
|makygo
|-
| rowspan="7" |nonexhaustive plural
|Subject
|makmakɓi
|-
|Object
|makmakla
|-
|Intransitive
|makmak
|-
|inalienable posessive
|makmakbu
|-
|alienable posessive
|makmakydzh
|-
|instrumental
|makmakyz
|-
|vocative
|makmakygo
|-
| rowspan="7" |exhaustive plural
|Subject
|makylɓi
|-
|Object
|makylla
|-
|Intransitive
|makyl
|-
|inalienable posessive
|makylbu
|-
|alienable posessive
|makyldzh
|-
|instrumental
|makylz
|-
|vocative
|makylgo
|}

=== Feminine ===
{| class="wikitable"
!
!
!
|-
| rowspan="6" |Singular
|Subject
|makɓi
|-
|Object
|makla
|-
|Intransitive
|mak
|-
|inalienable posessive
|
|-
|alienable posessive
|
|-
|instrumental
|
|-
| rowspan="6" |nonexhaustive plural
|Subject
|makmakɓi
|-
|Object
|makmakla
|-
|Intransitive
|makmak
|-
|inalienable posessive
|
|-
|alienable posessive
|
|-
|instrumental
|
|-
| rowspan="6" |exhaustive plural
|Subject
|makelɓi
|-
|Object
|makella
|-
|Intransitive
|makel
|-
|inalienable posessive
|
|-
|alienable posessive
|
|-
|instrumental
|
|}

=== Masculine ===
{| class="wikitable"
|+
!
!
!
|-
| rowspan="6" |Singular
|Subject
|makɓi
|-
|Object
|makla
|-
|Intransitive
|mak
|-
|inalienable posessive
|
|-
|alienable posessive
|
|-
|instrumental
|
|-
| rowspan="6" |nonexhaustive plural
|Subject
|makmakɓi
|-
|Object
|makmakla
|-
|Intransitive
|makmak
|-
|inalienable posessive
|
|-
|alienable posessive
|
|-
|instrumental
|
|-
| rowspan="6" |exhaustive plural
|Subject
|makalɓi
|-
|Object
|makalla
|-
|Intransitive
|makal
|-
|inalienable posessive
|
|-
|alienable posessive
|
|-
|instrumental
|
|}

== Vowel Ended ==

== Reduplicated stem ==
[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]
[[Category:Aelaki‎]]</text>
      <sha1>1ne0hmmg4p420rus21hoqijgo3t9er4</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Aelaki</title>
    <ns>14</ns>
    <id>10480</id>
    <revision>
      <id>165473</id>
      <parentid>165353</parentid>
      <timestamp>2025-08-05T01:04:23Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165473</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="90" sha1="h4y4yad0mbd2twgi895takdh76x2r8o" xml:space="preserve">[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>h4y4yad0mbd2twgi895takdh76x2r8o</sha1>
    </revision>
  </page>
  <page>
    <title>Aelaki Lexicon</title>
    <ns>0</ns>
    <id>10273</id>
    <revision>
      <id>165475</id>
      <parentid>165347</parentid>
      <timestamp>2025-08-05T01:04:24Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165475</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="63313" sha1="kz3g0zi8ikf88hbcjw2vgmczcp9jpw1" xml:space="preserve">consonants: pf/bv/f/v/p'/b'/m'/w/t/d/dh/n/ch/dzh/s/z/t'/d'/n'/r/k/g/gh/ng/kx/ggx/x/gx/kl'/gl'/ngl'/l

vowels: i/ih/e/ae/u/eu/o/a
[[File:Aelaki cardinal directions.png|thumb]]
{| class="wikitable sortable"
! data-sort-type="text" | phonetic
! data-sort-type="text" | English
! data-sort-type="text" | character
! data-sort-type="text" | Character etymology
! data-sort-type="text" | Word etymology
!Toki pona word
|-
|South
|ihviv
|[[File:Imagesouth.png|thumb]]
|Arrow form rings pointing to the sun. This is the direction you are moving
|to the ring
|
|-
|North
|ihkalu
|[[File:Imagenorth.png|thumb]]
|Upsidde down rings. You are facing away from them
|literally moving with the river
|
|-
|East
|aet'ub'
|[[File:Imagegreeeeeeeee.png|thumb]]
|You are facing south, and see the sun rising on your left
|literally coming sun
|
|-
|West
|iht'ub'
|[[File:Imageffffffffffffff.png|thumb]]
|You are facing south and see the sun setting to your right.
|literally moving with the sun
|
|-
|d'aend'aen
|Hi!
|[[File:D'aen character.svg|thumb|[[File:Dice alternative.svg|thumb]]]]
|Character is derived from a dice representing luck. Numbers depicted vari on the tomb script but usualli involve 246, or 236
|d'aen means good luck, although this is selected in large part because it is the loudest word in the languad
|
|-
|zun
|I
|
|
|
|
|-
|t'i
|iou (singular)
|[[File:First and second person pronouns.png|thumb]]ꔌ
|All characters on the left are variants in the highli regular 
|
|
|-
|shi
|thei (singular child)
|[[File:Child_they.png|thumb|child thei character]]
|
|
|
|-
|she
|she
|[[File:She_character.png|thumb|she character]]
|
|
|
|-
|sha
|he
|[[File:He_character.png|thumb|he character]]
|
|
|
|-
|
|thei (neutral)
|[[File:Imagecdf.png|thumb]]
|
|back formation
|
|-
|zunzun
|we (exclusive)
|
|
|
|
|-
|zumbal
|we (inclusive)
|
|
|
|
|-
|t'it'i
|iou (plural, exclusive)
|ꔌꔌ
|
|
|
|-
|t'il
|iou (plural, inclusive)
|ꔌ〇
|
|
|
|-
|shishi
|thei (children, mult)
|[[File:Imagefffffffffff.png|thumb]]
|
|
|
|-
|shishil
|thei (children, exh)
|[[File:Imaged.png|thumb]]
|
|
|
|-
|sheshe
|thei (feminine, mult)
|[[File:Imagedddddddddd.png|thumb]]
|
|
|
|-
|sheshel
|thei (feminine, exh)
|[[File:Imagegggg.png|thumb]]
|
|
|
|-
|shasha
|thei (masculine, mult)
|[[File:Imagehh.png|thumb]]
|
|
|
|-
|shashal
|thei (masculine, exh)
|[[File:Imagejj.png|thumb]]
|
|
|
|-
|shesha
|thei (adult, mult)
|[[File:Imageaa.png|thumb]]
|
|
|
|-
|sheshal
|thei (adult, exh)
|[[File:Imagehhh.png|thumb]]
|
|
|
|-
|shisha
|be
|[[File:Imagell.png|thumb]]
|
|
|
|-
|shishal
|thei (general, exh)
|[[File:Imagelllll.png|thumb]]
|
|
|
|-
|shishe
|thei (women and children, mult)
|[[File:Imagekkkkkk.png|thumb]]
|
|highli offensive and archaic, sounds equivalent to calling someone an octaroon
|
|-
|shishel
|thei (women and children, exh)
|[[File:Imageaaaa.png|thumb]]
|
|highli offensive and archaic, sounds equivalent to calling someone an octaroon
|
|-
|dhi
|this
|[[File:Imagethis.png|thumb]]
|ideogram
|
|
|-
|vib
|that
|
|
|
|
|-
|keub
|here
|
|
|
|
|-
|xix
|there
|
|
|
|
|-
|naeg
|who
|
|
|
|
|-
|kxe
|what
|
|
|
|
|-
|u
|where
|[[File:Imagewhere.png|thumb]]
|From a creature ud'i of uncertain origin. (reference to werewolf)
Where is a rebus. The creature is theorized to be a dinosaur, modified bi folk etimologi to be "where-woman"
|
|
|-
|im
|when
|
|
|
|
|-
|aem
|how
|
|
|
|
|-
|go
|not
|
|
|
|
|-
|belb'ik
|all
|[[File:Imageall.png|thumb]]
|combination of the exhaustive particle (circle) and the word for two
|seems like it might come from a term like "all two" or similar. Clearli came from before the exhaustive fulli developed
|
|-
|ghix
|mani
|
|
|
|
|-
|at
|some
|
|
|
|
|-
|b'ig
|few
|
|
|
|
|-
|za
|other
|
|
|
|
|-
|
# pam
|one
|[[File:Image1.png|thumb]]
|
|
|
|-
|
* bel
|two
|[[File:Image2.png|thumb]]
|
|
|
|-
|
* ɓad̠ʒ
|three
|[[File:Image3.png|thumb]]
|
|
|
|-
|
* mih
|four
|[[File:Image4.png|thumb]]
|
|
|
|-
|
* pɸim
|five
|[[File:Image5.png|thumb]]
|
|
|
|-
|
* bβae
|6
|[[File:Image6.png|thumb]]
|
|
|
|-
|
* finǃ
|7
|[[File:Image7.png|thumb]]
|
|
|
|-
|
* vup
|8
|[[File:Image8.png|thumb]]
|
|
|
|-
|
* pʘibʘ
*#new
|9
|[[File:Image9.png|thumb]]
|
|
|
|-
|
* bʘel
*# two hands (hand dual form)
*#
|ten
|[[File:Image10.png|thumb]]
|
|
|
|-
|
* mʘakx
*# extra
*#
|eleven
|[[File:Image11.png|thumb]]
|
|
|
|-
|wiv

# rings
|twelve
|[[File:World_house_12.png|thumb|This is the pictogram representing 12 and the rings. It has two arches, compared to one arch representing house. So it is the house of houses (wiv)]]
|Depiction of the rings representing their roundness
|
|
|-
| -dzh
|alienable posessive
|[[File:Imagecc.png|thumb]]
|
|
|
|-
|bu
|inalienable posessive
|[[File:Imageinalienableposessive.png|thumb]]
|inalienable posessive. Character is derived from the tattoos people have on the palms of their hands. This contrasts with the alienable posessive which is derived from a pictogram of a maomao
|inalienable posessive. Character is derived from the tattoos people have on the palms of their hands. This contrasts with the alienable posessive which is derived from a pictogram of a maomao
|
|-
|nd'aeb'
|habitual suffix
|[[File:Imagehabitual.png|thumb]]
|It comes from a house in a mountain. It is a ideographic for "what iou do at home"
|follows reduplicated verb stem to indicate habitual aspect
|
|-
|na
|object suffix
|[[File:Imagegggggggggg.png|thumb]]
|rebus
|
|
|-
|bhi
|subject suffix
|[[File:Imagebhi.png|thumb]]
|Possible rebus or ideogram
|
|
|-
|mb'eu
|to split, turned into telic morpheme
|[[File:Imagesplit.png|thumb]]
|pictogram of a knife plunging into and plitting a piece of wood
|as the telic suffix it takes the gendered forms -m'i -m'e -m'a. collective/exhaustive suffix comes after so
-m'il
-m'el
-m'ael
|
|-
|pihn
|end, finish, stop
atelic perfect suffix
|[[File:Pini_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Pini_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''pini'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/pini pini]
|-
|p'a
|big
|[[File:Bigcharacter.png|thumb]]
|Depiction of the rings
|
|
|-
|zaed
|long
|[[File:Imagelong.png|thumb]]
|depiction of a river with oxbow lakes and meanders
|
|
|-
|t'aegh
|wide
|[[File:Imagewide.png|thumb]]
|character is derived from the rings, widest thing out there
|
|
|-
|meu
|thick
|[[File:Imagethick.png|thumb]]
|Here is a logogram designed to represent the concept of 'thick'. This abstract design aims to visualli convei thickness through its bold, heavi lines and a dense, compact structure.
|
|
|-
|neuk
|heavi
|[[File:Imageheavy.png|thumb]]
|character for heavi derived from a pictogram of a large pumpkin
|
|
|-
|chi
|small
|'''小'''
|pumpkin seeds
|
|
|-
|abh
|short
|'''短'''
|Phono-semantic compound (形聲／形声, OC *toːnʔ): semantic 矢 + phonetic 豆 (''OC *doːs'').
|
|
|-
|wiviv
|god
|[[File:Imagegod.png|thumb]]
|character for god. Derived from a descent from the rings (heaven)
|related to aebha (mirror) and bha (see)
Additional reading of wiviv is the reduplicative sense of ring. This may be the origin of the character 

Wiviv-p'asu (God-great-name) is used to address God) 
|
|-
|aebha
|reflection, mirror
|[[File:Jasima_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|link=https://en.wikipedia.org/wiki/File:Jasima_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|right|thumb|''dzhasima'' in ''sitelen pona'']]
|
|related to bha (see)
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/jasima dzhasima]
|-
|bha
|to see
|
|
|
|
|-
|ad
|ski
|[[File:Imagesky.png|thumb]]
|The space station sitting up on top of the ring
|
|
|-
|waw
|narrow
|窄
|Phono-semantic compound (形聲／形声, OC *ʔsraːɡ): semantic 穴 (“cave; hole”) + phonetic 乍 (''OC *zraːɡs'')
|
|
|-
|gl'ae
|thin
|薄
|Phono-semantic compound (形聲／形声, OC *baːɡ): semantic 艹 + phonetic 溥 (''OC *pʰaːʔ, *paːɡ'').
|
|
|-
|d'e
|woman
|[[File:Imageddddddddddddd.png|thumb|fffffffffffffffffffffffffffff]]
|ideogrammatical compound of ud (terraced farm) and xaen (hunt)
|
|
|-
|aekiteun
|man (adult male)
|[[File:Imagemale.png|thumb]]
|From emerging penis during sex change
|from aeki (old) teun (person)
|
|-
|teun
|person
|[[File:Imageperson.png|thumb]]
|from the upright stance of a person with their arms and cat ears
|
|
|-
|eubi
|child
|[[File:Imagechild.png|thumb]]
|from a child suckling at a breast
|related to euvel (suck)
has suffix -bi, the child suffix
|
|-
|ri
|wife
|[[File:Imagewife.png|thumb]]
|long line depicting a woman in a harem. The circle represents the husband
|compare reul (husband)
|
|-
|reul
|husband
|[[File:Imagehusband.png|thumb]]
|a man (the circle) as the head of a harem
|compare ri (wife)
|
|-
|ma
|mother
|[[File:Imagemother.png|thumb]]
|a child exiting a uterus
|compare ma'el (to be born)
|
|-
|pa
|father
|[[File:Imagefather.png|thumb]]
|the father breastfeeding
|pa is an onomatopoeia for breast sucking
|
|-
|maeg
|birthed child (one who inherits)
|[[File:Imageson.png|thumb|Imageson]]
|a child exiting a uterus, related to the word for mother
|From indo european logic maeg related to mother (ma, ma'el)
From Middle English ''sonn'', ''sone'', ''sun'', ''sune'', from Old English ''sunu'' (“son”), from Proto-Germanic ''*sunuz'' (“son”), from Proto-Indo-European ''*suHnús'' (“son”), from Proto-Indo-European ''*sewH-'' (“to bear; give birth”).
|
|-
|pae'ub
|fathered child
|[[File:Imagedaughter.png|thumb]]
|a child sucking at breasts. ideogrammatic compound
|related to eub (child) and pa (father)
|
|-
|dzhoka
|risk
|[[File:Imagerisk.png|thumb]]
|representation of the numbers on a dice. Specificalli the unlucki versions of 4 and 5, plus 6.
This represents possibilities of good outcomes but also bad luck possibilities
|
|
|-
|feug
|animal
|[[File:Imageanimal.png|thumb|Imageanimal]]
|pictogram
|like the word "beast" it sometimes refers to general animals but is often specificalli a mammal. 
excludes birds, dinosaurs (bipedal), and invertebrates. amphibians are included
|
|-
|daend'
|fish
|[[File:Imagefish.png|thumb]]
|pictogram of a fish
|
|
|-
|Xihpo
|Hippo
|[[File:ImageHippo.png|thumb]]
|Marsh fish (Kxadaend')
|Often referred to bi the honorific form Xihpo Patamas
|
|-
|dzhabho
|bird
|[[File:Imagebird.png|thumb]]
|
|
|
|-
|maomao
|maomao
|[[File:ImageMaoMao.png|thumb]]
|variant on feug (animal) with the ears of them. Reduplicated as the non-reduplicated form means fur. 
|
|
|-
|zeu
|louse
|[[File:Imagelouse.png|thumb]]
|
|
|
|-
|aeɣ
|snake
|[[File:Imagesnake.png|thumb]]
|curled up cobra like this [[File:12_-_The_Mystical_King_Cobra_and_Coffee_Forests.jpg|thumb]]
|
|
|-
|i
|worm
|[[File:Imageworm.png|thumb]]
|a bunch of worms in a bowl to be eaten
|
|
|-
|debh
|tree
|[[File:Imagetree.png|thumb]]
|based on a tree that looks something like this [[File:Araucaria_en_Parque_Nacional_Conguillio.jpg|thumb]]
|
|
|-
|zaed
|forest
|[[File:Imageforest.png|thumb]]
|duplication of tree radical
|
|
|-
|eup'
|long, mostli hard object, e.g. rod, stick, branch
|[[File:Palisa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Palisa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''palisa'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/palisa palisa]
|-
|iɣ
|fruit, vegetable
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kili kili]
|-
|omb'
|seed
|[[File:Imageseed.png|thumb]]
|cross section of a pumpkin showin the seeds
|
|
|-
|tae
|leaf
|[[File:Imageleaf.png|thumb]]
|from pine needles originally
|
|
|-
|aɡɣ
|root
|[[File:Imageroot.png|thumb]]
|depiction of a taproot
|
|
|-
|ŋeup
|bark (of a tree)
|[[File:Imagebark.png|thumb]]
|
|
|
|-
|gheugh
|flower
|[[File:Imageflower.png|thumb]]
|
|
|
|-
|deg
|grass
|[[File:Imagegrass.png|thumb]]
|
|
|
|-
|e
|rope
|[[File:Imagerope.png|thumb]]
|
|
|
|-
|ab
|skin
|[[File:Imageskin.png|thumb]]
|a hide being tanned
|
|
|-
|b'ax
|meat
|[[File:肉-order.gif|thumb]]
|
|
|
|-
|t'aegh
|blood
|[[File:血-oracle.svg|thumb]]
|
|
|
|-
|ix
|bone
|[[File:骨-jorder.gif|thumb]]
|
|
|
|-
|biw
|fat (noun)
|[[File:脂-seal.svg|thumb]]
|
|
|
|-
|tum
|egg
|[[File:Imageegg.png|thumb]]
|
|
|
|-
|vibh
|horn
|𒋛
|
|
|
|-
|dihw
|tail
|[[File:Imagetail.png|thumb]]
|a person with a tail
|
|
|-
|gheu
|feather
|[[File:Abydos-Bold-hieroglyph-H6.png|thumb]][[File:Imagefeah.png|thumb]]
|
|
|
|-
|id
|hair
|[[File:Imagehair.png|thumb]]
|
|
|
|-
|ae
|head
|[[File:Imagehead.png|thumb]]
|
|
|
|-
|idzh
|ear
|[[File:耳-jorder.gif|thumb]]
|
|
|
|-
|euf
|eye
|[[File:目-bronze.svg|thumb]]
|
|
|
|-
|dedh
|nose
|[[File:Imagenose.png|thumb]]
|
|
|
|-
|on
|mouth
|[[File:Imagemouth.png|thumb]]
|
|
|
|-
|bi
|tooth
|[[File:Imagetooth.png|thumb]]
|
|
|
|-
|adzh
|tongue (organ)
|[[File:Imagetongue.png|thumb]]
|
|
|
|-
|nd'euŋ
|fingernail
|[[File:Imagefingernail.png|thumb]]
|
|
|
|-
|mb'ihb'
|foot/leg/knee
|[[File:Imagefoot.png|thumb]]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/noka noka]
|-
|ihgh
|leg
|
|
|
|
|-
|nl'ipf
|knee
|
|
|
|
|-
|b'eb
|hand
|[[File:出-order.gif|thumb]]
|
|
|
|-
|eut
|wing
|
|
|
|
|-
|ŋu
|belly
|[[File:Imagebelly.png|thumb]]
|
|
|
|-
|oz
|guts
|
|
|
|
|-
|ɡɣo
|neck
|
|
|
|
|-
|aem
|back
|
|
|
|
|-
|nl'aes
|breast
|
|
|
|
|-
|ich
|heart
|[[File:Heart_corazón.svg|thumb]]
|
|
|
|-
|uch
|liver
|
|
|
|
|-
|bvae
|to drink
|
|
|
|
|-
|upf
|to eat
|
|
|
|
|-
|p'ar
|to bite
|
|
|
|
|-
|euvel
|to suck
|
|
|related to eub (child), -el suffic was an older verb suffix that is non-productive. Compare aexel to age
|
|-
|aexel
|to age
|
|
|related to aeki (old) compare euvel (to suck)
|
|-
|ma'el
|to give birth
|[[File:Imagebirth.png|thumb]]
|from an egg hatching
|compare ma (mother)
|
|-
|b'o
|to spit
|
|
|
|
|-
|ghokl'
|to vomit
|
|
|
|
|-
|mih
|to blow
|
|
|
|
|-
|ikx
|to breathe
|
|
|
|
|-
|reu
|to laugh
|
|
|
|
|-
|dibv
|to hear
|
|
|
|
|-
|zo
|to know
|
|
|
|
|-
|agh
|to think
|
|
|
|
|-
|eux
|to smell
|
|
|
|
|-
|aed
|to fear
|
|
|
|
|-
|is
|to sleep
|
|
|
|
|-
|gho
|to live
|
|
|
|
|-
|of
|to die
|
|
|
|
|-
|bvaedh
|to kill
|
|
|
|
|-
|nl'if
|to fight
|
|
|
|
|-
|xaen
|to hunt
|[[File:Imagehunt.png|thumb]]
|Bow and arrow
|
|
|-
|dhe
|to hit
|
|
|
|
|-
|nd'i
|to cut
|[[File:Imagecut.png|thumb]]
|pictogram of a knife
|
|
|-
|ŋi
|to stab
|
|
|
|
|-
|bhi
|to scratch
|
|
|
|
|-
|ɣihch
|to dig
|
|
|
|
|-
|aech
|to swim
|
|
|
|
|-
|iht'
|to fli
|
|
|
|
|-
|sae
|to walk
|
|
|
|
|-
|ae
|to come
|
|Present in the word for East 
|
|
|-
|ov
|to lie (as in a bed)
|
|
|
|
|-
|voŋ
|to sit
|[[File:Imagesit.png|thumb]]
|
|
|
|-
|ihɡɣ
|to stand
|
|
|
|
|-
|dzhe
|to turn (intransitive)
|
|
|
|
|-
|apf
|to fall
|
|
|
|
|-
|och
|to give
|
|
|
|
|-
|kxeugh
|to hold
|
|
|
|
|-
|iɣ
|to squeeze
|
|
|
|
|-
|euw
|to rub
|
|
|
|
|-
|udh
|to wash
|
|
|
|
|-
|dhihgh
|to wipe
|
|
|
|
|-
|u
|to pull
|
|
|
|
|-
|i
|to push
|
|
|
|
|-
|geb
|to throw
|
|
|
|
|-
|ghih
|to tie
|
|
|
|
|-
|ag
|to sew
|
|
|
|
|-
|iŋ
|to count
|
|
|
|
|-
|bvih
|to sai
|
|
|
|
|-
|dih
|to sing
|
|
|
|
|-
|chae
|to plai
|
|
|
|
|-
|iɡɣ
|to float
|
|
|
|
|-
|eut'
|to flow
|
|
|
|
|-
|aegl'
|to freeze
|
|
|
|
|-
|vi
|to swell
|
|
|
|
|-
|t'ub'
|sun
|[[File:Imageggggggg.png|thumb]]
|
|
|
|-
|pu
|moon
|
|
|
|
|-
|o
|star
|
|
|
|
|-
|sugh
|water
|
|
|
|
|-
|rekx
|rain
|
|
|
|
|-
|lu
|river
|[[File:Imagefffffffffffffffff.png|thumb]]
|See also North (downriver)
|
|
|-
|ɣu
|lake
|
|
|
|
|-
|nek
|sea
|
|
|
|
|-
|ibv
|salt
|
|
|
|
|-
|d'o
|stone
|
|
|
|
|-
|pihpf
|sand
|
|
|
|
|-
|eu
|dust
|
|
|
|
|-
|ach
|earth
|
|
|
|
|-
|lih
|cloud
|
|
|
|
|-
|xaes
|fog
|
|
|
|
|-
|fedzh
|wind
|
|
|
|
|-
|nd'iw
|snow
|
|
|
|
|-
|ŋo
|ice
|
|
|
|
|-
|nipf
|smoke
|
|
|
|
|-
|wihd'
|fire
|
|
|
|
|-
|e
|ash
|
|
|
|
|-
|dheu
|to burn
|
|
|
|
|-
|lad
|road
|
|
|
|
|-
|ɡɣak
|mountain
|
|
|
|
|-
|te
|red
|
|
|
|
|-
|ihm
|green
|
|
|
|
|-
|ihf
|iellow
|
|
|
|
|-
|a
|white
|
|
|
|
|-
|ŋix
|black
|
|
|
|
|-
|ih
|night
|[[File:Time_and_minight_tomb_script.png|thumb|Tomb script midnight character]]
|
|
|
|-
|ɓiw (bhi)
|dai
|[[File:Imageday.png|thumb]]
|sun above the rings
|
|
|-
|ihv
|year
|[[File:Imageyear.png|thumb]]
|
# It is an ideogrammatic-phono-semantic compound where the sun is behind the rings representing the winter, combined with a pumpkin representing the harvest. So winter and harvest = year Additionalli the words year (ihf) and pumpkin (ihpf) are similar to each other so phono-semantic too.
|
|
|-
|dheuz
|warm
|
|
|
|
|-
|aex
|cold
|
|
|
|
|-
|ihŋ
|full
|
|
|
|
|-
|aep'
|new
|
|
|
|
|-
|aeki
|old
|
|
|
|
|-
|xamb'
|good
|
|
|
|
|-
|b'av
|bad
|
|
|
|
|-
|nd'o
|rotten
|
|
|
|
|-
|beuɣ
|dirti
|
|
|
|
|-
|ghe
|straight
|
|
|
|
|-
|nd'un
|round
|
|
|
|
|-
|dhu
|sharp (as a knife)
|
|
|
|
|-
|max
|dull (as a knife)
|
|
|
|
|-
|mb'eukl'
|smooth
|
|
|
|
|-
|eug
|wet
|
|
|
|
|-
|kl'iw
|dri
|
|
|
|
|-
|it'
|correct
|
|
|
|
|-
|dzhae
|near
|
|
|
|
|-
|mb'eund'
|far
|
|
|
|
|-
|b'ak
|right
|
|
|
|
|-
|tih
|left
|
|
|
|
|-
|rae
|at
|
|
|
|
|-
|i
|in
|
|
|
|
|-
|dha
|with
|
|
|
|
|-
|eu
|and
|
|
|
|
|-
|ih
|if
|
|
|
|
|-
|bhih
|because
|
|
|
|
|-
|su
|name
|
|
|
|
|-
|di
|anger
|[[File:Imageanger.png|thumb]]
|Head-fire compound
|
|
|-
|gɣi
|to be
|[[File:Imagebe.png|thumb]]
|a person showing their essence, represents being
|copula
|
|-
|
|
|
|
|
|
|-
|
|
|
|
|
|
|-
|
|
|
|
|
|
|-
|
|
|
|
|
|
|-
|
|
|
|
|
|
|-
|
|
|
|
|
|
|-
|ud
|farm (terraced)
|[[File:Imagefarm.png|thumb]]
|From a terraced farm
|
|
|-
|p'u
|patriarch
|[[File:Imagepatriarch.png|thumb]]
|two of the male character, indicating that thei are the male of males
|the harem leader
|
|-
|ip
|iogurt
|[[File:Imageyogurt.png|thumb]]
|simple iogurt
|
|
|-
|xet
|enjoy 
|[[File:Imagehet.png|thumb]]
|derived from a rebus related to a plant
|
|
|-
|chibhiveu
|yesterday (adverb)
|[[File:Imageyesterday adverb.png|thumb]]
|
|
|
|-
|chibhi
|yesterday
|[[File:Imageyesterday.png|thumb]]
|
|literalli last-dai
|
|-
|chi
|last/previous
|[[File:Imagechi.png|thumb]]
|ideogram, the object in queston (small line) is behind the time (long line representing the shadow)
|
|
|-
|veu
|adverb suffix
|[[File:Imagevu.png|thumb]]
|rebus from a plant that had a similar form
|adverbs can go aniwhere in the sentence
|
|-
|vu
|vu tree
|[[File:Imagevutree.png|thumb]]
|phono-semantic compound indicating that this is in fact referring to the tree not the grammatical component
|
|
|-
|samb'a
|the past
|[[File:Imagepast.png|thumb]]
|representation of an egg with the chicken left. this represents the past
|
|
|-
|samb'aveu
|in the past
|[[File:Imagesamb'aveu.png|thumb]]
|adverb indicating something happened in the past
|
|
|-
|samb'abhi
|yesterday (metaphorical)
|[[File:Imagepastdays.png|thumb|Imagepastdays]]
|
|refers to the past but not the direct previous day. Generally any time before yesterday but under a month ago, at which point it will go to yestermonth
|
|-
|chi'ihv
|yesteryear (literal)
|[[File:Imageyesteryearliteral.png|thumb]]
|
|
|
|-
|samb'a'ihv
|yesteryear (metaphorical)
|[[File:Imageyesteryearmetaphorical.png|thumb]]
|
|Refers to the relatively distant past. Over a year ago
|
|-
|time
|dzhip
|[[File:Tomb_script_time_character.png|thumb|tomb script time character. It is differentiated from the one for midnight by the shadow being more like an arrow pointing to the time rather than something to be awed at]]
|
|
|
|-
|p'ap
|interjection
|[[File:A_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:A_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''a'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/a a]
|-
|bhip'
|lizard or reptile
|[[File:Akesi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Akesi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''akesi'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/akesi akesi]
|-
|mb'eupf
|negation or disagreement
|[[File:Ala_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Ala_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''ala'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ala ala]
|-
|b'eb
|hunt
|[[File:Alasa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Alasa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''alasa'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/alasa alasa]
|-
|i
|everithing, anithing
|[[File:Ale_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Ale_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''ale'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ale ale]
|-
|o
|everithing is good
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ale%20li%20pona ale li pona]
|-
|nl'op'
|all, everi, complete
|[[File:Ali_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Ali_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''ali'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ali ali]
|-
|ihk
|down, bow down
|[[File:Anpa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Anpa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''anpa'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/anpa anpa]
|-
|kl'e
|difference, otherwise
|[[File:Ante_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Ante_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''ante'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ante ante]
|-
|it'
|or
|[[File:Anu_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Anu_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''anu'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/anu anu]
|-
|dhach
|shame, guilt
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/apeja apedzha]
|-
|ga
|stai, wait, continue
|[[File:Awen_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Awen_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''awen'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/awen awen]
|-
|gi
|direct object marker
|[[File:E_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:E_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''e'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/e e]
|-
|b'e
|and
|[[File:En_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:En_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''en'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/en en]
|-
|taeb'
|epic, great
|[[File:Epiku_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|link=https://en.wikipedia.org/wiki/File:Epiku_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|right|thumb|''epiku'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/epiku epiku]
|-
|pfae
|market, trade
|[[File:Esun_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Esun_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''esun'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/esun esun]
|-
|ɡɣihb'
|thing, object, matter
|[[File:Ijo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Ijo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''idzho'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ijo idzho]
|-
|nd'eu
|bad, negative
|[[File:Ike_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Ike_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''ike'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ike ike]
|-
|d'id
|veri bad
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ike%20a ike a]
|-
|ikx
|secret, hidden
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/iki iki]
|-
|us
|tool, device
|[[File:Ilo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Ilo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''ilo'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ilo ilo]
|-
|lip'
|inside, internal
|[[File:Insa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Insa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''insa'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/insa insa]
|-
|dhaex
|bug, insect
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ipi ipi]
|-
|nih
|dirti, disgusting
|[[File:Jaki_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Jaki_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''dzhaki'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/jaki dzhaki]
|-
|mi
|road, path
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/jalan dzhalan]
|-
|eunl'
|person, human
|[[File:Jan_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Jan_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''dzhan'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/jan dzhan]
|-
|id
|leader, chief
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/jan%20lawa dzhan lawa]
|-
|aenl'
|friend, companion
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/jan%20pona dzhan pona]
|-
|ae
|iellow, light green
|[[File:Jelo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Jelo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''dzhelo'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/jelo dzhelo]
|-
|mb'eu
|have, contain
|[[File:Jo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Jo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''dzho'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/jo dzho]
|-
|ek
|fish, sea creature
|[[File:Kala_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Kala_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''kala'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kala kala]
|-
|ɣep'
|sound, noise
|[[File:Kalama_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Kalama_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''kalama'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kalama kalama]
|-
|aer
|come, become
|[[File:Kama_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Kama_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''kama'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kama kama]
|-
|ze
|welcome
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kama%20pona kama pona]
|-
|pfegl'
|with, together
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kan kan]
|-
|gl'im
|bump, hill
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kapa kapa]
|-
|eut'
|brown, grei
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kapesi kapesi]
|-
|zae
|plant, tree
|[[File:Kasi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Kasi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''kasi'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kasi kasi]
|-
|nl'aend'
|can, possible
|[[File:Ken_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Ken_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb]]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ken ken]
|-
|ugl'
|use
|[[File:Kepeken_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Kepeken_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''kepeken'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kepeken kepeken]
|-
|t'unl'
|fictional creature
|[[File:Kijetesantakalu_(linja_pona).svg|link=https://en.wikipedia.org/wiki/File:Kijetesantakalu_(linja_pona).svg|right|thumb|''kidzhetesantakalu'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kijetesantakalu kidzhetesantakalu]
|-
|p'ol
|indeed, also, too
|[[File:Kin_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Kin_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''kin'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kin kin]
|-
|aex
|cut, divide
|[[File:Kipisi_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|link=https://en.wikipedia.org/wiki/File:Kipisi_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|right|thumb|''kipisi'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kipisi kipisi]
|-
|aɡɣ
|hard, solid, stone
|[[File:Kiwen_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Kiwen_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''kiwen'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kiwen kiwen]
|-
|kech
|semi-solid or squishi substance
|[[File:Ko_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Ko_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''ko'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ko ko]
|-
|ind'
|coconut
|[[File:Kokosila_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|link=https://en.wikipedia.org/wiki/File:Kokosila_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|right|thumb|''kokosila'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kokosila kokosila]
|-
|gi
|air, spirit
|[[File:Kon_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Kon_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''kon'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kon kon]
|-
|ow
|book, reading matter
|[[File:Linja_pona_-_ku.svg|link=https://en.wikipedia.org/wiki/File:Linja_pona_-_ku.svg|right|thumb|''ku'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ku ku]
|-
|gxe
|color, paint
|[[File:Kule_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Kule_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''kule'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kule kule]
|-
|elo
|group, communiti
|[[File:Kulupu_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Kulupu_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''kulupu'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kulupu kulupu]
|-
|m'ilae
|hear, listen
|[[File:Kute_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Kute_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''kute'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/kute kute]
|-
|su
|
|
|
|
|L
|-
|i
|(context particle)
|[[File:La_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:La_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''la'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/la la]
|-
|ih
|grab, seize
|[[File:Lanpan_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|link=https://en.wikipedia.org/wiki/File:Lanpan_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|thumb|''lanpan'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/lanpan lanpan]
|-
|e
|sleep, rest
|[[File:Lape_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Lape_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''lape'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/lape lape]
|-
|ke
|good sleep, good rest
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/lape%20pona lape pona]
|-
|o
|blue, blue-green
|[[File:Laso_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Laso_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|thumb|''laso'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/laso laso]
|-
|m'ef
|head, leader
|[[File:Lawa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Lawa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''lawa'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/lawa lawa]
|-
|ngu
|block, square
|[[File:Leko_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|link=https://en.wikipedia.org/wiki/File:Leko_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|thumb|''leko'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/leko leko]
|-
|tagh
|cloth, clothing
|[[File:Len_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Len_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''len'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/len len]
|-
|p'aedzh
|cold, cool
|[[File:Lete_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Lete_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''lete'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/lete lete]
|-
|ora
|(separator between subject and verb)
|[[File:Li_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Li_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''li'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/li li]
|-
|dzhih
|small, little
|[[File:Lili_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Lili_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''lili'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/lili lili]
|-
|ae
|line, string
|[[File:Linja_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Linja_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''lindzha'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/linja lindzha]
|-
|t'eudzhih
|flat object, paper
|[[File:Lipu_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Lipu_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''lipu'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/lipu lipu]
|-
|dha
|red
|[[File:Loje_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Loje_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''lodzhe'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/loje lodzhe]
|-
|u
|be present, exist
|[[File:Lon_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Lon_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''lon'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/lon lon]
|-
|eb'ae
|hand, arm
|[[File:Luka_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Luka_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''luka'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/luka luka]
|-
|t'e
|see, look at
|[[File:Lukin_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Lukin_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''lukin'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/lukin lukin]
|-
|om'
|hole, door, orifice
|[[File:Lupa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Lupa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''lupa'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/lupa lupa]
|-
|rae
|land, earth, countri
|[[File:Ma_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Ma_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''ma'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ma ma]
|-
|nga
|parent, ancestor
|[[File:Mama_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Mama_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''mama'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/mama mama]
|-
|oze
|mother
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/mama%20meli mama meli]
|-
|da
|father
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/mama%20mije mama midzhe]
|-
|la
|monei, material wealth
|[[File:Mani_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Mani_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''mani'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/mani mani]
|-
|zocha
|average, medium
|[[File:Meso_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|link=https://en.wikipedia.org/wiki/File:Meso_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|thumb|''meso'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/meso meso]
|-
|m'u
|I, me, we
|[[File:Mi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Mi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''mi'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/mi mi]
|-
|vax
|I am learning Toki Pona
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/mi%20kama%20sona%20e%20toki%20pona mi kama sona e toki pona]
|-
|bve
|we, us (plural)
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/mi%20mute mi mute]
|-
|ipf
|I love iou
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/mi%20olin%20e%20sina mi olin e sina]
|-
|uchi
|I go, I am going
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/mi%20tawa mi tawa]
|-
|gl'utae
|man, male, husband
|[[File:Mije_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Mije_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''midzhe'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/mije midzhe]
|-
|gaen
|medicine, drug
|[[File:Misikeke_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|link=https://en.wikipedia.org/wiki/File:Misikeke_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|thumb|''misikeke'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/misikeke misikeke]
|-
|ggxeu
|eat, food
|[[File:Moku_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Moku_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''moku'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/moku moku]
|-
|eugi
|death, die, kill
|[[File:Moli_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Moli_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''moli'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/moli moli]
|-
|nol
|back, rear
|[[File:Monsi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Monsi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''monsi'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/monsi monsi]
|-
|ggxux
|monster, fear, danger
|[[File:Monsuta_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|link=https://en.wikipedia.org/wiki/File:Monsuta_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|thumb|''monsuta'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/monsuta monsuta]
|-
|dheu
|animal noise, moo, meow
|[[File:Mu_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Mu_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''mu'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/mu mu]
|-
|aed'o
|moon, night ski object
|[[File:Mun_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Mun_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''mu'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/mun mun]
|-
|kxegh
|fun, plaiing, game, recreation, art, entertainment
|[[File:Musi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Musi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''musi'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/musi musi]
|-
|ti
|mani, veri, much, several, a lot, abundant, numerous, more
|[[File:Mute_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Mute_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''mute'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/mute mute]
|-
|aeb'a
|(a particle to represent direct object)
|[[File:N_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|link=https://en.wikipedia.org/wiki/File:N_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|thumb|''n'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/n n]
|-
|pfof
|extra, additional, spice, to season, to embellish, to stimulate
|[[File:Namako_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Namako_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''namako'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/namako namako]
|-
|b'on'
|number
|[[File:Nanpa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Nanpa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''nanpa'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/nanpa nanpa]
|-
|uv
|number one
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/nanpa%20wan nanpa wan]
|-
|faengae
|silli, crazi, foolish, drunk, strange, stupid, weird
|[[File:Nasa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Nasa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''nasa'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/nasa nasa]
|-
|ikxu
|wai, manner, custom, road, path, doctrine, sistem, method
|[[File:Nasin_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Nasin_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''nasin'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/nasin nasin]
|-
|eun
|bump, hill, mountain, button, nose
|[[File:Nena_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Nena_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''nena'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/nena nena]
|-
|wa
|this, that
|[[File:Ni_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Ni_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''ni'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ni ni]
|-
|ub'o
|word, name
|[[File:Nimi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Nimi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''nimi'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/nimi nimi]
|-
|eu
|
|
|
|
|O
|-
|so
|O! (vocative or imperative)
|[[File:O_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:O_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''o'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/o o]
|-
|okx
|have a good meal, bon appétit
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/o%20moku%20pona o moku pona]
|-
|ad'ih
|eie
|[[File:Oko_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Oko_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''oko'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/oko oko]
|-
|ngalo
|love
|[[File:Olin_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Olin_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''olin'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/olin olin]
|-
|kl'o
|he, she, it, thei
|[[File:Ona_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Ona_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''ona'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/ona ona]
|-
|fin'
|open, begin
|[[File:Open_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Open_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''open'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/open open]
|-
|gl'e
|
|
|
|
|P
|-
|faxae
|blunder, accident, mistake, destruction, damage, break
|[[File:Pakala_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Pakala_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''pakala'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/pakala pakala]
|-
|vo
|activiti, work, deed, prodzhect
|[[File:Pali_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Pali_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''pali'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/pali pali]
|-
|b'oke
|grain, cereal; bread, pasta
|[[File:Pan_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Pan_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''pan'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/pan pan]
|-
|wof
|give, put, send, place, release, emit, cause
|[[File:Pana_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Pana_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''pana'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/pana pana]
|-
|kxihke
|fanci, decorated, complex, intricate, tied
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/pasila pasila]
|-
|ekx
|sibling, cousin, fellow countriman
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/pata pata]
|-
|vem'ih
|of, belonging to
|[[File:Pi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Pi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''pi'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/pi pi]
|-
|keulih
|feelings, emotion, heart
|[[File:Pilin_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Pilin_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''pilin'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/pilin pilin]
|-
|raegeu
|darkness, shadow
|[[File:Pimeja_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Pimeja_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''pimedzha'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/pimeja pimedzha]
|-
|zidzh
|bug, insect
|[[File:Pipi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Pipi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''pipi'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/pipi pipi]
|-
|ngl'a
|four
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/po po]
|-
|p'ae
|side, hip, next to
|[[File:Poka_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Poka_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''poka'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/poka poka]
|-
|cha
|container, box, bowl
|[[File:Poki_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Poki_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''poki'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/poki poki]
|-
|ggxi
|good, simple, positive
|[[File:Pona_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Pona_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''pona'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/pona pona]
|-
|a
|good for iou
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/pona%20tawa%20sina pona tawa sina]
|-
|gxagl'o
|false, fake, deceptive
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/powe powe]
|-
|xubv
|interacting with the Toki Pona book
|[[File:Pu_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Pu_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''pu'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/pu pu]
|-
|bvae
|
|
|
|
|S
|-
|t'u
|same, similar, equal
|[[File:Sama_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Sama_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''sama'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/sama sama]
|-
|ngihg
|fire, warmth, heat
|[[File:Seli_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Seli_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''seli'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/seli seli]
|-
|m'eu
|outside, surface, skin
|[[File:Selo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Selo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''selo'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/selo selo]
|-
|laelu
|what, which
|[[File:Seme_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Seme_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''seme'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/seme seme]
|-
|sed
|what's new?
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/seme%20li%20sin%3F seme li sin?]
|-
|vae
|high, up, above, sacred
|[[File:Sewi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Sewi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''sewi'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/sewi sewi]
|-
|udo
|bodi, phisical state
|[[File:Sijelo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Sijelo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''sidzhelo'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/sijelo sidzhelo]
|-
|za
|circle, wheel, ball
|[[File:Sike_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Sike_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''sike'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/sike sike]
|-
|eukl'
|new, fresh, another
|[[File:Sin_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Sin_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''sin'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/sin sin]
|-
|d'u
|iou
|[[File:Sina_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Sina_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''sina'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/sina sina]
|-
|euw
|how do iou feel?
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/sina%20pilin%20seme%3F sina pilin seme?]
|-
|ihn'
|front, chest, face
|[[File:Sinpin_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Sinpin_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''sinpin'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/sinpin sinpin]
|-
|to
|picture, image, write, draw
|[[File:Sitelen_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Sitelen_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''sitelen'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/sitelen sitelen]
|-
|ihggxu
|mushroom, fungus
|[[File:Soko_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|link=https://en.wikipedia.org/wiki/File:Soko_-_sitelen_pona_tan_lipu_pu_pi_toki_Epelanto.png|thumb|''soko'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/soko soko]
|-
|de
|know, knowledge, wisdom
|[[File:Sona_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Sona_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''sona'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/sona sona]
|-
|va
|animal, especialli land mammal
|[[File:Soweli_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Soweli_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''soweli'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/soweli soweli]
|-
|az
|big, tall, long, important
|[[File:Suli_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Suli_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''suli'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/suli suli]
|-
|ra
|sun, light
|[[File:Suno_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Suno_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''suno'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/suno suno]
|-
|vihghih
|horizontal surface, table, chair
|[[File:Supa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Supa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''supa'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/supa supa]
|-
|aedh
|sweet, cute, charming
|[[File:Suwi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Suwi_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''suwi'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/suwi suwi]
|-
|n'osu
|from, because of, cause
|[[File:Tan_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Tan_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''tan'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/tan tan]
|-
|gl'engl'
|but, onli
|[[File:Taso_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Taso_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''taso'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/taso taso]
|-
|pfuw
|to, for, move, travel
|[[File:Tawa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Tawa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''tawa'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/tawa tawa]
|-
|ihw
|good travel, good movement
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/tawa%20pona tawa pona]
|-
|ap'
|sharp, edge, point
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/teje tedzhe]
|-
|d'i
|water, liquid, drink
|[[File:Telo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Telo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''telo'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/telo telo]
|-
|m'eum'e
|language, speak, sai
|[[File:Toki_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Toki_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''toki'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/toki toki]
|-
|tihghe
|English language
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/toki%20Inli toki Inli]
|-
|wae
|Toki Pona language
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/toki%20pona toki pona]
|-
|gase
|house, building, room
|[[File:Tomo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Tomo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''tomo'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/tomo tomo]
|-
|m'ihkx
|school, house of knowledge
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/tomo%20sona tomo sona]
|-
|feu
|vehicle, moving house
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/tomo%20tawa tomo tawa]
|-
|ihx
|Where is the bathroom?
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/tomo%20telo%20li%20lon%20seme%3F tomo telo li lon seme?]
|-
|akl'o
|non-binari, queer
|[[File:Tonsi_-_Nonbinary_in_Toki_Pona.svg|link=https://en.wikipedia.org/wiki/File:Tonsi_-_Nonbinary_in_Toki_Pona.svg|thumb|''tonsi'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/tonsi tonsi]
|-
|pfa
|two, split, divide
|[[File:Tu_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Tu_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''tu'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/tu tu]
|-
|chaep'
|four
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/tu%20tu tu tu]
|-
|rikx
|three
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/tu%20wan tu wan]
|-
|ihgxe
|three
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/tuli tuli]
|-
|uggxe
|sex, sexual
|[[File:Unpa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Unpa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''unpa'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/unpa unpa]
|-
|kxiru
|hill, mound
|
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/unu unu]
|-
|bvokl'
|mouth, oral
|[[File:Uta_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Uta_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''uta'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/uta uta]
|-
|lih
|conflict, battle, fight
|[[File:Utala_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Utala_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''utala'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/utala utala]
|-
|xungeu
|white, light colored
|[[File:Walo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Walo_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''walo'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/walo walo]
|-
|aedih
|one, unite, together
|[[File:Wan_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Wan_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''wan'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/wan wan]
|-
|zu
|bird, winged animal
|[[File:Waso_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Waso_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''waso'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/waso waso]
|-
|t'o
|energi, strength, power
|[[File:Wawa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Wawa_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''wawa'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/wawa wawa]
|-
|kl'ih
|awai, absent, missing
|[[File:Weka_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Weka_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''weka'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/weka weka]
|-
|p'e
|want, need, desire
|[[File:Wile_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|link=https://en.wikipedia.org/wiki/File:Wile_-_sitelen_pona_in_Sonja_Lang's_handwriting.svg|right|thumb|''wile'' in ''sitelen pona'']]
|
|
|[https://en.wiktionary.org/wiki/Appendix:Toki%20Pona/wile wile]
|-
|t'a
|
|
|
|
|
|-
|chae
|
|
|
|
|
|-
|pfeugx
|
|
|
|
|
|-
|iko
|
|
|
|
|
|-
|ggxaekxeu
|
|
|
|
|
|-
|lagh
|
|
|
|
|
|-
|b'ih
|
|
|
|
|
|-
|ala
|
|
|
|
|
|-
|at'
|
|
|
|
|
|-
|dhingl'
|
|
|
|
|
|-
|gxu
|
|
|
|
|
|-
|ro
|
|
|
|
|
|-
|gxae
|
|
|
|
|
|-
|ot
|
|
|
|
|
|-
|euz
|
|
|
|
|
|-
|ebv
|
|
|
|
|
|-
|kxeu
|
|
|
|
|
|-
|ihl
|
|
|
|
|
|-
|nihgx
|
|
|
|
|
|-
|t'aes
|
|
|
|
|
|-
|p'ihdhi
|
|
|
|
|
|-
|n'ih
|
|
|
|
|
|-
|b'idzhi
|
|
|
|
|
|-
|ggxo
|
|
|
|
|
|-
|wog
|
|
|
|
|
|-
|t'i
|
|
|
|
|
|-
|ov
|
|
|
|
|
|-
|uweu
|
|
|
|
|
|-
|gl'et'a
|
|
|
|
|
|-
|gl'ihtih
|
|
|
|
|
|-
|eud'o
|
|
|
|
|
|-
|efi
|
|
|
|
|
|-
|aele
|
|
|
|
|
|-
|p'ihdzha
|
|
|
|
|
|-
|larih
|
|
|
|
|
|-
|nug
|
|
|
|
|
|-
|ut
|
|
|
|
|
|-
|chix
|
|
|
|
|
|-
|eugha
|
|
|
|
|
|-
|dholih
|
|
|
|
|
|-
|eusu
|
|
|
|
|
|-
|dhu
|
|
|
|
|
|-
|kl'i
|
|
|
|
|
|-
|ghaes
|
|
|
|
|
|-
|t'aggxi
|
|
|
|
|
|-
|kae
|
|
|
|
|
|-
|oxo
|
|
|
|
|
|-
|tigh
|
|
|
|
|
|-
|waggx
|
|
|
|
|
|-
|nge
|
|
|
|
|
|-
|iro
|
|
|
|
|
|-
|kugxa
|
|
|
|
|
|-
|aep'u
|
|
|
|
|
|-
|ochu
|
|
|
|
|
|-
|b'ub'u
|
|
|
|
|
|-
|dihdo
|
|
|
|
|
|-
|wihgx
|
|
|
|
|
|-
|dzhae
|
|
|
|
|
|-
|ola
|
|
|
|
|
|-
|ego
|
|
|
|
|
|-
|egxeu
|
|
|
|
|
|-
|ihb'e
|
|
|
|
|
|-
|ggxof
|
|
|
|
|
|-
|kihpfae
|
|
|
|
|
|-
|t'eu
|
|
|
|
|
|-
|n'o
|
|
|
|
|
|}

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]
[[Category:Aelaki‎]]</text>
      <sha1>kz3g0zi8ikf88hbcjw2vgmczcp9jpw1</sha1>
    </revision>
  </page>
  <page>
    <title>Aelateun religion</title>
    <ns>0</ns>
    <id>10340</id>
    <revision>
      <id>165476</id>
      <parentid>165348</parentid>
      <timestamp>2025-08-05T01:04:25Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165476</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2916" sha1="4x3nziih8hk3je3taqi2kgwne19qs4z" xml:space="preserve">

==Architecture==
Temples of the Kxakxa religion which I've not named yet, have torii like gates based on the rings. They have sundials on them and often clocks. The things were seen as the land of the gods. All rivers were believed to flow down from the rings.
==Creation myth==
In a realm where celestial waters encircle the sky,

A cascade from heaven's ring, an endless supply.

This ring, a suspended ocean, vast and high,

Nourishes earth's rivers, never to run dry.

In their ethereal palace, gods observed with care,

Earth's verdant cloak, creatures dwelling there.

Their eyes found Maomaos, monkeys in their lair,

Spirited yet alone, in solitude's quiet snare.

Aelaneuk, first woman from the skies descended, 

"Heavy Sky," her name, with celestial grace blended.

To earth, she brought union, a bond extended,

Marrying Ngukud-p'u, monkey king, fates entwined.

Her dowry, twelve Maomaos, red-furred and kind, 

A gift to the king, in them a destiny designed.

But all female, the king observed with a mind keen;

With a broken leg set, one transformed, a male unseen.

Eleven more monkeys joined the royal harem, 

Each bore a daughter, a lineage to affirm.

When aged Ngukud-p'u, his life's light grew dim,

Left the harem to Aelaneuk, a role to him.

Transformed to a man, Aelaneuk's path anew,

Another from the ring descended, with Maomaos in view.

Wivrekxïb, "Ring Rain River," from the heavens she flew,

Joining the harem, her path to pursue.

Aelaneuk, now patriarch, fathered twelve, 

One daughter from each wife, his legacy delved.

Yet only his first, the monkey king's blood,

Would carry his name, a lineage flood.

When Aelaneuk passed, the eldest took the throne, 

Belmakel, her name, patriarch's role her own.

Thus flowed the lineage, from celestial dome,

A tapestry woven, from heaven's loom, earth roamed.




Aelaneuk's matrilineal descendant later becomes the first Empress

==Abolition of Child sacrifice==
It's complicated based on the biology of the species but essentially primogeniture equals matriarchy
[11:55 PM]
Alllaya Kuja was the youngest of the twelve wives of the king
[11:58 PM]
When she was pregnant she killed all of the wives older than her, plus her husband. Then she gave birth to her firstborn child of ambiguous paternity, and then she got pregnant again from the old rich guy who was not the king that she was dating.

==Deities==
* The great rings (p'awiv)
* Aelaneuk the first woman (Ninigi) Aela (sky) neuk (fall)
* Ngukud-p'u (Sarutahiko equivalent) 
**# nguk (monkey), ud (farm), p'u (lord)
**# [3:05 AM]  Monkey farmer lord
**# [3:05 AM]  basically a direct translation of Sarutahiko
**# [3:05 AM]  Saru (monkey), ta (farm), hiko (prince)
* Belmakel (third patriarch)
* Wivrekxïb (nigihayahi)
* Alllaya Kuja (Empress, matrilineal descendant of Aelaneuk)

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>4x3nziih8hk3je3taqi2kgwne19qs4z</sha1>
    </revision>
  </page>
  <page>
    <title>Aelyaki</title>
    <ns>0</ns>
    <id>10419</id>
    <revision>
      <id>165477</id>
      <parentid>165351</parentid>
      <timestamp>2025-08-05T01:04:25Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165477</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5236" sha1="tdw44mov7pelo7o3443ytordidcr1iv" xml:space="preserve">[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]
[[Category:Aelaki]]
[[File:Cat genders in Old Aelaki.svg|thumb]]
Aelaki is the language of the Kxakxa people

I am building it starting from year zero (2000 our calendar) and developing until year 5000

This will mainly cover linguistic history


The prefix uchi- (go) is often appended to words to make them more regular later in the history.

== Shifts in chronological order ==

# classifiers -&gt; gender
# Evidentiality verb development and verb agreement
# SVO order frees up

== Earliest grammar ==
Used classifiers

Copula was irregular

== Irregular proto language copula ==
Ghi was standard copula

Gi was irregular copula

Originally yes or no sentences were asked in the english style

"Are you sick":

"You are sick"

Gi was the second person version

When word order began to free up Gi began to become a yes-no question particle

== Proto language ==
Used a system of classifiers like Japanese. 

Classifiers got fused in

Classifiers are still used but a lot less frequently
Genders

# i (child)
## -bi (child classifier)
# e (female)
## -d'e (woman classifier)
# ae (male)
## -aeki (old/male classifier)
## aek is a more common suffix, aeki is pretty rare

=== Gender development example ===
eub bi -&gt; eubi 

(child)

=== Demonstrative development ===
dzhih bi -&gt;dzhib

(this child) -&gt; this (child)

dzhih d'e -&gt; dzhed'

(this woman) -&gt; this (female)

dzhih aeki -&gt; dzhaek

(this man) -&gt; this (male)

=== Pronoun development ===

==== First person ====
zun bi -&gt; zim

zun d'e -&gt; zen

zun aeki -&gt; zaeng

==== Second person ====
t'i bi -&gt; t'ib

t'i d'e -&gt; t'et

t'i aeki -&gt; t'aek

==== Third person ====
she bi -&gt; shib

she d'e -&gt; shed'

she aeki -&gt; shaek

==== Fourth person ====
fo bi -&gt; fibi

fo d'e -&gt; fed'e

fo aeki -&gt; faek

=== Pronoun plural forms ===

==== First person ====
zun bi bi -&gt; zimbib 

zun d'ede -&gt; zend'ed 

zun aekiki -&gt; zaengkik -&gt; zaengkaek

==== Second person ====
t'i bibi -&gt; t'ibib 

t'i d'ede &gt; t'etet 

t'i aekiki -&gt; t'aekik -&gt; t'aekaek

==== Third person ====
she bibi -&gt; shibib -&gt; 

she d'ede -&gt; shed'ed -&gt; 

she aekiki -&gt; shaekik -&gt; shaekaek

==== Fourth person ====
fo bi -&gt; fifibi

fo d'e -&gt; fefed'e

fo aeki -&gt; faefaek

=== Pronoun collective forms ===

==== First person ====
zun bel bi -&gt; zimbil 

zun bel d'e -&gt; zed'el 

zun bel aeki -&gt; zaekel 

==== Second person ====
t'i bel bi -&gt; t'ibil 

t'i bel d'e -&gt; t'etel 

t'i bel aeki -&gt; t'aekael 

==== Third person ====
she bel bi -&gt; shibil 

she bel d'e -&gt; shed'el -&gt; shedel

she bel aeki -&gt; shaekael  

==== Fourth person ====
fo bel bi -&gt; fibil

fo bel d'e -&gt; fed'el

fo bel aeki -&gt; faekael

=== Number development ===
originally base 8

first 8 numbers have highly obscure meanings

9 means new (pie reference)

10 b'el means two hands derived from earlier form b'ebel

11 m'akx means extra, one more than ten

12 wiv means rings. 

50 (60d) op'iv means complete 12, from the earlier point of base 60

100 (120d) bolop'iv means two sixties, from the earlier point of base 60

=== Pluralization development ===
Pluralization has two forms

plural and collective

plural is determined by reduplication

-bel was originally a dual form, from the word bel meaning two

=== Plural verbs ===
In the proto language reduplication of a verb indicated a frequentative form of the verb, but it got merged in with 

collective verbs developed from a dual form of the verb that analogously did that

=== Copula development ===
Original copula is ghi derived from a word for "hold"

=== Word order and verb agreement development ===
Initial word order was SVO, direct-inverse alignment

inverse marker na comes from a word meaning to stand still

person hierarchy
{| class="wikitable"
|+
!Person
|-
|I (male)
|-
|I (female)
|-
|I (child)
|-
|You (male)
|-
|You (female)
|-
|You (child)
|-
|3rd person male
|-
|3rd person female
|-
|3rd person child
|-
|3rd person neuter
|}

=== First person child ===
Zun bi bvae sugh -&gt; Zim Bivae Sugh

I drink water 

Zun bi na bvae sugh -&gt; Zimna Bivae Sugh

Water drinks me

(note that this formulation may be wrong if I decide to place second person higher in the hierarchy than first person)

Zun bi bha t'i aeki -&gt; Zim Bibha T'aek -&gt; Zimbibhat'aek -&gt; Zibhat'ae

I see you

Zun bi na bha t'i aeki -&gt; Zim Binabha T'aek -&gt; Zinabhat'ae

You see me

=== First person female ===
Zun d'e bvae sugh -&gt; Zen Bevae Sugh

I drink water 

Zun d'e na bvae sugh -&gt; Zena Bevae Sugh

Water drinks me

(note that this formulation may be wrong if I decide to place second person higher in the hierarchy than first person)

Zun d'e bha t'i aeki -&gt; Zen Bibha T'aek -&gt; Zimbibhat'aek -&gt; Zibhat'ae

I see you

Zun d'e na bha t'i aeki -&gt; Zena bha T'aek -&gt; Zinabhat'ae

You see me

=== First person male ===
Zun aeki bvae sugh -&gt; Zaeng Baevae Sugh

I drink water 

Zun aeki na bvae sugh -&gt; Zaengna Baevae Sugh

Water drinks me

(note that this formulation may be wrong if I decide to place second person higher in the hierarchy than first person)

== Sound shifts ==

# the great l shift
## l- -&gt; l-
## -l- -&gt; -ʎ- 
## -l -&gt; -i

== Example shift ==
Sak -&gt; Sak -&gt; Sak -&gt; Sak -&gt; Sak

Sakel -&gt; Sakei -&gt; Saki -&gt; Soki -&gt; Sok

Saksak -&gt; Sasak -&gt; Sasak</text>
      <sha1>tdw44mov7pelo7o3443ytordidcr1iv</sha1>
    </revision>
  </page>
  <page>
    <title>Ngorwiv</title>
    <ns>0</ns>
    <id>10438</id>
    <revision>
      <id>165478</id>
      <parentid>165355</parentid>
      <timestamp>2025-08-05T01:04:25Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165478</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="435" sha1="pf1nuiuni4576vvq15ynkzgtph94pcx" xml:space="preserve">[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]
[[File:Ngorwiv_illustration.svg|thumb|Illustration of a typical Ngorwiv]]
[[File:Shime Ngorwiv.svg|thumb|Shime Ngorwiv]]
Ngorwiv are a kind of religious object like Torii used on the planet [[Ngorno]]. The word means Earth-Ring referencing the fact they are rings meant to signify sacred sites and act as the presence of the ring on the planet.</text>
      <sha1>pf1nuiuni4576vvq15ynkzgtph94pcx</sha1>
    </revision>
  </page>
  <page>
    <title>Ringworld basic syntax words</title>
    <ns>0</ns>
    <id>10259</id>
    <revision>
      <id>165479</id>
      <parentid>165357</parentid>
      <timestamp>2025-08-05T01:04:26Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165479</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1360" sha1="3eoa58a00e1ri9dauycjfclm3tjrytf" xml:space="preserve">[[Ringworld declensions]]

== Basic nouns ==
[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]
[[Category:Aelaki‎]]

# Person akx
# Animal fÿɡ
# Rock ɡǁæ

== Basic verbs ==
# "to see"  ɗit̠ʃ
# to sit diz
# to give ɪɓ

== Pronouns ==

# I/Me - Zun
# You - !ÿ
# Singular they - Gu

== Adjectives ==

# ɡǁo - big

idk what to do with adjectives

== Posessive ==

* -lo is the posessive

== Head initial vs head final ==
Language is head final

Since it is head final it puts the auxiliary verb after

=== Head final ===
* SOV
* Adjective - Noun
* Noun - Postposition
* Possessor - Posessee

=== Head initial ===

* SVO
* Noun - Adjective
* Preposition - Noun
* Posessee - Posessor

== Test sentences ==
The person sees the animal

akxɓi fÿɡla dits 

The person sees the big animal

akxɓi ɡǁofÿɡla dits

== Gender characters ==
[[File:Child character.png|thumb|Child (pictogram of baby sucking on breast)]]
[[File:Child they.png|thumb|child they character]]
[[File:Woman character.png|thumb|woman character. A bow and arrow representing hunting, and a terrace representing agriculture]]
[[File:She character.png|thumb|she character]]
[[File:He character.png|thumb|he character]]
[[File:Male symbol.png|thumb|male symbol. It is an omegalike character, represents the penis coming out of the clitoris]]</text>
      <sha1>3eoa58a00e1ri9dauycjfclm3tjrytf</sha1>
    </revision>
  </page>
  <page>
    <title>Ringworld Gaiad</title>
    <ns>0</ns>
    <id>10318</id>
    <revision>
      <id>165480</id>
      <parentid>165360</parentid>
      <timestamp>2025-08-05T01:04:26Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165480</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2111" sha1="suyt808loh83cg383cwwum52xvy4kps" xml:space="preserve">In realms where heaven's ring encircles skies above, [Introduce the setting: The heavenly ring of water]
A cascade eternal, from celestial seas it dives.
This ring, an ocean hanging in the heavens high,
Feeds rivers below with waters that never dry.

Gods in their lofty abode, with watchful eyes, [Introduce the gods and their perspective]
Gazed upon the earth, where verdant forests lie.
Their sight caught Maomaos and monkeys in their play,
Creatures of vibrant spirit, yet touched by solitude's sway.

Maomaos, bear-sized beings, red-furred and bright, [Describe the Maomaos]
With dog-like mirth in each joyful, bounding flight.
And monkeys, agile, clever, leaping tree to tree,
In their eyes, a longing, a silent plea.

Moved by their quiet loneliness, the gods convened, [Gods' decision to intervene]
To discuss the fate of these beings, earthly and serene.
A bridge they sought to form, from sky to land,
To bring companionship's touch by a celestial hand.

From heavens descended Aeliron, first of man, [Introduce Aeliron]
"He Who Bridges Sky and Earth," as per the divine plan.
Like Ninigi, like Nigihayahi, of ancient lore,
A celestial grace he bore, wisdom of sky and earth's core.

To the earth, he brought a union, a sacred bond, [Aeliron's role and actions]
Marrying four monkeys, a connection beyond.
Not of romance, but of guardianship and respect,
A symbol of unity, of celestial and terrestrial connect.

Five Maomaos, with fur of twilight's red hue,
Met Aeliron's gaze, their curiosity grew.
He offered fruits, plucked from heavenly trees,
A celestial gift, eating which, Maomaos' spirits were set free.

Transformed they were, from earthly creatures alone,
To guardians bonded, around Aeliron's throne.
Thus was born the era of sky and earth as one, [Concluding the introduction]
Where gods walked the forests, under the setting sun.
Aeliron, the bridge, the first of his kind,
In his guidance and protection, peace they did find.




https://chat.openai.com/c/19f1dc20-867f-4f8d-8143-65a6f9631c3c



[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>suyt808loh83cg383cwwum52xvy4kps</sha1>
    </revision>
  </page>
  <page>
    <title>Ringworld culture building</title>
    <ns>0</ns>
    <id>10130</id>
    <revision>
      <id>165481</id>
      <parentid>165359</parentid>
      <timestamp>2025-08-05T01:04:26Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165481</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="25072" sha1="l0ogk7icfsafgufcd9rr7dkdisih2ef" xml:space="preserve">[[File:Kxakxa map.svg|thumb|Map of the homeland]]
 
Language names

Kxaki (delta-language)

Kxakxa (delta-delta) the equivalent city to Rome
[[File:Ringworld map.png|thumb]]
Maki (mother (river) language)

[[Ringworld basic syntax words]]

[[Swadesh]]

[[Random sentences]]
[[File:Imagefinancl.png|thumb|Above the letters is an alternative financial numeral system. Same pronounciation but different characters. Harder to modify one into another]]

==Vowels==
{| class="wikitable"
|+
!
!front
!back
|-
|Closed
|i
|u
|-
|
|ɪ
|ʊ
|-
|
|e
|oʊ
|-
|Open
|æ
|ʌ~ɑ~ɔ
|}
{| class="wikitable"
|+
!
!front
!back
|-
|Closed
|&lt;big&gt;[[wikipedia:I (kana)|イ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:う|う]]&lt;/big&gt;
|-
|
|[[wikipedia:ゐ|ゐ]]
|&lt;big&gt;[[wikipedia:ゆ|ゆ]]&lt;/big&gt;
|-
|
|&lt;big&gt;[[wikipedia:え|え]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:お|お]]&lt;/big&gt;
|-
|Open
|&lt;big&gt;[[wikipedia:あ|あ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:を|を]]&lt;/big&gt;
|}
{| class="wikitable"
!
!front
!back
|-
|Closed
|[[wiktionary:伊|伊]]
|[[wiktionary:宇|宇]]
|-
|
|[[wiktionary:爲|爲]]
|[[wiktionary:由|由]]
|-
|
|[[wikipedia:衣|衣]]
|[[wiktionary:於|於]]
|-
|Open
|[[wiktionary:安|安]]
|[[wiktionary:遠|遠]]
|}
[[File:Vowels system.png|thumb]]
[[File:Consonants.png|thumb]]
[[File:Vowels.png|thumb]]
{{IPA vowels}}

==d==
{| align="right" border="0" cellpadding="0" style="padding:2px;margin-left:1em;"
|-
|
|}

==Writing system==

=== Overview ===
{| align=right border="0" cellpadding="0" style="width: 14em; margin-left: 1em; margin-bottom:1em"
|-
|
|}
The complete katakana script consists of 48 characters, not c
=== Japanese ===

==== Syllabary and orthography ====
{| align=right style="margin-left:1em;"
|-
|
|-
| {{Color box|#ececec|border=darkgray}} Unused, extinct, or obsolete
|}
{| align=right border="0" cellpadding="0" style="padding:2px;margin-left:1em;"
|-
|
|-
|{{Color box|#DDDDF6;|border=darkgray}} Only used in some proper names
|}

==Stream of consciousness phrases==

* bakx 
** interjection of what?
* Zallax Kxa!u
** Zal-Go
** lax- imperative
** Kxa - deta/marsh
** !u - marker of to the place
* ɓoɓox
** reduplicated imperative of go (ɓo). Implication of go do that thing. Do it!
*Killax !ÿ'conlang'!u
**!ÿ = you = &lt;big&gt;ꔌ&lt;/big&gt;
**Speak in your conlang
*Zunn!a
**Me?
*Zɪn'la
**I see
**Zɪn = see
**la = declarative
*ʘawiv zɪnna zunɓi 
**I see the great rings in the sky (metaphor for god), word order and aspect implies awe
**ʘawiv - great twelve
**na suffix conjugates verb to express awe
**ɓi agentic suffix[[File:I see the rings.png|none|thumb]]
*ŋornǃÿ
**the name of the planet
*Hippo
**a kind of fish

==Etic phoneme table==
{| class="wikitable" style="text-align:center"
! colspan="2" rowspan="2" |
! rowspan="2" |[https://en.wikipedia.org/wiki/Labial_consonant Labial]
! colspan="2" |[https://en.wikipedia.org/wiki/Dental_consonant Dental]/[https://en.wikipedia.org/wiki/Alveolar_consonant Alveolar]
! rowspan="2" |[https://en.wikipedia.org/wiki/Postalveolar_consonant Postalveolar]
! rowspan="2" |[https://en.wikipedia.org/wiki/Velar_consonant Velar]
! rowspan="2" |[https://en.wikipedia.org/wiki/Glottal_consonant Glottal]
|-
!{{small|[[Central consonant|central]]}}
!{{small|[[Lateral consonant|lateral]]}}
|-
! rowspan="3" |[https://en.wikipedia.org/wiki/Click_consonant Click]
!voiceless
|[[wikipedia:Tenuis bilabial click|pʘ]]
|[[wikipedia:Tenuis alveolar click|tǃ]]
|[[wikipedia:Tenuis alveolar lateral click|kǁ]]
|
|
|
|-
!voiced
|[[wikipedia:Voiced bilabial click|bʘ]]
|[[wikipedia:Voiced alveolar click|dǃ]]
|[[wikipedia:Voiced alveolar lateral click|ɡǁ]]
|
|
|
|-
!{{small|nasalised}}
|[[wikipedia:Bilabial nasal click|mʘ]]
|[[wikipedia:Alveolar nasal click|nǃ]]
|[[wikipedia:Alveolar lateral nasal click|ŋǁ]]
|
|
|
|-
![https://en.wikipedia.org/wiki/Nasal_consonant Nasal]
!{{small|modally voiced}}
|[[wikipedia:Voiced bilabial nasal|m]]
|[[wikipedia:Voiced alveolar nasal|n]]
|
|
|
|
|-
! rowspan="3" |[https://en.wikipedia.org/wiki/Plosive Plosive]
!voiceless
|[[wikipedia:Voiceless bilabial plosive|p]]
|[[wikipedia:Voiceless alveolar plosive|t]]
|
|
|k
|ʔ
|-
!voiced
|[[wikipedia:Voiced bilabial plosive|b]]
|[[wikipedia:Voiced alveolar plosive|d]]
|
|
|g
|
|-
!{{small|implosive}}
|[[wikipedia:Voiced bilabial implosive|ɓ]]
|[[wikipedia:Voiced alveolar implosive|ɗ]]
|
|
|[[wikipedia:Voiced velar implosive|ɠ]]
|
|-
! rowspan="2" |[https://en.wikipedia.org/wiki/Affricate Affricate]
!voiceless
|[[wikipedia:Voiceless bilabial affricate|pɸ]]
|[[wikipedia:Voiceless postalveolar affricate|t̠ʃ]]
|
|
|[[wikipedia:Voiceless velar affricate|kx]]
|
|-
!voiced
|[[wikipedia:Voiced bilabial affricate|bβ]]
|[[wikipedia:Voiced postalveolar affricate|d̠ʒ]]
|
|
|[[wikipedia:Voiced velar affricate|ɡɣ]]
|
|-
! rowspan="2" |[https://en.wikipedia.org/wiki/Fricative Fricative]
!{{small|voiceless}}
|[[wikipedia:Voiceless labiodental fricative|f]]
|[[wikipedia:Voiceless alveolar fricative|s]]~[[wikipedia:Voiceless postalveolar fricative|ʃ]]
|
|
| colspan="2" |[[wikipedia:Voiceless velar fricative|x]]~h
|-
!voiced
|[[wikipedia:Voiced labiodental fricative|v]]
|[[wikipedia:Voiced alveolar fricative|z]]~[[wikipedia:Voiced postalveolar fricative|ʒ]]
|
|
|[[wikipedia:Voiced velar fricative|ɣ]]
|
|-
! colspan="2" |[https://en.wikipedia.org/wiki/Liquid_consonant Liquid]
|
|[[wikipedia:Voiced alveolar and postalveolar approximants|ɹ]]
|[[wikipedia:Voiced alveolar lateral approximant|l]]
|
|
|
|-
![https://en.wikipedia.org/wiki/Semivowel Semivowel]
!{{small|modally voiced}}
|
|
|
|{{IPAlink|j}}
|{{IPAlink|w}}
|
|}

==Emic phoneme table==
38 consonants 8 vowels

304 syllabics
{| class="wikitable"
|+
!location
!articulation
!voicing
!ipa
!roman
!∅
![[wikipedia:Open back unrounded vowel|a]]
![[wikipedia:Close front unrounded vowel|i]]
![[wikipedia:Close back rounded vowel|u]]
![[wikipedia:Close-mid front unrounded vowel|e]]
![[wikipedia:Close-mid back rounded vowel|o]]
![[wikipedia:Near-open front unrounded vowel|'''æ''']]
![[wikipedia:Close front rounded vowel|ÿ]]
![[wikipedia:Near-close near-front unrounded vowel|ɪ]]
!ʊ
|-
|ʔ
|
|
|ʔ
|'
|
|&lt;big&gt;[[wikipedia:あ|あ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:い|い]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:う|う]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:え|え]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:お|お]]&lt;/big&gt;
|𐠼
|Ю
|𐁍
|&lt;big&gt;[[wikipedia:や|や]]&lt;/big&gt;
|-
| rowspan="12" |Bilabial
| rowspan="3" |Plosive
|voiceless
|[[wikipedia:Voiceless bilabial plosive|p]]
|p
|
| style="background-color: #ffdddd;" |[[File:Ringworld_character_for_one.png|28x28px]]
|&lt;big&gt;[[wikipedia:ハ|ハ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:フ|フ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ヘ|ヘ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ホ|ホ]]&lt;/big&gt;
|𐠃
|𐠄
|𐠵
|&lt;big&gt;ꕫ&lt;/big&gt;
|-
|voiced
|[[wikipedia:Voiced bilabial plosive|b]]
|b
|
|ꚠ꛰
|ꚡ꛰
|ꚢ꛰
|ꚣ꛰
|ꚤ꛰
| style="background-color: #ffdddd;" |[[File:Ringworld character for 2.png|36x36px]]
|ꚮ
|ꚧ꛰
|&lt;big&gt;[[wikipedia:ゆ|ゆ]]&lt;/big&gt;
|-
|implosive
|[[wikipedia:Voiced bilabial implosive|ɓ]]
|bh
|
| style="background-color: #ffdddd;" |[[File:Ringworld character for 4.png|37x37px]]
|ꚩ꛰
|ꚪ꛰
|ꚫ꛰
|ꚬ꛰
|ꚭ꛰
|[[File:Byw.png|55x55px]]
|ꚯ꛰
|&lt;big&gt;ꔢ&lt;/big&gt;
|-
|nasal
|nasal
|[[wikipedia:Voiced bilabial nasal|m]]
|m
|
|&lt;big&gt;[[wikipedia:ま|ま]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:み|み]]&lt;/big&gt;
| style="background-color: #ffdddd;" |&lt;big&gt;🜁&lt;/big&gt;
|&lt;big&gt;[[wikipedia:め|め]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:も|も]]&lt;/big&gt;
|𐠀
|𐠁
|一
|&lt;big&gt;[[wikipedia:よ|よ]]&lt;/big&gt;
|-
| rowspan="2" |Affricate
|voiceless
|[[wikipedia:Voiceless bilabial affricate|pɸ]]
|pf
|
|Ᏼ
|Ᏹ
|Ᏻ
|Ᏸ
|Ᏺ
|Ꮿ
| style="background-color: #ffdddd;" |[[File:Ringworld character for 5.png|36x36px]]
|𐠸
|&lt;big&gt;ꖟ&lt;/big&gt;
|-
|voiced
|[[wikipedia:Voiced bilabial affricate|bβ]]
|bv
|
|𐠙
|𐠚
|𐠛
|𐠜
|𐠝
| style="background-color: #ffdddd;" |[[File:Ringworld character for 6.png|36x36px]]
|&lt;big&gt;ꘁ&lt;/big&gt;
|&lt;big&gt;ꗡ&lt;/big&gt;
|&lt;big&gt;ꔜ&lt;/big&gt;
|-
| rowspan="2" |Fricative
|voiceless
|[[wikipedia:Voiceless labiodental fricative|f]]
|f
|
|𐠭
|𐠮
|𐠯
|𐠰
|𐠱
|&lt;big&gt;ꛡ꛰&lt;/big&gt;
| style="background-color: #ffdddd;" |[[File:Seven.png|24x24px]]
|&lt;big&gt;ꗢ&lt;/big&gt;
|&lt;big&gt;ꘀ&lt;/big&gt;
|-
|voiced
|[[wikipedia:Voiced labiodental fricative|v]]
|v
|
|Ꮾ
|Ꮻ
| style="background-color: #ffdddd;" |[[File:Eight.png|25x25px]]
|Ꮺ
|Ꮼ
|Ꮹ
|&lt;big&gt;ꘃ&lt;/big&gt;
|&lt;big&gt;ꗣ&lt;/big&gt;
|
|-
| rowspan="3" |Click
|voiceless
|[[wikipedia:Tenuis bilabial click|pʘ]]
|p'
|
|𐠣
| style="background-color: #ffdddd;" |[[File:Nine.png|28x28px]]
|𐠥
|𐠦
|𐠧
|Ꮣ
|&lt;big&gt;ꖄ&lt;/big&gt;
|&lt;big&gt;ꗤ&lt;/big&gt;
|
|-
|voiced
|[[wikipedia:Voiced bilabial click|bʘ]]
|b'
|
|ワ
|ヰ
|𐠿
| style="background-color: #ffdddd;" |[[File:Ten.png|31x31px]]
|ヲ
|Ꮳ
|&lt;big&gt;ꖅ&lt;/big&gt;
|&lt;big&gt;ꗥ&lt;/big&gt;
|
|-
|nasal
|[[wikipedia:Bilabial nasal click|mʘ]]
|mb'
|
| style="background-color: #ffdddd;" |[[File:Eleven.png|29x29px]]
|&lt;big&gt;[[wikipedia:ミ|ミ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ム|ム]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:メ|メ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:モ|モ]]&lt;/big&gt;
|Ꮝ
|&lt;big&gt;ꖆ&lt;/big&gt;
|&lt;big&gt;ꗦ&lt;/big&gt;
|
|-
|Approximant
|voiced
|w
|w
|
|&lt;big&gt;[[wikipedia:わ|わ]]&lt;/big&gt;
| style="background-color: #ffdddd;" |[[File:World_house_12.png|border|20x20px]]
|&lt;big&gt;ꗈ&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ゑ|ゑ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:を|を]]&lt;/big&gt;
|Ꮬ
|&lt;big&gt;ꖇ&lt;/big&gt;
|&lt;big&gt;千&lt;/big&gt;
|
|-
| rowspan="12" |Alveolar
| rowspan="3" |Plosive
|voiceless
|[[wikipedia:Voiceless alveolar plosive|t]]
|t
|
|&lt;big&gt;[[wikipedia:た|た]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ち|ち]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:つ|つ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:て|て]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:と|と]]&lt;/big&gt;
|Ꮎ
|&lt;big&gt;ꖈ&lt;/big&gt;
|&lt;big&gt;ꗨ&lt;/big&gt;
|
|-
|voiced
|[[wikipedia:Voiced alveolar plosive|d]]
|d
|
|Ꮫ
|Ꮧ
|Ꮪ
|Ꮦ
|Ꮩ
|Ꭶ
|&lt;big&gt;ꖉ&lt;/big&gt;
|&lt;big&gt;ꗩ&lt;/big&gt;
|
|-
|implosive
|[[wikipedia:Voiced alveolar implosive|ɗ]]
|dh
|
|&lt;big&gt;[[wikipedia:タ|タ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:チ|チ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ツ|ツ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:テ|テ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ト|ト]]&lt;/big&gt;
|Ꮉ
|&lt;big&gt;ꖊ&lt;/big&gt;
|&lt;big&gt;ꗪ&lt;/big&gt;
|
|-
|nasal
|nasal
|[[wikipedia:Voiced alveolar nasal|n]]
|n
|
|&lt;big&gt;[[wikipedia:な|な]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:に|に]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ぬ|ぬ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ね|ね]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:の|の]]&lt;/big&gt;
|Ꭽ
|&lt;big&gt;ꖋ&lt;/big&gt;
|&lt;big&gt;ꗫ&lt;/big&gt;
|
|-
| rowspan="2" |Affricate
|voiceless
|[[wikipedia:Voiceless postalveolar affricate|t̠ʃ]]
|ch/ts
|
|Ꮸ
|Ꮵ
|Ꮷ
|Ꮴ
|Ꮶ
|Ꮖ
|&lt;big&gt;ꖌ&lt;/big&gt;
|&lt;big&gt;ꗬ&lt;/big&gt;
|
|-
|voiced
|[[wikipedia:Voiced postalveolar affricate|d̠ʒ]]
|j
|
|𐠨
|𐠩
|𐠪
|𐠫
|𐠬
|Ꮃ
|&lt;big&gt;ꖍ&lt;/big&gt;
|&lt;big&gt;ꗭ&lt;/big&gt;
|
|-
| rowspan="2" |Fricative
|voiceless
|[[wikipedia:Voiceless alveolar fricative|s]]~[[wikipedia:Voiceless postalveolar fricative|ʃ]]
|s/sh
|
|&lt;big&gt;[[wikipedia:さ|さ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:し|し]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:す|す]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:せ|せ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:そ|そ]]&lt;/big&gt;
|&lt;big&gt;ꖼ&lt;/big&gt;
|&lt;big&gt;ꖎ&lt;/big&gt;
|&lt;big&gt;ꗮ&lt;/big&gt;
|
|-
|voiced
|[[wikipedia:Voiced alveolar fricative|z]]~[[wikipedia:Voiced postalveolar fricative|ʒ]]
|z/zh
|
|Ꮢ
|Ꮟ
|Ꮡ
|Ꮞ
|Ꮠ
|&lt;big&gt;ꖽ&lt;/big&gt;
|&lt;big&gt;ꖏ&lt;/big&gt;
|&lt;big&gt;ꗯ&lt;/big&gt;
|
|-
| rowspan="3" |Click
|voiceless
|[[wikipedia:Tenuis alveolar click|tǃ]]
|t'
|
|Ꮲ
|Ꮯ
|Ꮱ
|Ꮮ
|Ꮰ
|&lt;big&gt;ꖾ&lt;/big&gt;
|&lt;big&gt;ꔌ&lt;/big&gt;
|&lt;big&gt;ꗰ&lt;/big&gt;
|
|-
|voiced
|[[wikipedia:Voiced alveolar click|dǃ]]
|d'
|
|&lt;big&gt;[[wikipedia:ラ|ラ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:リ|リ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ル|ル]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:レ|レ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ロ|ロ]]&lt;/big&gt;
|&lt;big&gt;ꖿ&lt;/big&gt;
|&lt;big&gt;ꔍ&lt;/big&gt;
|&lt;big&gt;ꗱ&lt;/big&gt;
|
|-
|nasal
|[[wikipedia:Alveolar nasal click|nǃ]]
|nd'
|
|Ꮕ
|Ꮒ
|Ꮔ
|Ꮑ
|Ꮓ
|&lt;big&gt;ꗀ&lt;/big&gt;
|&lt;big&gt;ꔎ&lt;/big&gt;
|&lt;big&gt;ꗲ&lt;/big&gt;
|
|-
|Approximant
|voiced
|[[wikipedia:Voiced alveolar and postalveolar approximants|ɹ]]
|[[wikipedia:Voiced alveolar and postalveolar approximants|r]]
|
|&lt;big&gt;[[wikipedia:ら|ら]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:り|り]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:る|る]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:れ|れ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ろ|ろ]]&lt;/big&gt;
|&lt;big&gt;ꗁ&lt;/big&gt;
|&lt;big&gt;ꔏ&lt;/big&gt;
|&lt;big&gt;ꗳ&lt;/big&gt;
|
|-
| rowspan="12" |Velar
| rowspan="3" |Plosive
|voiceless
|k
|k
|
|&lt;big&gt;[[wikipedia:か|か]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:き|き]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:く|く]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:け|け]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:こ|こ]]&lt;/big&gt;
|&lt;big&gt;ꗂ&lt;/big&gt;
|&lt;big&gt;ꔐ&lt;/big&gt;
|&lt;big&gt;ꗴ&lt;/big&gt;
|
|-
|voiced
|g
|g
|
|Ꭼ
|Ꭹ
|Ꭻ
|Ꭸ
|Ꭺ
|&lt;big&gt;ꗃ&lt;/big&gt;
|&lt;big&gt;ꔑ&lt;/big&gt;
|&lt;big&gt;ꗵ&lt;/big&gt;
|
|-
|implosive
|[[wikipedia:Voiced velar implosive|ɠ]]
|gh
|
|&lt;big&gt;[[wikipedia:カ|カ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:キ|キ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ク|ク]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ケ|ケ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:コ|コ]]&lt;/big&gt;
|&lt;big&gt;ꗄ&lt;/big&gt;
|&lt;big&gt;ꔒ&lt;/big&gt;
|&lt;big&gt;ꗶ&lt;/big&gt;
|
|-
|nasal
|nasal
|[[wikipedia:Voiced velar nasal|ŋ]]
|[[wikipedia:Voiced velar nasal|ŋ]]
|
|Ᏽ*
|Ꮋ
|Ꮍ
|Ꮊ
|Ꮌ
|&lt;big&gt;ꗅ&lt;/big&gt;
|&lt;big&gt;ꔓ&lt;/big&gt;
|&lt;big&gt;ꗷ&lt;/big&gt;
|
|-
| rowspan="2" |Affricate
|voiceless
|[[wikipedia:Voiceless velar affricate|kx]]
|kx
|
|[[File:Delta_pictoram.png|42x42px]]
|𐠐
|𐠑
|𐠒
|𐠓
|&lt;big&gt;ꖗ&lt;/big&gt;
|&lt;big&gt;ꔔ&lt;/big&gt;
|&lt;big&gt;ꗸ&lt;/big&gt;
|
|-
|voiced
|[[wikipedia:Voiced velar affricate|ɡɣ]]
|[[wikipedia:Voiced velar affricate|ɡɣ]]
|
|𐠞
|𐠟
|𐠠
|𐠡
|𐠢
|&lt;big&gt;ꖘ&lt;/big&gt;
|&lt;big&gt;ꔕ&lt;/big&gt;
|&lt;big&gt;ꗹ&lt;/big&gt;
|
|-
| rowspan="2" |Fricative
|voiceless
|[[wikipedia:Voiceless velar fricative|x]]~h
|x/h
|
|&lt;big&gt;[[wikipedia:は|は]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ひ|ひ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ふ|ふ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:へ|へ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ほ|ほ]]&lt;/big&gt;
|&lt;big&gt;ꖙ&lt;/big&gt;
|&lt;big&gt;ꔖ&lt;/big&gt;
|&lt;big&gt;ꗺ&lt;/big&gt;
|
|-
|voiced
|[[wikipedia:Voiced velar fricative|ɣ]]
|[[wikipedia:Voiced velar fricative|ɣ]]
|
|Ꮂ
|Ꭿ
|Ꮁ
|Ꭾ
|Ꮀ
|&lt;big&gt;ꖚ&lt;/big&gt;
|&lt;big&gt;ꔗ&lt;/big&gt;
|&lt;big&gt;ꗻ&lt;/big&gt;
|
|-
| rowspan="3" |Click
|voiceless
|[[wikipedia:Tenuis alveolar lateral click|kǁ]]
|kl'
|
|Ꮛ
|Ꮘ
|Ꮚ
|Ꮗ
|Ꮙ
|&lt;big&gt;ꖛ&lt;/big&gt;
|&lt;big&gt;ꔘ&lt;/big&gt;
|&lt;big&gt;ꗼ&lt;/big&gt;
|
|-
|voiced
|[[wikipedia:Voiced alveolar lateral click|ɡǁ]]
|gl'
|
|𐠙
|𐠚
|𐠛
|𐠜
|𐠝
|&lt;big&gt;ꖜ&lt;/big&gt;
|&lt;big&gt;ꔙ&lt;/big&gt;
|&lt;big&gt;ꗽ&lt;/big&gt;
|
|-
|nasal
|[[wikipedia:Alveolar lateral nasal click|ŋǁ]]
|nl'
|
|&lt;big&gt;[[wikipedia:ナ|ナ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ニ|ニ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ヌ|ヌ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ネ|ネ]]&lt;/big&gt;
|&lt;big&gt;[[wikipedia:ノ|ノ]]&lt;/big&gt;
|&lt;big&gt;ꖝ&lt;/big&gt;
|&lt;big&gt;ꔚ&lt;/big&gt;
|&lt;big&gt;ꗾ&lt;/big&gt;
|
|-
|Approximant
|voiced
|[[wikipedia:Voiced alveolar lateral approximant|l]]
|l
|
|Ꮈ
|Ꮅ
|Ꮇ
|Ꮄ
|Ꮆ
|&lt;big&gt;ꖞ&lt;/big&gt;
|&lt;big&gt;ꔛ&lt;/big&gt;
|&lt;big&gt;ꗿ&lt;/big&gt;
|
|}

== Awkwords stuff ==
p / b / bh / m / pf / bv / f / v / p' / b' / mb' / w / t / d / dh / n / ch / dzh / s / z / t' / d' / nd' / r / k / g / gh / ŋ / kx / ɡɣ / x / ɣ / kl' / gl' / nl' / l

a/i/u/e/o/æ/y/ɪ/ʊ[[File:Number system with alternative glyphs.png|thumb|Number system with alternative glyphs]]
[[File:Byw.png|thumb]]

== Phonetic notes ==
ʔ is considered equivalent to no sound. Dipthongs do not exist and vowels are divided by glottal stops when there is no other consonant

w~y are allophones. Thwere's an "inverse coloring" where it moves to contrast with the adjacent two vowels. iwi vs oyo to give two obvious examples. It forms dipthongs at syllable codas  

== Grammar ==

* [[wikipedia:Tripartite alignment|Tripartite alignment]]

* [[wikipedia:Agglutinative|Agglutinative]]

=== Noun declension ===

* plurals
** singular
** exhaustive plural -l indicates all members of an arbitrary group
** non-exhaustive plural reduplication indicates some members but not necessarily all
* tripartite alignment
** subject
** object
** intransitive

=== Verb marking ===

* intransitive plurality agreement
** agreement only on intransitive verbs to the plurality of them
* telicity
* clusivity?
* personal reaction of speaker
** mirativity
** evidentiality
** happening (realis) or irrealis
*** '''T'''ense—the position of the state or action in time, that is, whether it is in the '''past''', '''present''' or '''future'''.
*** '''A'''spect—the extension of the state or action in time, that is, whether it is '''unitary''' (perfective), '''continuous''' (imperfective) or '''repeated''' (habitual).
*** '''M'''ood or modality—the reality of the state or action, that is, whether it is '''actual''' (realis), a '''possibility''' or a '''necessity''' (irrealis).

== Lexicon ==

=== numbers ===

# pam
# bel
# ɓad̠ʒ
# mɪ
# pfym
# bvæ
# fÿnǃ
# vup
# p'ib
# b'el
## two hands (hand dual form)
# m'akx
## extra
# wiv
## rings

=== Pictograms ===
[[File:Rings character.png|thumb|Tomb script rings character. Pronounced wiv it represents the number 12 too]]
[[File:Time and minight tomb script.png|thumb|Tomb script midnight character]]
[[File:Tomb script time character.png|thumb|tomb script time character. It is differentiated from the one for midnight by the shadow being more like an arrow pointing to the time rather than something to be awed at]]
[[File:Tallies 1-6.png|thumb|Numbers 1-6]]
{{clear}}
[[File:World house 12.png|thumb|This is the pictogram representing 12 and the rings. It has two arches, compared to one arch representing house. So it is the house of houses (wiv)]]
[[File:Delta pictoram.png|thumb|Delta (Kxa) pictogram]]


[[File:Kxaki.png|thumb|Kxaki in characters]]






[[File:Regional variants in tallies.png|thumb|Regional variants in the tally system. The bottom two are the asymmetrical alternative glyphs that are considered unlucky]]






[[File:Sun behind the rings.png|thumb|representation of the winter time period where the sun is behind the rings]]






[[File:Noon representation.png|thumb|noon/day (ɓÿw)]]











[[File:Sunrise.png|thumb|Sunset (you are facing north, shadow is rising in the east)]]
[[File:Summer.png|thumb|Summer]]
[[File:Broken rings.png|thumb|Representation of the broken rings of winter. Unsure what the significance of it will be religiously but might be a character for winter]]










[[File:Sunset.png|thumb|Sunrise (you are facing north, shadow is setting in the west)]]
[[File:Bywiv.png|thumb]]


[[File:Ki character development.png|thumb|Deveklopment of the Ki character from its original form meaning language to the "kana"]]






==Lexicon==

* clock - ɓÿw'wiv day-ring. Represents the fact that you are 

==Script history==

# Tomb text: the form generally written in the most ancient tombs. Has a lot of rebus and is entirely logographic
# Temple text: a development of tomb text where phono-semantic compounds develop and replace the heavy usage of rebus. Glyphs are simplified
# Diplomatic text: a development of temple text where many commonly used characters were simplified into something like Kana, having only phonetic meanings.
## 3.5 late diplomatic text: incorporation of kana into new phono-semantic compounds. This is specifically based on the Khitan script
# Mercantile text: kana get replaced with a system similar to hangul. Many kana remain in old characters, but all phonetic transcription is done with the hangul like system
## 4.5 Late mercantile text: Newer characters have the hangul system incorporated into them

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]
&lt;references /&gt;

== Kana ==
{| align="right" style="margin-left:1em;"
|-
|
{| class="wikitable" style="vertical-align:top; padding:2px; text-align:center;"
|+ Katakana used in Japanese orthography
|-
!
! ''a'' !! ''i'' !! ''u'' !! ''e'' !! ''o''
|-
! title="No onset" | ∅
| &lt;big&gt;[[ア]]&lt;/big&gt; || &lt;big&gt;[[イ]]&lt;/big&gt; ||&lt;big&gt;[[ウ]]&lt;/big&gt;||&lt;big&gt;[[エ]]&lt;/big&gt;||&lt;big&gt;[[オ]]&lt;/big&gt;
|-
! ''k''
|&lt;big&gt;[[カ]]&lt;/big&gt;||&lt;big&gt;[[キ]]&lt;/big&gt;||&lt;big&gt;[[ク]]&lt;/big&gt;||&lt;big&gt;[[ケ]]&lt;/big&gt;||&lt;big&gt;[[コ]]&lt;/big&gt;
|-
! ''g''
|&lt;big&gt;ガ&lt;/big&gt;||&lt;big&gt;ギ&lt;/big&gt;||&lt;big&gt;グ&lt;/big&gt;||&lt;big&gt;ゲ&lt;/big&gt;||&lt;big&gt;ゴ&lt;/big&gt;
|-
! ''s''
|&lt;big&gt;[[サ]]&lt;/big&gt;||&lt;big&gt;[[シ]]&lt;/big&gt;||&lt;big&gt;[[ス]]&lt;/big&gt;||&lt;big&gt;[[セ]]&lt;/big&gt;||&lt;big&gt;[[ソ]]&lt;/big&gt;
|-
! ''z''
|&lt;big&gt;ザ&lt;/big&gt;||&lt;big&gt;ジ&lt;/big&gt;||&lt;big&gt;ズ&lt;/big&gt;||&lt;big&gt;ゼ&lt;/big&gt;||&lt;big&gt;ゾ&lt;/big&gt;
|-
! ''t''
|&lt;big&gt;[[タ]]&lt;/big&gt;||&lt;big&gt;[[チ]]&lt;/big&gt;||&lt;big&gt;[[ツ]]&lt;/big&gt;||&lt;big&gt;[[テ]]&lt;/big&gt;||&lt;big&gt;[[ト]]&lt;/big&gt;
|-
! ''d''
|&lt;big&gt;ダ&lt;/big&gt;||&lt;big&gt;ヂ&lt;/big&gt;||&lt;big&gt;ヅ&lt;/big&gt;||&lt;big&gt;デ&lt;/big&gt;||&lt;big&gt;ド&lt;/big&gt;
|-
! ''n''
|&lt;big&gt;[[ナ]]&lt;/big&gt;||&lt;big&gt;[[ニ]]&lt;/big&gt;||&lt;big&gt;[[ヌ]]&lt;/big&gt;||&lt;big&gt;[[ネ]]&lt;/big&gt;||&lt;big&gt;[[ノ]]&lt;/big&gt;
|-
! ''h''
|&lt;big&gt;[[ハ]]&lt;/big&gt;||&lt;big&gt;[[ヒ]]&lt;/big&gt;||&lt;big&gt;[[フ]]&lt;/big&gt;||&lt;big&gt;[[ヘ]]&lt;/big&gt;||&lt;big&gt;[[ホ]]&lt;/big&gt;
|-
! ''b''
|&lt;big&gt;バ&lt;/big&gt;||&lt;big&gt;ビ&lt;/big&gt;||&lt;big&gt;ブ&lt;/big&gt;||&lt;big&gt;ベ&lt;/big&gt;||&lt;big&gt;ボ&lt;/big&gt;
|-
! ''p''
|&lt;big&gt;パ&lt;/big&gt;||&lt;big&gt;ピ&lt;/big&gt;||&lt;big&gt;プ&lt;/big&gt;||&lt;big&gt;ペ&lt;/big&gt;||&lt;big&gt;ポ&lt;/big&gt;
|-
! ''m''
|&lt;big&gt;[[マ]]&lt;/big&gt;||&lt;big&gt;[[ミ]]&lt;/big&gt;||&lt;big&gt;[[ム]]&lt;/big&gt;||&lt;big&gt;[[メ]]&lt;/big&gt;||&lt;big&gt;[[モ]]&lt;/big&gt;
|-
! ''y''
|&lt;big&gt;[[ヤ]]&lt;/big&gt;||{{N/A|&lt;ref name=":0"/&gt;}}||&lt;big&gt;[[ユ]]&lt;/big&gt;||{{N/A|&lt;ref name=":0"/&gt;}}||&lt;big&gt;[[ヨ]]&lt;/big&gt;
|-
! ''r''
|&lt;big&gt;[[ラ]]&lt;/big&gt;||&lt;big&gt;[[リ]]&lt;/big&gt;||&lt;big&gt;[[ル]]&lt;/big&gt;||&lt;big&gt;[[レ]]&lt;/big&gt;||&lt;big&gt;[[ロ]]&lt;/big&gt;
|-
! ''w''
|&lt;big&gt;[[ワ]]&lt;/big&gt;||ゐ||{{N/A|&lt;ref name=":0"/&gt;}}||&lt;big&gt;ゑ&lt;/big&gt;||&lt;big&gt;[[ヲ]]&lt;/big&gt;
|-
| colspan="6" | &lt;big&gt;[[ン]]&lt;/big&gt; '''(''n'')'''
|-
! colspan="6" | Functional marks &lt;br&gt;and diacritics
|-
|&lt;big&gt;[[ッ]]&lt;/big&gt;||&lt;big&gt;[[ヽ]]&lt;/big&gt;|| colspan="2" |&lt;big&gt;[[dakuten|゛]]&lt;/big&gt;|| colspan="2" |&lt;big&gt;[[dakuten|゜]]&lt;/big&gt;
|}
|}
{| align="right" border="0" cellpadding="0" style="padding:2px;margin-left:1em;"
|-
|
{| class="wikitable" style="vertical-align:top; text-align:center;"
|+ Basic hiragana characters
|-
! !! ''a'' !! ''i'' !! ''u'' !! ''e'' !! ''o''
|-
! title="No lead consonant" |∅
|&lt;big&gt;[[あ]]&lt;/big&gt;||&lt;big&gt;[[い]]&lt;/big&gt;||&lt;big&gt;[[う]]&lt;/big&gt;||&lt;big&gt;[[え]]&lt;/big&gt;||&lt;big&gt;[[お]]&lt;/big&gt;
|-
!''k''
|&lt;big&gt;[[か]]&lt;/big&gt;||&lt;big&gt;[[き]]&lt;/big&gt;||&lt;big&gt;[[く]]&lt;/big&gt;||&lt;big&gt;[[け]]&lt;/big&gt;||&lt;big&gt;[[こ]]&lt;/big&gt;
|-
!''s''
|&lt;big&gt;[[さ]]&lt;/big&gt;||&lt;big&gt;[[し]]&lt;/big&gt;||&lt;big&gt;[[す]]&lt;/big&gt;||&lt;big&gt;[[せ]]&lt;/big&gt;||&lt;big&gt;[[そ]]&lt;/big&gt;
|-
!''t''
|&lt;big&gt;[[た]]&lt;/big&gt;||&lt;big&gt;[[ち]]&lt;/big&gt;||&lt;big&gt;[[つ]]&lt;/big&gt;||&lt;big&gt;[[て]]&lt;/big&gt;||&lt;big&gt;[[と]]&lt;/big&gt;
|-
!''n''
|&lt;big&gt;[[な]]&lt;/big&gt;||&lt;big&gt;[[に]]&lt;/big&gt;||&lt;big&gt;[[ぬ]]&lt;/big&gt;||&lt;big&gt;[[ね]]&lt;/big&gt;||&lt;big&gt;[[の]]&lt;/big&gt;
|-
!''h''
|&lt;big&gt;[[は]]&lt;/big&gt;||&lt;big&gt;[[ひ]]&lt;/big&gt;||&lt;big&gt;[[ふ]]&lt;/big&gt;||&lt;big&gt;[[へ]]&lt;/big&gt;||&lt;big&gt;[[ほ]]&lt;/big&gt;
|-
!''m''
|&lt;big&gt;[[ま]]&lt;/big&gt;||&lt;big&gt;[[み]]&lt;/big&gt;||&lt;big&gt;[[む]]&lt;/big&gt;||&lt;big&gt;[[め]]&lt;/big&gt;||&lt;big&gt;[[も]]&lt;/big&gt;
|-
!''y''
|&lt;big&gt;[[や]]&lt;/big&gt;||&lt;ref name="obsolete"&gt;See [[Ringworld culture building#Obsolete kana|obsolete kana]].&lt;/ref&gt;
|&lt;big&gt;[[ゆ]]&lt;/big&gt;||&lt;ref name="obsolete" /&gt;||&lt;big&gt;[[よ]]&lt;/big&gt;
|-
!''r''
|&lt;big&gt;[[ら]]&lt;/big&gt;|||&lt;big&gt;[[り]]&lt;/big&gt;||&lt;big&gt;[[る]]&lt;/big&gt;||&lt;big&gt;[[れ]]&lt;/big&gt;||&lt;big&gt;[[ろ]]&lt;/big&gt;
|-
!''w''
|&lt;big&gt;[[わ]]&lt;/big&gt;|| style="background:#DDDDF6" |&lt;big&gt;[[ゐ]]&lt;/big&gt;||&lt;ref name="obsolete" /&gt;
| style="background:#DDDDF6" |&lt;big&gt;[[ゑ]]&lt;/big&gt;||&lt;big&gt;[[を]]&lt;/big&gt;
|-
| colspan="6" | &lt;big&gt;[[ん]]&lt;/big&gt; '''(''n'')'''
|-
! colspan="6" | Main functional marks &lt;br /&gt;and [[diacritics]]
|-
|&lt;big&gt;[[っ]]&lt;/big&gt;||&lt;big&gt;[[ゝ]]&lt;/big&gt;|| colspan="2" |&lt;big&gt;[[dakuten|゛]]&lt;/big&gt;|| colspan="2" |&lt;big&gt;[[dakuten|゜]]&lt;/big&gt;
|}
|}
{| align="right" border="0" cellpadding="0" style="width: 14em; margin-left: 1em; margin-bottom:1em"
|-
|
{| class="wikitable" 
|+ Gojūon – Katakana characters with a nucleus
!
! ''a'' !! ''i'' !! ''u'' !! ''e'' !! ''o''
|- align="center"
! title="no onset" |{{color|gray|∅}}
|&lt;big&gt;[[A (kana)|ア]]&lt;/big&gt;||&lt;big&gt;[[I (kana)|イ]]&lt;/big&gt;||&lt;big&gt;[[U (kana)|ウ]]&lt;/big&gt;||&lt;big&gt;[[E (kana)|エ]]&lt;/big&gt;||&lt;big&gt;[[O (kana)|オ]]&lt;/big&gt;
|- align="center"
!''k''
|&lt;big&gt;[[Ka (kana)|カ]]&lt;/big&gt;||&lt;big&gt;[[Ki (kana)|キ]]&lt;/big&gt;||&lt;big&gt;[[Ku (kana)|ク]]&lt;/big&gt;||&lt;big&gt;[[Ke (kana)|ケ]]&lt;/big&gt;||&lt;big&gt;[[Ko (kana)|コ]]&lt;/big&gt;
|- align="center"
!''s''
|&lt;big&gt;[[Sa (kana)|サ]]&lt;/big&gt;||&lt;big&gt;[[Shi (kana)|シ]]&lt;/big&gt;||&lt;big&gt;[[Su (kana)|ス]]&lt;/big&gt;||&lt;big&gt;[[Se (kana)|セ]]&lt;/big&gt;||&lt;big&gt;[[So (kana)|ソ]]&lt;/big&gt;
|- align="center"
!''t''
|&lt;big&gt;[[Ta (kana)|タ]]&lt;/big&gt;||&lt;big&gt;[[Chi (kana)|チ]]&lt;/big&gt;||&lt;big&gt;[[Tsu (kana)|ツ]]&lt;/big&gt;||&lt;big&gt;[[Te (kana)|テ]]&lt;/big&gt;||&lt;big&gt;[[To (kana)|ト]]&lt;/big&gt;
|- align="center"
!''n''
|&lt;big&gt;[[Na (kana)|ナ]]&lt;/big&gt;||&lt;big&gt;[[Ni (kana)|ニ]]&lt;/big&gt;||&lt;big&gt;[[Nu (kana)|ヌ]]&lt;/big&gt;||&lt;big&gt;[[Ne (kana)|ネ]]&lt;/big&gt;||&lt;big&gt;[[No (kana)|ノ]]&lt;/big&gt;
|- align="center"
!''h''
|&lt;big&gt;[[Ha (kana)|ハ]]&lt;/big&gt;||&lt;big&gt;[[Hi (kana)|ヒ]]&lt;/big&gt;||&lt;big&gt;[[Fu (kana)|フ]]&lt;/big&gt;||&lt;big&gt;[[He (kana)|ヘ]]&lt;/big&gt;||&lt;big&gt;[[Ho (kana)|ホ]]&lt;/big&gt;
|- align="center"
!''m''
|&lt;big&gt;[[Ma (kana)|マ]]&lt;/big&gt;||&lt;big&gt;[[Mi (kana)|ミ]]&lt;/big&gt;||&lt;big&gt;[[Mu (kana)|ム]]&lt;/big&gt;||&lt;big&gt;[[Me (kana)|メ]]&lt;/big&gt;||&lt;big&gt;[[Mo (kana)|モ]]&lt;/big&gt;
|- align="center"
!''y''
|&lt;big&gt;[[Ya (kana)|ヤ]]&lt;/big&gt;|| &lt;ref name=":0"&gt;See [[Ringworld culture building#Obsolete kana|obsolete kana]]&lt;/ref&gt; ||&lt;big&gt;[[Yu (kana)|ユ]]&lt;/big&gt;|| 𛀁 ||&lt;big&gt;[[Yo (kana)|ヨ]]&lt;/big&gt;
|- align="center"
!''r''
|&lt;big&gt;[[Ra (kana)|ラ]]&lt;/big&gt;|||&lt;big&gt;[[Ri (kana)|リ]]&lt;/big&gt;||&lt;big&gt;[[Ru (kana)|ル]]&lt;/big&gt;||&lt;big&gt;[[Re (kana)|レ]]&lt;/big&gt;||&lt;big&gt;[[Ro (kana)|ロ]]&lt;/big&gt;
|- align="center"
!''w''
|&lt;big&gt;[[Wa (kana)|ワ]]&lt;/big&gt;||&lt;big&gt;[[Wi (kana)|ヰ]]&lt;/big&gt;|| &lt;ref name=":0" /&gt; ||&lt;big&gt;[[We (kana)|ヱ]]&lt;/big&gt;||&lt;big&gt;[[Wo (kana)|ヲ]]&lt;/big&gt;
|- align="center"
| colspan="6" | &lt;big&gt;[[ン]]&lt;/big&gt; '''(''n'')'''
|}
|}</text>
      <sha1>l0ogk7icfsafgufcd9rr7dkdisih2ef</sha1>
    </revision>
  </page>
  <page>
    <title>Test sentences</title>
    <ns>0</ns>
    <id>10309</id>
    <revision>
      <id>165482</id>
      <parentid>165361</parentid>
      <timestamp>2025-08-05T01:04:27Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165482</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9225" sha1="9xnmzlowjhjx3yk9cpashcjq77ff4kc" xml:space="preserve">== [https://tmh.conlang.org/test-sentences/conlang-syntax-test-cases.html from this list] ==

# The sun shines.
# The sun is shining.
# [[File:Imagetest sentence.png|thumb|First three sentences]]The sun shone (yesterday)
# The sun will shine.
# The sun has been shining.
# The sun is shining again.
# The sun will shine tomorrow.
# The sun shines brightly.
# The bright sun shines.
# The sun is rising now.
# All the people shouted.
# Some of the people shouted.
# Many of the people shouted twice.
# Happy people often shout.
# The kitten jumped up.
# The kitten jumped onto the table.
# My little kitten walked away.
# It's raining.
# The rain came down.
# The kitten is playing in the rain.
# The rain has stopped.
# Soon the rain will stop.
# I hope the rain stops soon.
# Once wild animals lived here.
# Slowly she looked around.
# Go away!
# Let's go!
# You should go.
# I will be happy to go.
# He will arrive soon.
# The baby's ball has rolled away.
# The two boys are working together.
# This mist will probably clear away.
# Lovely flowers are growing everywhere.
# We should eat more slowly.
# You have come too soon.
# You must write more neatly.
# Directly opposite stands a wonderful palace.
# Henry's dog is lost.
# My cat is black.
# The little girl's doll is broken.
# I usually sleep soundly.
# The children ran after Jack.
# I can play after school.
# We went to the village for a visit.
# We arrived at the river.
# I have been waiting for you.
# The campers sat around the fire.
# A little girl with a kitten sat near me.
# The child waited at the door for her father.
# Yesterday the oldest girl in the village lost her kitten.
# Were you born in this village?
# Can your brother dance well?
# Did the man leave?
# Is your sister coming for you?
# Can you come tomorrow?
# Have the neighbors gone away for the winter?
# Does the robin sing in the rain?
# Are you going with us to the concert?
# Have you ever travelled in the jungle?
# We sailed down the river for several miles.
# Everybody knows about hunting.
# On a Sunny morning after the solstice we started for the mountains.
# Tom laughed at the monkey's tricks.
# An old man with a walking stick stood beside the fence.
# The squirrel's nest was hidden by drooping boughs.
# The little seeds waited patiently under the snow for the warm spring sun.
# Many little girls with wreaths of flowers on their heads danced around the bonfire.
# The cover of the basket fell to the floor.
# The first boy in the line stopped at the entrance.
# On the top of the hill in a little hut lived a wise old woman.
# During our residence in the country we often walked in the pastures.
# When will your guests from the city arrive?
# Near the mouth of the river, its course turns sharply towards the East.
# Between the two lofty mountains lay a fertile valley.
# Among the wheat grew tall red poppies.
# The strong roots of the oak trees were torn from the ground.
# The sun looked down through the branches upon the children at play.
# The west wind blew across my face like a friendly caress.
# The spool of thread rolled across the floor.
# A box of growing plants stood in the Window.
# I am very happy.
# These oranges are juicy.
# Sea water is salty.
# The streets are full of people.
# Sugar tastes sweet.
# The fire feels hot.
# The little girl seemed lonely.
# The little boy's father had once been a sailor.
# I have lost my blanket.
# A robin has built his nest in the apple tree.
# At noon we ate our lunch by the roadside.
# Mr. Jones made a knife for his little boy.
# Their voices sound very happy.
# Is today Monday?
# Have all the leaves fallen from the tree?
# Will you be ready on time?
# Will you send this message for me?
# Are you waiting for me?
# Is this the first kitten of the litter?
# Are these shoes too big for you?
# How wide is the River?
# Listen.
# Sit here by me.
# Keep this secret until tomorrow.
# Come with us.
# Bring your friends with you.
# Be careful.
# Have some tea.
# Pip and his dog were great friends.
# John and Elizabeth are brother and sister.
# You and I will go together.
# They opened all the doors and windows.
# He is small, but strong.
# Is this tree an oak or a maple?
# Does the sky look blue or gray?
# Come with your father or mother.
# I am tired, but very happy.
# He played a tune on his wonderful flute.
# Toward the end of August the days grow much shorter.
# A company of soldiers marched over the hill and across the meadow.
# The first part of the story is very interesting.
# The crow dropped some pebbles into the pitcher and raised the water to the brim.
# The baby clapped her hands and laughed in glee.
# Stop your game and be quiet.
# The sound of the drums grew louder and louder.
# Do you like summer or winter better?
# That boy will have a wonderful trip.
# They popped corn, and then sat around the fire and ate it.
# They won the first two games, but lost the last one.
# Take this note, carry it to your mother; and wait for an answer.
# I awoke early, dressed hastily, and went down to breakfast.
# Aha! I have caught you!
# This string is too short!
# Oh, dear! the wind has blown my hat away!
# Alas! that news is sad indeed!
# Whew! that cold wind freezes my nose!
# Are you warm enough now?
# They heard the warning too late.
# We are a brave people, and love our country.
# All the children came except Mary.
# Jack seized a handful of pebbles and threw them into the lake.
# This cottage stood on a low hill, at some distance from the village.
# On a fine summer evening, the two old people were sitting outside the door of their cottage.
# Our bird's name is Jacko.
# The river knows the way to the sea.
# The boat sails away, like a bird on the wing.
# They looked cautiously about, but saw nothing.
# The little house had three rooms, a sitting room, a bedroom, and a tiny kitchen.
# We visited my uncle's village, the largest village in the world.
# We learn something new each day.
# The market begins five minutes earlier this week.
# Did you find the distance too great?
# Hurry, children.
# Madam, I will obey your command.
# Here under this tree they gave their guests a splendid feast.
# In winter I get up at night, and dress by yellow candlelight.
# Tell the last part of that story again.
# Be quick or you will be too late.
# Will you go with us or wait here?
# She was always, shabby, often ragged, and on cold days very uncomfortable.
# Think first and then act.
# I stood, a little mite of a girl, upon a chair by the window, and watched the falling snowflakes.
# Show the guests these shells, my son, and tell them their strange history.
# Be satisfied with nothing but your best.
# We consider them our faithful friends.
# We will make this place our home.
# The squirrels make their nests warm and snug with soft moss and leaves.
# The little girl made the doll's dress herself.
# I hurt myself.
# She was talking to herself.
# He proved himself trustworthy.
# We could see ourselves in the water.
# Do it yourself.
# I feel ashamed of myself.
# Sit here by yourself.
# The dress of the little princess was embroidered with roses, the national flower of the Country.
# They wore red caps, the symbol of liberty.
# With him as our protector, we fear no danger.
# All her finery, lace, ribbons, and feathers, was packed away in a trunk.
# Light he thought her, like a feather.
# Every spring and fall our cousins pay us a long visit.
# In our climate the grass remains green all winter.
# The boy who brought the book has gone.
# These are the flowers that you ordered.
# I have lost the book that you gave me.
# The fisherman who owned the boat now demanded payment.
# Come when you are called.
# I shall stay at home if it rains.
# When he saw me, he stopped.
# Do not laugh at me because I seem so absent minded.
# I shall lend you the books that you need.
# Come early next Monday if you can.
# If you come early, wait in the hall.
# I had a younger brother whose name was Antonio.
# Gnomes are little men who live under the ground.
# He is loved by everybody, because he has a gentle disposition.
# Hold the horse while I run and get my cap.
# I have found the ring I lost.
# Play and I will sing.
# That is the funniest story I ever heard.
# She is taller than her brother.
# They are no wiser than we.
# Light travels faster than sound.
# We have more time than they.
# She has more friends than enemies.
# He was very poor, and with his wife and five children lived in a little low cabin of logs and stones.
# When the wind blew, the traveler wrapped his mantle more closely around him.
# I am sure that we can go.
# We went back to the place where we saw the roses.
# "This tree is fifty feet high," said the gardener.
# I think that this train leaves five minutes earlier today.
# My opinion is that the governor will grant him a pardon.
# Why he has left the city is a mystery.
# The house stands where three roads meet.
# He has far more money than brains.
# Evidently that gate is never opened, for the long grass and the great hemlocks grow close against it.
# I met a little cottage girl; she was eight years old, she said.

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]
[[Category:Aelaki‎]]</text>
      <sha1>9xnmzlowjhjx3yk9cpashcjq77ff4kc</sha1>
    </revision>
  </page>
  <page>
    <title>File:Bywiv.png</title>
    <ns>6</ns>
    <id>10243</id>
    <revision>
      <id>165485</id>
      <parentid>165365</parentid>
      <timestamp>2025-08-05T01:04:28Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165485</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="119" sha1="3cfyr693lv1dvcredps1epijixdxmke" xml:space="preserve">Bywiv in characters (clock)

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>3cfyr693lv1dvcredps1epijixdxmke</sha1>
    </revision>
  </page>
  <page>
    <title>File:Byw.png</title>
    <ns>6</ns>
    <id>10244</id>
    <revision>
      <id>165484</id>
      <parentid>165364</parentid>
      <timestamp>2025-08-05T01:04:28Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165484</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="134" sha1="7j97hrrn31eeylbw3qte0dp67ugk8ec" xml:space="preserve">byw character (day) the sun over the rings

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>7j97hrrn31eeylbw3qte0dp67ugk8ec</sha1>
    </revision>
  </page>
  <page>
    <title>File:Bigcharacter.png</title>
    <ns>6</ns>
    <id>10294</id>
    <revision>
      <id>165483</id>
      <parentid>165362</parentid>
      <timestamp>2025-08-05T01:04:28Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165483</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="108" sha1="lrbl4mx2nvpnjj6epyxaki7ty0n7xhf" xml:space="preserve">bigcharacter p'a

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>lrbl4mx2nvpnjj6epyxaki7ty0n7xhf</sha1>
    </revision>
  </page>
  <page>
    <title>File:Broken rings.png</title>
    <ns>6</ns>
    <id>10236</id>
    <revision>
      <id>165486</id>
      <parentid>165363</parentid>
      <timestamp>2025-08-05T01:04:29Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165486</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="228" sha1="r8l22ycekq8saiiy46peuso5na8mpuw" xml:space="preserve">Representation of the broken rings of winter. Unsure what the significance of it will be religiously but might be a character for winter

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>r8l22ycekq8saiiy46peuso5na8mpuw</sha1>
    </revision>
  </page>
  <page>
    <title>File:Delta pictoram.png</title>
    <ns>6</ns>
    <id>10240</id>
    <revision>
      <id>165487</id>
      <parentid>165369</parentid>
      <timestamp>2025-08-05T01:04:29Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165487</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="107" sha1="4hhvvpfnin8n592zx11nefnh39n3a2z" xml:space="preserve">Delta pictogram

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>4hhvvpfnin8n592zx11nefnh39n3a2z</sha1>
    </revision>
  </page>
  <page>
    <title>File:Child they.png</title>
    <ns>6</ns>
    <id>10263</id>
    <revision>
      <id>165488</id>
      <parentid>165367</parentid>
      <timestamp>2025-08-05T01:04:29Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165488</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="106" sha1="5ko55886tei3nidzgu6ibyfvkeegzr3" xml:space="preserve">pronounced shy

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>5ko55886tei3nidzgu6ibyfvkeegzr3</sha1>
    </revision>
  </page>
  <page>
    <title>File:D'aen character.svg</title>
    <ns>6</ns>
    <id>10321</id>
    <revision>
      <id>165489</id>
      <parentid>165368</parentid>
      <timestamp>2025-08-05T01:04:29Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165489</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="216" sha1="i8l8pp5ica9z2r7zmz5nut7u53rvlxj" xml:space="preserve">Character is derived from a dice representing luck. Numbers depicted vary on the tomb script but usually involve 246, or 236

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>i8l8pp5ica9z2r7zmz5nut7u53rvlxj</sha1>
    </revision>
  </page>
  <page>
    <title>File:Eight.png</title>
    <ns>6</ns>
    <id>10254</id>
    <revision>
      <id>165490</id>
      <parentid>165370</parentid>
      <timestamp>2025-08-05T01:04:30Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165490</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="97" sha1="bikk42td0qxu3lgd5tzorsk48ekbwxu" xml:space="preserve">eight

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>bikk42td0qxu3lgd5tzorsk48ekbwxu</sha1>
    </revision>
  </page>
  <page>
    <title>File:Child character.png</title>
    <ns>6</ns>
    <id>10262</id>
    <revision>
      <id>165492</id>
      <parentid>165366</parentid>
      <timestamp>2025-08-05T01:04:30Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165492</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="124" sha1="48klgzgcl1w9su1x7npw31tr4axo4tl" xml:space="preserve">It is a baby sucking on a breast

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>48klgzgcl1w9su1x7npw31tr4axo4tl</sha1>
    </revision>
  </page>
  <page>
    <title>File:Dice alternative.svg</title>
    <ns>6</ns>
    <id>10322</id>
    <revision>
      <id>165491</id>
      <parentid>165374</parentid>
      <timestamp>2025-08-05T01:04:30Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165491</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="118" sha1="1r5vxvcyxgytgtp4m4ys6lbl69461bu" xml:space="preserve">alternative dice character

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>1r5vxvcyxgytgtp4m4ys6lbl69461bu</sha1>
    </revision>
  </page>
  <page>
    <title>File:Eleven.png</title>
    <ns>6</ns>
    <id>10257</id>
    <revision>
      <id>165493</id>
      <parentid>165372</parentid>
      <timestamp>2025-08-05T01:04:31Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165493</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="98" sha1="qvxjh2r135m5gfmenxu7m2bq6g6xl2r" xml:space="preserve">eleven

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>qvxjh2r135m5gfmenxu7m2bq6g6xl2r</sha1>
    </revision>
  </page>
  <page>
    <title>File:Image2.png</title>
    <ns>6</ns>
    <id>10284</id>
    <revision>
      <id>165494</id>
      <parentid>165378</parentid>
      <timestamp>2025-08-05T01:04:31Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165494</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="93" sha1="odlc5jr163i7bybifoeucl0rvyhfzby" xml:space="preserve">2

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>odlc5jr163i7bybifoeucl0rvyhfzby</sha1>
    </revision>
  </page>
  <page>
    <title>File:Image11.png</title>
    <ns>6</ns>
    <id>10293</id>
    <revision>
      <id>165495</id>
      <parentid>165377</parentid>
      <timestamp>2025-08-05T01:04:31Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165495</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" sha1="osxqm1fjk4zp87teknyw0jmbvepqyfv" xml:space="preserve">11

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>osxqm1fjk4zp87teknyw0jmbvepqyfv</sha1>
    </revision>
  </page>
  <page>
    <title>File:He character.png</title>
    <ns>6</ns>
    <id>10266</id>
    <revision>
      <id>165498</id>
      <parentid>165373</parentid>
      <timestamp>2025-08-05T01:04:32Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165498</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="104" sha1="2491xo0szo41mju41gtn8awlyvwty1v" xml:space="preserve">he character

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>2491xo0szo41mju41gtn8awlyvwty1v</sha1>
    </revision>
  </page>
  <page>
    <title>File:Image1.png</title>
    <ns>6</ns>
    <id>10283</id>
    <revision>
      <id>165496</id>
      <parentid>165376</parentid>
      <timestamp>2025-08-05T01:04:32Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165496</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="93" sha1="jxrx1xd0y2i5eurov161xnoctnm4k2a" xml:space="preserve">1

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>jxrx1xd0y2i5eurov161xnoctnm4k2a</sha1>
    </revision>
  </page>
  <page>
    <title>File:Image10.png</title>
    <ns>6</ns>
    <id>10292</id>
    <revision>
      <id>165497</id>
      <parentid>165379</parentid>
      <timestamp>2025-08-05T01:04:32Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165497</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" sha1="1iughl2czzmevr4web7phg3jbb44nr4" xml:space="preserve">10

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>1iughl2czzmevr4web7phg3jbb44nr4</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Ringworld</title>
    <ns>14</ns>
    <id>10227</id>
    <revision>
      <id>165501</id>
      <parentid>165339</parentid>
      <timestamp>2025-08-05T01:04:33Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Aelaki]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165501</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="106" sha1="b298h82kl6h21wfr0lk8hk3l9ee292b" xml:space="preserve">[[Category:Gaiad]]
[[Category:Aelaki]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>b298h82kl6h21wfr0lk8hk3l9ee292b</sha1>
    </revision>
  </page>
  <page>
    <title>File:I see the rings.png</title>
    <ns>6</ns>
    <id>10258</id>
    <revision>
      <id>165499</id>
      <parentid>165375</parentid>
      <timestamp>2025-08-05T01:04:33Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165499</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="107" sha1="k2jwmguo2sblfp9uagtc4atar5sw8my" xml:space="preserve">I see the rings

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>k2jwmguo2sblfp9uagtc4atar5sw8my</sha1>
    </revision>
  </page>
  <page>
    <title>File:Image3.png</title>
    <ns>6</ns>
    <id>10285</id>
    <revision>
      <id>165502</id>
      <parentid>165380</parentid>
      <timestamp>2025-08-05T01:04:33Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165502</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="93" sha1="arknbu8co7pf28q60facr724e8w7r73" xml:space="preserve">3

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>arknbu8co7pf28q60facr724e8w7r73</sha1>
    </revision>
  </page>
  <page>
    <title>File:Image4.png</title>
    <ns>6</ns>
    <id>10286</id>
    <revision>
      <id>165500</id>
      <parentid>165381</parentid>
      <timestamp>2025-08-05T01:04:33Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165500</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="93" sha1="gzndbhg69phnii697l2t1xecomv2nqw" xml:space="preserve">4

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>gzndbhg69phnii697l2t1xecomv2nqw</sha1>
    </revision>
  </page>
  <page>
    <title>Aelaki conjugations</title>
    <ns>0</ns>
    <id>10403</id>
    <revision>
      <id>165503</id>
      <parentid>165346</parentid>
      <timestamp>2025-08-05T01:04:33Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Aelaki]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165503</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="12973" sha1="drfcsy4cmi0uzrmilb1d8lfbtu7xtre" xml:space="preserve">== New tamtam ==

# Chirap = illuminate 
# Uchirap = illuminate (more explicitly present) 
# Chirapagh = Will illuminate (speculative) 
# Chirapaghagh = Will probably not illuminate 
# Uchirapagh = Is illuminating (speculative) 
# Uchirapaghagh = is probably not illuminating (edited)

== Tense aspect mood ==
Past/perfect markers

* '''telic'''
* '''atelic'''

No perfect can occur in the present

=== Evidentiality (makes something past imperfect) ===
Past imperfect can be marked by the two sensory evidentiality markers

* '''see'''
** '''bha word (to see)'''
* '''hear (people said it) (dibv)'''
** '''combiner see and hear to be remote past?'''
** '''dibv word (hear)'''
* '''inferential? "apparently" (mish)'''
** '''indicates surprise'''
** '''first person indicates unintentional'''
** '''Reduplicate it to indicate doubting (feom turkish mis)'''
** '''agh word (think)'''

=== Future ===
Future is marked with mood indicators

* '''I think this will happen (inferential)'''
* '''I am working on this'''
* '''I am worried about this'''

=== Other realis ===

* gnomic (all things do this)
** combine with imperative to get jussive
** '''zo (know)''' 

=== Subjunctive? ===

=== Deontic ===

* '''-lax imperative''' 
** '''combine with gnomic to get jussive'''
** '''Reduplicate to be pushy'''

* '''Deliberative'''
** '''yes-no particle'''
* '''Jussive'''
** '''gnomic plus imperative'''

=== Epistemic ===
inferential 

=== Dependent ===
should be linked to the inferential

=== Interrogative ===

== Table of tam ==
Note: gnomic aspect is                          
 
{| class="wikitable"
|+tense aspect mood for the verb "exu" to run (third person singular)
!
!
!aspect
!evidentiality
!mood
!name
!morpheme analysis
!Pronounciation
!english translation
!notes
|-
| rowspan="8" |present
| rowspan="2" |present imperfective
|imperfective
|visual
|indicative
|indicative present imperfective
|exu
|exu
|They are running
|default present is seen as visual evidence
|-
|imperfective habitual
|visual
|indicative
|indicative present habitual
|exu-d'eb'
|exud'eb'
|They run (habitually)
|
|-
| rowspan="3" |present imperfective auditory
|imperfective
|auditory
|indicative
|auditory present
|exu-laen-dibv
|
|
|
|-
|imperfective habitual
|auditory
|indicative
|indicative present habitual
|exu-laen-dibv-d'eb'
|
|
|
|-
|gnomic imperfective
|second-hand
|indicative
|indicative present gnomic
|exu-exu-belel
|exuxubelel
|They run (this is a statement of their character)
|stem is always reduplicated in this and it overwrites any other plural markings
Is treated as second-hand by default since you cannot see all of a thing
|-
| rowspan="3" |present imperfective inferential
|imperfective
|inferential
|indicative
|inferential present
|exu-laen-agh
|
|
|past inferential only goes to past, future inferential is applied to present
|-
|imperfective habitual
|inferential
|indicative
|indicative present habitual
|exu-laen-agh-d'eb'
|
|
|
|-
|gnomic imperfective
|inferential
|indicative
|inferential present gnomic
|exu-exu-laen-agh-belel
|
|
|
|-
| rowspan="22" |past
| rowspan="6" |past imperfective
|imperfective
|visual
|indicative
|indicative past imperfective (seen)
|exu-bha
|exubha
|They were running (I saw them)
|The visual indicator moves the statement into the past
This is not a reliable past indicator 
since other indicators can move it to the past or future again
|-
|imperfective habitual
|visual
|indicative
|
|exu-bha-d'eb'
|
|
|
|-
|imperfective
|second-hand
|indicative
|indicative past imperfective (heard)
|exu-dibv
|exudibv
|They were running (I heard them)
|Means both literally hearing and metaphorically hearing 
from other people
Weaker than seen, 
|-
|imperfective habitual
|second-hand
|indicative
|
|exu-dibv-d'eb'
|
|
|
|-
|imperfective
|inferential
|indicative
|inferential past imperfective
|exu-eux
|exeuxu
|they ran (based on this evidence)
|eux comes from the word "smell" but it is metaphorical.
|-
|imperfective habitual
|inferential
|indicative
|
|exu-eux-d'eb'
|
|
|
|-
| rowspan="4" |past perfective
|telic perfective
|visual
|indicative
|indicative past telic perfective
|exu-m'eu
|exum'eu
|They ran (to their destination)
|perceived as higher evidence than inferential but lower than heard
|-
|telic perfective habitual
|visual
|
|
|exu-d'eb'-m'eu
|
|
|
|-
|atelic perfective
|visual
|indicative
|indicative past atelic perfective
|exu-pihn
|exupihn
|They ran (until they stopped)
|perceived as higher evidence than inferential but lower than heard
|-
|atelic perfective habitual
|visual
|
|
|exu-d'eb'-pihn
|
|
|
|-
| rowspan="4" |past  perfective visual
|telic perfective
|visual
|indicative
|indicative past telic perfective
|exu-bha-m'eu
|exum'eu
|They ran (to their destination)
|
|-
|telic perfective habitual
|visual
|
|
|exu-d'eb'-bha-m'eu
|
|
|
|-
|atelic perfective
|visual
|indicative
|indicative past atelic perfective
|exu-bha-pihn
|exupihn
|They ran (until they stopped)
|
|-
|atelic perfective habitual
|visual
|
|
|exu-d'eb'-bha-pihn
|
|
|
|-
| rowspan="4" |past  perfective auditory
|telic perfective
|second-hand
|indicative
|indicative past telic perfective
|exu-dibv-m'eu
|exum'eu
|They ran (to their destination)
|
|-
|telic perfective habitual
|
|
|
|exu-dibv-d'eb'-m'eu
|
|
|
|-
|atelic perfective
|second-hand
|indicative
|indicative past atelic perfective
|exu-dibv-pihn
|exupihn
|They ran (until they stopped)
|
|-
|atelic perfective habitual
|
|
|
|exu-dibv-d'eb'-m'eu
|
|
|
|-
| rowspan="4" |past  perfective inferential
|telic perfective
|inferential
|indicative
|indicative past telic perfective
|exu-eux-m'eu
|exum'eu
|They ran (to their destination)
|
|-
|telic perfective habitual
|
|
|
|exu-dibv-d'eb'-m'eu
|
|
|
|-
|atelic perfective
|inferential
|indicative
|indicative past atelic perfective
|exu-eux-pihn
|exupihn
|They ran (until they stopped)
|
|-
|atelic perfective habitual
|
|
|
|exu-dibv-d'eb'-m'eu
|
|
|
|-
| rowspan="30" |future
| rowspan="10" |future imperfective
|imperfective
|inferential
|indicative
|inferential future imperfective
|exu-agh
|exaghu
|They will run (based on this evidence)
|agh is the particle, but it is infixed due to sound rules
agh comes from the word for think
inferential moves something to the future
Like evidentials it can be moved to other times
|-
|imperfective habitual
|inferential
|indicative
|
|exu-agh-d'eb'
|
|
|
|-
|imperfective
| intentive
|intentive
|intentive future imperfective
|exu-vo
|exuvo
|They will run (They intend on running)
|implies you two made a plan together. 
Do not use this mood if warning the police about a criminal
|-
|imperfective habitual
|intentive
|intentive
|
|exu-vo-d'eb'
|
|
|
|-
|imperfective
| colspan="2" | Admonitive
|Admonitive future imperfective
|exu-d'id
|exud'id
|I'm afraid They will run
|combine with intentive to indicate you want it
Note this is not an inverse imperative
Use negation plus imperative for that. positive imperative is more direct. Using this in the second person implies the person is not doing it willingly, either as a real concern or as a mafia style threat
|-
|imperfective habitual
| colspan="2" |Admonitive
|
|exu-d'id-d'eb'
|
|
|
|-
|imperfective
| colspan="2" | optative
|optative future imperfective
|exu-laex
|exulaex
|They should run
|Imperative on the first and second person. Optative on the third and fourth persons
|-
|imperfective habitual
| colspan="2" |optative
|
|exu-laex-d'eb'
|
|
|
|-
|imperfective
| colspan="2" |deliberative
|Future deliberative
|exu-ga
|exuga
|Should they run?
|ga is the yes-no particle when outside the verb. Inside it is this
This is not a philosophical question, it is a snappy yes-no question. 
Exuzoga would be philosophical
|-
|imperfective habitual
| colspan="2" |deliberative
|
|exu-ga-d'eb'
|
|
|
|-
| rowspan="20" |future perfective
|telic perfective
| colspan="2" |inferential
|inferential future telic perfective
|exu-agh-m'eu
|
|
|
|-
|habitual telic perfective
| colspan="2" |inferential
|
|exu-agh-d'eb'-m'eu
|
|
|
|-
|atelic perfective
| colspan="2" |inferential
|inferential future atelic perfective
|exu-agh-pihn
|
|
|
|-
|habitual atelic perfective
| colspan="2" |inferential
|
|exu-agh-d'eb'-pihn
|
|
|
|-
| style="background-color: #ffdddd;" |telic perfective
| colspan="2" |intentive
| style="background-color: #ffdddd;" |indicative future telic perfective
|exu-vo-m'eu
| style="background-color: #ffdddd;" |exuvom'eu
| style="background-color: #ffdddd;" |
| style="background-color: #ffdddd;" |
|-
|habitual telic perfective
| colspan="2" |intentive
|
|exu-vo-d'eb'-m'eu
|
|
|
|-
| style="background-color: #ffdddd;" |atelic perfective
| colspan="2" |intentive
| style="background-color: #ffdddd;" |indicative future atelic perfective
|exu-vo-pihn
| style="background-color: #ffdddd;" |exuvopihn
| style="background-color: #ffdddd;" |
| style="background-color: #ffdddd;" |
|-
|habitual atelic perfective
| colspan="2" |intentive
|
|exu-vo-d'eb'-pihn
|
|
|
|-
| style="background-color: #ffdddd;" |telic perfective
| colspan="2" |Admonitive
| style="background-color: #ffdddd;" |indicative future telic perfective
|exu-d'id-m'eu
| style="background-color: #ffdddd;" |exud'id-m'eu
| style="background-color: #ffdddd;" |
| style="background-color: #ffdddd;" |
|-
|habitual telic perfective
| colspan="2" |Admonitive
|
|exu-d'id-d'eb'-m'eu
|
|
|
|-
| style="background-color: #ffdddd;" |atelic perfective
| colspan="2" |Admonitive
| style="background-color: #ffdddd;" |indicative future atelic perfective
|exu-d'id-pihn
| style="background-color: #ffdddd;" |exud'id-pihn
| style="background-color: #ffdddd;" |
| style="background-color: #ffdddd;" |
|-
|habitual atelic perfective
| colspan="2" |Admonitive
|
|exu-d'id-pihn
|
|
|
|-
| style="background-color: #ffdddd;" |telic perfective
| colspan="2" |optative
| style="background-color: #ffdddd;" |indicative future telic perfective
|exu-laex-m'eu
| style="background-color: #ffdddd;" |exulaex-m'eu
| style="background-color: #ffdddd;" |
| style="background-color: #ffdddd;" |
|-
|habitual telic perfective
| colspan="2" |optative
|
|exu-laex-d'eb'-m'eu
|
|
|
|-
| style="background-color: #ffdddd;" |atelic perfective
| colspan="2" |optative
| style="background-color: #ffdddd;" |indicative future atelic perfective
|exu-laex-pihn
| style="background-color: #ffdddd;" |exulaex-pihn
| style="background-color: #ffdddd;" |
| style="background-color: #ffdddd;" |
|-
|habitual atelic perfective
| colspan="2" |optative
|
|exu-laex-d'eb'-pihn
|
|
|
|-
| style="background-color: #ffdddd;" |telic perfective
| colspan="2" |deliberative
| style="background-color: #ffdddd;" |indicative future telic perfective
|exu-ga-m'eu
| style="background-color: #ffdddd;" |exugam'eu
| style="background-color: #ffdddd;" |
| style="background-color: #ffdddd;" |
|-
|habitual telic perfective
| colspan="2" |deliberative
|
|exu-ga-d'eb'-m'eu
|
|
|
|-
| style="background-color: #ffdddd;" |atelic perfective
| colspan="2" |deliberative
| style="background-color: #ffdddd;" |indicative future atelic perfective
|exu-ga-pihn
| style="background-color: #ffdddd;" |exugapihn
| style="background-color: #ffdddd;" |
| style="background-color: #ffdddd;" |
|-
|habitual atelic perfective
| colspan="2" |deliberative
|
|exu-ga-d'eb'-pihn
|
|
|
|}

== Infographics ==
[[File:Aelaki conjugations.svg|thumb|Active]]

== Table of conjugations ==
Conjugations for[[File:Aelaki stative conjugations.svg|thumb|Stative conjugations (logogram not updated)]]
Xaen (hunt)

Table
{| class="wikitable"
|+
!gender
!plurality
!aspect
!romanization
!example
!characters
|-
| rowspan="13" |feminine
| rowspan="5" |singular
|imperfect
|xaen
|I'm hunting
|[[File:Imagehunt.png|thumb|90x90px]]
|-
|atelic perfect
|xaenl'i
|I hunted (until I got bored)
|[[File:Imageimperfect.png|thumb|186x186px]]
|-
|telic perfect
|xaemb'e
|I hunted (until catching something)
|[[File:Imageddddddddddddddd.png|thumb|186x186px]]
|-
|habitual
|xaend'eb'
|I hunt
|[[File:Xaendaeb.png|thumb|136x136px]]
|-
|imperative
|xaenlax
|Go hunt
|[[File:Imagehuntimeperiujnofsderfdsrffd.png|thumb|175x175px]]
|-
| rowspan="4" |multiple
|imperfect
|xaenxaen
|I'm hunting
|[[File:Xaenhaen.png|thumb|178x178px]]
|-
|atelic perfect
|xaenxaenl'e
|I hunted (and didn't catch anything)
|[[File:Imagefffffffffffffffffffffff.png|thumb|255x255px]]
|-
|telic perfect
|xaemb'e
|I hunted (until catching something)
|[[File:Image66666666666666666.png|thumb|257x257px]]
|-
|habitual
|xaend'eb'
|I hunt
|[[File:Imagefffffffffffffffffffffffffffffffffffffffffffffff.png|thumb|219x219px]]
|-
| rowspan="4" |exhaustive
|imperfect
|xaenel
|I'm hunting
|[[File:Imageggggg.png|thumb|90x90px]]
|-
|atelic perfect
|xaenel'i
|I hunted (and didn't catch anything)
|[[File:Image777.png|thumb|162x162px]]
|-
|telic perfect
|xaemb'el
|I hunted (until catching something)
|[[File:Image555999.png|thumb|154x154px]]
|-
|habitual
|xaeneld'eb'
|I hunt
|[[File:Image555.png|thumb|113x113px]]
|}

[[Category:Aelaki]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>drfcsy4cmi0uzrmilb1d8lfbtu7xtre</sha1>
    </revision>
  </page>
  <page>
    <title>File:Image6.png</title>
    <ns>6</ns>
    <id>10287</id>
    <revision>
      <id>165508</id>
      <parentid>165383</parentid>
      <timestamp>2025-08-05T01:04:34Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165508</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="93" sha1="foshj66x9fxayqybnex1jdm32k3elsp" xml:space="preserve">6

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>foshj66x9fxayqybnex1jdm32k3elsp</sha1>
    </revision>
  </page>
  <page>
    <title>File:Image5.png</title>
    <ns>6</ns>
    <id>10288</id>
    <revision>
      <id>165504</id>
      <parentid>165382</parentid>
      <timestamp>2025-08-05T01:04:34Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165504</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="93" sha1="cvt2j7amywwdtepbrurc416diovo1gr" xml:space="preserve">5

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>cvt2j7amywwdtepbrurc416diovo1gr</sha1>
    </revision>
  </page>
  <page>
    <title>File:First and second person pronouns.png</title>
    <ns>6</ns>
    <id>10324</id>
    <revision>
      <id>165506</id>
      <parentid>165371</parentid>
      <timestamp>2025-08-05T01:04:34Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165506</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="124" sha1="rs47m8ugnibg5gwwwlf2v2f5b8tfvx2" xml:space="preserve">first and second person pronouns

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>rs47m8ugnibg5gwwwlf2v2f5b8tfvx2</sha1>
    </revision>
  </page>
  <page>
    <title>Habitual form</title>
    <ns>0</ns>
    <id>10568</id>
    <revision>
      <id>165507</id>
      <parentid>165354</parentid>
      <timestamp>2025-08-05T01:04:34Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Aelaki]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165507</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="209" sha1="5isfztwy1lv314zqy4r66856nsorf6x" xml:space="preserve">The habitual form is one of the base forms of an Aelaki verb. It is indicated by voicing the final consonant in the root

[[Category:Aelaki]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>5isfztwy1lv314zqy4r66856nsorf6x</sha1>
    </revision>
  </page>
  <page>
    <title>Aelaki roots</title>
    <ns>0</ns>
    <id>10571</id>
    <revision>
      <id>165505</id>
      <parentid>165349</parentid>
      <timestamp>2025-08-05T01:04:34Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Aelaki]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165505</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1962" sha1="bt1tlwb6wyw00kz3ap7ylo7zsh9ad6j" xml:space="preserve">Aelaki roots go through the following transitions as they become more independent things

== Root etymologies ==
{| class="wikitable"
|+
! rowspan="3" |Proto-Aelaki
! rowspan="3" |Modern "root"
! rowspan="3" |Meaning
! rowspan="3" |Example proto
! rowspan="3" |Example modern
! colspan="7" |Verb
|-
! colspan="4" |Singular
! colspan="2" |Plural
!Collective
|-
!Present
!Present 2
!Inferential 
!Auditory
!Present
!Past
!
|-
|CV
|Ch-V-C-P
|illuminate
|ra
|Chi-ih-r-p
|Chirap
|Uchirap
|Uchaghirap
|Uchid'irap
|Chichirap
|
|
|-
|CVC
|Ch-V↑-C-C
|bite
|p'ar
|
|Chihp'ar
|Ichip'ar
|Ichaghip'ar
|Ichid'ip'ar
|Chihchihp'ar
|
|
|-
|CVCV
|C-V-C-P
|move away from
|mb'eund'a
|m'-eu-n'-p
|M'eun'ap
|Im'eun'ap
|Im'agheun'ap
|Im'id'eun
|
|
|
|-
|CVCVC
|C-V-C-C
|give birth
|maexel
|m-ae-x-l
|Maexel
|Imaexel
|Imaghaexel
|Imid'aexel
|
|
|
|-
|VC
|Ch-V↑-C-P
|eat
|upf
|Ch-u-pf-p
|Chupfap
|Uchupfap
|Uchaghupfap
|Uchud'upfap
|
|
|
|-
|VCV
|Ch-V↑-C-P
|go
|Uchi
|Ch-i-ch-p
|Chichip
|Ichichip
|Ichaghichip
|Ichud'ichip
|
|
|
|-
|VCVC
|Ch-V↑-C-C
|suck
|euvel
|Ch-eu-v-l
|Cheuvel
|Ucheuvel
|Uchagheuvel
|Uchud'euvel
|
|
|
|-
| colspan="2" |C-V-C-Ñ (no common etymology)
|Swim
| colspan="2" |z-ae-k-n
|Zaeken
|Izaeken
|Izaghaeken
|Izud'aeken
|Zaezaeken
|
|Zaeki
|-
| colspan="2" |C-V-C-?  (no common etymology, ?=click)
|Grab
| colspan="2" |L-o-m-t'
|Lomet'e
|Ilomet'e
|Ilaghomet'e
|Ilud'omet'e
|
|
|
|}
↑ indicates a raising and fronting of the vowel

Present 2 is basically present tense. Used identically but with more of an emphasis on present

Because vowel harmony frequently changes the frontness/backness, this means the raising is most consequential

== Synchronic behavior ==
Roots have one vowel built into them. The dictionary form of a root goes as follows 

Chichip (ch-i-ch-p)

Vikit'i (v-i-k-t')

This is the infinitive form of verbs, and is a relatively late addition.

[[Category:Aelaki]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>bt1tlwb6wyw00kz3ap7ylo7zsh9ad6j</sha1>
    </revision>
  </page>
  <page>
    <title>File:Image7.png</title>
    <ns>6</ns>
    <id>10289</id>
    <revision>
      <id>165510</id>
      <parentid>165384</parentid>
      <timestamp>2025-08-05T01:04:35Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165510</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="93" sha1="gceobly0r3rwtko7c64s9inn925iqt6" xml:space="preserve">7

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>gceobly0r3rwtko7c64s9inn925iqt6</sha1>
    </revision>
  </page>
  <page>
    <title>File:Image8.png</title>
    <ns>6</ns>
    <id>10290</id>
    <revision>
      <id>165511</id>
      <parentid>165385</parentid>
      <timestamp>2025-08-05T01:04:35Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165511</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="93" sha1="k7jelsig5orty4tayha8pi2ova3733z" xml:space="preserve">8

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>k7jelsig5orty4tayha8pi2ova3733z</sha1>
    </revision>
  </page>
  <page>
    <title>File:Image9.png</title>
    <ns>6</ns>
    <id>10291</id>
    <revision>
      <id>165512</id>
      <parentid>165386</parentid>
      <timestamp>2025-08-05T01:04:35Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165512</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="93" sha1="p76fmgstyr5ba52blnedcfxdpujf6k8" xml:space="preserve">9

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>p76fmgstyr5ba52blnedcfxdpujf6k8</sha1>
    </revision>
  </page>
  <page>
    <title>Collective</title>
    <ns>0</ns>
    <id>10479</id>
    <revision>
      <id>165509</id>
      <parentid>165352</parentid>
      <timestamp>2025-08-05T01:04:34Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Aelaki]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165509</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1084" sha1="9fvydl46f2c7i6b9wv2javsn5gf6x9a" xml:space="preserve">[[Category:Aelaki]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]
In [[Aelaki]] the collective is a level of plurality one step above the [[Aelaki plural|plural]]. 

Collective is marked by a voicing of the last consonant if it is not a nasal, and the deletion of the last consonant if it is a nasal. 

If the noun ends with a vowel a -b is added to the end of it.

It is also marked by the fronting of all vowels, and the raising of the last vowel. 

It is not to be confused with the similarly appearing [[habitual form]] of verbs which also involves voicing the last consonant, albeit for completely different historical reasons (it came from a phenomenon in old reduplication used to indicate pluractionality vs a new reduplication used for subject verb agreement).

The collective originally developed from the dual form suffix -bel but many phonetic changes caused it to eventually become completely non-concatenative.

==Evolution==

gak-bel -&gt; gakel -&gt; gaki -&gt; gek

gan-bel -&gt; ganel -&gt; gãl -&gt; gãi -&gt; ge

musu-bel -&gt; musubel -&gt; musubi -&gt; misibi -&gt; misib</text>
      <sha1>9fvydl46f2c7i6b9wv2javsn5gf6x9a</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imageaa.png</title>
    <ns>6</ns>
    <id>10277</id>
    <revision>
      <id>165513</id>
      <parentid>165387</parentid>
      <timestamp>2025-08-05T01:04:36Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165513</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" sha1="q9yaaervcahs1ulxbnmbngbwzz67hod" xml:space="preserve">aa

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>q9yaaervcahs1ulxbnmbngbwzz67hod</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imageaaaa.png</title>
    <ns>6</ns>
    <id>10282</id>
    <revision>
      <id>165514</id>
      <parentid>165388</parentid>
      <timestamp>2025-08-05T01:04:36Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165514</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="96" sha1="1te69jy20jmbjlf8587576im1bh2plh" xml:space="preserve">aaaa

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>1te69jy20jmbjlf8587576im1bh2plh</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imageanger.png</title>
    <ns>6</ns>
    <id>10299</id>
    <revision>
      <id>165515</id>
      <parentid>165389</parentid>
      <timestamp>2025-08-05T01:04:37Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165515</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="107" sha1="t9uluqwpxc97xsgnt18lojvkblnw78z" xml:space="preserve">Anger character

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>t9uluqwpxc97xsgnt18lojvkblnw78z</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagebe.png</title>
    <ns>6</ns>
    <id>10300</id>
    <revision>
      <id>165516</id>
      <parentid>165390</parentid>
      <timestamp>2025-08-05T01:04:37Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165516</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="110" sha1="s51vqchwrw2lz3cjp4xtr5hp1zu84mt" xml:space="preserve">top be, the copula

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>s51vqchwrw2lz3cjp4xtr5hp1zu84mt</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagebhi.png</title>
    <ns>6</ns>
    <id>10308</id>
    <revision>
      <id>165517</id>
      <parentid>165391</parentid>
      <timestamp>2025-08-05T01:04:37Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165517</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="95" sha1="dlzyczhpm5mqvomermz85dwrdu3hbsv" xml:space="preserve">bhi

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>dlzyczhpm5mqvomermz85dwrdu3hbsv</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagecdf.png</title>
    <ns>6</ns>
    <id>10268</id>
    <revision>
      <id>165520</id>
      <parentid>165393</parentid>
      <timestamp>2025-08-05T01:04:38Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165520</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="100" sha1="5q4pxcgys1yz2dhkpwa1pwf48xpgafs" xml:space="preserve">Imagecdf

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>5q4pxcgys1yz2dhkpwa1pwf48xpgafs</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagechi.png</title>
    <ns>6</ns>
    <id>10314</id>
    <revision>
      <id>165521</id>
      <parentid>165394</parentid>
      <timestamp>2025-08-05T01:04:38Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165521</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="95" sha1="o3bl66kedcthzzk19zhlugbu5bkmtsn" xml:space="preserve">chi

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>o3bl66kedcthzzk19zhlugbu5bkmtsn</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagecc.png</title>
    <ns>6</ns>
    <id>10319</id>
    <revision>
      <id>165518</id>
      <parentid>165392</parentid>
      <timestamp>2025-08-05T01:04:38Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165518</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" sha1="op8rg3dxg8a89kd8qs4s92d575gmv3f" xml:space="preserve">cc

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>op8rg3dxg8a89kd8qs4s92d575gmv3f</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Sexagenary cycle</title>
    <ns>10</ns>
    <id>17285</id>
    <revision>
      <id>165519</id>
      <parentid>165448</parentid>
      <timestamp>2025-08-05T01:04:37Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Adding [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165519</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="14285" sha1="2zwzdk24n8tpmih7q0vcswqxcw1p29q" xml:space="preserve">{| class="wikitable alternance droite"
!colspan="12" style="background:#ccccff"|'''[[Sexagenary cycle]]'''&lt;br /&gt;'''{{lang|zh-Hant|干支}}'''
|-
!Yang
!Yin
!Yang
!Yin
!Yang
!Yin
!Yang
!Yin
!Yang
!Yin
!Yang
!Yin
|-
! style="background:green;color:white;"! colspan="2" |[[:en:Wood_(wuxing)|Wood (木)]]
! style="background:red;color:white;"! colspan="2" |[[:en:Fire_(wuxing)|Fire (火)]]
! style="background:orange;color:white;"! colspan="2" |[[:en:Earth_(wuxing)|Earth (土)]]
! style="background:gray;color:white;"! colspan="2" |[[:en:Metal_(wuxing)|Metal (金)]]
! style="background:blue;color:white;"! colspan="2" |[[:en:Water_(wuxing)|Water (水)]]
! style="background:green;color:white;"! colspan="2" |[[:en:Wood_(wuxing)|Wood (木)]]
|-
! colspan="12" |[[Earthly Branches]]
|-
! [[Rat (zodiac)|Rat (鼠)]]
! [[Ox (zodiac)|Ox (牛)]]
! [[Tiger (zodiac)|Tiger (虎)]]
! [[Rabbit (zodiac)|Rabbit (兔)]]
! [[Dragon (zodiac)|Dragon (龍)]]
! [[Snake (zodiac)|Snake (蛇)]]
! [[Horse (zodiac)|Horse (馬)]]
! [[Goat (zodiac)|Goat (羊)]]
! [[Monkey (zodiac)|Monkey (猴)]]
! [[Rooster (zodiac)|Rooster (雞)]]
! [[Dog (zodiac)|Dog (狗)]]
! [[Pig (zodiac)|Pig (豬)]]
|-
! colspan="10" |[[Heavenly Stems]]
! colspan="2" |repeating [[Heavenly Stems|stems]]
|-style="text-align:center;font-size:80%"
! style="border:5px solid #a3d977;" | {{ill|Kinoe (甲)|lt=Kinoe (甲)|cdo|Gák (tiĕng-găng)|fr|Jiagan|hak|Kap (thiên-kôn)|ja|Kinoe|ko|갑 (천간)|vi|Giáp (Thiên can)|za|Gyap (diengan)|zh_classical|甲|zh_min_nan|Kah (Thian-kan)|zh_yue|甲 (天干)|zh|甲 (天干)}}
! style="border:5px solid #8bbf6e;" | {{ill|Kinoto (乙)|lt=Kinoto (乙)|cdo|Ék (tiĕng-găng)|fr|Yi (tige céleste)|gan|乙|hak|Yet (thiên-kôn)|ja|Kinoto|ko|을|vi|Ất|za|Iet (diengan)|zh_min_nan|It (Thian-kan)|zh_yue|乙|zh|乙}}
! style="border:5px solid #e77c7c;" | {{ill|Hinoe (丙)|lt=Hinoe (丙)|cdo|Bīng (tiĕng-găng)|fr|Bing (tige céleste)|gan|丙|hak|Piáng (thiên-kôn)|ja|Hinoe|ko|병 (천간)|vi|Bính|za|Bingj (diengan)|zh_classical|丙|zh_min_nan|Piáⁿ (Thian-kan)|zh_yue|丙|zh|丙}}
! style="border:5px solid #c66666;" | {{ill|Hinoto (丁)|lt=Hinoto (丁)|cdo|Dĭng (tiĕng-găng)|fr|Ding (tige céleste)|gan|丁|hak|Tên (thiên-kôn)|ja|Hinoto|ko|정 (천간)|vi|Đinh (Thiên can)|za|Ding (diengan)|zh_classical|丁|zh_min_nan|Teng (Thian-kan)|zh_yue|丁|zh|丁 (天干)}}
! style="border:5px solid #f4a460;" | {{ill|Tsuchinoe (戊)|lt=Tsuchinoe (戊)|cdo|Muô (tiĕng-găng)|fr|Wu (tige céleste)|gan|戊|hak|Vú (thiên-kôn)|ja|Tsuchinoe|ko|무 (천간)|vi|Mậu (Thiên can)|za|Fouh (diengan)|zh_min_nan|Bō͘ (Thian-kan)|zh_yue|戊|zh|戊}}
! style="border:5px solid #d08d52;" | {{ill|Tsuchinoto (己)|lt=Tsuchinoto (己)|cdo|Gī (tiĕng-găng)|fr|Ji (tige céleste)|gan|己|hak|Kí (thiên-kôn)|ja|Tsuchinoto|ko|기 (천간)|vi|Kỷ (Thiên can)|za|Geij (diengan)|zh_min_nan|Kí (Thian-kan)|zh_yue|己 (天干)|zh|己 (天干)}}
! style="border:5px solid #b0b0b0;" | {{ill|Kanoe (庚)|lt=Kanoe (庚)|cdo|Gĕng (tiĕng-găng)|fr|Genggan|gan|庚|hak|Kâng (thiên-kôn)|ja|Kanoe|ko|경 (천간)|vi|Canh (Thiên can)|za|Geng (diengan)|zh_min_nan|Keⁿ (Thian-kan)|zh_yue|庚 (天干)|zh|庚}}
! style="border:5px solid #999999;" | {{ill|Kanoto (辛)|lt=Kanoto (辛)|cdo|Sĭng (tiĕng-găng)|fr|Xin (tige céleste)|gan|辛|hak|Sîn (thiên-kôn)|ja|Kanoto|ko|신 (천간)|vi|Tân (Thiên can)|za|Sin (diengan)|zh_min_nan|Sin (Thian-kan)|zh_yue|辛 (天干)|zh|辛 (天干)}}
! style="border:5px solid #7ec0ee;" | {{ill|Mizunoe (壬)|lt=Mizunoe (壬)|cdo|Ìng (tiĕng-găng)|fr|Ren (tige céleste)|gan|壬|hak|Ngìm (thiên-kôn)|ja|Mizunoe|ko|임 (천간)|vi|Nhâm (Thiên can)|za|Nyaemz (diengan)|zh_min_nan|Jîm (Thian-kan)|zh_yue|壬 (天干)|zh|壬}}
! style="border:5px solid #6ba8cc;" | {{ill|Mizunoto (癸)|lt=Mizunoto (癸)|cdo|Gŭi (tiĕng-găng)|fr|Gui (tige céleste)|gan|癸|hak|Kui (thiên-kôn)|ja|Mizunoto|ko|계 (천간)|vi|Quý (Thiên can)|wuu|癸|za|Gveiq (diengan)|zh_min_nan|Kúi (Thian-kan)|zh_yue|癸|zh|癸}}
! style="border:5px solid #a3d977;" | {{ill|Kinoe (甲)|lt=Kinoe (甲)|cdo|Gák (tiĕng-găng)|fr|Jiagan|hak|Kap (thiên-kôn)|ja|Kinoe|ko|갑 (천간)|vi|Giáp (Thiên can)|za|Gyap (diengan)|zh_classical|甲|zh_min_nan|Kah (Thian-kan)|zh_yue|甲 (天干)|zh|甲 (天干)}}
! style="border:5px solid #8bbf6e;" | {{ill|Kinoto (乙)|lt=Kinoto (乙)|cdo|Ék (tiĕng-găng)|fr|Yi (tige céleste)|gan|乙|hak|Yet (thiên-kôn)|ja|Kinoto|ko|을|vi|Ất|za|Iet (diengan)|zh_min_nan|It (Thian-kan)|zh_yue|乙|zh|乙}}
|- style="text-align:center;font-size:80%"
| style="border:5px solid #8bbf6e;"| {{ill|Yang Wood Rat|ja|甲子|zh|甲子|ko|갑자|lt_ko=갑자|fr|Rat de bois|de|Holz-Ratte|en|Wood Rat}}-1984
| style="border:5px solid #8bbf6e;"| {{ill|Yin Wood Ox|ja|乙丑|zh|乙丑|ko|을축|lt_ko=을축|fr|Buffle de bois|de|Holz-Büffel|en}}-1985
| style="border:5px solid #e77c7c;"| {{ill|Yang Fire Tiger|ja|丙寅|zh|丙寅|ko|병인|lt_ko=병인|fr|Tigre de feu|de|Feuer-Tiger|en}}-1986
| style="border:5px solid #c66666;"| {{ill|Yin Fire Rabbit|ja|丁卯|zh|丁卯|ko|정묘|lt_ko=정묘|fr|Lièvre de feu|de|Feuer-Hase|en}}-1987
| style="border:5px solid #f4a460;"| {{ill|Yang Earth Dragon|ja|戊辰|zh|戊辰|ko|무진 (간지)|lt_ko=무진|fr|Dragon de terre|de|Erde-Drache|en}}-1988
| style="border:5px solid #d08d52;"| {{ill|Yin Earth Snake|ja|己巳|zh|己巳|ko|기사 (간지)|lt_ko=기사|fr|Serpent de terre|de|Erde-Schlange|en}}-1989
| style="border:5px solid #b0b0b0;"| {{ill|Yang Metal Horse|ja|庚午|zh|庚午|ko|경오|lt_ko=경오|fr|Cheval de métal|de|Metall-Pferd|en}}-1990
| style="border:5px solid #999999;"| {{ill|Yin Metal Goat|ja|辛未|zh|辛未|ko|신미 (간지)|lt_ko=신미|fr|Chèvre de métal|de|Metall-Schaf|en}}-1991
| style="border:5px solid #7ec0ee;"| {{ill|Yang Water Monkey|ja|壬申|zh|壬申|ko|임신 (간지)|lt_ko=임신|fr|Singe de eau|de|Wasser-Affe|en}}-1992
| style="border:5px solid #6ba8cc;"| {{ill|Yin Water Rooster|ja|癸酉|zh|癸酉|ko|계유|lt_ko=계유|fr|Coq de eau|de|Wasser-Hahn|en}}-1993
| style="border:5px solid #8bbf6e;"| {{ill|Yang Wood Dog|ja|甲戌|zh|甲戌|ko|갑술|lt_ko=갑술|fr|Chien de bois|de|Holz-Hund|en}}-1994
| style="border:5px solid #8bbf6e;"| {{ill|Yin Wood Pig|ja|乙亥|zh|乙亥|ko|을해|lt_ko=을해|fr|Cochon de bois|de|Holz-Schwein|en}}-1995
|- style="text-align:center;font-size:80%"
| style="border:5px solid #e77c7c;"| {{ill|Yang Fire Rat|ja|丙子|zh|丙子|ko|병자|lt_ko=병자|fr|Rat de feu|de|Feuer-Ratte|en}}-1996
| style="border:5px solid #c66666;"| {{ill|Yin Fire Ox|ja|丁丑|zh|丁丑|ko|정축|lt_ko=정축|fr|Buffle de feu|de|Feuer-Büffel|en}}-1997
| style="border:5px solid #f4a460;"| {{ill|Yang Earth Tiger|ja|戊寅|zh|戊寅|ko|무인 (간지)|lt_ko=무인|fr|Tigre de terre|de|Erde-Tiger|en}}-1998
| style="border:5px solid #d08d52;"| {{ill|Yin Earth Rabbit|ja|己卯|zh|己卯|ko|기묘|lt_ko=기묘|fr|Lièvre de terre|de|Erde-Hase|en}}-1999
| style="border:5px solid #b0b0b0;"| {{ill|Yang Metal Dragon|ja|庚辰|zh|庚辰|ko|경진|lt_ko=경진|fr|Dragon de métal|de|Metall-Drache|en}}-2000
| style="border:5px solid #999999;"| {{ill|Yin Metal Snake|ja|辛巳|zh|辛巳|ko|신사 (간지)|lt_ko=신사|fr|Serpent de métal|de|Metall-Schlange|en}}-2001
| style="border:5px solid #7ec0ee;"| {{ill|Yang Water Horse|ja|壬午|zh|壬午|ko|임오|lt_ko=임오|fr|Cheval de eau|de|Wasser-Pferd|en}}-2002
| style="border:5px solid #6ba8cc;"| {{ill|Yin Water Goat|ja|癸未|zh|癸未|ko|계미|lt_ko=계미|fr|Chèvre de eau|de|Wasser-Schaf|en}}-2003
| style="border:5px solid #8bbf6e;"| {{ill|Yang Wood Monkey|ja|甲申|zh|甲申|ko|갑신|lt_ko=갑신|fr|Singe de bois|de|Holz-Affe|en}}-2004
| style="border:5px solid #8bbf6e;"| {{ill|Yin Wood Rooster|ja|乙酉|zh|乙酉|ko|을유|lt_ko=을유|fr|Coq de bois|de|Holz-Hahn|en}}-2005
| style="border:5px solid #e77c7c;"| {{ill|Yang Fire Dog|ja|丙戌|zh|丙戌|ko|병술|lt_ko=병술|fr|Chien de feu|de|Feuer-Hund|en}}-2006
| style="border:5px solid #c66666;"| {{ill|Yin Fire Pig|ja|丁亥|zh|丁亥|ko|정해|lt_ko=정해|fr|Cochon de feu|de|Feuer-Schwein|en}}-2007
|- style="text-align:center;font-size:80%"
| style="border:5px solid #f4a460;"| {{ill|Yang Earth Rat|ja|戊子|zh|戊子|ko|무자|lt_ko=무자|fr|Rat de terre|de|Erde-Ratte|en}}-2008
| style="border:5px solid #d08d52;"| {{ill|Yin Earth Ox|ja|己丑|zh|己丑|ko|기축|lt_ko=기축|fr|Buffle de terre|de|Erde-Büffel|en}}-2009
| style="border:5px solid #b0b0b0;"| {{ill|Yang Metal Tiger|ja|庚寅|zh|庚寅|ko|경인|lt_ko=경인|fr|Tigre de métal|de|Metall-Tiger|en}}-2010
| style="border:5px solid #999999;"| {{ill|Yin Metal Rabbit|ja|辛卯|zh|辛卯|ko|신묘|lt_ko=신묘|fr|Lièvre de métal|de|Metall-Hase|en}}-2011
| style="border:5px solid #7ec0ee;"| {{ill|Yang Water Dragon|ja|壬辰|zh|壬辰|ko|임진|lt_ko=임진|fr|Dragon de eau|de|Wasser-Drache|en}}-2012
| style="border:5px solid #6ba8cc;"| {{ill|Yin Water Snake|ja|癸巳|zh|癸巳|ko|계사 (간지)|lt_ko=계사|fr|Serpent de eau|de|Wasser-Schlange|en}}-2013
| style="border:5px solid #8bbf6e;"| {{ill|Yang Wood Horse|ja|甲午|zh|甲午|ko|갑오|lt_ko=갑오|fr|Cheval de bois|de|Holz-Pferd|en}}-2014
| style="border:5px solid #8bbf6e;"| {{ill|Yin Wood Goat|ja|乙未|zh|乙未|ko|을미|lt_ko=을미|fr|Chèvre de bois|de|Holz-Schaf|en}}-2015
| style="border:5px solid #e77c7c;"| {{ill|Yang Fire Monkey|ja|丙申|zh|丙申|ko|병신|lt_ko=병신|fr|Singe de feu|de|Feuer-Affe|en}}-2016
| style="border:5px solid #c66666;"| {{ill|Yin Fire Rooster|ja|丁酉|zh|丁酉|ko|정유 (간지)|lt_ko=정유|fr|Coq de feu|de|Feuer-Hahn|en}}-2017
| style="border:5px solid #f4a460;"| {{ill|Yang Earth Dog|ja|戊戌|zh|戊戌|ko|무술 (간지)|lt_ko=무술|fr|Chien de terre|de|Erde-Hund|en}}-2018
| style="border:5px solid #d08d52;"| {{ill|Yin Earth Pig|ja|己亥|zh|己亥|ko|기해|lt_ko=기해|fr|Cochon de terre|de|Erde-Schwein|en}}-2019
|- style="text-align:center;font-size:80%"
| style="border:5px solid #b0b0b0;"| {{ill|Yang Metal Rat|ja|庚子|zh|庚子|ko|경자|lt_ko=경자|fr|Rat de métal|de|Metall-Ratte|en}}-2020
| style="border:5px solid #999999;"| {{ill|Yin Metal Ox|ja|辛丑|zh|辛丑|ko|신축|lt_ko=신축|fr|Buffle de métal|de|Metall-Büffel|en}}-2021
| style="border:5px solid #7ec0ee;"| {{ill|Yang Water Tiger|ja|壬寅|zh|壬寅|ko|임인|lt_ko=임인|fr|Tigre de eau|de|Wasser-Tiger|en}}-2022
| style="border:5px solid #6ba8cc;"| {{ill|Yin Water Rabbit|ja|癸卯|zh|癸卯|ko|계묘|lt_ko=계묘|fr|Lièvre de eau|de|Wasser-Hase|en}}-2023
| style="border:5px solid #8bbf6e;"| {{ill|Yang Wood Dragon|ja|甲辰|zh|甲辰|ko|갑진|lt_ko=갑진|fr|Dragon de bois|de|Holz-Drache|en}}-2024
| style="border:5px solid #8bbf6e;"| {{ill|Yin Wood Snake|ja|乙巳|zh|乙巳|ko|을사|lt_ko=을사|fr|Serpent de bois|de|Holz-Schlange|en}}-2025
| style="border:5px solid #e77c7c;"| {{ill|Yang Fire Horse|ja|丙午|zh|丙午|ko|병오|lt_ko=병오|fr|Cheval de feu|de|Feuer-Pferd|en|Fire Horse}}-2026
| style="border:5px solid #c66666;"| {{ill|Yin Fire Goat|ja|丁未|zh|丁未|ko|정미|lt_ko=정미|fr|Chèvre de feu|de|Feuer-Schaf|en}}-2027
| style="border:5px solid #f4a460;"| {{ill|Yang Earth Monkey|ja|戊申|zh|戊申|ko|무신 (간지)|lt_ko=무신|fr|Singe de terre|de|Erde-Affe|en}}-2028
| style="border:5px solid #d08d52;"| {{ill|Yin Earth Rooster|ja|己酉|zh|己酉|ko|기유|lt_ko=기유|fr|Coq de terre|de|Erde-Hahn|en}}-2029
| style="border:5px solid #b0b0b0;"| {{ill|Yang Metal Dog|ja|庚戌|zh|庚戌|ko|경술|lt_ko=경술|fr|Chien de métal|de|Metall-Hund|en}}-2030
| style="border:5px solid #999999;"| {{ill|Yin Metal Pig|ja|辛亥|zh|辛亥|ko|신해|lt_ko=신해|fr|Cochon de métal|de|Metall-Schwein|en}}-2031
|- style="text-align:center;font-size:80%"
| style="border:5px solid #7ec0ee;"| {{ill|Yang Water Rat|ja|壬子|zh|壬子|ko|임자|lt_ko=임자|fr|Rat de eau|de|Wasser-Ratte|en}}-2032
| style="border:5px solid #6ba8cc;"| {{ill|Yin Water Ox|ja|癸丑|zh|癸丑|ko|계축|lt_ko=계축|fr|Buffle de eau|de|Wasser-Büffel|en}}-2033
| style="border:5px solid #8bbf6e;"| {{ill|Yang Wood Tiger|ja|甲寅|zh|甲寅|ko|갑인|lt_ko=갑인|fr|Tigre de bois|de|Holz-Tiger|en}}-2034
| style="border:5px solid #8bbf6e;"| {{ill|Yin Wood Rabbit|ja|乙卯|zh|乙卯|ko|을묘|lt_ko=을묘|fr|Lièvre de bois|de|Holz-Hase|en}}-2035
| style="border:5px solid #e77c7c;"| {{ill|Yang Fire Dragon|ja|丙辰|zh|丙辰|ko|병진 (간지)|lt_ko=병진|fr|Dragon de feu|de|Feuer-Drache|en}}-2036
| style="border:5px solid #c66666;"| {{ill|Yin Fire Snake|ja|丁巳|zh|丁巳|ko|정사 (간지)|lt_ko=정사|fr|Serpent de feu|de|Feuer-Schlange|en}}-2037
| style="border:5px solid #f4a460;"| {{ill|Yang Earth Horse|ja|戊午|zh|戊午|ko|무오|lt_ko=무오|fr|Cheval de terre|de|Erde-Pferd|en}}-2038
| style="border:5px solid #d08d52;"| {{ill|Yin Earth Goat|ja|己未|zh|己未|ko|기미|lt_ko=기미|fr|Chèvre de terre|de|Erde-Schaf|en}}-2039
| style="border:5px solid #b0b0b0;"| {{ill|Yang Metal Monkey|ja|庚申|zh|庚申|ko|경신|lt_ko=경신|fr|Singe de métal|de|Metall-Affe|en}}-2040
| style="border:5px solid #999999;"| {{ill|Yin Metal Rooster|ja|辛酉|zh|辛酉|ko|신유|lt_ko=신유|fr|Coq de métal|de|Metall-Hahn|en}}-2041
| style="border:5px solid #7ec0ee;"| {{ill|Yang Water Dog|ja|壬戌|zh|壬戌|ko|임술|lt_ko=임술|fr|Chien de eau|de|Wasser-Hund|en}}-2042
| style="border:5px solid #6ba8cc;"| {{ill|Yin Water Pig|ja|癸亥|zh|癸亥|ko|계해|lt_ko=계해|fr|Cochon de eau|de|Wasser-Schwein|en}}-2043
|}
&lt;noinclude&gt;
[[category:original templates]]
[[Category:Sexagenary cycle]]
[[ja:template:干支]][[de:Vorlage:Ganzhi-1]][[fr:Modèle:Ganzhi]]

==See Also==
* [[Template:Sexagenary cycle]] current english wikipedia one
* [[Template:干支]] current Japanese wikipedia one
* [[Sexagenary cycle german style]]

&lt;/noinclude&gt;

&lt;noinclude&gt;
[[category:original templates]]
[[Category:Sexagenary cycle]]
[[Category:Aelaki book content]]
[[Category:Aelaki book content 2]]
[[ja:template:干支]][[de:Vorlage:Ganzhi-1]][[fr:Modèle:Ganzhi]]

==See Also==
* [[Template:Sexagenary cycle]] current english wikipedia one
* [[Template:干支]] current Japanese wikipedia one
* [[Sexagenary cycle german style]]

&lt;/noinclude&gt;</text>
      <sha1>2zwzdk24n8tpmih7q0vcswqxcw1p29q</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imaged.png</title>
    <ns>6</ns>
    <id>10270</id>
    <revision>
      <id>165522</id>
      <parentid>165395</parentid>
      <timestamp>2025-08-05T01:04:39Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165522</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="93" sha1="do2pb8uh9rpvsnwv3485zefod2wln52" xml:space="preserve">d

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>do2pb8uh9rpvsnwv3485zefod2wln52</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imageddd.png</title>
    <ns>6</ns>
    <id>10272</id>
    <revision>
      <id>165524</id>
      <parentid>165398</parentid>
      <timestamp>2025-08-05T01:04:39Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165524</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="95" sha1="hhtxpq6x3pcytly6yvlrgwnt2qtczq1" xml:space="preserve">ddd

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>hhtxpq6x3pcytly6yvlrgwnt2qtczq1</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imageday.png</title>
    <ns>6</ns>
    <id>10310</id>
    <revision>
      <id>165523</id>
      <parentid>165396</parentid>
      <timestamp>2025-08-05T01:04:39Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165523</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="109" sha1="8k31s0v28qon4855sw0y17mmm0c646p" xml:space="preserve">character for day

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>8k31s0v28qon4855sw0y17mmm0c646p</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagefffffffffff.png</title>
    <ns>6</ns>
    <id>10269</id>
    <revision>
      <id>165527</id>
      <parentid>165400</parentid>
      <timestamp>2025-08-05T01:04:40Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165527</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="100" sha1="qan1dvycc3igx4z1rrdydapbrmsm0xi" xml:space="preserve">ffffffff

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>qan1dvycc3igx4z1rrdydapbrmsm0xi</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagedddddddddd.png</title>
    <ns>6</ns>
    <id>10271</id>
    <revision>
      <id>165525</id>
      <parentid>165399</parentid>
      <timestamp>2025-08-05T01:04:40Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165525</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" sha1="m639isccrkasa76eecdc0fl9s411x2c" xml:space="preserve">dd

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>m639isccrkasa76eecdc0fl9s411x2c</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ten Heavenly Stems and Earthly Branches</title>
    <ns>10</ns>
    <id>17284</id>
    <revision>
      <id>165526</id>
      <parentid>165447</parentid>
      <timestamp>2025-08-05T01:04:40Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Adding [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165526</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4854" sha1="e27wdokxg1z951vb1znafrokwn4cz61" xml:space="preserve">&lt;div&gt;
{| class="wikitable alternance droite"
! colspan="6" |[[Heavenly stems]]
|-
!Element
! colspan="1" style="background:green;color:white;" ! |[[:en:Wood_(wuxing)|Wood (木)]]
! style="background:red;color:white;"! colspan="1" |[[:en:Fire_(wuxing)|Fire (火)]]
! style="background:orange;color:white;"! colspan="1" |[[:en:Earth_(wuxing)|Earth (土)]]
! style="background:gray;color:white;"! colspan="1" |[[:en:Metal_(wuxing)|Metal (金)]]
! style="background:blue;color:white;"! colspan="1" |[[:en:Water_(wuxing)|Water (水)]]
|- style="text-align:center;font-size:80%"
!Yang
! style="border:5px solid #a3d977;" | {{ill|Kinoe (甲)|lt=Kinoe (甲)|cdo|Gák (tiĕng-găng)|fr|Jiagan|hak|Kap (thiên-kôn)|ja|Kinoe|ko|갑 (천간)|vi|Giáp (Thiên can)|za|Gyap (diengan)|zh_classical|甲|zh_min_nan|Kah (Thian-kan)|zh_yue|甲 (天干)|zh|甲 (天干)}}
! style="border:5px solid #e77c7c;" | {{ill|Hinoe (丙)|lt=Hinoe (丙)|cdo|Bīng (tiĕng-găng)|fr|Bing (tige céleste)|gan|丙|hak|Piáng (thiên-kôn)|ja|Hinoe|ko|병 (천간)|vi|Bính|za|Bingj (diengan)|zh_classical|丙|zh_min_nan|Piáⁿ (Thian-kan)|zh_yue|丙|zh|丙}}
! style="border:5px solid #f4a460;" | {{ill|Tsuchinoe (戊)|lt=Tsuchinoe (戊)|cdo|Muô (tiĕng-găng)|fr|Wu (tige céleste)|gan|戊|hak|Vú (thiên-kôn)|ja|Tsuchinoe|ko|무 (천간)|vi|Mậu (Thiên can)|za|Fouh (diengan)|zh_min_nan|Bō͘ (Thian-kan)|zh_yue|戊|zh|戊}}
! style="border:5px solid #b0b0b0;" | {{ill|Kanoe (庚)|lt=Kanoe (庚)|cdo|Gĕng (tiĕng-găng)|fr|Genggan|gan|庚|hak|Kâng (thiên-kôn)|ja|Kanoe|ko|경 (천간)|vi|Canh (Thiên can)|za|Geng (diengan)|zh_min_nan|Keⁿ (Thian-kan)|zh_yue|庚 (天干)|zh|庚}}
! style="border:5px solid #7ec0ee;" | {{ill|Mizunoe (壬)|lt=Mizunoe (壬)|cdo|Ìng (tiĕng-găng)|fr|Ren (tige céleste)|gan|壬|hak|Ngìm (thiên-kôn)|ja|Mizunoe|ko|임 (천간)|vi|Nhâm (Thiên can)|za|Nyaemz (diengan)|zh_min_nan|Jîm (Thian-kan)|zh_yue|壬 (天干)|zh|壬}}
|- style="text-align:center;font-size:80%"
!Yin
! style="border:5px solid #8bbf6e;" | {{ill|Kinoto (乙)|lt=Kinoto (乙)|cdo|Ék (tiĕng-găng)|fr|Yi (tige céleste)|gan|乙|hak|Yet (thiên-kôn)|ja|Kinoto|ko|을|vi|Ất|za|Iet (diengan)|zh_min_nan|It (Thian-kan)|zh_yue|乙|zh|乙}}
! style="border:5px solid #c66666;" | {{ill|Hinoto (丁)|lt=Hinoto (丁)|cdo|Dĭng (tiĕng-găng)|fr|Ding (tige céleste)|gan|丁|hak|Tên (thiên-kôn)|ja|Hinoto|ko|정 (천간)|vi|Đinh (Thiên can)|za|Ding (diengan)|zh_classical|丁|zh_min_nan|Teng (Thian-kan)|zh_yue|丁|zh|丁 (天干)}}
! style="border:5px solid #d08d52;" | {{ill|Tsuchinoto (己)|lt=Tsuchinoto (己)|cdo|Gī (tiĕng-găng)|fr|Ji (tige céleste)|gan|己|hak|Kí (thiên-kôn)|ja|Tsuchinoto|ko|기 (천간)|vi|Kỷ (Thiên can)|za|Geij (diengan)|zh_min_nan|Kí (Thian-kan)|zh_yue|己 (天干)|zh|己 (天干)}}
! style="border:5px solid #999999;" | {{ill|Kanoto (辛)|lt=Kanoto (辛)|cdo|Sĭng (tiĕng-găng)|fr|Xin (tige céleste)|gan|辛|hak|Sîn (thiên-kôn)|ja|Kanoto|ko|신 (천간)|vi|Tân (Thiên can)|za|Sin (diengan)|zh_min_nan|Sin (Thian-kan)|zh_yue|辛 (天干)|zh|辛 (天干)}}
! style="border:5px solid #6ba8cc;" | {{ill|Mizunoto (癸)|lt=Mizunoto (癸)|cdo|Gŭi (tiĕng-găng)|fr|Gui (tige céleste)|gan|癸|hak|Kui (thiên-kôn)|ja|Mizunoto|ko|계 (천간)|vi|Quý (Thiên can)|wuu|癸|za|Gveiq (diengan)|zh_min_nan|Kúi (Thian-kan)|zh_yue|癸|zh|癸}}
|}
{| class="wikitable alternance droite"
! colspan="7" style="background-color:#ddd;" |[[十二支]]
|-
| style="border-right:1px solid #aaa;" |Yang
|[[Rat (zodiac)|Rat (鼠)]]
|[[Tiger (zodiac)|Tiger (虎)]]
|[[Dragon (zodiac)|Dragon (龍)]]
|[[Horse (zodiac)|Horse (馬)]]
|[[Monkey (zodiac)|Monkey (猴)]]
|[[Dog (zodiac)|Dog (狗)]]
|- style="background-color:#eee;"
| style="border-right:1px solid #aaa;" |Yin
|[[Ox (zodiac)|Ox (牛)]]
|[[Rabbit (zodiac)|Rabbit (兔)]]
|[[Snake (zodiac)|Snake (蛇)]]
|[[Goat (zodiac)|Goat (羊)]]
|[[Rooster (zodiac)|Rooster (雞)]]
|[[Pig (zodiac)|Pig (豬)]]
|}
&lt;/div&gt;
&lt;noinclude&gt;
[[category:original templates]]
[[Category:Sexagenary cycle]]
[[ja:Template:十干十二支]][[fr:Modèle:Calendrier chinois]]
[[ja:template:干支]][[de:Vorlage:Ganzhi-1]][[fr:Modèle:Ganzhi]]

==See Also==
* [[Template:Sexagenary cycle]] current english wikipedia one
* [[Template:干支]] current Japanese wikipedia one
* [[Sexagenary cycle german style]]


[[category:original templates]]
[[Category:Sexagenary cycle]]
[[Category:bump February 13, 2025 bump]][[en:Ten Heavenly Stems and Earthly Branches]][[Category:bump February 13, 2025 bump]]
[[Category:Aelaki book content]]
[[Category:Aelaki book content 2]]
[[ja:template:干支]][[de:Vorlage:Ganzhi-1]][[fr:Modèle:Ganzhi]]

==See Also==
* [[Template:Sexagenary cycle]] current english wikipedia one
* [[Template:干支]] current Japanese wikipedia one
* [[Sexagenary cycle german style]]

&lt;/noinclude&gt;</text>
      <sha1>e27wdokxg1z951vb1znafrokwn4cz61</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagegggg.png</title>
    <ns>6</ns>
    <id>10274</id>
    <revision>
      <id>165529</id>
      <parentid>165402</parentid>
      <timestamp>2025-08-05T01:04:41Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165529</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="95" sha1="3hs70x351h55vbcag26icqhs5qdmg1n" xml:space="preserve">ggg

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>3hs70x351h55vbcag26icqhs5qdmg1n</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagefinancl.png</title>
    <ns>6</ns>
    <id>10317</id>
    <revision>
      <id>165528</id>
      <parentid>165401</parentid>
      <timestamp>2025-08-05T01:04:41Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165528</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="104" sha1="ol6eptutani9du0tkphxx4uim0a330e" xml:space="preserve">Imagefinancl

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>ol6eptutani9du0tkphxx4uim0a330e</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagegod.png</title>
    <ns>6</ns>
    <id>10298</id>
    <revision>
      <id>165530</id>
      <parentid>165403</parentid>
      <timestamp>2025-08-05T01:04:42Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165530</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="157" sha1="3b72j8lfkbfwup98h6mk7b51xq1no2w" xml:space="preserve">character for god. Derived from a descent from the rings (heaven)

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>3b72j8lfkbfwup98h6mk7b51xq1no2w</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagehabitual.png</title>
    <ns>6</ns>
    <id>10305</id>
    <revision>
      <id>165531</id>
      <parentid>165404</parentid>
      <timestamp>2025-08-05T01:04:43Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165531</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="107" sha1="rh7ro1wb1xkn0kkvsj93fpzorht8rev" xml:space="preserve">habitual marker

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>rh7ro1wb1xkn0kkvsj93fpzorht8rev</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imageheavy.png</title>
    <ns>6</ns>
    <id>10297</id>
    <revision>
      <id>165532</id>
      <parentid>165405</parentid>
      <timestamp>2025-08-05T01:04:44Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165532</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="155" sha1="mnou3uhvnjd7gf2fbgtmgkl2thzov4s" xml:space="preserve">character for heavy derived from a pictogram of a large pumpkin

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>mnou3uhvnjd7gf2fbgtmgkl2thzov4s</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagehet.png</title>
    <ns>6</ns>
    <id>10306</id>
    <revision>
      <id>165533</id>
      <parentid>165406</parentid>
      <timestamp>2025-08-05T01:04:45Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165533</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="95" sha1="dz4lube8s76oikgb3x4s4twqo3u9n5y" xml:space="preserve">het

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>dz4lube8s76oikgb3x4s4twqo3u9n5y</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagehh.png</title>
    <ns>6</ns>
    <id>10275</id>
    <revision>
      <id>165534</id>
      <parentid>165407</parentid>
      <timestamp>2025-08-05T01:04:46Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165534</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" sha1="0adev3lfpifbaza2kb8qropr9hsm71b" xml:space="preserve">hh

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>0adev3lfpifbaza2kb8qropr9hsm71b</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagehhh.png</title>
    <ns>6</ns>
    <id>10278</id>
    <revision>
      <id>165535</id>
      <parentid>165409</parentid>
      <timestamp>2025-08-05T01:04:47Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165535</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="95" sha1="9cma67g0rvsu7c6jw0ogvgf520fczst" xml:space="preserve">hhh

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>9cma67g0rvsu7c6jw0ogvgf520fczst</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imageinalienableposessive.png</title>
    <ns>6</ns>
    <id>10303</id>
    <revision>
      <id>165536</id>
      <parentid>165410</parentid>
      <timestamp>2025-08-05T01:04:48Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165536</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="283" sha1="2u13yhqcyxrrpc1uh0zy4dvtsacwx2d" xml:space="preserve">inalienable posessive. Character is derived from the tattoos people have on the palms of their hands. This contrasts with the alienable posessive which is derived from a pictogram of a maomao

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>2u13yhqcyxrrpc1uh0zy4dvtsacwx2d</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagejj.png</title>
    <ns>6</ns>
    <id>10276</id>
    <revision>
      <id>165537</id>
      <parentid>165411</parentid>
      <timestamp>2025-08-05T01:04:49Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165537</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" sha1="65hjfidq8qdy430k7mhwlc43n8v6mb7" xml:space="preserve">jj

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>65hjfidq8qdy430k7mhwlc43n8v6mb7</sha1>
    </revision>
  </page>
  <page>
    <title>Ecology of Practices</title>
    <ns>0</ns>
    <id>1717</id>
    <revision>
      <id>165538</id>
      <parentid>165437</parentid>
      <timestamp>2025-08-05T01:04:50Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Adding [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165538</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2175" sha1="q4gau24urbpwvn87lj8kzshdg1rtup9" xml:space="preserve">An ecology of practices is a mutually reinforcing set of activities, practices or [[psychotechnologies]] that catalyze specific steps of [[anagoge]] for a specific individual. Developed through trial, error, reflection and informed by cognitive science.&lt;ref name=":0"&gt;{{Cite web |date=2022-10-11 |title=Glossary of Vervekian terms - Google Docs |url=https://web.archive.org/web/20221011000617/https://docs.google.com/document/d/1FWZSdPa996VseFAJFfQ-Xu4RN_2JoK9V7maoFmzXgaE/edit |access-date=2022-11-01 |website=web.archive.org}}&lt;/ref&gt;

== A successful ecology of practices ==
A successful ecology of practices would allow for an individual to:
*recognize and correct for his or her own [[cognitive biases]], including but not limited to:&lt;ref name=":0" /&gt;
**[[Hyperbolic discounting]], the tendency to find present stimuli much more salient than future stimuli&lt;ref name=":0" /&gt;
**[[Confirmation bia]]s, the tendency to seek out and interpret information that confirms one’s own existing beliefs&lt;ref name=":0" /&gt;
**[[Halo effect]], the tendency for a person's positive or negative traits to "spill over" from one personality area to another in others' perceptions of them&lt;ref name=":0" /&gt;
**[[Loss aversion]], the tendency to prefer avoiding losses rather than  acquiring equivalent gains&lt;ref name=":0" /&gt;
*reduce [[modal confusion]]&lt;ref name=":0" /&gt; 
**[[Consumerism]], advertising and market interests try to convince people (often with great success) to satiate being or [[developmental needs]] by buying things, which would be a solution to a having mode (physical needs) problem.&lt;ref name=":0" /&gt;
* cultivate healthy, sustainable and productive: mindfulness, habits and relationships&lt;ref name=":0" /&gt;
*Avoid [[addiction]] aka [[reciprocal narrowing]]&lt;ref name=":0" /&gt;

== Application in Evolutionism ==
[[Evolutionism]] and the [[Ninefold vaccine]] are intended as means for cultivating an ecology of practices&lt;ref&gt;[[Immanuelle|Immanuelle Leonhart]]&lt;/ref&gt;
[[Category:John Vervaeke]]
[[Category:Ninefold vaccine]]
[[Category:The Pride]]
[[Category:Ecology of Practices]]
[[Category:Aelaki book content]]
[[Category:Aelaki book content 2]]
 
==References==

&lt;references /&gt;</text>
      <sha1>q4gau24urbpwvn87lj8kzshdg1rtup9</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagekkkkkk.png</title>
    <ns>6</ns>
    <id>10281</id>
    <revision>
      <id>165539</id>
      <parentid>165412</parentid>
      <timestamp>2025-08-05T01:04:50Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165539</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="95" sha1="73ewifeiuluwjsd5gm2o9169uuq625u" xml:space="preserve">kkk

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>73ewifeiuluwjsd5gm2o9169uuq625u</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagell.png</title>
    <ns>6</ns>
    <id>10279</id>
    <revision>
      <id>165540</id>
      <parentid>165413</parentid>
      <timestamp>2025-08-05T01:04:51Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165540</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" sha1="4rlmi8kwa674suxkd7ub6c6qudbi9u0" xml:space="preserve">ll

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>4rlmi8kwa674suxkd7ub6c6qudbi9u0</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagelllll.png</title>
    <ns>6</ns>
    <id>10280</id>
    <revision>
      <id>165541</id>
      <parentid>165414</parentid>
      <timestamp>2025-08-05T01:04:52Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165541</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="96" sha1="7dv9m91kbwe0gjwizrs7q5ic7winzpp" xml:space="preserve">llll

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>7dv9m91kbwe0gjwizrs7q5ic7winzpp</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagelong.png</title>
    <ns>6</ns>
    <id>10295</id>
    <revision>
      <id>165542</id>
      <parentid>165415</parentid>
      <timestamp>2025-08-05T01:04:53Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165542</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="141" sha1="3mu2f8v7wwuro2a9ridor00zp6oetxd" xml:space="preserve">character for long., Depiction of a winding river

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>3mu2f8v7wwuro2a9ridor00zp6oetxd</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagepatriarch.png</title>
    <ns>6</ns>
    <id>10302</id>
    <revision>
      <id>165543</id>
      <parentid>165416</parentid>
      <timestamp>2025-08-05T01:04:54Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165543</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="101" sha1="69nsffo941twpb4ssal6y8jinrwxuif" xml:space="preserve">patriarch

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>69nsffo941twpb4ssal6y8jinrwxuif</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagetest sentence.png</title>
    <ns>6</ns>
    <id>10311</id>
    <revision>
      <id>165544</id>
      <parentid>165417</parentid>
      <timestamp>2025-08-05T01:04:55Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165544</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="105" sha1="6tvhcgrdpo8coy91f6kpgpblgjqhrb3" xml:space="preserve">test sentence

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>6tvhcgrdpo8coy91f6kpgpblgjqhrb3</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagevu.png</title>
    <ns>6</ns>
    <id>10315</id>
    <revision>
      <id>165545</id>
      <parentid>165418</parentid>
      <timestamp>2025-08-05T01:04:56Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165545</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" sha1="9z0kaoi5jgj792fdh5k2wz9pwyncf6n" xml:space="preserve">vu

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>9z0kaoi5jgj792fdh5k2wz9pwyncf6n</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagevutree.png</title>
    <ns>6</ns>
    <id>10316</id>
    <revision>
      <id>165546</id>
      <parentid>165419</parentid>
      <timestamp>2025-08-05T01:04:57Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165546</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="195" sha1="ah1dfm752jzoij9x81ugorox4gtf4ch" xml:space="preserve">tree radical on the left, vu radical on the right, indicates this is the tree not the grammatical thing

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>ah1dfm752jzoij9x81ugorox4gtf4ch</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imageyesterday adverb.png</title>
    <ns>6</ns>
    <id>10312</id>
    <revision>
      <id>165547</id>
      <parentid>165421</parentid>
      <timestamp>2025-08-05T01:05:09Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165547</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="114" sha1="iy8hnctr38qi8si7douf68xcn82qy3d" xml:space="preserve">yesterday as an adverb

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>iy8hnctr38qi8si7douf68xcn82qy3d</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imageyesterday.png</title>
    <ns>6</ns>
    <id>10313</id>
    <revision>
      <id>165548</id>
      <parentid>165423</parentid>
      <timestamp>2025-08-05T01:05:09Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165548</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="95" sha1="3hs70x351h55vbcag26icqhs5qdmg1n" xml:space="preserve">ggg

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>3hs70x351h55vbcag26icqhs5qdmg1n</sha1>
    </revision>
  </page>
  <page>
    <title>File:Kxakxa map.svg</title>
    <ns>6</ns>
    <id>10239</id>
    <revision>
      <id>165552</id>
      <parentid>165427</parentid>
      <timestamp>2025-08-05T01:05:10Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165552</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" sha1="iu1syjeik6qy8x2t0izp8eboes94lq4" xml:space="preserve">[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]
map</text>
      <sha1>iu1syjeik6qy8x2t0izp8eboes94lq4</sha1>
    </revision>
  </page>
  <page>
    <title>File:Nine.png</title>
    <ns>6</ns>
    <id>10255</id>
    <revision>
      <id>165551</id>
      <parentid>165432</parentid>
      <timestamp>2025-08-05T01:05:10Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165551</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="96" sha1="keqi6xkk5pxxbyxg033na9r20f70uxx" xml:space="preserve">nine

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>keqi6xkk5pxxbyxg033na9r20f70uxx</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imagewide.png</title>
    <ns>6</ns>
    <id>10296</id>
    <revision>
      <id>165549</id>
      <parentid>165420</parentid>
      <timestamp>2025-08-05T01:05:10Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165549</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="127" sha1="5p3pqmseojr9lazlnfnblqhem0fy635" xml:space="preserve">image for wide t'ægh it means wide

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>5p3pqmseojr9lazlnfnblqhem0fy635</sha1>
    </revision>
  </page>
  <page>
    <title>File:Imageyogurt.png</title>
    <ns>6</ns>
    <id>10301</id>
    <revision>
      <id>165550</id>
      <parentid>165424</parentid>
      <timestamp>2025-08-05T01:05:10Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165550</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="98" sha1="rl13b2mu7jpamawzb16bqt0lnpscvrv" xml:space="preserve">yogurt

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>rl13b2mu7jpamawzb16bqt0lnpscvrv</sha1>
    </revision>
  </page>
  <page>
    <title>File:Ki character development.png</title>
    <ns>6</ns>
    <id>10241</id>
    <revision>
      <id>165555</id>
      <parentid>165425</parentid>
      <timestamp>2025-08-05T01:05:11Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165555</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="178" sha1="sf9ombsw0fsiv1oraz8f2lorjq049f8" xml:space="preserve">Deveklopment of the Ki character from its original form meaning language to the "kana"

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>sf9ombsw0fsiv1oraz8f2lorjq049f8</sha1>
    </revision>
  </page>
  <page>
    <title>File:Nine character.png</title>
    <ns>6</ns>
    <id>10251</id>
    <revision>
      <id>165554</id>
      <parentid>165430</parentid>
      <timestamp>2025-08-05T01:05:11Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165554</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="151" sha1="p3hwb4ye1aa9t955tvul8hggg1u3q8l" xml:space="preserve">Character for nine, representing two threes, or three cubed

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>p3hwb4ye1aa9t955tvul8hggg1u3q8l</sha1>
    </revision>
  </page>
  <page>
    <title>File:Lexicon farm ud.png</title>
    <ns>6</ns>
    <id>10304</id>
    <revision>
      <id>165553</id>
      <parentid>165428</parentid>
      <timestamp>2025-08-05T01:05:11Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165553</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="96" sha1="45bf7a6ffpgfjxmhb9asbxjlph7r7yg" xml:space="preserve">farm

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>45bf7a6ffpgfjxmhb9asbxjlph7r7yg</sha1>
    </revision>
  </page>
  <page>
    <title>File:Noon representation.png</title>
    <ns>6</ns>
    <id>10238</id>
    <revision>
      <id>165558</id>
      <parentid>165433</parentid>
      <timestamp>2025-08-05T01:05:12Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165558</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="171" sha1="3s8j5ikkz6wznv2t6rtxalo80tx45us" xml:space="preserve">sun at the top, shadow at the bottom, opposite of midnight. Could represent day

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>3s8j5ikkz6wznv2t6rtxalo80tx45us</sha1>
    </revision>
  </page>
  <page>
    <title>File:Kxaki.png</title>
    <ns>6</ns>
    <id>10242</id>
    <revision>
      <id>165557</id>
      <parentid>165426</parentid>
      <timestamp>2025-08-05T01:05:12Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165557</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="111" sha1="cfos9g4iwtggszxth3h30yxjpohiw6j" xml:space="preserve">Kxaki in characters

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>cfos9g4iwtggszxth3h30yxjpohiw6j</sha1>
    </revision>
  </page>
  <page>
    <title>File:Number system with alternative glyphs.png</title>
    <ns>6</ns>
    <id>10252</id>
    <revision>
      <id>165560</id>
      <parentid>165434</parentid>
      <timestamp>2025-08-05T01:05:12Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165560</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="308" sha1="2o67imuzp9j9drpmri9udf12nkgtxys" xml:space="preserve">Number system with alternative glyphs

alternative glyphs are below

1-6 are tallies
standard 7 is a rebus
8-9 are reduced tallies
10 is a rebus (two hands, hand dual form)
11 is a rebus (extra)
12 is a rebus (rings)

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>2o67imuzp9j9drpmri9udf12nkgtxys</sha1>
    </revision>
  </page>
  <page>
    <title>File:Male symbol.png</title>
    <ns>6</ns>
    <id>10267</id>
    <revision>
      <id>165556</id>
      <parentid>165429</parentid>
      <timestamp>2025-08-05T01:05:12Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165556</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="114" sha1="gc0z5pechb2ajfjul6p8h8bkn38g9g7" xml:space="preserve">male symbol represents

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>gc0z5pechb2ajfjul6p8h8bkn38g9g7</sha1>
    </revision>
  </page>
  <page>
    <title>Aelaki</title>
    <ns>0</ns>
    <id>17311</id>
    <redirect title="Ngornese" />
    <revision>
      <id>165559</id>
      <parentid>165338</parentid>
      <timestamp>2025-08-05T01:05:12Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Adding [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165559</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="91" sha1="dcl9mfxouxram17wjd8o3grmzlf7902" xml:space="preserve">#REDIRECT [[Ngornese]]

[[Category:Aelaki book content]]
[[Category:Aelaki book content 2]]</text>
      <sha1>dcl9mfxouxram17wjd8o3grmzlf7902</sha1>
    </revision>
  </page>
  <page>
    <title>File:Rings character.png</title>
    <ns>6</ns>
    <id>10226</id>
    <revision>
      <id>165563</id>
      <parentid>165438</parentid>
      <timestamp>2025-08-05T01:05:13Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165563</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="149" sha1="gud7j5d2naivzyme3np1a1gmmzgzetc" xml:space="preserve">Character in the ringworld language representing the rings [[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>gud7j5d2naivzyme3np1a1gmmzgzetc</sha1>
    </revision>
  </page>
  <page>
    <title>File:Regional variants in tallies.png</title>
    <ns>6</ns>
    <id>10237</id>
    <revision>
      <id>165562</id>
      <parentid>165436</parentid>
      <timestamp>2025-08-05T01:05:13Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165562</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="544" sha1="44btfqkacdenva2630w53vezjq9dce8" xml:space="preserve">Regional variants in the tally system. The bottom two are the asymmetrical alternative glyphs that are considered unlucky

Anyone would be embarassed to submit one of the bottom two in their math homework, and especially in a formal document or book. But when keeping tallies people will do it

Northerners consider 4 a more unlucky number, so they tally to make 4 symmetrical, southerners consider 5 a more unlucky number so they use the symmetrical 5

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>44btfqkacdenva2630w53vezjq9dce8</sha1>
    </revision>
  </page>
  <page>
    <title>File:Object marker.png</title>
    <ns>6</ns>
    <id>10307</id>
    <revision>
      <id>165561</id>
      <parentid>165435</parentid>
      <timestamp>2025-08-05T01:05:13Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165561</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="107" sha1="02eebk82hy2v7v8edex9snq8w134cvi" xml:space="preserve">ggggggggggggggg

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>02eebk82hy2v7v8edex9snq8w134cvi</sha1>
    </revision>
  </page>
  <page>
    <title>File:Ringworld character for 2.png</title>
    <ns>6</ns>
    <id>10246</id>
    <revision>
      <id>165564</id>
      <parentid>165439</parentid>
      <timestamp>2025-08-05T01:05:14Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165564</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="117" sha1="agw945mqqewyxmor16tvl1v1wi0oezx" xml:space="preserve">Ringworld character for 2

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>agw945mqqewyxmor16tvl1v1wi0oezx</sha1>
    </revision>
  </page>
  <page>
    <title>File:Ringworld character for 4.png</title>
    <ns>6</ns>
    <id>10247</id>
    <revision>
      <id>165565</id>
      <parentid>165440</parentid>
      <timestamp>2025-08-05T01:05:15Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165565</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="117" sha1="sm4huxow360lvy2manhqhv9ks29p7sw" xml:space="preserve">Ringworld character for 4

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>sm4huxow360lvy2manhqhv9ks29p7sw</sha1>
    </revision>
  </page>
  <page>
    <title>File:Ringworld character for 5.png</title>
    <ns>6</ns>
    <id>10248</id>
    <revision>
      <id>165566</id>
      <parentid>165441</parentid>
      <timestamp>2025-08-05T01:05:16Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165566</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="117" sha1="i45jvwqcmxxcyeyy4feklsrdfy9soiu" xml:space="preserve">Ringworld character for 5

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>i45jvwqcmxxcyeyy4feklsrdfy9soiu</sha1>
    </revision>
  </page>
  <page>
    <title>File:Ringworld character for 6.png</title>
    <ns>6</ns>
    <id>10249</id>
    <revision>
      <id>165567</id>
      <parentid>165442</parentid>
      <timestamp>2025-08-05T01:05:17Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165567</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="117" sha1="l6m3utzlu0v2b0ccm8iq3c8rz9jruuk" xml:space="preserve">Ringworld character for 6

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>l6m3utzlu0v2b0ccm8iq3c8rz9jruuk</sha1>
    </revision>
  </page>
  <page>
    <title>File:Ringworld character for one.png</title>
    <ns>6</ns>
    <id>10245</id>
    <revision>
      <id>165568</id>
      <parentid>165443</parentid>
      <timestamp>2025-08-05T01:05:18Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165568</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="113" sha1="66jizztp0wqkqe13kcjlcz97zg58z5u" xml:space="preserve">pam character for one

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>66jizztp0wqkqe13kcjlcz97zg58z5u</sha1>
    </revision>
  </page>
  <page>
    <title>File:Ringworld map.png</title>
    <ns>6</ns>
    <id>10260</id>
    <revision>
      <id>165569</id>
      <parentid>165444</parentid>
      <timestamp>2025-08-05T01:05:19Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165569</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="105" sha1="nqal7sk970dl0a1x4uwwjlv2k1xtoh6" xml:space="preserve">Ringworld map

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>nqal7sk970dl0a1x4uwwjlv2k1xtoh6</sha1>
    </revision>
  </page>
  <page>
    <title>File:Seven.png</title>
    <ns>6</ns>
    <id>10253</id>
    <revision>
      <id>165570</id>
      <parentid>165445</parentid>
      <timestamp>2025-08-05T01:05:30Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165570</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="97" sha1="9a10l9qoxh0l6x1m4ri788d29ofql7n" xml:space="preserve">seven

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>9a10l9qoxh0l6x1m4ri788d29ofql7n</sha1>
    </revision>
  </page>
  <page>
    <title>File:She character.png</title>
    <ns>6</ns>
    <id>10265</id>
    <revision>
      <id>165571</id>
      <parentid>165450</parentid>
      <timestamp>2025-08-05T01:05:30Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165571</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="105" sha1="3e4q7ck4eg3ea9a4t7ez6jdn1lvuqp4" xml:space="preserve">she character

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>3e4q7ck4eg3ea9a4t7ez6jdn1lvuqp4</sha1>
    </revision>
  </page>
  <page>
    <title>File:Summer.png</title>
    <ns>6</ns>
    <id>10234</id>
    <revision>
      <id>165572</id>
      <parentid>165452</parentid>
      <timestamp>2025-08-05T01:05:31Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165572</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="154" sha1="ixpgtyxj6l95pifzw195xa756xsskdy" xml:space="preserve">Summer hieroglyph. Note the reflection of the sun in the rings

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>ixpgtyxj6l95pifzw195xa756xsskdy</sha1>
    </revision>
  </page>
  <page>
    <title>File:Sunrise.png</title>
    <ns>6</ns>
    <id>10233</id>
    <revision>
      <id>165574</id>
      <parentid>165453</parentid>
      <timestamp>2025-08-05T01:05:45Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165574</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="136" sha1="gudgtvzntacyd1inclye4jlizgj28p3" xml:space="preserve">Opposite of sunset logic viewer facing south

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>gudgtvzntacyd1inclye4jlizgj28p3</sha1>
    </revision>
  </page>
  <page>
    <title>File:Sun behind the rings.png</title>
    <ns>6</ns>
    <id>10235</id>
    <revision>
      <id>165573</id>
      <parentid>165457</parentid>
      <timestamp>2025-08-05T01:05:45Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165573</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="166" sha1="f906av5j0nba364w255l3ygsc7tonhh" xml:space="preserve">representation of the winter time period where the sun is behind the rings

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>f906av5j0nba364w255l3ygsc7tonhh</sha1>
    </revision>
  </page>
  <page>
    <title>File:Sunset.png</title>
    <ns>6</ns>
    <id>10232</id>
    <revision>
      <id>165575</id>
      <parentid>165454</parentid>
      <timestamp>2025-08-05T01:06:35Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165575</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="191" sha1="iodw5jnv36fspb2rywl3l4e4hx315m6" xml:space="preserve">viewer is looking south, to the right an unseen sun is setting, to the right the shadow is emerging

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>iodw5jnv36fspb2rywl3l4e4hx315m6</sha1>
    </revision>
  </page>
  <page>
    <title>File:Tallies 1-6.png</title>
    <ns>6</ns>
    <id>10230</id>
    <revision>
      <id>165579</id>
      <parentid>165455</parentid>
      <timestamp>2025-08-05T01:08:30Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165579</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="126" sha1="bevwwh2o1jkgbvtxbicolwdpfkoietu" xml:space="preserve">Tallies 1-6 in the original script

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>bevwwh2o1jkgbvtxbicolwdpfkoietu</sha1>
    </revision>
  </page>
  <page>
    <title>File:Ten ideogram.png</title>
    <ns>6</ns>
    <id>10250</id>
    <revision>
      <id>165586</id>
      <parentid>165456</parentid>
      <timestamp>2025-08-05T01:08:35Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165586</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="128" sha1="d2ewvlgtqum63icz8jsgh3z5ut5iw1b" xml:space="preserve">ideogram for ten featuring two hands

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>d2ewvlgtqum63icz8jsgh3z5ut5iw1b</sha1>
    </revision>
  </page>
  <page>
    <title>File:Ten.png</title>
    <ns>6</ns>
    <id>10256</id>
    <revision>
      <id>165613</id>
      <parentid>165458</parentid>
      <timestamp>2025-08-05T01:09:35Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165613</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="95" sha1="ogx0ud31q8guudkapzrhoes54xlp588" xml:space="preserve">ten

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>ogx0ud31q8guudkapzrhoes54xlp588</sha1>
    </revision>
  </page>
  <page>
    <title>File:Time and minight tomb script.png</title>
    <ns>6</ns>
    <id>10228</id>
    <revision>
      <id>165633</id>
      <parentid>165459</parentid>
      <timestamp>2025-08-05T01:10:35Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165633</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="90" sha1="h4y4yad0mbd2twgi895takdh76x2r8o" xml:space="preserve">[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>h4y4yad0mbd2twgi895takdh76x2r8o</sha1>
    </revision>
  </page>
  <page>
    <title>File:Tomb script time character.png</title>
    <ns>6</ns>
    <id>10229</id>
    <revision>
      <id>165669</id>
      <parentid>165460</parentid>
      <timestamp>2025-08-05T01:11:35Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165669</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="117" sha1="s4bu60xb1rm3n8o88z4o34yp1ol19au" xml:space="preserve">tomb script time character [[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>s4bu60xb1rm3n8o88z4o34yp1ol19au</sha1>
    </revision>
  </page>
  <page>
    <title>File:Woman character.png</title>
    <ns>6</ns>
    <id>10264</id>
    <revision>
      <id>165699</id>
      <parentid>165462</parentid>
      <timestamp>2025-08-05T01:12:36Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165699</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="188" sha1="lqvm0qlujqs2h105fwmlh4qrjc7jbja" xml:space="preserve">bow and arrow and terraced field representing a woman's role in hunting and terraced agriculture

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>lqvm0qlujqs2h105fwmlh4qrjc7jbja</sha1>
    </revision>
  </page>
  <page>
    <title>File:World house 12.png</title>
    <ns>6</ns>
    <id>10231</id>
    <revision>
      <id>165729</id>
      <parentid>165461</parentid>
      <timestamp>2025-08-05T01:13:35Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Copying from [[Category:Ringworld]] to [[Category:Aelaki book content 2]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165729</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="233" sha1="syav030p10ovrub1halbpspogrloymq" xml:space="preserve">This is the pictogram representing 12 and the rings. It has two arches, compared to one arch representing house. So it is the house of houses

[[Category:Ringworld]]
[[Category:Aelaki book content 2]]
[[Category:Aelaki book content]]</text>
      <sha1>syav030p10ovrub1halbpspogrloymq</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Main other</title>
    <ns>10</ns>
    <id>711</id>
    <revision>
      <id>32059</id>
      <parentid>32058</parentid>
      <timestamp>2022-12-29T17:20:02Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>2 revisions imported: Importing recent [[Minor December Outage]] created pages from Immanuelle wiki. Currently [[December Intermediate Period]] pages are not yet imported, so this may look weird in many ways.</comment>
      <origin>2608</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="422" sha1="fqcj40f1ojeitvtz4m2eefrp1ymhi6o" xml:space="preserve">{{#switch:
  &lt;!--If no or empty "demospace" parameter then detect namespace--&gt;
  {{#if:{{{demospace|}}} 
  | {{lc: {{{demospace}}} }}    &lt;!--Use lower case "demospace"--&gt;
  | {{#ifeq:{{NAMESPACE}}|{{ns:0}}
    | main
    | other
    }} 
  }}
| main     = {{{1|}}}
| other
| #default = {{{2|}}}
}}&lt;noinclude&gt;

{{documentation}}
&lt;!-- Add categories to the /doc subpage; interwikis go to Wikidata, thank you! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>fqcj40f1ojeitvtz4m2eefrp1ymhi6o</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Lang</title>
    <ns>10</ns>
    <id>1092</id>
    <revision>
      <id>40274</id>
      <parentid>40182</parentid>
      <timestamp>2022-12-03T06:36:27Z</timestamp>
      <contributor>
        <username>imported&gt;Immanuelle</username>
        <id>0</id>
      </contributor>
      <minor/>
      <comment>91 revisions imported from [[:wikipedia:Template:Lang]]</comment>
      <origin>19983</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="99" sha1="rpiilobim1eh22a50sfaaeqssz4iwxu" xml:space="preserve">&lt;includeonly&gt;{{#invoke:Lang|{{{fn|lang}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>rpiilobim1eh22a50sfaaeqssz4iwxu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Interlanguage link</title>
    <ns>10</ns>
    <id>865</id>
    <revision>
      <id>132654</id>
      <parentid>132650</parentid>
      <timestamp>2024-02-24T22:41:38Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>2 revisions imported from [[:wikipedia:Template:Interlanguage_link]]</comment>
      <origin>132650</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2643" sha1="8wx3z6if4wsdv830cslico1jn9d3cu3" xml:space="preserve">&lt;includeonly&gt;{{safesubst:#if:{{{quote|}}}{{{quotes|}}}|"}}{{safesubst:#if:{{{italic|}}}{{{italics|}}}|''}}[[{{{1}}}{{safesubst:#if:{{{lt|}}}|{{safesubst:!}}{{{lt}}}}}]]{{safesubst:#if:{{{italic|}}}{{{italics|}}}|&amp;#8202;''}}{{safesubst:#if:{{{quote|}}}{{{quotes|}}}|"}}{{safesubst:#ifeq:{{subst:Substcheck}}|SUBST||&lt;!--
--&gt;{{#if:{{#if:{{{preserve|{{{display|}}}}}}|1|{{#ifexist:{{{1|}}}|{{#invoke:redirect|isRedirect|{{{1|}}}}}|1}}}}&lt;!--
--&gt;
 |&lt;{{#switch:{{{vertical-align|{{{valign|{{{v|}}}}}}}}}|sup|super=sup|sub=sub|span}} class="noprint" style="{{#switch:{{{vertical-align|{{{valign|{{{v|}}}}}}}}}|ib|font-size:100%;|sup|super|sub=|font-size:85%;}} font-style: normal; {{#if:{{{nobold|}}}|font-weight: normal;}}"&gt;&amp;nbsp;&amp;#91;{{#if:{{{WD|{{{wd|}}}}}}
  | [[d:Special:EntityPage/{{{WD|{{{wd}}}}}}#sitelinks-wikipedia|&lt;span title="&amp;quot;{{{1}}}&amp;quot; in other languages"&gt;{{#if:{{{short|{{{s|}}}}}}|d|Wikidata}}&lt;/span&gt;]]&lt;!--
 --&gt;{{main other||{{#if:{{{reasonator|}}}|&lt;nowiki /&gt;; [https://tools.wmflabs.org/reasonator/?q={{urlencode:{{{WD|{{{wd}}}}}}}} Reasonator]}}}}
  | {{Separated entries|separator=;&amp;#32;
    | {{#if:{{{2|}}}|[[:{{{2}}}:{{#if:{{{3|}}}|{{{3}}}|{{{1}}}}}|{{{2}}}]]}}
    | {{#if:{{{4|}}}|[[:{{{4}}}:{{#if:{{{5|}}}|{{{5}}}|{{{1}}}}}|{{{4}}}]]}}
    | {{#if:{{{6|}}}|[[:{{{6}}}:{{#if:{{{7|}}}|{{{7}}}|{{{1}}}}}|{{{6}}}]]}}
    | {{#if:{{{8|}}}{{{10|}}}{{{12|}}}|{{Separated entries|separator=;&amp;#32;
      | {{#if:{{{8|}}}|[[:{{{8}}}:{{#if:{{{9|}}}|{{{9}}}|{{{1}}}}}|{{{8}}}]]}}
      | {{#if:{{{10|}}}|[[:{{{10}}}:{{#if:{{{11|}}}|{{{11}}}|{{{1}}}}}|{{{10}}}]]}}
      | {{#if:{{{12|}}}|[[:{{{12}}}:{{#if:{{{13|}}}|{{{13}}}|{{{1}}}}}|{{{12}}}]]}}
      | {{#if:{{{14|}}}|[[:{{{14}}}:{{#if:{{{15|}}}|{{{15}}}|{{{1}}}}}|{{{14}}}]]}}
      | {{#if:{{{16|}}}|[[:{{{16}}}:{{#if:{{{17|}}}|{{{17}}}|{{{1}}}}}|{{{16}}}]]}}
      | {{#if:{{{18|}}}|[[:{{{18}}}:{{#if:{{{19|}}}|{{{19}}}|{{{1}}}}}|{{{18}}}]]}}
      | {{#if:{{{20|}}}|[[:{{{20}}}:{{#if:{{{21|}}}|{{{21}}}|{{{1}}}}}|{{{20}}}]]}}
      | {{#if:{{{22|}}}|[[:{{{22}}}:{{#if:{{{23|}}}|{{{23}}}|{{{1}}}}}|{{{22}}}]]}}
      | {{#if:{{{24|}}}|[[:{{{24}}}:{{#if:{{{25|}}}|{{{25}}}|{{{1}}}}}|{{{24}}}]]}}
      }}}}
    | {{#if:{{{reasonator|}}}|[https://tools.wmflabs.org/reasonator/test/?find={{urlencode:{{{1}}}}} Reasonator search]}}
    }}}}&amp;#93;&lt;/{{#switch:{{{vertical-align|{{{valign|{{{v|}}}}}}}}}|sup|super=sup|sub=sub|span}}&gt;
 | [[Category:Interlanguage link template existing link]]&lt;nowiki /&gt;
 }}}}&lt;/includeonly&gt;{{main other|{{#if:{{{preserve|{{{display|}}}}}}|[[Category:Interlanguage link template forcing interwiki links]]}}}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>8wx3z6if4wsdv830cslico1jn9d3cu3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Separated entries</title>
    <ns>10</ns>
    <id>866</id>
    <revision>
      <id>41616</id>
      <parentid>41615</parentid>
      <timestamp>2022-12-05T19:39:27Z</timestamp>
      <contributor>
        <username>imported&gt;Immanuelle</username>
        <id>0</id>
      </contributor>
      <minor/>
      <comment>2 revisions imported from [[:wikipedia:Template:Separated_entries]]: Importing wikipedia userpage as it's better than my old user page</comment>
      <origin>9826</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="122" sha1="sfikcojxuyv57vbug2pm3azhx0keatt" xml:space="preserve">{{{{{|safesubst:}}}#invoke:Separated entries|main}}&lt;noinclude&gt;
{{Documentation|Module:Separated entries/doc}}
&lt;/noinclude&gt;</text>
      <sha1>sfikcojxuyv57vbug2pm3azhx0keatt</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Arguments</title>
    <ns>828</ns>
    <id>668</id>
    <revision>
      <id>31986</id>
      <parentid>31985</parentid>
      <timestamp>2022-12-29T17:19:50Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>2 revisions imported: Importing recent [[Minor December Outage]] created pages from Immanuelle wiki. Currently [[December Intermediate Period]] pages are not yet imported, so this may look weird in many ways.</comment>
      <origin>2099</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="10054" sha1="5qx9tzlul9ser30uxj9nbasjt92cevn" xml:space="preserve">-- This module provides easy processing of arguments passed to Scribunto from
-- #invoke. It is intended for use by other Lua modules, and should not be
-- called from #invoke directly.

local libraryUtil = require('libraryUtil')
local checkType = libraryUtil.checkType

local arguments = {}

-- Generate four different tidyVal functions, so that we don't have to check the
-- options every time we call it.

local function tidyValDefault(key, val)
	if type(val) == 'string' then
		val = val:match('^%s*(.-)%s*$')
		if val == '' then
			return nil
		else
			return val
		end
	else
		return val
	end
end

local function tidyValTrimOnly(key, val)
	if type(val) == 'string' then
		return val:match('^%s*(.-)%s*$')
	else
		return val
	end
end

local function tidyValRemoveBlanksOnly(key, val)
	if type(val) == 'string' then
		if val:find('%S') then
			return val
		else
			return nil
		end
	else
		return val
	end
end

local function tidyValNoChange(key, val)
	return val
end

local function matchesTitle(given, title)
	local tp = type( given )
	return (tp == 'string' or tp == 'number') and mw.title.new( given ).prefixedText == title
end

local translate_mt = { __index = function(t, k) return k end }

function arguments.getArgs(frame, options)
	checkType('getArgs', 1, frame, 'table', true)
	checkType('getArgs', 2, options, 'table', true)
	frame = frame or {}
	options = options or {}

	--[[
	-- Set up argument translation.
	--]]
	options.translate = options.translate or {}
	if getmetatable(options.translate) == nil then
		setmetatable(options.translate, translate_mt)
	end
	if options.backtranslate == nil then
		options.backtranslate = {}
		for k,v in pairs(options.translate) do
			options.backtranslate[v] = k
		end
	end
	if options.backtranslate and getmetatable(options.backtranslate) == nil then
		setmetatable(options.backtranslate, {
			__index = function(t, k)
				if options.translate[k] ~= k then
					return nil
				else
					return k
				end
			end
		})
	end

	--[[
	-- Get the argument tables. If we were passed a valid frame object, get the
	-- frame arguments (fargs) and the parent frame arguments (pargs), depending
	-- on the options set and on the parent frame's availability. If we weren't
	-- passed a valid frame object, we are being called from another Lua module
	-- or from the debug console, so assume that we were passed a table of args
	-- directly, and assign it to a new variable (luaArgs).
	--]]
	local fargs, pargs, luaArgs
	if type(frame.args) == 'table' and type(frame.getParent) == 'function' then
		if options.wrappers then
			--[[
			-- The wrappers option makes Module:Arguments look up arguments in
			-- either the frame argument table or the parent argument table, but
			-- not both. This means that users can use either the #invoke syntax
			-- or a wrapper template without the loss of performance associated
			-- with looking arguments up in both the frame and the parent frame.
			-- Module:Arguments will look up arguments in the parent frame
			-- if it finds the parent frame's title in options.wrapper;
			-- otherwise it will look up arguments in the frame object passed
			-- to getArgs.
			--]]
			local parent = frame:getParent()
			if not parent then
				fargs = frame.args
			else
				local title = parent:getTitle():gsub('/sandbox$', '')
				local found = false
				if matchesTitle(options.wrappers, title) then
					found = true
				elseif type(options.wrappers) == 'table' then
					for _,v in pairs(options.wrappers) do
						if matchesTitle(v, title) then
							found = true
							break
						end
					end
				end

				-- We test for false specifically here so that nil (the default) acts like true.
				if found or options.frameOnly == false then
					pargs = parent.args
				end
				if not found or options.parentOnly == false then
					fargs = frame.args
				end
			end
		else
			-- options.wrapper isn't set, so check the other options.
			if not options.parentOnly then
				fargs = frame.args
			end
			if not options.frameOnly then
				local parent = frame:getParent()
				pargs = parent and parent.args or nil
			end
		end
		if options.parentFirst then
			fargs, pargs = pargs, fargs
		end
	else
		luaArgs = frame
	end

	-- Set the order of precedence of the argument tables. If the variables are
	-- nil, nothing will be added to the table, which is how we avoid clashes
	-- between the frame/parent args and the Lua args.
	local argTables = {fargs}
	argTables[#argTables + 1] = pargs
	argTables[#argTables + 1] = luaArgs

	--[[
	-- Generate the tidyVal function. If it has been specified by the user, we
	-- use that; if not, we choose one of four functions depending on the
	-- options chosen. This is so that we don't have to call the options table
	-- every time the function is called.
	--]]
	local tidyVal = options.valueFunc
	if tidyVal then
		if type(tidyVal) ~= 'function' then
			error(
				"bad value assigned to option 'valueFunc'"
					.. '(function expected, got '
					.. type(tidyVal)
					.. ')',
				2
			)
		end
	elseif options.trim ~= false then
		if options.removeBlanks ~= false then
			tidyVal = tidyValDefault
		else
			tidyVal = tidyValTrimOnly
		end
	else
		if options.removeBlanks ~= false then
			tidyVal = tidyValRemoveBlanksOnly
		else
			tidyVal = tidyValNoChange
		end
	end

	--[[
	-- Set up the args, metaArgs and nilArgs tables. args will be the one
	-- accessed from functions, and metaArgs will hold the actual arguments. Nil
	-- arguments are memoized in nilArgs, and the metatable connects all of them
	-- together.
	--]]
	local args, metaArgs, nilArgs, metatable = {}, {}, {}, {}
	setmetatable(args, metatable)

	local function mergeArgs(tables)
		--[[
		-- Accepts multiple tables as input and merges their keys and values
		-- into one table. If a value is already present it is not overwritten;
		-- tables listed earlier have precedence. We are also memoizing nil
		-- values, which can be overwritten if they are 's' (soft).
		--]]
		for _, t in ipairs(tables) do
			for key, val in pairs(t) do
				if metaArgs[key] == nil and nilArgs[key] ~= 'h' then
					local tidiedVal = tidyVal(key, val)
					if tidiedVal == nil then
						nilArgs[key] = 's'
					else
						metaArgs[key] = tidiedVal
					end
				end
			end
		end
	end

	--[[
	-- Define metatable behaviour. Arguments are memoized in the metaArgs table,
	-- and are only fetched from the argument tables once. Fetching arguments
	-- from the argument tables is the most resource-intensive step in this
	-- module, so we try and avoid it where possible. For this reason, nil
	-- arguments are also memoized, in the nilArgs table. Also, we keep a record
	-- in the metatable of when pairs and ipairs have been called, so we do not
	-- run pairs and ipairs on the argument tables more than once. We also do
	-- not run ipairs on fargs and pargs if pairs has already been run, as all
	-- the arguments will already have been copied over.
	--]]

	metatable.__index = function (t, key)
		--[[
		-- Fetches an argument when the args table is indexed. First we check
		-- to see if the value is memoized, and if not we try and fetch it from
		-- the argument tables. When we check memoization, we need to check
		-- metaArgs before nilArgs, as both can be non-nil at the same time.
		-- If the argument is not present in metaArgs, we also check whether
		-- pairs has been run yet. If pairs has already been run, we return nil.
		-- This is because all the arguments will have already been copied into
		-- metaArgs by the mergeArgs function, meaning that any other arguments
		-- must be nil.
		--]]
		if type(key) == 'string' then
			key = options.translate[key]
		end
		local val = metaArgs[key]
		if val ~= nil then
			return val
		elseif metatable.donePairs or nilArgs[key] then
			return nil
		end
		for _, argTable in ipairs(argTables) do
			local argTableVal = tidyVal(key, argTable[key])
			if argTableVal ~= nil then
				metaArgs[key] = argTableVal
				return argTableVal
			end
		end
		nilArgs[key] = 'h'
		return nil
	end

	metatable.__newindex = function (t, key, val)
		-- This function is called when a module tries to add a new value to the
		-- args table, or tries to change an existing value.
		if type(key) == 'string' then
			key = options.translate[key]
		end
		if options.readOnly then
			error(
				'could not write to argument table key "'
					.. tostring(key)
					.. '"; the table is read-only',
				2
			)
		elseif options.noOverwrite and args[key] ~= nil then
			error(
				'could not write to argument table key "'
					.. tostring(key)
					.. '"; overwriting existing arguments is not permitted',
				2
			)
		elseif val == nil then
			--[[
			-- If the argument is to be overwritten with nil, we need to erase
			-- the value in metaArgs, so that __index, __pairs and __ipairs do
			-- not use a previous existing value, if present; and we also need
			-- to memoize the nil in nilArgs, so that the value isn't looked
			-- up in the argument tables if it is accessed again.
			--]]
			metaArgs[key] = nil
			nilArgs[key] = 'h'
		else
			metaArgs[key] = val
		end
	end

	local function translatenext(invariant)
		local k, v = next(invariant.t, invariant.k)
		invariant.k = k
		if k == nil then
			return nil
		elseif type(k) ~= 'string' or not options.backtranslate then
			return k, v
		else
			local backtranslate = options.backtranslate[k]
			if backtranslate == nil then
				-- Skip this one. This is a tail call, so this won't cause stack overflow
				return translatenext(invariant)
			else
				return backtranslate, v
			end
		end
	end

	metatable.__pairs = function ()
		-- Called when pairs is run on the args table.
		if not metatable.donePairs then
			mergeArgs(argTables)
			metatable.donePairs = true
		end
		return translatenext, { t = metaArgs }
	end

	local function inext(t, i)
		-- This uses our __index metamethod
		local v = t[i + 1]
		if v ~= nil then
			return i + 1, v
		end
	end

	metatable.__ipairs = function (t)
		-- Called when ipairs is run on the args table.
		return inext, t, 0
	end

	return args
end

return arguments</text>
      <sha1>5qx9tzlul9ser30uxj9nbasjt92cevn</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Yesno</title>
    <ns>828</ns>
    <id>667</id>
    <revision>
      <id>32003</id>
      <parentid>30383</parentid>
      <timestamp>2022-12-29T17:19:55Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>2 revisions imported: Importing recent [[Minor December Outage]] created pages from Immanuelle wiki. Currently [[December Intermediate Period]] pages are not yet imported, so this may look weird in many ways.</comment>
      <origin>2077</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="745" sha1="swdskn7svew8i9wuydn9uj5l3r2ghcs" xml:space="preserve">-- Function allowing for consistent treatment of boolean-like wikitext input.
-- It works similarly to the template {{yesno}}.

return function (val, default)
	-- If your wiki uses non-ascii characters for any of "yes", "no", etc., you
	-- should replace "val:lower()" with "mw.ustring.lower(val)" in the
	-- following line.
	val = type(val) == 'string' and val:lower() or val
	if val == nil then
		return nil
	elseif val == true 
		or val == 'yes'
		or val == 'y'
		or val == 'true'
		or val == 't'
		or val == 'on'
		or tonumber(val) == 1
	then
		return true
	elseif val == false
		or val == 'no'
		or val == 'n'
		or val == 'false'
		or val == 'f'
		or val == 'off'
		or tonumber(val) == 0
	then
		return false
	else
		return default
	end
end</text>
      <sha1>swdskn7svew8i9wuydn9uj5l3r2ghcs</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Separated entries</title>
    <ns>828</ns>
    <id>837</id>
    <revision>
      <id>39444</id>
      <parentid>39443</parentid>
      <timestamp>2022-12-05T19:39:07Z</timestamp>
      <contributor>
        <username>imported&gt;Immanuelle</username>
        <id>0</id>
      </contributor>
      <minor/>
      <comment>12 revisions imported from [[:wikipedia:Module:Separated_entries]]: Importing wikipedia userpage as it's better than my old user page</comment>
      <origin>7714</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="1403" sha1="r3n53qz4zycs3vxyo5ms9qjo1jm32bp" xml:space="preserve">-- This module takes positional parameters as input and concatenates them with
-- an optional separator. The final separator (the "conjunction") can be
-- specified independently, enabling natural-language lists like
-- "foo, bar, baz and qux". The starting parameter can also be specified.

local compressSparseArray = require('Module:TableTools').compressSparseArray
local p = {}

function p._main(args)
	local separator = args.separator
		-- Decode (convert to Unicode) HTML escape sequences, such as "&amp;#32;" for space.
		and mw.text.decode(args.separator) or ''
	local conjunction = args.conjunction and mw.text.decode(args.conjunction) or separator
	-- Discard values before the starting parameter.
	local start = tonumber(args.start)
	if start then
		for i = 1, start - 1 do args[i] = nil end
	end
	-- Discard named parameters.
	local values = compressSparseArray(args)
	return mw.text.listToText(values, separator, conjunction)
end

local function makeInvokeFunction(separator, conjunction, first)
	return function (frame)
		local args = require('Module:Arguments').getArgs(frame)
		args.separator = separator or args.separator
		args.conjunction = conjunction or args.conjunction
		args.first = first or args.first
		return p._main(args)
	end
end

p.main = makeInvokeFunction()
p.br = makeInvokeFunction('&lt;br /&gt;')
p.comma = makeInvokeFunction(mw.message.new('comma-separator'):plain())

return p</text>
      <sha1>r3n53qz4zycs3vxyo5ms9qjo1jm32bp</sha1>
    </revision>
  </page>
  <page>
    <title>Module:TableTools</title>
    <ns>828</ns>
    <id>713</id>
    <revision>
      <id>160133</id>
      <parentid>160132</parentid>
      <timestamp>2024-08-30T13:19:08Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Module:TableTools]]</comment>
      <origin>160132</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="16577" sha1="4n03zk6kcoeg4gz82mieeh94c1szcjy" xml:space="preserve">------------------------------------------------------------------------------------
--                                   TableTools                                   --
--                                                                                --
-- This module includes a number of functions for dealing with Lua tables.        --
-- It is a meta-module, meant to be called from other Lua modules, and should not --
-- be called directly from #invoke.                                               --
------------------------------------------------------------------------------------

local libraryUtil = require('libraryUtil')

local p = {}

-- Define often-used variables and functions.
local floor = math.floor
local infinity = math.huge
local checkType = libraryUtil.checkType
local checkTypeMulti = libraryUtil.checkTypeMulti

------------------------------------------------------------------------------------
-- isPositiveInteger
--
-- This function returns true if the given value is a positive integer, and false
-- if not. Although it doesn't operate on tables, it is included here as it is
-- useful for determining whether a given table key is in the array part or the
-- hash part of a table.
------------------------------------------------------------------------------------
function p.isPositiveInteger(v)
	return type(v) == 'number' and v &gt;= 1 and floor(v) == v and v &lt; infinity
end

------------------------------------------------------------------------------------
-- isNan
--
-- This function returns true if the given number is a NaN value, and false if
-- not. Although it doesn't operate on tables, it is included here as it is useful
-- for determining whether a value can be a valid table key. Lua will generate an
-- error if a NaN is used as a table key.
------------------------------------------------------------------------------------
function p.isNan(v)
	return type(v) == 'number' and v ~= v
end

------------------------------------------------------------------------------------
-- shallowClone
--
-- This returns a clone of a table. The value returned is a new table, but all
-- subtables and functions are shared. Metamethods are respected, but the returned
-- table will have no metatable of its own.
------------------------------------------------------------------------------------
function p.shallowClone(t)
	checkType('shallowClone', 1, t, 'table')
	local ret = {}
	for k, v in pairs(t) do
		ret[k] = v
	end
	return ret
end

------------------------------------------------------------------------------------
-- removeDuplicates
--
-- This removes duplicate values from an array. Non-positive-integer keys are
-- ignored. The earliest value is kept, and all subsequent duplicate values are
-- removed, but otherwise the array order is unchanged.
------------------------------------------------------------------------------------
function p.removeDuplicates(arr)
	checkType('removeDuplicates', 1, arr, 'table')
	local isNan = p.isNan
	local ret, exists = {}, {}
	for _, v in ipairs(arr) do
		if isNan(v) then
			-- NaNs can't be table keys, and they are also unique, so we don't need to check existence.
			ret[#ret + 1] = v
		elseif not exists[v] then
			ret[#ret + 1] = v
			exists[v] = true
		end
	end
	return ret
end

------------------------------------------------------------------------------------
-- numKeys
--
-- This takes a table and returns an array containing the numbers of any numerical
-- keys that have non-nil values, sorted in numerical order.
------------------------------------------------------------------------------------
function p.numKeys(t)
	checkType('numKeys', 1, t, 'table')
	local isPositiveInteger = p.isPositiveInteger
	local nums = {}
	for k in pairs(t) do
		if isPositiveInteger(k) then
			nums[#nums + 1] = k
		end
	end
	table.sort(nums)
	return nums
end

------------------------------------------------------------------------------------
-- affixNums
--
-- This takes a table and returns an array containing the numbers of keys with the
-- specified prefix and suffix. For example, for the table
-- {a1 = 'foo', a3 = 'bar', a6 = 'baz'} and the prefix "a", affixNums will return
-- {1, 3, 6}.
------------------------------------------------------------------------------------
function p.affixNums(t, prefix, suffix)
	checkType('affixNums', 1, t, 'table')
	checkType('affixNums', 2, prefix, 'string', true)
	checkType('affixNums', 3, suffix, 'string', true)

	local function cleanPattern(s)
		-- Cleans a pattern so that the magic characters ()%.[]*+-?^$ are interpreted literally.
		return s:gsub('([%(%)%%%.%[%]%*%+%-%?%^%$])', '%%%1')
	end

	prefix = prefix or ''
	suffix = suffix or ''
	prefix = cleanPattern(prefix)
	suffix = cleanPattern(suffix)
	local pattern = '^' .. prefix .. '([1-9]%d*)' .. suffix .. '$'

	local nums = {}
	for k in pairs(t) do
		if type(k) == 'string' then
			local num = mw.ustring.match(k, pattern)
			if num then
				nums[#nums + 1] = tonumber(num)
			end
		end
	end
	table.sort(nums)
	return nums
end

------------------------------------------------------------------------------------
-- numData
--
-- Given a table with keys like {"foo1", "bar1", "foo2", "baz2"}, returns a table
-- of subtables in the format
-- {[1] = {foo = 'text', bar = 'text'}, [2] = {foo = 'text', baz = 'text'}}.
-- Keys that don't end with an integer are stored in a subtable named "other". The
-- compress option compresses the table so that it can be iterated over with
-- ipairs.
------------------------------------------------------------------------------------
function p.numData(t, compress)
	checkType('numData', 1, t, 'table')
	checkType('numData', 2, compress, 'boolean', true)
	local ret = {}
	for k, v in pairs(t) do
		local prefix, num = mw.ustring.match(tostring(k), '^([^0-9]*)([1-9][0-9]*)$')
		if num then
			num = tonumber(num)
			local subtable = ret[num] or {}
			if prefix == '' then
				-- Positional parameters match the blank string; put them at the start of the subtable instead.
				prefix = 1
			end
			subtable[prefix] = v
			ret[num] = subtable
		else
			local subtable = ret.other or {}
			subtable[k] = v
			ret.other = subtable
		end
	end
	if compress then
		local other = ret.other
		ret = p.compressSparseArray(ret)
		ret.other = other
	end
	return ret
end

------------------------------------------------------------------------------------
-- compressSparseArray
--
-- This takes an array with one or more nil values, and removes the nil values
-- while preserving the order, so that the array can be safely traversed with
-- ipairs.
------------------------------------------------------------------------------------
function p.compressSparseArray(t)
	checkType('compressSparseArray', 1, t, 'table')
	local ret = {}
	local nums = p.numKeys(t)
	for _, num in ipairs(nums) do
		ret[#ret + 1] = t[num]
	end
	return ret
end

------------------------------------------------------------------------------------
-- sparseIpairs
--
-- This is an iterator for sparse arrays. It can be used like ipairs, but can
-- handle nil values.
------------------------------------------------------------------------------------
function p.sparseIpairs(t)
	checkType('sparseIpairs', 1, t, 'table')
	local nums = p.numKeys(t)
	local i = 0
	local lim = #nums
	return function ()
		i = i + 1
		if i &lt;= lim then
			local key = nums[i]
			return key, t[key]
		else
			return nil, nil
		end
	end
end

------------------------------------------------------------------------------------
-- size
--
-- This returns the size of a key/value pair table. It will also work on arrays,
-- but for arrays it is more efficient to use the # operator.
------------------------------------------------------------------------------------
function p.size(t)
	checkType('size', 1, t, 'table')
	local i = 0
	for _ in pairs(t) do
		i = i + 1
	end
	return i
end

local function defaultKeySort(item1, item2)
	-- "number" &lt; "string", so numbers will be sorted before strings.
	local type1, type2 = type(item1), type(item2)
	if type1 ~= type2 then
		return type1 &lt; type2
	elseif type1 == 'table' or type1 == 'boolean' or type1 == 'function' then
		return tostring(item1) &lt; tostring(item2)
	else
		return item1 &lt; item2
	end
end
------------------------------------------------------------------------------------
-- keysToList
--
-- Returns an array of the keys in a table, sorted using either a default
-- comparison function or a custom keySort function.
------------------------------------------------------------------------------------
function p.keysToList(t, keySort, checked)
	if not checked then
		checkType('keysToList', 1, t, 'table')
		checkTypeMulti('keysToList', 2, keySort, {'function', 'boolean', 'nil'})
	end

	local arr = {}
	local index = 1
	for k in pairs(t) do
		arr[index] = k
		index = index + 1
	end

	if keySort ~= false then
		keySort = type(keySort) == 'function' and keySort or defaultKeySort
		table.sort(arr, keySort)
	end

	return arr
end

------------------------------------------------------------------------------------
-- sortedPairs
--
-- Iterates through a table, with the keys sorted using the keysToList function.
-- If there are only numerical keys, sparseIpairs is probably more efficient.
------------------------------------------------------------------------------------
function p.sortedPairs(t, keySort)
	checkType('sortedPairs', 1, t, 'table')
	checkType('sortedPairs', 2, keySort, 'function', true)

	local arr = p.keysToList(t, keySort, true)

	local i = 0
	return function ()
		i = i + 1
		local key = arr[i]
		if key ~= nil then
			return key, t[key]
		else
			return nil, nil
		end
	end
end

------------------------------------------------------------------------------------
-- isArray
--
-- Returns true if the given value is a table and all keys are consecutive
-- integers starting at 1.
------------------------------------------------------------------------------------
function p.isArray(v)
	if type(v) ~= 'table' then
		return false
	end
	local i = 0
	for _ in pairs(v) do
		i = i + 1
		if v[i] == nil then
			return false
		end
	end
	return true
end

------------------------------------------------------------------------------------
-- isArrayLike
--
-- Returns true if the given value is iterable and all keys are consecutive
-- integers starting at 1.
------------------------------------------------------------------------------------
function p.isArrayLike(v)
	if not pcall(pairs, v) then
		return false
	end
	local i = 0
	for _ in pairs(v) do
		i = i + 1
		if v[i] == nil then
			return false
		end
	end
	return true
end

------------------------------------------------------------------------------------
-- invert
--
-- Transposes the keys and values in an array. For example, {"a", "b", "c"} -&gt;
-- {a = 1, b = 2, c = 3}. Duplicates are not supported (result values refer to
-- the index of the last duplicate) and NaN values are ignored.
------------------------------------------------------------------------------------
function p.invert(arr)
	checkType("invert", 1, arr, "table")
	local isNan = p.isNan
	local map = {}
	for i, v in ipairs(arr) do
		if not isNan(v) then
			map[v] = i
		end
	end

	return map
end

------------------------------------------------------------------------------------
-- listToSet
--
-- Creates a set from the array part of the table. Indexing the set by any of the
-- values of the array returns true. For example, {"a", "b", "c"} -&gt;
-- {a = true, b = true, c = true}. NaN values are ignored as Lua considers them
-- never equal to any value (including other NaNs or even themselves).
------------------------------------------------------------------------------------
function p.listToSet(arr)
	checkType("listToSet", 1, arr, "table")
	local isNan = p.isNan
	local set = {}
	for _, v in ipairs(arr) do
		if not isNan(v) then
			set[v] = true
		end
	end

	return set
end

------------------------------------------------------------------------------------
-- deepCopy
--
-- Recursive deep copy function. Preserves identities of subtables.
------------------------------------------------------------------------------------
local function _deepCopy(orig, includeMetatable, already_seen)
	if type(orig) ~= "table" then
		return orig
	end
	
	-- already_seen stores copies of tables indexed by the original table.
	local copy = already_seen[orig]
	if copy ~= nil then
		return copy
	end
	
	copy = {}
	already_seen[orig] = copy -- memoize before any recursion, to avoid infinite loops
	
	for orig_key, orig_value in pairs(orig) do
		copy[_deepCopy(orig_key, includeMetatable, already_seen)] = _deepCopy(orig_value, includeMetatable, already_seen)
	end
	
	if includeMetatable then
		local mt = getmetatable(orig)
		if mt ~= nil then
			setmetatable(copy, _deepCopy(mt, true, already_seen))
		end
	end
	
	return copy
end

function p.deepCopy(orig, noMetatable, already_seen)
	checkType("deepCopy", 3, already_seen, "table", true)
	return _deepCopy(orig, not noMetatable, already_seen or {})
end

------------------------------------------------------------------------------------
-- sparseConcat
--
-- Concatenates all values in the table that are indexed by a number, in order.
-- sparseConcat{a, nil, c, d}  =&gt;  "acd"
-- sparseConcat{nil, b, c, d}  =&gt;  "bcd"
------------------------------------------------------------------------------------
function p.sparseConcat(t, sep, i, j)
	local arr = {}

	local arr_i = 0
	for _, v in p.sparseIpairs(t) do
		arr_i = arr_i + 1
		arr[arr_i] = v
	end

	return table.concat(arr, sep, i, j)
end

------------------------------------------------------------------------------------
-- length
--
-- Finds the length of an array, or of a quasi-array with keys such as "data1",
-- "data2", etc., using an exponential search algorithm. It is similar to the
-- operator #, but may return a different value when there are gaps in the array
-- portion of the table. Intended to be used on data loaded with mw.loadData. For
-- other tables, use #.
-- Note: #frame.args in frame object always be set to 0, regardless of  the number
-- of unnamed template parameters, so use this function for frame.args.
------------------------------------------------------------------------------------
function p.length(t, prefix)
	-- requiring module inline so that [[Module:Exponential search]] which is
	-- only needed by this one function doesn't get millions of transclusions
	local expSearch = require("Module:Exponential search")
	checkType('length', 1, t, 'table')
	checkType('length', 2, prefix, 'string', true)
	return expSearch(function (i)
		local key
		if prefix then
			key = prefix .. tostring(i)
		else
			key = i
		end
		return t[key] ~= nil
	end) or 0
end

------------------------------------------------------------------------------------
-- inArray
--
-- Returns true if searchElement is a member of the array, and false otherwise.
-- Equivalent to JavaScript array.includes(searchElement) or
-- array.includes(searchElement, fromIndex), except fromIndex is 1 indexed
------------------------------------------------------------------------------------
function p.inArray(array, searchElement, fromIndex)
	checkType("inArray", 1, array, "table")
	-- if searchElement is nil, error?

	fromIndex = tonumber(fromIndex)
	if fromIndex then
		if (fromIndex &lt; 0) then
			fromIndex = #array + fromIndex + 1
		end
		if fromIndex &lt; 1 then fromIndex = 1 end
		for _, v in ipairs({unpack(array, fromIndex)}) do
			if v == searchElement then
				return true
			end
		end
	else
		for _, v in pairs(array) do
			if v == searchElement then
				return true
			end
		end
	end
	return false
end

------------------------------------------------------------------------------------
-- merge
--
-- Given the arrays, returns an array containing the elements of each input array
-- in sequence.
------------------------------------------------------------------------------------
function p.merge(...)
	local arrays = {...}
	local ret = {}
	for i, arr in ipairs(arrays) do
		checkType('merge', i, arr, 'table')
		for _, v in ipairs(arr) do
			ret[#ret + 1] = v
		end
	end
	return ret
end

------------------------------------------------------------------------------------
-- extend
--
-- Extends the first array in place by appending all elements from the second
-- array.
------------------------------------------------------------------------------------
function p.extend(arr1, arr2)
	checkType('extend', 1, arr1, 'table')
	checkType('extend', 2, arr2, 'table')

	for _, v in ipairs(arr2) do
		arr1[#arr1 + 1] = v
	end
end

return p</text>
      <sha1>4n03zk6kcoeg4gz82mieeh94c1szcjy</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Lang</title>
    <ns>828</ns>
    <id>233</id>
    <revision>
      <id>116727</id>
      <parentid>116726</parentid>
      <timestamp>2023-09-26T21:35:17Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>2 revisions imported from [[:wikipedia:Module:Lang]]</comment>
      <origin>116726</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="75757" sha1="l42s8v4jw4gr3yfdmjo5zrynjduzw38" xml:space="preserve">--[=[

Lua support for the {{lang}}, {{lang-xx}}, and {{transliteration}} templates and replacement of various supporting templates. 

]=]

require('strict');

local getArgs = require ('Module:Arguments').getArgs;
local unicode = require ("Module:Unicode data");								-- for is_latin() and is_rtl()
local yesno = require ('Module:Yesno');

local lang_data =  mw.loadData ('Module:Lang/data');							-- language name override and transliteration tool-tip tables
local lang_name_table = lang_data.lang_name_table;								-- language codes, names, regions, scripts, suppressed scripts
local lang_table = lang_data.lang_name_table.lang;
local lang_dep_table = lang_data.lang_name_table.lang_dep;
local script_table = lang_data.lang_name_table.script;
local region_table = lang_data.lang_name_table.region;
local variant_table = lang_data.lang_name_table.variant;
local suppressed_table = lang_data.lang_name_table.suppressed;
local override_table = lang_data.override;

local synonym_table = mw.loadData ('Module:Lang/ISO 639 synonyms');				-- ISO 639-2/639-2T code translation to 639-1 code

local namespace = mw.title.getCurrentTitle().namespace;							-- used for categorization

local content_lang = mw.language.getContentLanguage();
local this_wiki_lang_tag = content_lang.code;									-- get this wiki's language tag
local this_wiki_lang_dir = content_lang:getDir();								-- get this wiki's language direction

local initial_style_state;														-- set by lang_xx_normal() and lang_xx_italic()

local maint_cats = {};															-- maintenance categories go here
local maint_msgs = {};															-- and their messages go here


--[[--------------------------&lt; I S _ S E T &gt;------------------------------------------------------------------

Returns true if argument is set; false otherwise. Argument is 'set' when it exists (not nil) or when it is not an empty string.

]]

local function is_set( var )
	return not (var == nil or var == '');
end


--[[--------------------------&lt; I N V E R T  _ I T A L I C S &gt;-------------------------------------------------

This function attempts to invert the italic markup a args.text by adding/removing leading/trailing italic markup
in args.text.  Like |italic=unset, |italic=invert disables automatic italic markup.  Individual leading/trailing
apostrophes are converted to their html numeric entity equivalent so that the new italic markup doesn't become
bold markup inadvertently.

Leading and trailing wiki markup is extracted from args.text into separate table elements.  Addition, removal,
replacement of wiki markup is handled by a string.gsub() replacement table operating only on these separate elements.
In the string.gsub() matching pattern, '.*' matches empty string as well as the three expected wiki markup patterns.

This function expects that markup in args.text is complete and correct; if it is not, oddness may result.

]]

local function invert_italics (source)
	local invert_pattern_table = {												-- leading/trailing markup add/remove/replace patterns
		[""]="\'\'",															-- empty string becomes italic markup
		["\'\'"]="",															-- italic markup becomes empty string
		["\'\'\'"]="\'\'\'\'\'",												-- bold becomes bold italic
		["\'\'\'\'\'"]="\'\'\'",												-- bold italic become bold
		};
	local seg = {};

	source = source:gsub ("%f[\']\'%f[^\']", '&amp;#39;');							-- protect single quote marks from being interpreted as bold markup

	seg[1] = source:match ('^(\'\'+%f[^\']).+') or '';							-- get leading markup, if any; ignore single quote
	seg[3] = source:match ('.+(%f[\']\'\'+)$') or '';							-- get trailing markup, if any; ignore single quote

	if '' ~= seg[1] and '' ~= seg[3] then										-- extract the 'text' 
		seg[2] = source:match ('^\'\'+%f[^\'](.+)%f[\']\'\'+$')					-- from between leading and trailing markup
	elseif '' ~= seg[1] then
		seg[2] = source:match ('^\'\'+%f[^\'](.+)')								-- following leading markup
	elseif '' ~= seg[3] then
		seg[2] = source:match ('(.+)%f[\']\'\'+$')								-- preceding trailing markup
	else
		seg[2] = source															-- when there is no markup
	end

	seg[1] = invert_pattern_table[seg[1]] or seg[1];							-- replace leading markup according to pattern table
	seg[3] = invert_pattern_table[seg[3]] or seg[3];							-- replace leading markup according to pattern table

	return table.concat (seg);													-- put it all back together and done
end


--[[--------------------------&lt; V A L I D A T E _ I T A L I C &gt;------------------------------------------------

validates |italic= or |italics= assigned values.

When |italic= is set and has an acceptible assigned value, return the matching css font-style property value or,
for the special case 'default', return nil.

When |italic= is not set, or has an unacceptible assigned value, return nil and a nil error message.

When both |italic= and |italics= are set, returns nil and a 'conflicting' error message.

The return value nil causes the calling lang, lang_xx, or transl function to set args.italic according to the template's
defined default ('inherit' for {{lang}}, 'inherit' or 'italic' for {{lang-xx}} depending on
the individual template's requirements, 'italic' for {{transliteration}}) or to the value appropriate to |script=, if set ({{lang}}
and {{lang-xx}} only).

Accepted values and the values that this function returns are are:
	nil		-	when |italic= absent or not set; returns nil
	default	-	for completeness, should rarely if ever be used; returns nil
	yes		-	force args.text to be rendered in italic font; returns 'italic'
	no		-	force args.text to be rendered in normal font; returns 'normal'
	unset	-	disables font control so that font-style applied to text is dictated by markup inside or outside the template; returns 'inherit'
	invert	-	disables font control so that font-style applied to text is dictated by markup outside or inverted inside the template; returns 'invert'

]]

local function validate_italic (args)
	local properties = {['yes'] = 'italic', ['no'] = 'normal', ['unset'] = 'inherit', ['invert'] = 'invert', ['default'] = nil};
	
	local count = 0
	for _, arg in pairs {'italic', 'italics', 'i'} do
		if args[arg] then
			count = count + 1
		end
	end

	if count &gt; 1 then															-- return nil and an error message if more than one is set 
		return nil, 'only one of |italic=, |italics=, or |i= can be specified';
	end
	
	return properties[args.italic or args.italics or args.i], nil;				-- return an appropriate value and a nil error message
end


--[=[--------------------------&lt; V A L I D A T E _ C A T _ A R G S &gt;----------------------------------------------------------

Default behavior of the {{lang}} and {{lang-xx}} templates is to add categorization when the templates are used in mainspace.
This default functionality may be suppressed by setting |nocat=yes or |cat=no.  This function selects one of these two parameters
to control categorization.

Because having two parameters with 'opposite' names and 'opposite' values is confusing, this function accepts only affirmative
values for |nocat= and only negative values for |cat=; in both cases the 'other' sense (and non-sense) is not accepted and the
parameter is treated as if it were not set in the template.

Sets args.nocat to true if categorization is to be turned off; to nil if the default behavior should apply.

Accepted values for |nocat= are the text strings:
	'yes', 'y', 'true', 't', on, '1'		-- [[Module:Yesno]] returns logical true for all of these; false or nil else
for |cat=
	'no', 'n', 'false', 'f', 'off', '0'		-- [[Module:Yesno]] returns logical false for all of these; true or nil else

]=]

local function validate_cat_args (args)
	if not (args.nocat or args.cat) then										-- both are nil, so categorize
		return;
	end
	
	if false == yesno (args.cat) or true == yesno (args.nocat) then
		args.nocat = true;														-- set to true when args.nocat is affirmative; nil else (as if the parameter were not set in the template)
	else																		-- args.nocat is the parameter actually used.
		args.nocat = nil;
	end
end


--[[--------------------------&lt; I N _ A R R A Y &gt;--------------------------------------------------------------

Whether needle is in haystack

]]

local function in_array ( needle, haystack )
	if needle == nil then
		return false;
	end
	for n,v in ipairs( haystack ) do
		if v == needle then
			return n;
		end
	end
	return false;
end


--[[--------------------------&lt; F O R M A T _ I E T F _ T A G &gt;------------------------------------------------

prettify ietf tags to use recommended subtag formats:
	code: lower case
	script: sentence case
	region: upper case
	variant: lower case
	private: lower case prefixed with -x-
	
]]

local function format_ietf_tag (code, script, region, variant, private)
	local out = {};

	if is_set (private) then
		return table.concat ({code:lower(), 'x', private:lower()}, '-');		-- if private, all other tags ignored
	end
	
	table.insert (out, code:lower());
	if is_set (script) then
		script = script:lower():gsub ('^%a', string.upper);
		table.insert (out, script);
	end

	if is_set (region) then
		table.insert (out, region:upper());
	end
	
	if is_set (variant) then
		table.insert (out, variant:lower());
	end
	
	return table.concat (out, '-');
end


--[[--------------------------&lt; G E T _ I E T F _ P A R T S &gt;--------------------------------------------------

extracts and returns IETF language tag parts:
	primary language subtag (required) - 2 or 3 character IANA language code
	script subtag - four character IANA script code
	region subtag - two-letter or three digit IANA region code
	variant subtag - four digit or 5-8 alnum variant code; only one variant subtag supported
	private subtag - x- followed by 1-8 alnum private code; only supported with the primary language tag

in any one of these forms
	lang					lang-variant
	lang-script				lang-script-variant
	lang-region				lang-region-variant
	lang-script-region		lang-script-region-variant
	lang-x-private	
	
each of lang, script, region, variant, and private, when used, must be valid

Languages with both two- and three-character code synonyms are promoted to the two-character synonym because
the IANA registry file omits the synonymous three-character code; we cannot depend on browsers understanding
the synonymous three-character codes in the lang= attribute.

For {{lang-xx}} templates, the parameters |script=, |region=, and |variant= are supported (not supported in {{lang}}
because those parameters are superfluous to the IETF subtags in |code=)

returns six  values; all lower case.  Valid parts are returned as themselves; omitted parts are returned as empty strings, invalid
parts are returned as nil; the sixth returned item is an error message (if an error detected) or nil.

see http://www.rfc-editor.org/rfc/bcp/bcp47.txt section 2.1

]]

local function get_ietf_parts (source, args_script, args_region, args_variant)
	local code, script, region, variant, private;								-- ietf tag parts

	if not is_set (source) then
		return nil, nil, nil, nil, nil, 'missing language tag';
	end

	local pattern = {															-- table of tables holding acceptibe ietf tag patterns and short names of the ietf part captured by the pattern
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%a%a)%-(%d%d%d%d)$', 's', 'r', 'v'}, 				-- 1 -  ll-Ssss-RR-variant (where variant is 4 digits)
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%d%d%d)%-(%d%d%d%d)$', 's', 'r', 'v'},				-- 2 -  ll-Ssss-DDD-variant (where region is 3 digits; variant is 4 digits)
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%a%a)%-(%w%w%w%w%w%w?%w?%w?)$', 's', 'r', 'v'},		-- 3 -  ll-Ssss-RR-variant (where variant is 5-8 alnum characters)
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%d%d%d)%-(%w%w%w%w%w%w?%w?%w?)$', 's', 'r', 'v'},	-- 4 -  ll-Ssss-DDD-variant (where region is 3 digits; variant is 5-8 alnum characters)
		
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%d%d%d%d)$', 's', 'v'},						-- 5 -  ll-Ssss-variant (where variant is 4 digits)
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%w%w%w%w%w%w?%w?%w?)$', 's', 'v'},			-- 6 -  ll-Ssss-variant (where variant is 5-8 alnum characters)
		
		{'^(%a%a%a?)%-(%a%a)%-(%d%d%d%d)$', 'r', 'v'},							-- 7 -  ll-RR-variant (where variant is 4 digits)
		{'^(%a%a%a?)%-(%d%d%d)%-(%d%d%d%d)$', 'r', 'v'},						-- 8 -  ll-DDD-variant (where region is 3 digits; variant is 4 digits)
		{'^(%a%a%a?)%-(%a%a)%-(%w%w%w%w%w%w?%w?%w?)$', 'r', 'v'},				-- 9 -  ll-RR-variant (where variant is 5-8 alnum characters)
		{'^(%a%a%a?)%-(%d%d%d)%-(%w%w%w%w%w%w?%w?%w?)$', 'r', 'v'},				-- 10 - ll-DDD-variant (where region is 3 digits; variant is 5-8 alnum characters)
		
		{'^(%a%a%a?)%-(%d%d%d%d)$', 'v'},										-- 11 - ll-variant (where variant is 4 digits)
		{'^(%a%a%a?)%-(%w%w%w%w%w%w?%w?%w?)$', 'v'},							-- 12 - ll-variant (where variant is 5-8 alnum characters)
		
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%a%a)$', 's', 'r'},							-- 13 - ll-Ssss-RR
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%d%d%d)$', 's', 'r'},						-- 14 - ll-Ssss-DDD (region is 3 digits)
		
		{'^(%a%a%a?)%-(%a%a%a%a)$', 's'},										-- 15 - ll-Ssss
		
		{'^(%a%a%a?)%-(%a%a)$', 'r'},											-- 16 - ll-RR
		{'^(%a%a%a?)%-(%d%d%d)$', 'r'},											-- 17 - ll-DDD (region is 3 digits)
		
		{'^(%a%a%a?)$'},														-- 18 - ll
		
		{'^(%a%a%a?)%-x%-(%w%w?%w?%w?%w?%w?%w?%w?)$', 'p'},						-- 19 - ll-x-pppppppp (private is 1-8 alnum characters)
		}

	local t = {};																-- table of captures; serves as a translator between captured ietf tag parts and named variables

	for i, v in ipairs (pattern) do												-- spin through the pattern table looking for a match
		local c1, c2, c3, c4;													-- captures in the 'pattern' from the pattern table go here
	
		c1, c2, c3, c4 = source:match (pattern[i][1]);							-- one or more captures set if source matches pattern[i])
			if c1 then															-- c1 always set on match
				code = c1;														-- first capture is always code
				t = {
					[pattern[i][2] or 'x'] = c2,								-- fill the table of captures with the rest of the captures
					[pattern[i][3] or 'x'] = c3,								-- take index names from pattern table and assign sequential captures
					[pattern[i][4] or 'x'] = c4,								-- index name may be nil in pattern[i] table so "or 'x'" spoofs a name for this index in this table
					};
				script = t.s or '';												-- translate table contents to named variables;
				region = t.r or '';												-- absent table entries are nil so set named ietf parts to empty string for concatenation
				variant= t.v or '';
				private = t.p or '';
				break;															-- and done
			end
	end

	if not code then
		return nil, nil, nil, nil, nil, table.concat ({'unrecognized language tag: ', source});		-- don't know what we got but it is malformed
	end

	code = code:lower();														-- ensure that we use and return lower case version of this
	
	if not (override_table[code] or lang_table[code] or synonym_table[code] or lang_dep_table[code]) then
		return nil, nil, nil, nil, nil, table.concat ({'unrecognized language code: ', code});		-- invalid language code, don't know about the others (don't care?)
	end
	
	if synonym_table[code] then													-- if 639-2/639-2T code has a 639-1 synonym
		table.insert (maint_cats, table.concat ({'Lang and lang-xx code promoted to ISO 639-1|', code}));
		table.insert (maint_msgs, table.concat ({'code: ', code, ' promoted to code: ', synonym_table[code]}));
		code = synonym_table[code];												-- use the synonym
	end

	if is_set (script) then
		if is_set (args_script) then
			return code, nil, nil, nil, nil, 'redundant script tag';			-- both code with script and |script= not allowed
		end
	else
		script = args_script or '';												-- use args.script if provided
	end 

	if is_set (script) then
		script = script:lower();												-- ensure that we use and return lower case version of this
		if not script_table[script] then
			return code, nil, nil, nil, nil, table.concat ({'unrecognized script: ', script, ' for code: ', code});	-- language code ok, invalid script, don't know about the others (don't care?)
		end
	end
	if suppressed_table[script] then											-- ensure that code-script does not use a suppressed script
		if in_array (code, suppressed_table[script]) then
			return code, nil, nil, nil, nil, table.concat ({'script: ', script, ' not supported for code: ', code});	-- language code ok, script is suppressed for this code
		end
	end

	if is_set (region) then
		if is_set (args_region) then
			return code, nil, nil, nil, nil, 'redundant region tag';			-- both code with region and |region= not allowed
		end
	else
		region = args_region or '';												-- use args.region if provided
	end 

	if is_set (region) then
		region = region:lower();												-- ensure that we use and return lower case version of this
		if not region_table[region] then
			return code, script, nil, nil, nil, table.concat ({'unrecognized region: ', region, ' for code: ', code});
		end
	end
	
	if is_set (variant) then
		if is_set (args_variant) then
			return code, nil, nil, nil, nil, 'redundant variant tag';			-- both code with variant and |variant= not allowed
		end
	else
		variant = args_variant or '';											-- use args.variant if provided
	end 

	if is_set (variant) then
		variant = variant:lower();												-- ensure that we use and return lower case version of this
		if not variant_table[variant] then										-- make sure variant is valid
			return code, script, region, nil, nil, table.concat ({'unrecognized variant: ', variant});
		end																		-- does this duplicate/replace tests in lang() and lang_xx()?
		if is_set (script) then													-- if script set it must be part of the 'prefix'
			if not in_array (table.concat ({code, '-', script}), variant_table[variant]['prefixes']) then
				return code, script, region, nil, nil, table.concat ({'unrecognized variant: ', variant, ' for code-script pair: ', code, '-', script});
			end
		elseif is_set (region) then												-- if region set, there are some prefixes that require lang code and region (en-CA-newfound)
			if not in_array (code, variant_table[variant]['prefixes']) then		-- first see if lang code is all that's required (en-oxendict though en-GB-oxendict is preferred)
				if not in_array (table.concat ({code, '-', region}), variant_table[variant]['prefixes']) then		-- now try for lang code and region (en-CA-newfound)
					return code, script, region, nil, nil, table.concat ({'unrecognized variant: ', variant, ' for code-region pair: ', code, '-', region});
				end
			end
		else																	-- cheap way to determine if there are prefixes; fonipa and others don't have prefixes; # operator always returns 0
			if variant_table[variant]['prefixes'][1] and not in_array (code, variant_table[variant]['prefixes']) then
				return code, script, region, nil, nil, table.concat ({'unrecognized variant: ', variant, ' for code: ', code});
			end
		end
	end

	if is_set (private) then
		private = private:lower();												-- ensure that we use and return lower case version of this
		if not override_table[table.concat ({code, '-x-', private})] then		-- make sure private tag is valid; note that index 
			return code, script, region, nil, nil, table.concat ({'unrecognized private tag: ', private});
		end
	end
	return code, script, region, variant, private, nil;							-- return the good bits; make sure that msg is nil
end


--[[--------------------------&lt; M A K E _ E R R O R _ M S G &gt;--------------------------------------------------

assembles an error message from template name, message text, help link, and error category.

]]

local function make_error_msg (msg, args, template)
	local out = {};
	local category;
	
	if 'Transliteration' == template then
		category = 'Transliteration';
	else
		category = 'Lang and lang-xx'
	end
	
	table.insert (out, table.concat ({'[', args.text or 'undefined', '] '}));	-- for error messages output args.text if available
	table.insert (out, table.concat ({'&lt;span style=\"color:#d33\"&gt;Error: {{', template, '}}: '}));
	table.insert (out, msg);
	table.insert (out, table.concat ({' ([[:Category:', category, ' template errors|help]])'}));
	table.insert (out, '&lt;/span&gt;');
	
	if (0 == namespace or 10 == namespace) and not args.nocat then				-- categorize in article space (and template space to take care of broken usages)
		table.insert (out, table.concat ({'[[Category:', category, ' template errors]]'}));
	end

	return table.concat (out);
end
	

--[=[-------------------------&lt; M A K E _ W I K I L I N K &gt;----------------------------------------------------

Makes a wikilink; when both link and display text is provided, returns a wikilink in the form [[L|D]]; if only
link is provided, returns a wikilink in the form [[L]]; if neither are provided or link is omitted, returns an
empty string.

]=]

local function make_wikilink (link, display)
	if is_set (link) then
		if is_set (display) then
			return table.concat ({'[[', link, '|', display, ']]'});
		else
			return table.concat ({'[[', link, ']]'});
		end
	else
		return '';
	end
end


--[[--------------------------&lt; D I V _ M A R K U P _ A D D &gt;--------------------------------------------------

adds &lt;i&gt; and &lt;/i&gt; tags to list-item text or to implied &lt;p&gt;..&lt;/p&gt; text.  mixed not supported

]]

local function div_markup_add (text, style)
local implied_p = {};

	if text:find ('^\n[%*:;#]') then											-- look for list markup; list markup must begin at start of text
		if 'italic' == style then
			return text:gsub ('(\n[%*:;#]+)([^\n]+)', '%1&lt;i&gt;%2&lt;/i&gt;');			-- insert italic markup at each list item
		else
			return text;
		end
	end

	if text:find ('\n+') then													-- look for any number of \n characters in text
		text = text:gsub ('([^\n])\n([^\n])', '%1 %2');							-- replace single newline characters with a space character which mimics mediawiki

		if 'italic' == style then
			text = text:gsub('[^\n]+', '&lt;p&gt;&lt;i&gt;%1&lt;/i&gt;&lt;/p&gt;');						-- insert p and italic markup tags at each impled p (two or more consecutive '\n\n' sequences)
		else
			text = text:gsub ('[^\n]+', '&lt;p&gt;%1&lt;/p&gt;');							-- insert p markup at each impled p
			text = text:gsub ('\n', '');										-- strip newline characters
		end
	end

	return text;
end


--[[--------------------------&lt; T I T L E _ W R A P P E R _ M A K E &gt;------------------------------------------

makes a &lt;span title="&lt;title text&gt;"&gt;&lt;content_text&gt;&lt;/span&gt; or &lt;div title="&lt;title text&gt;"&gt;&lt;content_text&gt;&lt;/div&gt; where
&lt;title text&gt; is in the tool-tip in the wiki's local language and &lt;content_text&gt; is non-local-language text in
html markup.  This because the lang= attibute applies to the content of its enclosing tag.

&lt;tag&gt; holds a string 'div' or 'span' used to choose the correct wrapping tag
]]

local function title_wrapper_make (title_text, content_text, tag)
	local wrapper_t = {};
	
	table.insert (wrapper_t, table.concat ({'&lt;', tag}));						-- open opening wrapper tag
	table.insert (wrapper_t, ' title=\"');										-- begin title attribute
	table.insert (wrapper_t, title_text);										-- add &lt;title_text&gt;
	table.insert (wrapper_t, '\"&gt;');											-- end title attribute and close opening wrapper tag
	table.insert (wrapper_t, content_text);										-- add &lt;content_text&gt;
	table.insert (wrapper_t, table.concat ({'&lt;/', tag, '&gt;'}));					-- add closing wrapper tag

	return table.concat (wrapper_t);											-- make a big string and done
end


--[[--------------------------&lt; M A K E _ T E X T _ H T M L &gt;--------------------------------------------------

Add the html markup to text according to the type of content that it is: &lt;span&gt; or &lt;i&gt; tags for inline content or
&lt;div&gt; tags for block content

The lang= attribute also applies to the content of the tag where it is placed so this is wrong because 'Spanish
language text' is English:
	&lt;i lang="es" title="Spanish language text"&gt;casa&lt;/i&gt;
should be:
	&lt;span title="Spanish language text"&gt;&lt;i lang="es"&gt;casa&lt;/i&gt;&lt;/span&gt;
or for &lt;div&gt;...&lt;/div&gt;:
	&lt;div title="Spanish language text"&gt;&lt;div lang="es"&gt;&lt;spanish-language-text&gt;&lt;/div&gt;&lt;/div&gt;

]]

local function make_text_html (code, text, tag, rtl, style, size, language)
	local html_t = {};
	local style_added = '';
	local wrapper_tag = tag;													-- &lt;tag&gt; gets modified so save a copy for use when/if we create a wrapper span or div

	if text:match ('^%*') then
		table.insert (html_t, '&amp;#42;');											-- move proto language text prefix outside of italic markup if any; use numeric entity because plain splat confuses MediaWiki
		text = text:gsub ('^%*', '');											-- remove the splat from the text
	end

	if 'span' == tag then														-- default html tag for inline content
		if 'italic' == style then												-- but if italic
			tag = 'i';															-- change to &lt;i&gt; tags
		end
	else																		-- must be div so go
		text = div_markup_add (text, style);									-- handle implied &lt;p&gt;, implied &lt;p&gt; with &lt;i&gt;, and list markup (*;:#) with &lt;i&gt;
	end

	table.insert (html_t, table.concat ({'&lt;', tag}));							-- open the &lt;i&gt;, &lt;span&gt;, or &lt;div&gt; html tag
	code = code:gsub ('%-x%-.*', '');											-- strip private use subtag from code tag because meaningless outside of wikipedia
	table.insert (html_t, table.concat ({' lang="', code, '\"'}));				-- add language attribute

	if (rtl or unicode.is_rtl(text)) and ('ltr' == this_wiki_lang_dir) then		-- text is right-to-left on a left-to-right wiki
		table.insert (html_t, ' dir="rtl"');									-- add direction attribute for right-to-left languages
	elseif not (rtl or unicode.is_rtl(text)) and ('rtl' == this_wiki_lang_dir) then	-- text is left-to-right on a right-to-left wiki
		table.insert (html_t, ' dir="ltr"');									-- add direction attribute for left-to-right languages
	end

	if 'normal' == style then													-- when |italic=no
		table.insert (html_t, ' style=\"font-style: normal;');					-- override external markup, if any
		style_added = '\"';														-- remember that style attribute added and is not yet closed
	end

	if is_set (size) then														-- when |size=&lt;something&gt;
		if is_set (style_added) then
			table.insert (html_t, table.concat ({' font-size: ', size, ';'}));	-- add when style attribute already inserted
		else
			table.insert (html_t, table.concat ({' style=\"font-size: ', size, ';'}));	-- create style attribute
			style_added = '\"';													-- remember that style attribute added and is not yet closed
		end
	end

	table.insert (html_t, table.concat ({style_added, '&gt;'}));					-- close the opening html tag
	table.insert (html_t, text);												-- insert the text

	table.insert (html_t, table.concat ({'&lt;/', tag, '&gt;'}));						-- close the 'text' &lt;i&gt;, &lt;span&gt;, or &lt;div&gt; html tag

	if is_set (language) then													-- create a &lt;title_text&gt; string for the title= attribute in a wrapper span or div
		local title_text;
			if 'zxx' == code then												-- special case for this tag 'no linguistic content'
				title_text = table.concat ({language, ' text'});				-- not a language so don't use 'language' in title text
			elseif mw.ustring.find (language, 'languages', 1, true) then
				title_text = table.concat ({language, ' collective text'});		-- for collective languages
			else
				title_text = table.concat ({language, '-language text'});		-- for individual languages
			end

		return title_wrapper_make (title_text, table.concat (html_t), wrapper_tag);
	else
		return table.concat (html_t);
	end
end


--[=[-------------------------&lt; M A K E _ C A T E G O R Y &gt;----------------------------------------------------

For individual language, &lt;language&gt;, returns:
	[[Category:Articles containing &lt;language&gt;-language text]]

for English:
	[[Category:Articles containing explicitly cited English-language text]]
	
for ISO 639-2 collective languages (and for 639-1 bh):
	[[Category:Articles with text in &lt;language&gt; languages]]

]=]

local function make_category (code, language_name, nocat, name_get)
	local cat = {};
	local retval;

	if ((0 ~= namespace) or nocat) and not name_get then						-- only categorize in article space
		return '';																-- return empty string for concatenation
	end

	if mw.ustring.find (language_name, 'languages', 1, true) then
		return table.concat ({'[[Category:Articles with text in ', language_name, ']]'});
	end
		
	table.insert (cat, '[[Category:Articles containing ');

	if this_wiki_lang_tag == code then
		table.insert (cat, 'explicitly cited ' .. language_name);				-- unique category name for the local language
	else
		table.insert (cat, language_name);
	end
	
	table.insert (cat, '-language text]]');

	return table.concat (cat);
end


--[[--------------------------&lt; M A K E _ T R A N S L I T &gt;----------------------------------------------------

return translit &lt;i lang=xx-Latn&gt;...&lt;/i&gt; where xx is the language code; else return empty string

The value |script= is not used in {{transliteration}} for this purpose; instead it uses |code.  Because language scripts
are listed in the {{transliteration}} switches they are included in the data tables.  The script parameter is introduced
at {{Language with name and transliteration}}.  If |script= is set, this function uses it in preference to code.

To avoid confusion, in this module and the templates that use it, the transliteration script parameter is renamed
to be |translit-script= (in this function, tscript)

This function is used by both lang_xx() and transl()
	lang_xx() always provides code, language_name, and translit; may provide tscript; never provides style
	transl() always provides language_name, translit, and one of code or tscript, never both; always provides style

For {{transliteration}}, style only applies when a language code is provided
]]

local function make_translit (code, language_name, translit, std, tscript, style)
	local title;
	local out_t = {};
	local title_t = lang_data.translit_title_table;								-- table of transliteration standards and the language codes and scripts that apply to those standards
	local title_text = '';														-- tool tip text for title= attribute
	
	std = std and std:lower();													-- lower case for table indexing
	
	if not is_set (std) and not is_set (tscript) then							-- when neither standard nor script specified
		title_text = language_name;												-- write a generic tool tip
		if not mw.ustring.find (language_name, 'languages', 1, true) then		-- collective language names (plural 'languages' is part of the name)
			title_text = title_text .. '-language';								-- skip this text (individual and macro languages only)
		end
		title_text = title_text .. ' romanization';								-- finish the tool tip; use romanization when neither script nor standard supplied

	elseif is_set (std) and is_set (tscript) then								-- when both are specified
		if title_t[std] then													-- and if standard is legitimate
			if title_t[std][tscript] then										-- and if script for that standard is legitimate
				if script_table[tscript] then
					title_text = title_text .. table.concat ({title_t[std][tscript:lower()], ' (', script_table[tscript], ' script) transliteration'});	-- add the appropriate text to the tool tip
				else
					title_text = title_text .. title_t[std]['default'];			-- use the default if script not in std table; TODO: maint cat? error message because script not found for this standard?
				end
			else
				title_text = title_text .. title_t[std]['default'];				-- use the default if script not in std table; TODO: maint cat? error message because script not found for this standard?
			end
		else
			return '';															-- invalid standard, setup for error message
		end

	elseif is_set (std) then													-- translit-script not set, use language code
		if not title_t[std] then return ''; end									-- invalid standard, setup for error message
		
		if title_t[std][code] then												-- if language code is in the table (transl may not provide a language code)
			title_text = title_text .. table.concat ({title_t[std][code:lower()], ' (', language_name, ' language) transliteration'});	-- add the appropriate text to the tool tip
		else																	-- code doesn't match
			title_text = title_text .. title_t[std]['default'];					-- so use the standard's default
		end

	else																		-- here if translit-script set but translit-std not set
		if title_t['no_std'][tscript] then
			title_text = title_text .. title_t['no_std'][tscript];				-- use translit-script if set
		elseif title_t['no_std'][code] then
			title_text = title_text .. title_t['no_std'][code];					-- use language code
		else
			if is_set (tscript) then
				title_text = title_text .. table.concat ({language_name, '-script transliteration'});	-- write a script tool tip
			elseif is_set (code) then
				if not mw.ustring.find (language_name, 'languages', 1, true) then	-- collective language names (plural 'languages' is part of the name)
					title_text = title_text .. '-language';						-- skip this text (individual and macro languages only)
				end
				title_text = title_text .. ' transliteration';					-- finish the tool tip
			else
				title_text = title_text .. ' transliteration';					-- generic tool tip (can we ever get here?)
			end
		end
	end

	local close_tag;
	if is_set (code) then														-- when a language code is provided (always with {{lang-xx}} templates, not always with {{transliteration}})
		code = code:match ('^(%a%a%a?)');										-- strip all subtags leaving only the language subtag

		if not style then														-- nil for the default italic style
			table.insert (out_t, "&lt;i lang=\"");									-- so use &lt;i&gt; tag
			close_tag = '&lt;/i&gt;';													-- tag to be used when closing
		else
			table.insert (out_t, table.concat ({'&lt;span style=\"font-style: ', style, '\" lang=\"'}));	-- non-standard style, construct a span tag for it
			close_tag = '&lt;/span&gt;';												-- tag to be used when closing
		end
		table.insert (out_t, code);
		table.insert (out_t, "-Latn\"&gt;");										-- transliterations are always Latin script
	else
		table.insert (out_t, "&lt;span&gt;");											-- when no language code: no lang= attribute, not italic ({{transliteration}} only)
		close_tag = '&lt;/span&gt;';
	end

	table.insert (out_t, translit);												-- add the translit text
	table.insert (out_t, close_tag);											-- and add the appropriate &lt;/i&gt; or &lt;/span&gt;

	if '' == title_text then													-- when there is no need for a tool-tip
		return table.concat (out_t);											-- make a string and done
	else
		return title_wrapper_make (title_text, table.concat (out_t), 'span');	-- wrap with a tool-tip span and don
	end
end


--[[--------------------------&lt; V A L I D A T E _ T E X T &gt;----------------------------------------------------

This function checks the content of args.text and returns empty string if nothing is amiss else it returns an
error message.  The tests are for empty or missing text and for improper or disallowed use of apostrophe markup.

Italic rendering is controlled by the |italic= template parameter so italic markup should never appear in args.text
either as ''itself'' or as '''''bold italic''''' unless |italic=unset or |italic=invert.

]]

local function validate_text (template, args)
	if not is_set (args.text) then
		return make_error_msg ('no text', args, template);
	end

	if args.text:find ("%f[\']\'\'\'\'%f[^\']") or args.text:find ("\'\'\'\'\'[\']+") then	-- because we're looking, look for 4 appostrophes or 6+ appostrophes
		return make_error_msg ('text has malformed markup', args, template);
	end

	local style = args.italic;

	if ('unset' ~= style) and ('invert' ~=style) then
		if args.text:find ("%f[\']\'\'%f[^\']") or args.text:find ("%f[\']\'\'\'\'\'%f[^\']") then	-- italic but not bold, or bold italic
			return make_error_msg ('text has italic markup', args, template);
		end
	end
end


--[[--------------------------&lt; R E N D E R _ M A I N T &gt;------------------------------------------------------

render mainenance messages and categories

]]

local function render_maint(nocat)
	local maint = {};
	
	if 0 &lt; #maint_msgs then														-- when there are maintenance messages
		table.insert (maint, table.concat ({'&lt;span class="lang-comment" style="font-style: normal; display: none; color: #33aa33; margin-left: 0.3em;"&gt;'}));	-- opening &lt;span&gt; tag
		for _, msg in ipairs (maint_msgs) do
			table.insert (maint, table.concat ({msg, ' '}));					-- add message strings
		end
		table.insert (maint, '&lt;/span&gt;');										-- close the span
	end
	
	if (0 &lt; #maint_cats) and (0 == namespace) and not nocat then				-- when there are maintenance categories; article namespace only
		for _, cat in ipairs (maint_cats) do
			table.insert (maint, table.concat ({'[[Category:', cat, ']]'}));	-- format and add the categories
		end
	end
	
	return table.concat (maint);
end


--[[--------------------------&lt; P R O T O _ P R E F I X &gt;------------------------------------------------------

for proto languages, text is prefixed with a splat.  We do that here as a flag for make_text_html() so that a splat
will be rendered outside of italic markup (if used).  If the first character in text here is already a splat, we
do nothing

proto_param is boolean or nil; true adds splat prefix regardless of language name; false removes and / or inhibits
regardless of language name; nil does nothing; presumes that the value in text is correct but removes extra splac

]]

local function proto_prefix (text, language_name, proto_param)
	if false == proto_param then												-- when forced by |proto=no
		return text:gsub ('^%**', '');											-- return text without splat prefix regardless of language name or existing splat prefix in text
	elseif (language_name:find ('^Proto%-') or (true == proto_param)) then		-- language is a proto or forced by |proto=yes
		return text:gsub ('^%**', '*');											-- prefix proto-language text with a splat; also removes duplicate prefixing splats
	end
	
	return text:gsub ('^%*+', '*');												-- return text unmolested except multiple splats reduced to one splat
end


--[[--------------------------&lt; H A S _ P O E M _ T A G &gt;------------------------------------------------------

looks for a poem strip marker in text; returns true when found; false else

auto-italic detection disabled when text has poem stripmarker because it is not possible for this code to know
the content that will replace the stripmarker.

]]

local function has_poem_tag (text)
	return text:find ('\127[^\127]*UNIQ%-%-poem%-[%a%d]+%-QINU[^\127]*\127') and true or false;
end


--[[--------------------------&lt; H T M L _ T A G _ S E L E C T &gt;------------------------------------------------

Inspects content of and selectively trims text.  Returns text and the name of an appropriate html tag for text.

If text contains:
	\n\n	text has implied &lt;p&gt;..&lt;/p&gt; tags - trim leading and trailing whitespace and return 
If text begins with list markup:
	\n*		unordered
	\n;		definition
	\n:		definition
	\n#		ordered
trim all leading whitespace except  \n and trim all trailing whitespace

If text contains &lt;poem&gt;...&lt;/poem&gt; stripmarker, return text unmodified and choose &lt;div&gt;..&lt;/div&gt; tags because 
the stripmarker is replaced with text wrapped in &lt;div&gt;..&lt;/div&gt; tags.

If the text contains any actual &lt;div&gt;...&lt;/div&gt; tags, then it's again returned unmodified and &lt;div&gt;...&lt;/div&gt;
tags are used to wrap it, to prevent div/span inversion.

]]

local function html_tag_select (text)
	local tag;
	
	if has_poem_tag (text) then													-- contains poem stripmarker (we can't know the content of that)
		tag = 'div';															-- poem replacement is in div tags so lang must use div tags
	elseif text:find ('&lt;div') then												-- reductive; if the text contains a div tag, we must use div tags
		tag = 'div';
	elseif mw.text.trim (text):find ('\n\n+') then								-- contains implied p tags
		text = mw.text.trim (text);												-- trim leading and trailing whitespace characters
		tag = 'div';															-- must be div because span may not contain p tags (added later by MediaWiki); poem replacement is in div tags
	elseif text:find ('\n[%*:;%#]') then										-- if text has list markup
		text = text:gsub ('^[\t\r\f ]*', ''):gsub ('%s*$', '');					-- trim all whitespace except leading newline character '\n'
		tag = 'div';															-- must be div because span may not contain ul, dd, dl, ol tags (added later by MediaWiki)
	else
		text = mw.text.trim (text);												-- plain text
		tag = 'span';															-- so span is fine
	end
	
	return text, tag;
end


--[[--------------------------&lt; V A L I D A T E _ P R O T O &gt;--------------------------------------------------

validates value assigned to |proto=; permitted values are yes and no; yes returns as true, no returns as false,
empty string (or parameter omitted) returns as nil; any other value returns as nil with a second return value of
true indicating that some other value has been assigned to |proto=

]]

local function validate_proto (proto_param)
	if 'yes' == proto_param then
		return true;
	elseif 'no' == proto_param then
		return false;
	elseif is_set (proto_param) then
		return nil, true;														-- |proto= something other than 'yes' or 'no'
	else
		return nil;																-- missing or empty
	end
end


--[[--------------------------&lt; L A N G U A G E _ N A M E _ G E T &gt;--------------------------------------------

common function to return language name from the data set according to IETF tag

returns language name if found in data tables; nil else

]]

local function language_name_get (ietf, code, cat)
	ietf = ietf:lower();														-- ietf:lower() because format_ietf_tag() returns mixed case
	
	local name;																	-- remains nil if not found
	
	if override_table[ietf] then												-- look for whole IETF tag in override table
		name = override_table[ietf];
	elseif override_table[code] then											-- not there so try basic language tag
		name = override_table[code];
	elseif lang_table[code] then												-- shift to iana active tag/name table
		name = lang_table[code];
	elseif lang_dep_table[code] then											-- try the iana deprecated tag/name table
		name = lang_dep_table[code];
	end

	if lang_dep_table[code] and cat then										-- because deprecated code may have been overridden to en.wiki preferred name
		table.insert (maint_cats, table.concat ({'Lang and lang-xx using deprecated ISO 639 codes|', code}));
		table.insert (maint_msgs, table.concat ({'code: ', code, ' is deprecated'}));
	end

	return name;																-- name from data tables or nil
end


--[[--------------------------&lt; _ L A N G &gt;--------------------------------------------------------------------

entry point for {{lang}}

there should be no reason to set parameters in the {{lang}} {{#invoke:}}
	&lt;includeonly&gt;{{#invoke:lang|lang}}&lt;/includeonly&gt;

parameters are received from the template's frame (parent frame)

]]

local function _lang (args)
	local out = {};
	local language_name;														-- used to make category names
	local category_name;														-- same as language_name except that it retains any parenthetical disambiguators (if any) from the data set
	local subtags = {};															-- IETF subtags script, region, variant, and private
	local code;																	-- the language code
	local msg;																	-- for error messages
	local tag = 'span';															-- initial value for make_text_html()
	local template = args.template or 'Lang';

	maint_cats = {};															-- initialize because when this module required into another module, these only declared once so only initialzed once
	maint_msgs = {};
	
	validate_cat_args (args);													-- determine if categorization should be suppressed

	if args[1] and args.code then
		return make_error_msg ('conflicting: {{{1}}} and |code=', args, template);
	else
		args.code = args[1] or args.code;										-- prefer args.code
	end

	if args[2] and args.text then
		return make_error_msg ('conflicting: {{{2}}} and |text=', args, template);
	else
		args.text = args[2] or args.text;										-- prefer args.text
	end
	
	msg = validate_text (template, args);										-- ensure that |text= is set
	if is_set (msg) then														-- msg is an already-formatted error message
		return msg;
	end
	
	args.text, tag = html_tag_select (args.text);								-- inspects text; returns appropriate html tag with text trimmed accordingly

	args.rtl = args.rtl == 'yes';												-- convert to boolean: 'yes' -&gt; true, other values -&gt; false

	args.proto, msg = validate_proto (args.proto);								-- return boolean, or nil, or nil and error message flag
	if msg then
		return make_error_msg (table.concat ({'invalid |proto=: ', args.proto}), args, template);
	end

	code, subtags.script, subtags.region, subtags.variant, subtags.private, msg = get_ietf_parts (args.code);	-- |script=, |region=, |variant= not supported because they should be part of args.code ({{{1}}} in {{lang}})

	if msg then
		return make_error_msg ( msg, args, template);
	end

	args.italic, msg = validate_italic (args);
	if msg then
		return make_error_msg (msg, args, template);
	end

	if nil == args.italic then													-- nil when |italic= absent or not set or |italic=default; args.italic controls
		if ('latn' == subtags.script) or								 		-- script is latn
			(this_wiki_lang_tag ~= code and not is_set (subtags.script) and not has_poem_tag (args.text) and unicode.is_Latin (args.text)) then -- text not this wiki's language, no script specified and not in poem markup but is wholly latn script (auto-italics)
				args.italic = 'italic';											-- DEFAULT for {{lang}} templates is upright; but if latn script set for font-style:italic
		else
			args.italic = 'inherit';											-- italic not set; script not latn; inherit current style
		end
	end
	
	if is_set (subtags.script) then												-- if script set, override rtl setting
		if in_array (subtags.script, lang_data.rtl_scripts) then
			args.rtl = true;													-- script is an rtl script
		else
			args.rtl = false;													-- script is not an rtl script
		end
	end

	args.code = format_ietf_tag (code, subtags.script, subtags.region, subtags.variant, subtags.private);	-- format to recommended subtag styles
	language_name = language_name_get (args.code, code, true);					-- get language name; try ietf tag first, then code w/o variant then code w/ variant

	if 'invert' == args.italic and 'span' == tag then							-- invert only supported for in-line content
		args.text = invert_italics (args.text)
	end

	args.text = proto_prefix (args.text, language_name, args.proto);			-- prefix proto-language text with a splat

	table.insert (out, make_text_html (args.code, args.text, tag, args.rtl, args.italic, args.size, language_name));
	table.insert (out, make_category (code, language_name, args.nocat));
	table.insert (out, render_maint(args.nocat));								-- maintenance messages and categories

	return table.concat (out);													-- put it all together and done
end


--[[--------------------------&lt; L A N G &gt;----------------------------------------------------------------------

entry point for {{lang}}

there should be no reason to set parameters in the {{lang}} {{#invoke:}}
	&lt;includeonly&gt;{{#invoke:lang|lang}}&lt;/includeonly&gt;

parameters are received from the template's frame (parent frame)

]]

local function lang (frame)
	local args = getArgs (frame, {												-- this code so that we can detect and handle wiki list markup in text
		valueFunc = function (key, value)
			if 2 == key or 'text' == key then									-- the 'text' parameter; do not trim wite space
				return value;													-- return untrimmed 'text'
			elseif value then													-- all other values: if the value is not nil
				value = mw.text.trim (value);									-- trim whitespace
				if '' ~= value then												-- empty string when value was only whitespace
					return value;
				end
			end
			return nil;															-- value was empty or contained only whitespace
		end																		-- end of valueFunc
		});

	return _lang (args);
end


--[[--------------------------&lt; T R A N S L A T I O N _ M A K E &gt;----------------------------------------------

stand-alone function to create literal translation of main text

Also used by {{lang-x2}}

]]

local function translation_make (args_t)
	local translation_t = {', '};												-- initialize output

	if 'none' ~= args_t.label then												-- if we want a label
		table.insert (translation_t, '&lt;small&gt;');								-- open the &lt;small&gt; html tag
		if 'no' == args_t.link then
			table.insert (translation_t, '&lt;abbr title="literal translation"&gt;lit.&lt;/abbr&gt;');	-- unlinked form
		else
			table.insert (translation_t, make_wikilink ('Literal translation', 'lit.'));	-- linked form
		end
		table.insert (translation_t, "&amp;thinsp;&lt;/small&gt;");						-- close the &lt;small&gt; html tag
	end
	table.insert (translation_t, table.concat ({'&amp;#39;', args_t.translation, '&amp;#39;'}));	-- use html entities to avoid wiki markup confusion
	return table.concat (translation_t);										-- make a big string and done
end


--[[--------------------------&lt; L A N G _ X X &gt;----------------------------------------------------------------

For the {{lang-xx}} templates, the only parameter required to be set in the template is the language code.  All
other parameters can, usually should, be written in the template call.  For {{lang-xx}} templates for languages
that can have multiple writing systems, it may be appropriate to set |script= as well.

For each {{lang-xx}} template choose the appropriate entry-point function so that this function knows the default
styling that should be applied to text.

For normal, upright style:
	&lt;includeonly&gt;{{#invoke:lang|lang_xx_inherit|code=xx}}&lt;/includeonly&gt;
For italic style:
	&lt;includeonly&gt;{{#invoke:lang|lang_xx_italic|code=xx}}&lt;/includeonly&gt;

All other parameters should be received from the template's frame (parent frame)

Supported parameters are:
	|code = (required) the IANA language code
	|script = IANA script code; especially for use with languages that use multiple writing systems
	|region = IANA region code
	|variant = IANA variant code
	|text = (required) the displayed text in language specified by code
	|link = boolean false ('no') does not link code-spcified language name to associated language article
	|rtl = boolean true ('yes') identifies the language specified by code as a right-to-left language
	|nocat = boolean true ('yes') inhibits normal categorization; error categories are not affected
	|cat = boolian false ('no') opposite form of |nocat=
	|italic = boolean true ('yes') renders displayed text in italic font; boolean false ('no') renders displayed text in normal font; not set renders according to initial_style_state
	|lit = text that is a literal translation of text
	|label = 'none' to suppress all labeling (language name, 'translit.', 'lit.')
				any other text replaces language-name label - automatic wikilinking disabled
	
	for those {{lang-xx}} templates that support transliteration (those templates where |text= is not entirely latn script):
	|translit = text that is a transliteration of text
	|translit-std = the standard that applies to the transliteration
	|translit-script = ISO 15924 script name; falls back to code

For {{lang-xx}}, the positional parameters are:
	{{{1}}}	text
	{{{2}}}	transliterated text
	{{{3}}}	literal translation text
no other positional parameters are allowed

]]

local function _lang_xx (args)
	local out = {};
	local language_name;														-- used to make display text, article links
	local category_name;														-- same as language_name except that it retains any parenthetical disambiguators (if any) from the data set
	local subtags = {};															-- IETF subtags script, region, and variant
	local code;																	-- the language code

	local translit_script_name;													-- name associated with IANA (ISO 15924) script code
	local translit;
	local translit_title;
	local msg;																	-- for error messages
	local tag = 'span';															-- initial value for make_text_html()
	local template = args.template or 'Lang-xx';

	maint_cats = {};															-- initialize because when this module required into another module, these only declared once so only initialzed once
	maint_msgs = {};
	
	if args[1] and args.text then
		return make_error_msg ('conflicting: {{{1}}} and |text=', args, template);
	else
		args.text = args[1] or args.text;										-- prefer args.text
	end
	
	msg = validate_text (template, args);										-- ensure that |text= is set, does not contain italic markup and is protected from improper bolding
	if is_set (msg) then
		return msg;
	end

	args.text, tag = html_tag_select (args.text);								-- inspects text; returns appropriate html tag with text trimmed accordingly

	if args[2] and args.translit then
		return make_error_msg ('conflicting: {{{2}}} and |translit=', args, template);
	else
		args.translit = args[2] or args.translit								-- prefer args.translit
	end
	
	if args[3] and (args.translation or args.lit) then
		return make_error_msg ('conflicting: {{{3}}} and |lit= or |translation=', args, template);
	elseif args.translation and args.lit then
		return make_error_msg ('conflicting: |lit= and |translation=', args, template);
	else
		args.translation = args[3] or args.translation or args.lit;				-- prefer args.translation
	end

	if args.links and args.link then
		return make_error_msg ('conflicting: |links= and |link=', args, template);
	else
		args.link = args.link or args.links;									-- prefer args.link
	end

	validate_cat_args (args);													-- determine if categorization should be suppressed

	args.rtl = args.rtl == 'yes';												-- convert to boolean: 'yes' -&gt; true, other values -&gt; false

	code, subtags.script, subtags.region, subtags.variant, subtags.private, msg = get_ietf_parts (args.code, args.script, args.region, args.variant);	-- private omitted because private

	if msg then																	-- if an error detected then there is an error message
		return make_error_msg (msg, args, template);
	end
	
	args.italic, msg = validate_italic (args);
	if msg then
		return make_error_msg (msg, args, template);
	end

	if nil == args.italic then													-- args.italic controls
		if is_set (subtags.script) then
			if 'latn' == subtags.script then
				args.italic = 'italic';											-- |script=Latn; set for font-style:italic
			else
				args.italic = initial_style_state;								-- italic not set; script is not latn; set for font-style:&lt;initial_style_state&gt;
			end
		else
			args.italic = initial_style_state;									-- here when |italic= and |script= not set; set for font-style:&lt;initial_style_state&gt;
		end
	end
	
	if is_set (subtags.script) then												-- if script set override rtl setting
		if in_array (subtags.script, lang_data.rtl_scripts) then
			args.rtl = true;													-- script is an rtl script
		else
			args.rtl = false;													-- script is not an rtl script
		end
	end

	args.proto, msg = validate_proto (args.proto);								-- return boolean, or nil, or nil and error message flag
	if msg then
		return make_error_msg (table.concat ({'invalid |proto=: ', args.proto}), args, template);
	end

	args.code = format_ietf_tag (code, subtags.script, subtags.region, subtags.variant, subtags.private);	-- format to recommended subtag styles
	language_name = language_name_get (args.code, code, true);					-- get language name; try ietf tag first, then code w/o variant then code w/ variant

	category_name = language_name;												-- category names retain IANA parenthetical diambiguators (if any)
	language_name = language_name:gsub ('%s+%b()', '');							-- remove IANA parenthetical disambiguators or qualifiers from names that have them

	if args.label then
		if 'none' ~= args.label then
			table.insert (out, table.concat ({args.label, ': '}));				-- custom label
		end
	else
		if 'no' == args.link then
			table.insert (out, language_name);									-- language name without wikilink
		else
			if mw.ustring.find (language_name, 'languages', 1, true) then
				table.insert (out, make_wikilink (language_name));				-- collective language name uses simple wikilink
			elseif lang_data.article_name[code] then
				table.insert (out, make_wikilink (lang_data.article_name[code], language_name));	-- language name with wikilink from override data
			else
				table.insert (out, make_wikilink (language_name .. ' language', language_name));	-- language name with wikilink
			end
		end
		table.insert (out, ': ');												-- separator
	end

	if 'invert' == args.italic then
		args.text = invert_italics (args.text)
	end
	
	args.text = proto_prefix (args.text, language_name, args.proto);			-- prefix proto-language text with a splat

	table.insert (out, make_text_html (args.code, args.text, tag, args.rtl, args.italic, args.size, ('none' == args.label) and language_name or nil))

	if is_set (args.translit) and not unicode.is_Latin (args.text) then			-- transliteration (not supported in {{lang}}); not supported when args.text is wholly latn text (this is an imperfect test)
		table.insert (out, ', ');												-- comma to separate text from translit
		if 'none' ~= args.label then
			table.insert (out, '&lt;small&gt;');
			if script_table[args['translit-script']] then						-- when |translit-script= is set, try to use the script's name
				translit_script_name = script_table[args['translit-script']];
			else
				translit_script_name = language_name;							-- fall back on language name
			end
			translit_title = mw.title.makeTitle (0, table.concat ({'Romanization of ', translit_script_name}));		-- make a title object
			if translit_title.exists and ('no' ~= args.link) then
				table.insert (out, make_wikilink ('Romanization of ' .. translit_script_name or language_name, 'romanized') .. ':');	-- make a wikilink if there is an article to link to
			else
				table.insert (out, 'romanized:');								-- else plain text
			end
			table.insert (out, '&amp;nbsp;&lt;/small&gt;');								-- close the small tag
		end
		
		translit = make_translit (args.code, language_name, args.translit, args['translit-std'], args['translit-script'])
		if is_set (translit) then
			table.insert (out, translit);
		else
			return make_error_msg (table.concat ({'invalid translit-std: \'', args['translit-std'] or '[missing]'}), args, template);
		end
	end
	
	if is_set (args.translation) then											-- translation (not supported in {{lang}})
		table.insert (out, translation_make (args));
	end
	
	table.insert (out, make_category (code, category_name, args.nocat));
	table.insert (out, render_maint(args.nocat));								-- maintenance messages and categories

	return table.concat (out);													-- put it all together and done
end


--[[--------------------------&lt; L A N G _ X X _ A R G S _ G E T &gt;----------------------------------------------

common function to get args table from {{lang-??}} templates

returns table of args

]]

local function lang_xx_args_get (frame)
	local args = getArgs(frame,
		{
		parentFirst= true,														-- parameters in the template override parameters set in the {{#invoke:}}
		valueFunc = function (key, value)
			if 1 == key then													-- the 'text' parameter; do not trim wite space
				return value;													-- return untrimmed 'text'
			elseif value then													-- all other values: if the value is not nil
				value = mw.text.trim (value);									-- trim whitespace
				if '' ~= value then												-- empty string when value was only whitespace
					return value;
				end
			end
			return nil;															-- value was empty or contained only whitespace
		end																		-- end of valueFunc
	});

	return args;
end


--[[--------------------------&lt; L A N G _ X X _ I T A L I C &gt;--------------------------------------------------

Entry point for those {{lang-xx}} templates that call lang_xx_italic().  Sets the initial style state to italic.

]]

local function lang_xx_italic (frame)
	local args = lang_xx_args_get (frame);
	
	initial_style_state = 'italic';
	return _lang_xx (args);
end


--[[--------------------------&lt; _ L A N G _ X X _ I T A L I C &gt;------------------------------------------------

Entry point ffrom another module.  Sets the initial style state to italic.

]]

local function _lang_xx_italic (args)
	initial_style_state = 'italic';
	return _lang_xx (args);
end


--[[--------------------------&lt; L A N G _ X X _ I N H E R I T &gt;------------------------------------------------

Entry point for those {{lang-xx}} templates that call lang_xx_inherit().  Sets the initial style state to inherit.

]]

local function lang_xx_inherit (frame)
	local args = lang_xx_args_get (frame);

	initial_style_state = 'inherit';
	return _lang_xx (args);
end


--[[--------------------------&lt; _ L A N G _ X X _ I N H E R I T &gt;----------------------------------------------

Entry point from another module.  Sets the initial style state to inherit.

]]

local function _lang_xx_inherit (args)
	initial_style_state = 'inherit';
	return _lang_xx (args);
end


--[[--------------------------&lt; _ I S _ I E T F _ T A G &gt;------------------------------------------------------

Returns true when a language name associated with IETF language tag exists; nil else.  IETF language tag must be valid.

All code combinations supported by {{lang}} and the {{lang-xx}} templates are supported by this function.

Module entry point from another module

]]

local function _is_ietf_tag (tag)												-- entry point when this module is require()d into another
	local c, s, r, v, p, err;													-- code, script, region, variant, private, error message
	c, s, r, v, p, err = get_ietf_parts (tag);									-- disassemble tag into constituent part and validate

	return ((c and not err) and true) or nil;									-- return true when code portion has a value without error message; nil else
end


--[[--------------------------&lt; I S _ I E T F _ T A G &gt;--------------------------------------------------------

Module entry point from an {{#invoke:}}

]]

local function is_ietf_tag (frame)
	return _is_ietf_tag (getArgs (frame)[1]);									-- args[1] is the ietf language tag to be tested; also get parent frame
end


--[[--------------------------&lt; I S _ I E T F _ T A G _ F R A M E &gt;--------------------------------------------

Module entry point from an {{#invoke:}}; same as is_ietf_tag() except does not get parameters from the parent
(template) frame.  This function not useful when called by {{lang|fn=is_ietf_tag_frame|&lt;tag&gt;}} because &lt;tag&gt;
is in the parent frame.

]]

local function is_ietf_tag_frame (frame)
	return _is_ietf_tag (getArgs (frame, {frameOnly = true,})[1]);				-- args[1] is the ietf language tag to be tested; do not get parent frame
end


--[[--------------------------&lt; _ N A M E _ F R O M _ T A G &gt;--------------------------------------------------

Returns language name associated with IETF language tag if valid; error message else.

All code combinations supported by {{lang}} and the {{lang-xx}} templates are supported by this function.

Set invoke's |link= parameter to yes to get wikilinked version of the language name.

Module entry point from another module

]]

local function _name_from_tag (args)
	local subtags = {};															-- IETF subtags script, region, variant, and private
	local raw_code = args[1];													-- save a copy of the input IETF subtag
	local link = 'yes' == args['link'];											-- make a boolean
	local label = args.label;
	local code;																	-- the language code
	local msg;																	-- gets an error message if IETF language tag is malformed or invalid
	local language_name = '';
	
	code, subtags.script, subtags.region, subtags.variant, subtags.private, msg = get_ietf_parts (raw_code);
	if msg then
		local template = (args['template'] and table.concat ({'{{', args['template'], '}}: '})) or '';	-- make template name (if provided by the template)
		return table.concat ({'&lt;span style=\"color:#d33\"&gt;Error: ', template, msg, '&lt;/span&gt;'});
	end

	raw_code = format_ietf_tag (code, subtags.script, subtags.region, subtags.variant, subtags.private);	-- format to recommended subtag styles; private omitted because private
	language_name = language_name_get (raw_code, code);							-- get language name; try ietf tag first, then code w/o variant then code w/ variant

	language_name = language_name:gsub ('%s+%b()', '');							-- remove IANA parenthetical disambiguators or qualifiers from names that have them

	if link then																-- when |link=yes, wikilink the language name
		if mw.ustring.find (language_name, 'languages', 1, true) then
			language_name = make_wikilink (language_name, label);				-- collective language name uses simple wikilink
		elseif lang_data.article_name[code] then
			language_name = make_wikilink (lang_data.article_name[code], label or language_name);	-- language name with wikilink from override data
		else
			language_name = make_wikilink (language_name .. ' language', label or language_name);	-- language name with wikilink
		end
	end

	return language_name;
end


--[[--------------------------&lt; N A M E _ F R O M _ T A G &gt;----------------------------------------------------

Module entry point from an {{#invoke:}}

]]

local function name_from_tag (frame)											-- entry point from an {{#invoke:Lang|name_from_tag|&lt;ietf tag&gt;|link=&lt;yes&gt;|template=&lt;template name&gt;}}
	return _name_from_tag (getArgs(frame))										-- pass-on the args table, nothing else; getArgs() so we also get parent frame
end


--[[--------------------------&lt; _ T A G _ F R O M _ N A M E &gt;--------------------------------------------------

Returns the ietf language tag associated with the language name.  Spelling of language name must be correct
according to the spelling in the source tables.  When a standard language name has a parenthetical disambiguator,
that disambiguator must be omitted (they are not present in the data name-to-tag tables).

Module entry point from another module

]]

local function _tag_from_name (args)											-- entry point from another module
	local msg;

	if args[1] and '' ~= args[1] then
		local data = mw.loadData ('Module:Lang/tag from name');					-- get the reversed data tables TODO: change when going live
		local lang = args[1]:lower();											-- allow any-case for the language name (speeling must till be correct)
		local tag = data.rev_override_table[lang] or data.rev_lang_table[lang] or data.rev_lang_dep_table[lang];	-- get the code; look first in the override then in the standard

		if tag then
			return tag, true;													-- language name found so return tag and done; second return used by is_lang_name()
		else
			msg = 'language: ' .. args[1] .. ' not found'						-- language name not found, error message
		end
	else
		msg = 'missing language name'											-- language name not provided, error message
	end

	local template = '';
	if args.template and '' ~= args.template then
		template = table.concat ({'{{', args['template'], '}}: '});				-- make template name (if provided by the template)
	end
	return table.concat ({'&lt;span style=\"color:#d33\"&gt;Error: ', template, msg, '&lt;/span&gt;'});
end


--[[--------------------------&lt; T A G _ F R O M _ N A M E &gt;----------------------------------------------------

Module entry point from an {{#invoke:}}

]]

local function tag_from_name (frame)											-- entry point from an {{#invoke:Lang|tag_from_name|&lt;language name&gt;|link=&lt;yes&gt;|template=&lt;template name&gt;}}
	local result, _ = _tag_from_name (getArgs(frame))							-- pass-on the args table, nothing else; getArgs() so we also get parent frame; supress second return used by is_lang_name()
	return result;		
end


--[[--------------------------&lt; I S _ L A N G _ N A M E &gt;------------------------------------------------------

Module entry point from an {{#invoke:}}

]]

local function is_lang_name (frame)
	local _, result = _tag_from_name (getArgs(frame))							-- pass-on the args table, nothing else; getArgs() so we also get parent frame; supress second return used by tag_from_name()
	return result and true or nil;		
end


--[[--------------------------&lt; _ T R A N S L &gt;----------------------------------------------------------------

Module entry point from another module

]]

local function _transl (args)
	local title_table = lang_data.translit_title_table;							-- table of transliteration standards and the language codes and scripts that apply to those standards
	local language_name;														-- language name that matches language code; used for tool tip
	local translit;																-- transliterated text to display
	local script;																-- IANA script
	local msg;																	-- for when called functions return an error message

	maint_cats = {};															-- initialize because when this module required into another module, these only declared once so only initialzed once
	maint_msgs = {};
	
	if is_set (args[3]) then													-- [3] set when {{transliteration|code|standard|text}}
		args.text = args[3];													-- get the transliterated text
		args.translit_std = args[2] and args[2]:lower();						-- get the standard; lower case for table indexing

		if not title_table[args.translit_std] then
			return make_error_msg (table.concat ({'unrecognized transliteration standard: ', args.translit_std}), args, 'Transliteration');
		end
	else
		if is_set (args[2]) then												-- [2] set when {{transliteration|code|text}}
			args.text = args[2];												-- get the transliterated text
		else
			if args[1] and (args[1]:match ('^%a%a%a?%a?$') or					-- args[2] missing; is args[1] a language or script tag or is it the transliterated text?
				args[1]:match ('^%a%a%a?%-x%-')) then							-- or is args[1] a private-use tag
					return make_error_msg ('no text', args, 'Transliteration');	-- args[1] is a code so we're missing text
			else
				args.text = args[1];											-- args[1] is not a code so we're missing that; assign args.text for error message
				return make_error_msg ('missing language / script code', args, 'Transliteration');
			end
		end
	end

	if is_set (args[1]) then													-- IANA language code used for html lang= attribute; or ISO 15924 script code
		if args[1]:match ('^%a%a%a?%a?$') or args[1]:match ('^%a%a%a?%-x%-') then	-- args[1] has correct form?
			args.code = args[1]:lower();										-- use the language/script code; only (2, 3, or 4 alpha characters) or private-use; lower case because table indexes are lower case
		else
			return make_error_msg (table.concat ({'unrecognized language / script code: ', args[1]}), args, 'Transliteration');	-- invalid language / script code
		end
	else
		return make_error_msg ('missing language / script code', args, 'Transliteration');	-- missing language / script code so quit
	end

	args.italic, msg = validate_italic (args);
	if msg then
		return make_error_msg (msg, args, 'Transliteration');
	end
	
	if 'italic' == args.italic then												-- 'italic' when |italic=yes; because that is same as absent or not set and |italic=default
		args.italic = nil;														-- set to nil; 
	end

	if override_table[args.code] then											-- is code a language code defined in the override table?
		language_name = override_table[args.code];
		args.code = args.code:match ('^%a%a%a?');								-- if private use, strip all but language subtag
	elseif lang_table[args.code] then											-- is code a language code defined in the standard language code tables?
		language_name = lang_table[args.code];
	elseif lang_dep_table[args.code] then										-- is code a language code defined in the deprecated language code tables?
		language_name = lang_dep_table[args.code];
	elseif script_table[args.code] then											-- if here, code is not a language code; is it a script code?
		language_name = script_table[args.code];
		script = args.code;														-- code was an ISO 15924 script so use that instead
		args.code = '';															-- unset because not a language code
	else
		return make_error_msg (table.concat ({'unrecognized language / script code: ', args.code}), args, 'Transliteration');	-- invalid language / script code
	end
																				-- here only when all parameters passed to make_translit() are valid
	return make_translit (args.code, language_name, args.text, args.translit_std, script, args.italic);
end


--[[--------------------------&lt; T R A N S L &gt;------------------------------------------------------------------

Module entry point from an {{#invoke:}}

]]

local function transl (frame)
	return _transl (getArgs(frame));
end


--[[--------------------------&lt; C A T E G O R Y _ F R O M _ T A G &gt;--------------------------------------------

Returns category name associated with IETF language tag if valid; error message else

All code combinations supported by {{lang}} and the {{lang-xx}} templates are supported by this function.

Module entry point from another module

]]

local function _category_from_tag (args_t)
	local subtags = {};															-- IETF subtags script, region, variant, and private
	local raw_code = args_t[1];													-- save a copy of the input IETF subtag
	local link = 'yes' == args_t.link;											-- make a boolean
	local label = args_t.label;
	local code;																	-- the language code
	local msg;																	-- gets an error message if IETF language tag is malformed or invalid
	local category_name = '';
	
	code, subtags.script, subtags.region, subtags.variant, subtags.private, msg = get_ietf_parts (raw_code);
	if msg then
		local template = (args_t.template and table.concat ({'{{', args_t.template, '}}: '})) or '';	-- make template name (if provided by the template)
		return table.concat ({'&lt;span style=\"color:#d33\"&gt;Error: ', template, msg, '&lt;/span&gt;'});
	end

	raw_code = format_ietf_tag (code, subtags.script, subtags.region, subtags.variant, subtags.private);	-- format to recommended subtag styles; private omitted because private
	category_name = language_name_get (raw_code, code);							-- get language name; try ietf tag first, then code w/o variant then code w/ variant
	category_name = make_category (code, category_name, nil, true):gsub ('[%[%]]', '');

	if link then
		return table.concat ({'[[:', category_name, ']]'});
	else
		return category_name;
	end
end


--[[--------------------------&lt; C A T E G O R Y _ F R O M _ T A G &gt;--------------------------------------------

Module entry point from an {{#invoke:}}

]]

local function category_from_tag (frame)										-- entry point from an {{#invoke:Lang|category_from_tag|&lt;ietf tag&gt;|template=&lt;template name&gt;}}
	return _category_from_tag (getArgs (frame));								-- pass-on the args table, nothing else; getArgs() so we also get parent frame
end


--[[--------------------------&lt; E X P O R T E D   F U N C T I O N S &gt;------------------------------------------
]]

return {
	category_from_tag = category_from_tag,
	lang = lang,																-- entry point for {{lang}}
	lang_xx_inherit = lang_xx_inherit,											-- entry points for {{lang-??}}
	lang_xx_italic = lang_xx_italic,
	is_ietf_tag = is_ietf_tag,
	is_ietf_tag_frame = is_ietf_tag_frame,
	is_lang_name = is_lang_name,
	tag_from_name = tag_from_name,												-- returns ietf tag associated with language name
	name_from_tag = name_from_tag,												-- used for template documentation; possible use in ISO 639 name from code templates
	transl = transl,															-- entry point for {{transliteration}}
	
	_category_from_tag = _category_from_tag,									-- entry points when this module is require()d into other modules
	_lang = _lang,
	_lang_xx_inherit = _lang_xx_inherit,
	_lang_xx_italic = _lang_xx_italic,
	_is_ietf_tag = _is_ietf_tag,
	get_ietf_parts = get_ietf_parts,
	_tag_from_name = _tag_from_name, 
	_name_from_tag = _name_from_tag,
	_transl = _transl,
	_translation_make = translation_make,
	};</text>
      <sha1>l42s8v4jw4gr3yfdmjo5zrynjduzw38</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Unicode data</title>
    <ns>828</ns>
    <id>1082</id>
    <revision>
      <id>155562</id>
      <parentid>155561</parentid>
      <timestamp>2024-05-06T02:00:41Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Module:Unicode_data]]</comment>
      <origin>155561</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="16851" sha1="2rq19kqlq1czop0dofrvs3f3psgawv4" xml:space="preserve">local p = {}

local floor = math.floor

local function errorf(level, ...)
	if type(level) == "number" then
		return error(string.format(...), level + 1)
	else -- level is actually the format string.
		return error(string.format(level, ...), 2)
	end
end

local function binary_range_search(codepoint, ranges)
	local low, mid, high
	low, high = 1, ranges.length or require "Module:TableTools".length(ranges)
	while low &lt;= high do
		mid = floor((low + high) / 2)
		local range = ranges[mid]
		if codepoint &lt; range[1] then
			high = mid - 1
		elseif codepoint &lt;= range[2] then
			return range, mid
		else
			low = mid + 1
		end
	end
	return nil, mid
end
p.binary_range_search = binary_range_search

--[[
local function linear_range_search(codepoint, ranges)
	for i, range in ipairs(ranges) do
		if range[1] &lt;= codepoint and codepoint &lt;= range[2] then
			return range
		end
	end
end
--]]

-- Load a module by indexing "loader" with the name of the module minus the
-- "Module:Unicode data/" part. For instance, loader.blocks returns
-- [[Module:Unicode data/blocks]]. If a module cannot be loaded, false will be
-- returned.
local loader = setmetatable({}, {
	__index = function (self, key)
		local success, data = pcall(mw.loadData, "Module:Unicode data/" .. key)
		if not success then
			data = false
		end
		self[key] = data
		return data
	end
})

-- For the algorithm used to generate Hangul Syllable names,
-- see "Hangul Syllable Name Generation" in section 3.12 of the
-- Unicode Specification:
-- https://www.unicode.org/versions/Unicode11.0.0/ch03.pdf
local name_hooks = {
	{     0x00,     0x1F, "&lt;control-%04X&gt;" }, -- C0 control characters
	{     0x7F,     0x9F, "&lt;control-%04X&gt;" }, -- DEL and C1 control characters
	{   0x3400,   0x4DBF, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension A
	{   0x4E00,   0x9FFF, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph
	{   0xAC00,   0xD7A3, function (codepoint) -- Hangul Syllables
		local Hangul_data = loader.Hangul
		local syllable_index = codepoint - 0xAC00

		return ("HANGUL SYLLABLE %s%s%s"):format(
			Hangul_data.leads[floor(syllable_index / Hangul_data.final_count)],
			Hangul_data.vowels[floor((syllable_index % Hangul_data.final_count)
				/ Hangul_data.trail_count)],
			Hangul_data.trails[syllable_index % Hangul_data.trail_count]
		)
	end },
	-- High Surrogates, High Private Use Surrogates, Low Surrogates
	{   0xD800,   0xDFFF, "&lt;surrogate-%04X&gt;" },
	{   0xE000,   0xF8FF, "&lt;private-use-%04X&gt;" }, -- Private Use
	-- CJK Compatibility Ideographs
	{   0xF900,   0xFA6D, "CJK COMPATIBILITY IDEOGRAPH-%04X" },
	{   0xFA70,   0xFAD9, "CJK COMPATIBILITY IDEOGRAPH-%04X" },
	{  0x17000,  0x187F7, "TANGUT IDEOGRAPH-%04X" }, -- Tangut Ideograph
	{  0x18800,  0x18AFF, function (codepoint)
		return ("TANGUT COMPONENT-%03d"):format(codepoint - 0x187FF)
	end },
	{  0x18D00,  0x18D08, "TANGUT IDEOGRAPH-%04X" }, -- Tangut Ideograph Supplement
	{  0x1B170,  0x1B2FB, "NUSHU CHARACTER-%04X" }, -- Nushu
	{  0x20000,  0x2A6DF, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension B
	{  0x2A700,  0x2B739, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension C
	{  0x2B740,  0x2B81D, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension D
	{  0x2B820,  0x2CEA1, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension E
	{  0x2CEB0,  0x2EBE0, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension F
	-- CJK Compatibility Ideographs Supplement (Supplementary Ideographic Plane)
	{  0x2F800,  0x2FA1D, "CJK COMPATIBILITY IDEOGRAPH-%04X" },
	{  0xE0100,  0xE01EF, function (codepoint) -- Variation Selectors Supplement
		return ("VARIATION SELECTOR-%d"):format(codepoint - 0xE0100 + 17)
	end},
	{  0x30000,  0x3134A, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension G
	{  0x31350,  0x323AF, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension H
	{  0x2EBF0,  0x2EE5D, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension I
	{  0xF0000,  0xFFFFD, "&lt;private-use-%04X&gt;" }, -- Plane 15 Private Use
	{ 0x100000, 0x10FFFD, "&lt;private-use-%04X&gt;" }  -- Plane 16 Private Use
}
name_hooks.length = #name_hooks

local name_range_cache

local function generate_name(data, codepoint)
	if type(data) == "string" then
		return data:format(codepoint)
	else
		return data(codepoint)
	end
end

--[[
-- Checks that the code point is a number and in range.
-- Does not check whether code point is an integer.
-- Not used
local function check_codepoint(funcName, argIdx, val)
	require 'libraryUtil'.checkType(funcName, argIdx, val, 'number')
	if codepoint &lt; 0 or 0x10FFFF &lt; codepoint then
		errorf("Codepoint %04X out of range", codepoint)
	end
end
--]]

function p.is_noncharacter(codepoint)
	-- U+FDD0-U+FDEF and all code points ending in FFFE or FFFF are Unassigned
	-- (Cn) and specifically noncharacters:

	-- https://www.unicode.org/faq/private_use.html#nonchar4
	return 0xFDD0 &lt;= codepoint and (codepoint &lt;= 0xFDEF
			or floor(codepoint % 0x10000) &gt;= 0xFFFE)
end

-- https://www.unicode.org/versions/Unicode11.0.0/ch04.pdf, section 4.8
function p.lookup_name(codepoint)
	if p.is_noncharacter(codepoint) then
		return ("&lt;noncharacter-%04X&gt;"):format(codepoint)
	end

	if name_range_cache -- Check if previously used "name hook" applies to this code point.
			and codepoint &gt;= name_range_cache[1]
			and codepoint &lt;= name_range_cache[2] then
		return generate_name(name_range_cache[3], codepoint)
	end
	
	local range = binary_range_search(codepoint, name_hooks)
	if range then
		name_range_cache = range
		return generate_name(range[3], codepoint)
	end

	local data = loader[('names/%03X'):format(codepoint / 0x1000)]
	
	if data and data[codepoint] then
		return data[codepoint]
	
	-- Unassigned (Cn) consists of noncharacters and reserved characters.
	-- The character has been established not to be a noncharacter,
	-- and if it were assigned, its name would already been retrieved,
	-- so it must be reserved.
	else
		return ("&lt;reserved-%04X&gt;"):format(codepoint)
	end
end

function p.lookup_image(codepoint)
	local data = loader[('images/%03X'):format(codepoint / 0x1000)]
	
	if data then
		return data[codepoint]
	end
end

local planes = {
	[ 0] = "Basic Multilingual Plane";
	[ 1] = "Supplementary Multilingual Plane";
	[ 2] = "Supplementary Ideographic Plane";
	[ 3] = "Tertiary Ideographic Plane";
	[14] = "Supplementary Special-purpose Plane";
	[15] = "Supplementary Private Use Area-A";
	[16] = "Supplementary Private Use Area-B";
}

-- Load [[Module:Unicode data/blocks]] if needed and assign it to this variable.
local blocks

local function block_iter(blocks, i)
	i = i + 1
	local data = blocks[i]
	if data then
		 -- Unpack doesn't work on tables loaded with mw.loadData.
		return i, data[1], data[2], data[3]
	end
end

-- An ipairs-type iterator generator for the list of blocks.
function p.enum_blocks()
	local blocks = loader.blocks
	return block_iter, blocks, 0
end

function p.lookup_plane(codepoint)
	local i = floor(codepoint / 0x10000)
	return planes[i] or ("Plane %u"):format(i)
end

function p.lookup_block(codepoint)
	local blocks = loader.blocks
	local range = binary_range_search(codepoint, blocks)
	if range then
		return range[3]
	else
		return "No Block"
	end
end

function p.get_block_info(name)
	for i, block in ipairs(loader.blocks) do
		if block[3] == name then
			return block
		end
	end
end

function p.is_valid_pagename(pagename)
	local has_nonws = false

	for cp in mw.ustring.gcodepoint(pagename) do
		if (cp == 0x0023) -- #
		or (cp == 0x005B) -- [
		or (cp == 0x005D) -- ]
		or (cp == 0x007B) -- {
		or (cp == 0x007C) -- |
		or (cp == 0x007D) -- }
		or (cp == 0x180E) -- MONGOLIAN VOWEL SEPARATOR
		or ((cp &gt;= 0x2000) and (cp &lt;= 0x200A)) -- spaces in General Punctuation block
		or (cp == 0xFFFD) -- REPLACEMENT CHARACTER
		then
			return false
		end

		local printable, result = p.is_printable(cp)
		if not printable then
			return false
		end

		if result ~= "space-separator" then
			has_nonws = true
		end
	end

	return has_nonws
end

local function manual_unpack(what, from)
	if what[from + 1] == nil then
		return what[from]
	end
	
	local result = {}
	from = from or 1
	for i, item in ipairs(what) do
		if i &gt;= from then
			table.insert(result, item)
		end
	end
	return unpack(result)
end

local function compare_ranges(range1, range2)
	return range1[1] &lt; range2[1]
end

-- Creates a function to look up data in a module that contains "singles" (a
-- code point-to-data map) and "ranges" (an array containing arrays that contain
-- the low and high code points of a range and the data associated with that
-- range).
-- "loader" loads and returns the "singles" and "ranges" tables.
-- "match_func" is passed the code point and either the data or the "dots", and
-- generates the final result of the function.
-- The varargs ("dots") describes the default data to be returned if there wasn't
-- a match.
-- In case the function is used more than once, "cache" saves ranges that have
-- already been found to match, or a range whose data is the default if there
-- was no match.
local function memo_lookup(data_module_subpage, match_func, ...)
	local dots = { ... }
	local cache = {}
	local singles, ranges

	return function (codepoint)
		if not singles then
			local data_module = loader[data_module_subpage]
			singles, ranges = data_module.singles, data_module.ranges
		end

		if singles[codepoint] then
			return match_func(codepoint, singles[codepoint])
		end

		local range = binary_range_search(codepoint, cache)
		if range then
			return match_func(codepoint, manual_unpack(range, 3))
		end
		
		local range, index = binary_range_search(codepoint, ranges)
		if range then
			table.insert(cache, range)
			table.sort(cache, compare_ranges)
			return match_func(codepoint, manual_unpack(range, 3))
		end
		
		if ranges[index] then
			local dots_range
			if codepoint &gt; ranges[index][2] then
				dots_range = {
					ranges[index][2] + 1,
					ranges[index + 1] and ranges[index + 1][1] - 1 or 0x10FFFF,
					unpack(dots)
				}
			else -- codepoint &lt; range[index][1]
				dots_range = {
					ranges[index - 1] and ranges[index - 1][2] + 1 or 0,
					ranges[index][1] - 1,
					unpack(dots)
				}
			end
			table.sort(cache, compare_ranges)
		end
		
		return match_func(codepoint)
	end
end

-- Get a code point's combining class value in [[Module:Unicode data/combining]],
-- and return whether this value is not zero. Zero is assigned as the default
-- if the combining class value is not found in this data module.
-- That is, return true if character is combining, or false if it is not.
-- See https://www.unicode.org/reports/tr44/#Canonical_Combining_Class_Values for
-- more information.
p.is_combining = memo_lookup(
	"combining",
	function (codepoint, combining_class)
		return combining_class and combining_class ~= 0 or false
	end,
	0)

function p.add_dotted_circle(str)
	return (mw.ustring.gsub(str, ".",
		function(char)
			if p.is_combining(mw.ustring.codepoint(char)) then
				return '◌' .. char
			end
		end))
end

local lookup_control = memo_lookup(
	"control",
	function (codepoint, ccc)
		return ccc or "assigned"
	end,
	"assigned")
p.lookup_control = lookup_control

function p.is_assigned(codepoint)
	return lookup_control(codepoint) ~= "unassigned"
end

function p.is_printable(codepoint)
	local result = lookup_control(codepoint)
	return (result == "assigned") or (result == "space-separator"), result
end

function p.is_whitespace(codepoint)
	local result = lookup_control(codepoint)
	return (result == "space-separator"), result
end

p.lookup_category = memo_lookup(
	"category",
	function (codepoint, category)
		return category
	end,
	"Cn")

local lookup_script = memo_lookup(
	"scripts",
	function (codepoint, script_code)
		return script_code or 'Zzzz'
	end,
	"Zzzz")
p.lookup_script = lookup_script

function p.get_best_script(str)
	-- Check type of argument, because mw.text.decode coerces numbers to strings!
	require "libraryUtil".checkType("get_best_script", 1, str, "string")
	
	-- Convert HTML character references (including named character references,
	-- or character entities) to characters.
	str = mw.text.decode(str, true)
	
	local scripts = {}
	for codepoint in mw.ustring.gcodepoint(str) do
		local script = lookup_script(codepoint)
		
		-- Ignore "Inherited", "Undetermined", or "Uncoded" scripts.
		if not (script == "Zyyy" or script == "Zinh" or script == "Zzzz") then
			scripts[script] = true
		end
	end
	
	-- If scripts does not contain two or more keys,
	-- return first and only key (script code) in table.
	if not next(scripts, next(scripts)) then
		return next(scripts)
	end -- else return majority script, or else "Zzzz"?
end

function p.is_Latin(str)
	require "libraryUtil".checkType("get_best_script", 1, str, "string")
	str = mw.text.decode(str, true)
	
	-- Search for the leading bytes that introduce the UTF-8 encoding of the
	-- code points U+0340-U+10FFFF. If they are not found and there is at least
	-- one Latin-script character, the string counts as Latin, because the rest
	-- of the characters can only be Zyyy, Zinh, and Zzzz.
	-- The only scripts found below U+0370 (the first code point of the Greek
	-- and Coptic block) are Latn, Zyyy, Zinh, and Zzzz.
	-- See the codepage in the [[UTF-8]] article.
	if not str:find "[\205-\244]" then
		for codepoint in mw.ustring.gcodepoint(str) do
			if lookup_script(codepoint) == "Latn" then
				return true
			end
		end
	end
	
	local Latn = false
	
	for codepoint in mw.ustring.gcodepoint(str) do
		local script = lookup_script(codepoint)
		
		if script == "Latn" then
			Latn = true
		elseif not (script == "Zyyy" or script == "Zinh"
				or script == "Zzzz") then
			return false
		end
	end
	
	return Latn
end

-- Checks that a string contains only characters belonging to right-to-left
-- scripts, or characters of ignorable scripts.
function p.is_rtl(str)
	require "libraryUtil".checkType("get_best_script", 1, str, "string")
	str = mw.text.decode(str, true)
	
	-- Search for the leading bytes that introduce the UTF-8 encoding of the
	-- code points U+0580-U+10FFFF. If they are not found, the string can only
	-- have characters from a left-to-right script, because the first code point
	-- in a right-to-left script is U+0591, in the Hebrew block.
	if not str:find "[\214-\244]" then
		return false
	end
	
	local result = false
	local rtl = loader.scripts.rtl
	for codepoint in mw.ustring.gcodepoint(str) do
		local script = lookup_script(codepoint)
		
		if rtl[script] then
			result = true
		elseif not (script == "Zyyy" or script == "Zinh"
				or script == "Zzzz") then
			return false
		end
	end
	
	return result
end


--[[--------------------------&lt; I S _ R T L _ F R A M E &gt;------------------------------------------------------

external entry from an {{#invoke:}} to determine if a string of text is rtl.  Strips html and html-like tags so
that those tags don't corrupt the is-rtl-is-not-rtl determination; this added for the cases where the rtl text
has &lt;br /&gt; tags.

]]

function p.is_rtl_frame (frame)
	local str = frame.args[1];													-- get the string from the {{#invoke:}} frame
	str = str:gsub ('%b&lt;&gt;', '');												-- strip any html and html-like tags
	return p.is_rtl (str);														-- return if whatever remains rtl; false else
end


local function get_codepoint(args, arg)
	local codepoint_string = args[arg]
		or errorf(2, "Parameter %s is required", tostring(arg))
	local codepoint = tonumber(codepoint_string, 16)
		or errorf(2, "Parameter %s is not a code point in hexadecimal base",
			tostring(arg))
	if not (0 &lt;= codepoint and codepoint &lt;= 0x10FFFF) then
		errorf(2, "code point in parameter %s out of range", tostring(arg))
	end
	return codepoint
end

local function get_func(args, arg, prefix)
	local suffix = args[arg]
		or errorf(2, "Parameter %s is required", tostring(arg))
	suffix = mw.text.trim(suffix)
	local func_name = prefix .. suffix
	local func = p[func_name]
		or errorf(2, "There is no function '%s'", func_name)
	return func
end

-- This function allows any of the "lookup" functions to be invoked. The first
-- parameter is the word after "lookup_"; the second parameter is the code point
-- in hexadecimal base.
function p.lookup(frame)
	local func = get_func(frame.args, 1, "lookup_")
	local codepoint = get_codepoint(frame.args, 2)
	local result = func(codepoint)
	if func == p.lookup_name then
		-- Prevent code point labels such as &lt;control-0000&gt; from being
		-- interpreted as HTML tags.
		result = result:gsub("&lt;", "&amp;lt;")
	end
	return result
end

function p.is(frame)
	local func = get_func(frame.args, 1, "is_")
	
	-- is_Latin and is_valid_pagename take strings.
	if func == p.is_Latin or func == p.is_valid_pagename or func == p.is_rtl then
		return (func(frame.args[2]))
	else -- The rest take code points.
		local codepoint = get_codepoint(frame.args, 2)
		return (func(codepoint)) -- Adjust to one result.
	end
end

return p</text>
      <sha1>2rq19kqlq1czop0dofrvs3f3psgawv4</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Lang/data</title>
    <ns>828</ns>
    <id>1083</id>
    <revision>
      <id>155574</id>
      <parentid>155573</parentid>
      <timestamp>2024-05-06T02:00:42Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>11 revisions imported from [[:wikipedia:Module:Lang/data]]</comment>
      <origin>155573</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="28620" sha1="4de1qnsw95gkr0q8xru264xzhs8xdey" xml:space="preserve">local lang_obj = mw.language.getContentLanguage();
local this_wiki_lang_tag = lang_obj.code;										-- get this wiki's language tag


--[[--------------------------&lt; L A N G _ N A M E _ T A B L E &gt;------------------------------------------------

primary table of tables that decode:
	lang -&gt; language tags and names
	script -&gt; ISO 15924 script tags
	region -&gt; ISO 3166 region tags
	variant -&gt; iana registered variant tags
	suppressed -&gt; map of scripts tags and their associated language tags
	
all of these data come from separate modules that are derived from the IANA language-subtag-registry file

key_to_lower() avoids the metatable trap and sets all keys in the subtables to lowercase. Many language codes
have multiple associated names; Module:lang is only concerned with the first name so key_to_lower() only fetches
the first name.

]]

local function key_to_lower (module, src_type)
	local out = {};
	local source = (('var_sup' == src_type) and require (module)) or mw.loadData (module);		-- fetch data from this module; require() avoids metatable trap for variant data
	if 'var_sup' == src_type then
		for k, v in pairs (source) do
			out[k:lower()] = v;													-- for variant and suppressed everything is needed
		end

	elseif 'lang' == src_type and source.active then							-- for ~/iana_languages (active)
		for k, v in pairs (source.active) do
			out[k:lower()] = v[1];												-- ignore multiple names; take first name only
		end

	elseif 'lang_dep' == src_type and source.deprecated then					-- for ~/iana_languages (deprecated)
		for k, v in pairs (source.deprecated) do
			out[k:lower()] = v[1];												-- ignore multiple names; take first name only
		end

	else																		-- here for all other sources
		for k, v in pairs (source) do
			out[k:lower()] = v[1];												-- ignore multiple names; take first name only
		end
	end
	return out;
end

local lang_name_table_t = {
	lang = key_to_lower ('Module:Language/data/iana languages', 'lang'),
	lang_dep = key_to_lower ('Module:Language/data/iana languages', 'lang_dep'),
	script = key_to_lower ('Module:Language/data/iana scripts'),				-- script keys are capitalized; set to lower
	region = key_to_lower ('Module:Language/data/iana regions'),				-- region keys are uppercase; set to lower
	variant = key_to_lower ('Module:Language/data/iana variants', 'var_sup'),
	suppressed = key_to_lower ('Module:Language/data/iana suppressed scripts', 'var_sup'),	-- script keys are capitalized; set to lower
	}


--[[--------------------------&lt; I 1 8 N   M E D I A W I K I   O V E R R I D E &gt;--------------------------------

For internationalization; not used at en.wiki

The language names taken from the IANA language-subtag-registry file are given in English. That may not be ideal.
Translating ~8,000 language names is also not ideal.  MediaWiki maintains (much) shorter lists of language names
in most languages for which there is a Wikipedia edition.  When desired, Module:Lang can use the MediaWiki 
language list for the local language.

Caveat lector: the list of MediaWiki language names for your language may not be complete or may not exist at all.
When incomplete, MediaWiki's list will 'fall back' to another language (typically English).  When that happens
add an appropriate entry to the override table below.

Caveat lector: the list of MediaWiki language names for your language may not be correct.  At en.wiki, the
MediaWiki language names do not agree with the IANA language names for these ISO 639-1 tags.  Often it is simply
spelling differences:
	bh: IANA: Bihari languages MW: Bhojpuri – the ISO 639-3 tag for Bhojpuri is bho
	bn: IANA: Bengali MW: Bangla – Bengali is the exonym, Bangla is the endonym
	dv: IANA: Dhivehi MW: Divehi
	el: IANA: Modern Greek MW: Greek
	ht: IANA: Haitian MW: Haitian Creole
	ky: IANA: Kirghiz MW: Kyrgyz
	li: IANA: Limburgan MW: Limburgish
	or: IANA: Oriya MW: Odia
	os: IANA: Ossetian MW: Ossetic
	"pa: IANA: Panjabi MW: Punjabi
	"ps: IANA: Pushto MW: Pashto
	"to: IANA: Tonga MW: Tongan
	"ug: IANA: Uighur MW: Uyghur
use the override table to override language names that are incorrect for your project

To see the list of names that MediaWiki has for your language, enter this in the Debug colsole:
	=mw.dumpObject (mw.language.fetchLanguageNames ('&lt;tag&gt;', 'all'))
(replacing &lt;tag&gt; with the language tag for your language)

Use of the MediaWiki language names lists is enabled when media_wiki_override_enable is set to boolean true.
	
]]

local media_wiki_override_enable = false;										-- set to true to override IANA names with MediaWiki names; always false at en.wiki
																				-- caveat lector: the list of MediaWiki language names for your language may not be complete or may not exist at all
	if true == media_wiki_override_enable then
		local mw_languages_by_tag_t = mw.language.fetchLanguageNames (this_wiki_lang_tag, 'all');	-- get a table of language tag/name pairs known to MediaWiki
		for tag, name in pairs (mw_languages_by_tag_t) do						-- loop through each tag/name pair in the MediaWiki list
			if lang_name_table_t.lang[tag] then									-- if the tag is in the main list
				lang_name_table_t.lang[tag] = name;								-- overwrite exisiting name with the name from MediaWiki
			end
		end
	end


--[[--------------------------&lt; O V E R R I D E &gt;--------------------------------------------------------------

Language codes and names in this table override the BCP47 names in lang_name_table.

indexes in this table shall always be lower case

]]

local override = {
------------------------------&lt; I S O _ 6 3 9 - 1 &gt;------------------------------------------------------------

	["ab"] = "Abkhaz",                                                          -- to match en.wiki article name
	["ca-valencia"] = "Valencian",
	["cu"] = "Church Slavonic",													-- 2nd IANA name;
	["de-at"] = "Austrian German",												-- these code-region and code-variant tags to match en.wiki article names
	["de-ch"] = "Swiss Standard German",
	["en-au"] = "Australian English",
	["en-ca"] = "Canadian English",
	["en-emodeng"] = "Early Modern English",
	["en-gb"] = "British English",
	["en-ie"] = "Irish English",
	["en-in"] = "Indian English",
	["en-nz"] = "New Zealand English",
	["en-us"] = "American English",
	["en-za"] = "South African English",
	["fy"] = "West Frisian",													-- Western Frisian
	["mo"] = "Moldovan",														-- Moldavian (deprecated code); to match en.wiki article title
	["nl-be"] = "Flemish",														-- match MediaWiki
	["oc-provenc"] = "Provençal",
	["ps"] = "Pashto",															-- Pushto
	["pt-br"] = "Brazilian Portuguese",											-- match MediaWiki
	["tw-asante"] = "Asante Twi",
	["ug"] = "Uyghur",															-- 2nd IANA name; to match en.wiki article name

-- these ISO 639-1 language-name overrides imported from Module:Language/data/wp_languages (since deleted)
--&lt;begin do-not-edit except to comment out&gt;--
		["av"] = "Avar",														-- Avaric
		["bo"] = "Standard Tibetan",											-- Tibetan
		["el"] = "Greek",														-- Modern Greek
--		["en-SA"] = "South African English",									-- English; no; SA is not South Africa it Saudi Arabia; ZA is South Africa
		["ff"] = "Fula",														-- Fulah
		["ht"] = "Haitian Creole",												-- Haitian
		["hz"] = "Otjiherero",													-- Herero
		["ii"] = "Yi",															-- Sichuan Yi
		["ki"] = "Gikuyu",														-- Kikuyu
		["kl"] = "Greenlandic",													-- Kalaallisut
		["ky"] = "Kyrgyz",														-- Kirghiz
		["lg"] = "Luganda",														-- Ganda
		["li"] = "Limburgish",													-- Limburgan
		["mi"] = "Māori",														-- Maori
		["na"] = "Nauruan",														-- Nauru
		["nb"] = "Bokmål",														-- Norwegian Bokmål
		["nd"] = "Northern Ndebele",											-- North Ndebele
		["nn"] = "Nynorsk",														-- Norwegian Nynorsk
		["nr"] = "Southern Ndebele",											-- South Ndebele
		["ny"] = "Chichewa",													-- Nyanja
		["oj"] = "Ojibwe",														-- Ojibwa
		["or"] = "Odia",														-- Oriya
		["pa"] = "Punjabi",														-- Panjabi
		["rn"] = "Kirundi",														-- Rundi
		["sl"] = "Slovene",														-- Slovenian
		["ss"] = "Swazi",														-- Swati
		["st"] = "Sotho",														-- Southern Sotho
		["to"] = "Tongan",														-- Tonga
--&lt;end do-not-edit except to comment out&gt;--


------------------------------&lt; I S O _ 6 3 9 - 2,   - 3,   - 5 &gt;----------------------------------------------

	["alv"] = "Atlantic–Congo languages",										-- to match en.wiki article title (endash)
	["arc"] = "Imperial Aramaic (700-300 BCE)",									-- Official Aramaic (700-300 BCE), Imperial Aramaic (700-300 BCE); to match en.wiki article title uses ISO639-2 'preferred' name
	["art"] = "constructed",													-- to match en.wiki article; lowercase for category name
	["bhd"] = "Bhadarwahi",														-- Bhadrawahi; to match en.wiki article title
	["bla"] = "Blackfoot",														-- Siksika; to match en.wiki article title
	["bua"] = "Buryat",															-- Buriat; this is a macro language; these four use wp preferred transliteration;
	["bxm"] = "Mongolian Buryat",												-- Mongolia Buriat; these three all redirect to Buryat
	["bxr"] = "Russian Buryat",													-- Russia Buriat;
	["bxu"] = "Chinese Buryat",													-- China Buriat;
	["byr"] = "Yipma",															-- Baruya, Yipma
	["egy"] = "Ancient Egyptian",												-- Egyptian (Ancient); distinguish from contemporary arz: Egyptian Arabic 
	["ems"] = "Alutiiq",														-- Pacific Gulf Yupik; to match en.wiki article title
	["esx"] = "Eskimo–Aleut languages",											-- to match en.wiki article title (endash)
	["frr"] = "North Frisian",													-- Northern Frisian
	["frs"] = "East Frisian Low Saxon",											-- Eastern Frisian
	["gsw-fr"] = "Alsatian",													-- match MediaWiki
	["haa"] = "Hän",															-- Han; to match en.wiki article title
	["hmx"] = "Hmong–Mien languages",											-- to match en.wiki article title (endash)
	["ilo"] = "Ilocano",														-- Iloko; to match en.wiki article title
	["jam"] = "Jamaican Patois",												-- Jamaican Creole English
	["lij-mc"] = "Monégasque",													-- Ligurian as spoken in Monaco
	["luo"] = "Dholuo",															-- IANA (primary) /ISO 639-3: Luo (Kenya and Tanzania); IANA (secondary): Dholuo
	["mhr"] = "Meadow Mari",													-- Eastern Mari
	["mid"] = "Modern Mandaic",													-- Mandaic
	['mis'] = "uncoded",														-- Uncoded languages; capitalization; special scope, not collective scope;
	["mkh"] = "Mon–Khmer languages",											-- to match en.wiki article title (endash)
	["mla"] = "Tamambo",														-- Malo
	['mte'] = "Mono-Alu",														-- Mono (Solomon Islands)
	['mul'] = "multiple",														-- Multiple languages; capitalization; special scope, not collective scope;
	["nan-tw"] = "Taiwanese Hokkien",											-- make room for IANA / 639-3 nan Min Nan Chinese; match en.wiki article title
	["new"] = "Newar",															-- Newari, Nepal Bhasa; to match en,wiki article title
	["ngf"] = "Trans–New Guinea languages",										-- to match en.wiki article title (endash)
	["nic"] = "Niger–Congo languages",											-- Niger-Kordofanian languages; to match en,wiki article title
	["nrf"] = "Norman",															-- not quite a collective - IANA name: Jèrriais + Guernésiais; categorizes to Norman-language text
	["nrf-gg"] = "Guernésiais",													-- match MediaWiki
	["nrf-je"] = "Jèrriais",													-- match MediaWiki
	["nzi"] = "Nzema",															-- Nzima; to match en.wiki article title
	["oma"] = "Omaha–Ponca",													-- to match en.wiki article title (endash)
	["orv"] = "Old East Slavic",												-- Old Russian
	["pfl"] = "Palatine German",												-- Pfaelzisch; to match en.wiki article
	["pie"] = "Piro Pueblo",													-- Piro; to match en.wiki article
	["pms"] = "Piedmontese",													-- Piemontese; to match en.wiki article title
	["pnb"] = "Punjabi (Western)",												-- Western Panjabi; dab added to override import from ~/wp languages and distinguish pnb from pa in reverse look up tag_from_name()
	["rop"] = "Australian Kriol",												-- Kriol; en.wiki article is a dab; point to correct en.wiki article
	["sdo"] = "Bukar–Sadong",													-- Bukar-Sadung Bidayuh; to match en.wiki article title
	["smp"] = "Samaritan Hebrew",												-- to match en.wiki article title
	["stq"] = "Saterland Frisian",												-- Saterfriesisch
	["und"] = "undetermined",													-- capitalization to match existing category
	["wrg"] = "Warrongo",														-- Warungu
	["xal-ru"] = "Kalmyk",														-- to match en.wiki article title
	["xgf"] = "Tongva",															-- ISO 639-3 is Gabrielino-Fernandeño
	["yuf"] = "Havasupai–Hualapai",												-- Havasupai-Walapai-Yavapai; to match en.wiki article title
	["zxx"] = "no linguistic content",											-- capitalization

-- these ISO 639-2, -3 language-name overrides imported from Module:Language/data/wp_languages (since deleted)
--&lt;begin do-not-edit except to comment out&gt;--
		["ace"] = "Acehnese",													-- Achinese
		["aec"] = "Sa'idi Arabic",												-- Saidi Arabic
		["akl"] = "Aklan",														-- Aklanon
		["alt"] = "Altay",														-- Southern Altai
		["apm"] = "Mescalero-Chiricahua",										-- Mescalero-Chiricahua Apache
		["bal"] = "Balochi",													-- Baluchi
--		["bcl"] = "Central Bicolano",											-- Central Bikol
		["bin"] = "Edo",														-- Bini
		["bpy"] = "Bishnupriya Manipuri",										-- Bishnupriya
		["chg"] = "Chagatay",													-- Chagatai
		["ckb"] = "Sorani Kurdish",												-- Central Kurdish
		["cnu"] = "Shenwa",														-- Chenoua
		["coc"] = "Cocopah",													-- Cocopa
		["diq"] = "Zazaki",														-- Dimli
		["fit"] = "Meänkieli",													-- Tornedalen Finnish
		["fkv"] = "Kven",														-- Kven Finnish
		["frk"] = "Old Frankish",												-- Frankish
		["gez"] = "Ge'ez",														-- Geez
		["gju"] = "Gujari",														-- Gujari
		["gsw"] = "Alemannic German",											-- Swiss German
		["gul"] = "Gullah",														-- Sea Island Creole English
		["hak"] = "Hakka",														-- Hakka Chinese
		["hbo"] = "Biblical Hebrew",											-- Ancient Hebrew
		["hnd"] = "Hindko",														-- Southern Hindko
--		["ikt"] = "Inuvialuk",													-- Inuinnaqtun
		["kaa"] = "Karakalpak",													-- Kara-Kalpak
		["khb"] = "Tai Lü",														-- Lü
		["kmr"] = "Kurmanji Kurdish",											-- Northern Kurdish
		["kpo"] = "Kposo",														-- Ikposo
		["krj"] = "Kinaray-a",													-- Kinaray-A
--		["ktz"] = "Juǀ'hoan",													-- Juǀʼhoan
		["lez"] = "Lezgian",													-- Lezghian
		["liv"] = "Livonian",													-- Liv
		["lng"] = "Lombardic",													-- Langobardic
		["mia"] = "Miami-Illinois",												-- Miami
		["miq"] = "Miskito",													-- Mískito
		["mix"] = "Mixtec",														-- Mixtepec Mixtec
		["mni"] = "Meitei",														-- Manipuri
		["mrj"] = "Hill Mari",													-- Western Mari
		["mww"] = "White Hmong",												-- Hmong Daw
		["nds-nl"] = "Dutch Low Saxon",											-- Low German
--		["new"] = "Nepal Bhasa",												-- Newari
		["nso"] = "Northern Sotho",												-- Pedi
--		["nwc"] = "Classical Nepal Bhasa",										-- Classical Newari, Classical Nepal Bhasa, Old Newari
		["ood"] = "O'odham",													-- Tohono O'odham
		["otk"] = "Old Turkic",													-- Old Turkish
		["pal"] = "Middle Persian",												-- Pahlavi
		["pam"] = "Kapampangan",												-- Pampanga
		["phr"] = "Potwari",													-- Pahari-Potwari
		["pka"] = "Jain Prakrit",												-- Ardhamāgadhī Prākrit
--		["pnb"] = "Punjabi",													-- Western Panjabi
		["psu"] = "Shauraseni",													-- Sauraseni Prākrit
		["rap"] = "Rapa Nui",													-- Rapanui
		["rar"] = "Cook Islands Māori",											-- Rarotongan
		["rmu"] = "Scandoromani",												-- Tavringer Romani
		["rom"] = "Romani",														-- Romany
		["rup"] = "Aromanian",													-- Macedo-Romanian
		["ryu"] = "Okinawan",													-- Central Okinawan
		["sdc"] = "Sassarese",													-- Sassarese Sardinian
		["sdn"] = "Gallurese",													-- Gallurese Sardinian
		["shp"] = "Shipibo",													-- Shipibo-Conibo
		["src"] = "Logudorese",													-- Logudorese Sardinian
		["sro"] = "Campidanese",												-- Campidanese Sardinian
		["tkl"] = "Tokelauan",													-- Tokelau
		["tvl"] = "Tuvaluan",													-- Tuvalu
		["tyv"] = "Tuvan",														-- Tuvinian
		["vls"] = "West Flemish",												-- Vlaams
		["wep"] = "Westphalian",												-- Westphalien
		["xal"] = "Oirat",														-- Kalmyk
		["xcl"] = "Old Armenian",												-- Classical Armenian
		["yua"] = "Yucatec Maya",												-- Yucateco
--&lt;end do-not-edit except to comment out&gt;--


------------------------------&lt; P R I V A T E _ U S E _ T A G S &gt;----------------------------------------------

	["akk-x-latbabyl"] = "Late Babylonian",
	["akk-x-midassyr"] = "Middle Assyrian Akkadian",
	["akk-x-midbabyl"] = "Middle Babylonian Akkadian",
	["akk-x-neoassyr"] = "Neo-Assyrian Akkadian",
	["akk-x-neobabyl"] = "Neo-Babylonian Akkadian",
	["akk-x-old"] = "Old Akkadian",
	["akk-x-oldassyr"] = "Old Assyrian Akkadian",
	["akk-x-oldbabyl"] = "Old Babylonian Akkadian",
	["alg-x-proto"] = "Proto-Algonquian",										-- alg in IANA is Algonquian languages
	["ca-x-old"] = "Old Catalan",
	["cel-x-combrit"] = "Common Brittonic",										-- cel in IANA is Celtic languages
	["cel-x-proto"] = "Proto-Celtic",
	["egy-x-demotic"] = "Demotic Egyptian",
	["egy-x-late"] = "Late Egyptian",
	["egy-x-middle"] = "Middle Egyptian",
	["egy-x-old"] = "Old Egyptian",
	["gem-x-proto"] = "Proto-Germanic",											-- gem in IANA is Germanic languages
	["gmw-x-ecg"] = "East Central German",
	["grc-x-aeolic"] = "Aeolic Greek",											-- these grc-x-... codes are preferred alternates to the non-standard catchall code grc-gre
	["grc-x-attic"] = "Attic Greek",
	["grc-x-biblical"] = "Biblical Greek",
	["grc-x-byzant"] = "Byzantine Greek",
	["grc-x-classic"] = "Classical Greek",
	["grc-x-doric"] = "Doric Greek",
	["grc-x-hellen"] = "Hellenistic Greek",
	["grc-x-ionic"] = "Ionic Greek",
	["grc-x-koine"] = "Koinē Greek",
	["grc-x-medieval"] = "Medieval Greek",
	["grc-x-patris"] = "Patristic Greek",
	["grk-x-proto"] = "Proto-Greek",											-- grk in IANA is Greek languages
	["iir-x-proto"] = "Proto-Indo-Iranian",										-- iir in IANA is Indo-Iranian Languages
	["inc-x-mitanni"] = "Mitanni-Aryan",										-- inc in IANA is Indic languages
	["inc-x-proto"] = "Proto-Indo-Aryan",
	["ine-x-anatolia"] = "Anatolian languages",
	["ine-x-proto"] = "Proto-Indo-European",
	["ira-x-proto"] = "Proto-Iranian",											-- ira in IANA is Iranian languages
	["itc-x-proto"] = "Proto-Italic",											-- itc in IANA is Italic languages
	["ksh-x-colog"] = "Colognian",												-- en.wiki article is Colognian; ksh (Kölsch) redirects there
	["la-x-medieval"] = "Medieval Latin",
	["la-x-new"] = "New Latin",
	["lmo-x-milanese"] = "Milanese",											-- lmo in IANA is Lombard; Milanese is a dialect
	["mis-x-ripuar"] = "Ripuarian",												-- replaces improper use of ksh in wp_languages
	["prg-x-old"] = "Old Prussian",
	["sem-x-ammonite"] = "Ammonite",
	["sem-x-aramaic"] = "Aramaic",
	["sem-x-canaan"] = "Canaanite languages",
	["sem-x-dumaitic"] = "Dumaitic",
	["sem-x-egurage"] = "Eastern Gurage",
	["sem-x-hatran"] = "Hatran Aramaic",
	["sem-x-oldsoara"] = "Old South Arabian",
	["sem-x-palmyren"] = "Palmyrene Aramaic",
	["sem-x-proto"] = "Proto-Semitic",
	["sem-x-taymanit"] = "Taymanitic",
	["sla-x-proto"] = "Proto-Slavic",											-- sla in IANA is Slavic languages
	["yuf-x-hav"] = "Havasupai",												-- IANA name for these three is Havasupai-Walapai-Yavapai
	["yuf-x-wal"] = "Walapai",
	["yuf-x-yav"] = "Yavapai",
	["xsc-x-pontic"] = "Pontic Scythian",										-- xsc in IANA is Scythian
	["xsc-x-saka"] = "Saka",
	["xsc-x-sarmat"] = "Sarmatian",
	}


--[[--------------------------&lt; A R T I C L E _ L I N K &gt;------------------------------------------------------

for those rare occasions when article titles don't fit with the normal '&lt;language name&gt;-language', this table
maps language code to article title. Use of this table should be avoided and the use of redirects preferred as
that is the long-standing method of handling article names that don't fit with the normal pattern

]]

local article_name = {
	['kue'] = "Kuman language (New Guinea)",									-- Kuman (Papua New Guinea); to avoid Kuman dab page
	["lij"] = "Ligurian (Romance language)",									-- Ligurian; see Template_talk:Lang#Ligurian_dab
	['mbo'] = "Mbo language (Cameroon)",										-- Mbo (Cameroon)
	['mnh'] = "Mono language (Congo)",											-- Mono (Democratic Republic of Congo); see Template_talk:Lang#Mono_languages
	['mnr'] = "Mono language (California)",										-- Mono (USA)
	['mru'] = "Mono language (Cameroon)",										-- Mono (Cameroon)
	['qwm'] = "Kuman (Russia)",													-- Kuman (Russia); to avoid Kuman dab page
	["snq"] = "Sangu language (Gabon)",											-- Sangu (Gabon)
	["toi"] = "Tonga language (Zambia and Zimbabwe)",                           -- Tonga (Zambia and Zimbabwe); to avoid Tonga language dab page
	["vwa"] = "Awa language (China)",											-- Awa (China); to avoid Awa dab page
	["xlg"] = "Ligurian (ancient language)",									-- see Template_talk:Lang#Ligurian_dab
	["zmw"] = "Mbo language (Congo)",											-- Mbo (Democratic Republic of Congo)
	}


--[=[-------------------------&lt; R T L _ S C R I P T S &gt;--------------------------------------------------------

ISO 15924 scripts that are written right-to-left. Data in this table taken from [[ISO 15924#List of codes]]

last update to this list: 2017-12-24

]=]

local rtl_scripts = {
	'adlm', 'arab', 'aran', 'armi', 'avst', 'cprt', 'egyd', 'egyh', 'hatr', 'hebr',
	'hung', 'inds', 'khar', 'lydi', 'mand', 'mani', 'mend', 'merc', 'mero', 'narb',
	'nbat', 'nkoo', 'orkh', 'palm', 'phli', 'phlp', 'phlv', 'phnx', 'prti', 'rohg',
	'samr', 'sarb', 'sogd', 'sogo', 'syrc', 'syre', 'syrj', 'syrn', 'thaa', 'wole',
	};


--[[--------------------------&lt; T R A N S L I T _ T I T L E S &gt;------------------------------------------------

This is a table of tables of transliteration standards and the language codes or language scripts that apply to
those standards. This table is used to create the tool-tip text associated with the transliterated text displayed
by some of the {{lang-??}} templates.

These tables are more-or-less copied directly from {{transl}}. The standard 'NO_STD' is a construct to allow for
the cases when no |std= parameter value is provided.

]]

local translit_title_table = {
	['ahl'] = {
		['default'] = 'Academy of the Hebrew Language transliteration',
		},

	['ala'] = {
		['default'] = 'American Library Association – Library of Congress transliteration',
		},

	['ala-lc'] = {
		['default'] = 'American Library Association – Library of Congress transliteration',
		},

	['batr'] = {
		['default'] = 'Bikdash Arabic Transliteration Rules',
		},

	['bgn/pcgn'] = {
		['default'] = 'Board on Geographic Names / Permanent Committee on Geographical Names transliteration',
		},

	['din'] = {
		['ar'] = 'DIN 31635 Arabic',
		['fa'] = 'DIN 31635 Arabic',
		['ku'] = 'DIN 31635 Arabic',
		['ps'] = 'DIN 31635 Arabic',
		['tg'] = 'DIN 31635 Arabic',
		['ug'] = 'DIN 31635 Arabic',
		['ur'] = 'DIN 31635 Arabic',
		['arab'] = 'DIN 31635 Arabic',

		['default'] = 'DIN transliteration',
		},

	['eae'] = {
		['default'] = 'Encyclopaedia Aethiopica transliteration',
		},

	['hepburn'] = {
		['default'] = 'Hepburn transliteration',
		},

	['hunterian'] = {
		['default'] = 'Hunterian transliteration',
		},

	['iast'] = {
		['default'] = 'International Alphabet of Sanskrit transliteration',
		},

	['iso'] = {																	-- when a transliteration standard is supplied
		['ab'] = 'ISO 9 Cyrillic',
		['ba'] = 'ISO 9 Cyrillic',
		['be'] = 'ISO 9 Cyrillic',
		['bg'] = 'ISO 9 Cyrillic',
		['kk'] = 'ISO 9 Cyrillic',
		['ky'] = 'ISO 9 Cyrillic',
		['mn'] = 'ISO 9 Cyrillic',
		['ru'] = 'ISO 9 Cyrillic',
		['tg'] = 'ISO 9 Cyrillic',
		['uk'] = 'ISO 9 Cyrillic',
		['bua'] = 'ISO 9 Cyrillic',
		['sah'] = 'ISO 9 Cyrillic',
		['tut'] = 'ISO 9 Cyrillic',
		['xal'] = 'ISO 9 Cyrillic',
		['cyrl'] = 'ISO 9 Cyrillic',

		['ar'] = 'ISO 233 Arabic',
		['ku'] = 'ISO 233 Arabic',
		['ps'] = 'ISO 233 Arabic',
		['ug'] = 'ISO 233 Arabic',
		['ur'] = 'ISO 233 Arabic',
		['arab'] = 'ISO 233 Arabic',

		['he'] = 'ISO 259 Hebrew',
		['yi'] = 'ISO 259 Hebrew',
		['hebr'] = 'ISO 259 Hebrew',

		['el'] = 'ISO 843 Greek',
		['grc'] = 'ISO 843 Greek',

		['ja'] = 'ISO 3602 Japanese',
		['hira'] = 'ISO 3602 Japanese',
		['hrkt'] = 'ISO 3602 Japanese',
		['jpan'] = 'ISO 3602 Japanese',
		['kana'] = 'ISO 3602 Japanese',

		['zh'] = 'ISO 7098 Chinese',
		['chi'] = 'ISO 7098 Chinese',
		['cmn'] = 'ISO 7098 Chinese',
		['zho'] = 'ISO 7098 Chinese',
--		['han'] = 'ISO 7098 Chinese',											-- unicode alias of Hani? doesn't belong here? should be Hani?
		['hans'] = 'ISO 7098 Chinese',
		['hant'] = 'ISO 7098 Chinese',

		['ka'] = 'ISO 9984 Georgian',
		['kat'] = 'ISO 9984 Georgian',

		['arm'] = 'ISO 9985 Armenian',
		['hy'] = 'ISO 9985 Armenian',

		['th'] = 'ISO 11940 Thai',
		['tha'] = 'ISO 11940 Thai',

		['ko'] = 'ISO 11941 Korean',
		['kor'] = 'ISO 11941 Korean',

		['awa'] = 'ISO 15919 Indic',
		['bho'] = 'ISO 15919 Indic',
		['bn'] = 'ISO 15919 Indic',
		['bra'] = 'ISO 15919 Indic',
		['doi'] = 'ISO 15919 Indic',
		['dra'] = 'ISO 15919 Indic',
		['gon'] = 'ISO 15919 Indic',
		['gu'] = 'ISO 15919 Indic',
		['hi'] = 'ISO 15919 Indic',
		['hno'] = 'ISO 15919 Indic',
		['inc'] = 'ISO 15919 Indic',
		['kn'] = 'ISO 15919 Indic',
		['kok'] = 'ISO 15919 Indic',
		['ks'] = 'ISO 15919 Indic',
		['mag'] = 'ISO 15919 Indic',
		['mai'] = 'ISO 15919 Indic',
		['ml'] = 'ISO 15919 Indic',
		['mr'] = 'ISO 15919 Indic',
		['ne'] = 'ISO 15919 Indic',
		['new'] = 'ISO 15919 Indic',
		['or'] = 'ISO 15919 Indic',
		['pa'] = 'ISO 15919 Indic',
		['pnb'] = 'ISO 15919 Indic',
		['raj'] = 'ISO 15919 Indic',
		['sa'] = 'ISO 15919 Indic',
		['sat'] = 'ISO 15919 Indic',
		['sd'] = 'ISO 15919 Indic',
		['si'] = 'ISO 15919 Indic',
		['skr'] = 'ISO 15919 Indic',
		['ta'] = 'ISO 15919 Indic',
		['tcy'] = 'ISO 15919 Indic',
		['te'] = 'ISO 15919 Indic',
		['beng'] = 'ISO 15919 Indic',
		['brah'] = 'ISO 15919 Indic',
		['deva'] = 'ISO 15919 Indic',
		['gujr'] = 'ISO 15919 Indic',
		['guru'] = 'ISO 15919 Indic',
		['knda'] = 'ISO 15919 Indic',
		['mlym'] = 'ISO 15919 Indic',
		['orya'] = 'ISO 15919 Indic',
		['sinh'] = 'ISO 15919 Indic',
		['taml'] = 'ISO 15919 Indic',
		['telu'] = 'ISO 15919 Indic',

		['default'] = 'ISO transliteration',
		},

	['jyutping'] = {
		['default'] = 'Jyutping transliteration',
		},

	['mlcts'] = {
		['default'] = 'Myanmar Language Commission Transcription System',
		},

	['mr'] = {
		['default'] = 'McCune–Reischauer transliteration',
		},

	['nihon-shiki'] = {
		['default'] = 'Nihon-shiki transliteration',
		},

	['no_std'] = {																-- when no transliteration standard is supplied
		['akk'] = 'Semitic transliteration',
		['sem'] = 'Semitic transliteration',
		['phnx'] = 'Semitic transliteration',
		['xsux'] = 'Cuneiform transliteration',
		},

	['pinyin'] = {
		['default'] = 'Pinyin transliteration',
		},

	['rr'] = {
		['default'] = 'Revised Romanization of Korean transliteration',
		},

	['rtgs'] = {
		['default'] = 'Royal Thai General System of Transcription',
		},
	
	['satts'] = {
		['default'] = 'Standard Arabic Technical Transliteration System transliteration',
		},

	['scientific'] = {
		['default'] = 'scientific transliteration',
		},

	['ukrainian'] = {
		['default'] = 'Ukrainian National system of romanization',
		},

	['ungegn'] = {
		['default'] = 'United Nations Group of Experts on Geographical Names transliteration',
		},

	['wadegile'] = {
		['default'] = 'Wade–Giles transliteration',
		},

	['wehr'] = {
		['default'] = 'Hans Wehr transliteration',
		},
	};


return
	{
	this_wiki_lang_tag = this_wiki_lang_tag,
	this_wiki_lang_dir = lang_obj:getDir(),										-- wiki's language direction
	
	article_name = article_name,
	lang_name_table = lang_name_table_t,
	override = override,
	rtl_scripts = rtl_scripts,
	special_tags_table = special_tags_table,
	translit_title_table = translit_title_table,
	};</text>
      <sha1>4de1qnsw95gkr0q8xru264xzhs8xdey</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Language/data/iana languages</title>
    <ns>828</ns>
    <id>1084</id>
    <revision>
      <id>155576</id>
      <parentid>154469</parentid>
      <timestamp>2024-05-06T02:00:42Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Module:Language/data/iana_languages]]</comment>
      <origin>154468</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="222318" sha1="qi7o3rfc07n9xv2mggy8g3912gvvvqe" xml:space="preserve">-- File-Date: 2024-03-07
local active = {
	["aa"] = {"Afar"},
	["ab"] = {"Abkhazian"},
	["ae"] = {"Avestan"},
	["af"] = {"Afrikaans"},
	["ak"] = {"Akan"},
	["am"] = {"Amharic"},
	["an"] = {"Aragonese"},
	["ar"] = {"Arabic"},
	["as"] = {"Assamese"},
	["av"] = {"Avaric"},
	["ay"] = {"Aymara"},
	["az"] = {"Azerbaijani"},
	["ba"] = {"Bashkir"},
	["be"] = {"Belarusian"},
	["bg"] = {"Bulgarian"},
	["bh"] = {"Bihari languages"},
	["bi"] = {"Bislama"},
	["bm"] = {"Bambara"},
	["bn"] = {"Bengali", "Bangla"},
	["bo"] = {"Tibetan"},
	["br"] = {"Breton"},
	["bs"] = {"Bosnian"},
	["ca"] = {"Catalan", "Valencian"},
	["ce"] = {"Chechen"},
	["ch"] = {"Chamorro"},
	["co"] = {"Corsican"},
	["cr"] = {"Cree"},
	["cs"] = {"Czech"},
	["cu"] = {"Church Slavic", "Church Slavonic", "Old Bulgarian", "Old Church Slavonic", "Old Slavonic"},
	["cv"] = {"Chuvash"},
	["cy"] = {"Welsh"},
	["da"] = {"Danish"},
	["de"] = {"German"},
	["dv"] = {"Dhivehi", "Divehi", "Maldivian"},
	["dz"] = {"Dzongkha"},
	["ee"] = {"Ewe"},
	["el"] = {"Modern Greek (1453-)"},
	["en"] = {"English"},
	["eo"] = {"Esperanto"},
	["es"] = {"Spanish", "Castilian"},
	["et"] = {"Estonian"},
	["eu"] = {"Basque"},
	["fa"] = {"Persian"},
	["ff"] = {"Fulah"},
	["fi"] = {"Finnish"},
	["fj"] = {"Fijian"},
	["fo"] = {"Faroese"},
	["fr"] = {"French"},
	["fy"] = {"Western Frisian"},
	["ga"] = {"Irish"},
	["gd"] = {"Scottish Gaelic", "Gaelic"},
	["gl"] = {"Galician"},
	["gn"] = {"Guarani"},
	["gu"] = {"Gujarati"},
	["gv"] = {"Manx"},
	["ha"] = {"Hausa"},
	["he"] = {"Hebrew"},
	["hi"] = {"Hindi"},
	["ho"] = {"Hiri Motu"},
	["hr"] = {"Croatian"},
	["ht"] = {"Haitian", "Haitian Creole"},
	["hu"] = {"Hungarian"},
	["hy"] = {"Armenian"},
	["hz"] = {"Herero"},
	["ia"] = {"Interlingua (International Auxiliary Language Association)"},
	["id"] = {"Indonesian"},
	["ie"] = {"Interlingue", "Occidental"},
	["ig"] = {"Igbo"},
	["ii"] = {"Sichuan Yi", "Nuosu"},
	["ik"] = {"Inupiaq"},
	["io"] = {"Ido"},
	["is"] = {"Icelandic"},
	["it"] = {"Italian"},
	["iu"] = {"Inuktitut"},
	["ja"] = {"Japanese"},
	["jv"] = {"Javanese"},
	["ka"] = {"Georgian"},
	["kg"] = {"Kongo"},
	["ki"] = {"Kikuyu", "Gikuyu"},
	["kj"] = {"Kuanyama", "Kwanyama"},
	["kk"] = {"Kazakh"},
	["kl"] = {"Kalaallisut", "Greenlandic"},
	["km"] = {"Khmer", "Central Khmer"},
	["kn"] = {"Kannada"},
	["ko"] = {"Korean"},
	["kr"] = {"Kanuri"},
	["ks"] = {"Kashmiri"},
	["ku"] = {"Kurdish"},
	["kv"] = {"Komi"},
	["kw"] = {"Cornish"},
	["ky"] = {"Kirghiz", "Kyrgyz"},
	["la"] = {"Latin"},
	["lb"] = {"Luxembourgish", "Letzeburgesch"},
	["lg"] = {"Ganda", "Luganda"},
	["li"] = {"Limburgan", "Limburger", "Limburgish"},
	["ln"] = {"Lingala"},
	["lo"] = {"Lao"},
	["lt"] = {"Lithuanian"},
	["lu"] = {"Luba-Katanga"},
	["lv"] = {"Latvian"},
	["mg"] = {"Malagasy"},
	["mh"] = {"Marshallese"},
	["mi"] = {"Maori"},
	["mk"] = {"Macedonian"},
	["ml"] = {"Malayalam"},
	["mn"] = {"Mongolian"},
	["mr"] = {"Marathi"},
	["ms"] = {"Malay (macrolanguage)"},
	["mt"] = {"Maltese"},
	["my"] = {"Burmese"},
	["na"] = {"Nauru"},
	["nb"] = {"Norwegian Bokmål"},
	["nd"] = {"North Ndebele"},
	["ne"] = {"Nepali (macrolanguage)"},
	["ng"] = {"Ndonga"},
	["nl"] = {"Dutch", "Flemish"},
	["nn"] = {"Norwegian Nynorsk"},
	["no"] = {"Norwegian"},
	["nr"] = {"South Ndebele"},
	["nv"] = {"Navajo", "Navaho"},
	["ny"] = {"Nyanja", "Chewa", "Chichewa"},
	["oc"] = {"Occitan (post 1500)"},
	["oj"] = {"Ojibwa"},
	["om"] = {"Oromo"},
	["or"] = {"Oriya (macrolanguage)", "Odia (macrolanguage)"},
	["os"] = {"Ossetian", "Ossetic"},
	["pa"] = {"Panjabi", "Punjabi"},
	["pi"] = {"Pali"},
	["pl"] = {"Polish"},
	["ps"] = {"Pushto", "Pashto"},
	["pt"] = {"Portuguese"},
	["qu"] = {"Quechua"},
	["rm"] = {"Romansh"},
	["rn"] = {"Rundi"},
	["ro"] = {"Romanian", "Moldavian", "Moldovan"},
	["ru"] = {"Russian"},
	["rw"] = {"Kinyarwanda"},
	["sa"] = {"Sanskrit"},
	["sc"] = {"Sardinian"},
	["sd"] = {"Sindhi"},
	["se"] = {"Northern Sami"},
	["sg"] = {"Sango"},
	["sh"] = {"Serbo-Croatian"},
	["si"] = {"Sinhala", "Sinhalese"},
	["sk"] = {"Slovak"},
	["sl"] = {"Slovenian"},
	["sm"] = {"Samoan"},
	["sn"] = {"Shona"},
	["so"] = {"Somali"},
	["sq"] = {"Albanian"},
	["sr"] = {"Serbian"},
	["ss"] = {"Swati"},
	["st"] = {"Southern Sotho"},
	["su"] = {"Sundanese"},
	["sv"] = {"Swedish"},
	["sw"] = {"Swahili (macrolanguage)"},
	["ta"] = {"Tamil"},
	["te"] = {"Telugu"},
	["tg"] = {"Tajik"},
	["th"] = {"Thai"},
	["ti"] = {"Tigrinya"},
	["tk"] = {"Turkmen"},
	["tl"] = {"Tagalog"},
	["tn"] = {"Tswana"},
	["to"] = {"Tonga (Tonga Islands)"},
	["tr"] = {"Turkish"},
	["ts"] = {"Tsonga"},
	["tt"] = {"Tatar"},
	["tw"] = {"Twi"},
	["ty"] = {"Tahitian"},
	["ug"] = {"Uighur", "Uyghur"},
	["uk"] = {"Ukrainian"},
	["ur"] = {"Urdu"},
	["uz"] = {"Uzbek"},
	["ve"] = {"Venda"},
	["vi"] = {"Vietnamese"},
	["vo"] = {"Volapük"},
	["wa"] = {"Walloon"},
	["wo"] = {"Wolof"},
	["xh"] = {"Xhosa"},
	["yi"] = {"Yiddish"},
	["yo"] = {"Yoruba"},
	["za"] = {"Zhuang", "Chuang"},
	["zh"] = {"Chinese"},
	["zu"] = {"Zulu"},
	["aaa"] = {"Ghotuo"},
	["aab"] = {"Alumu-Tesu"},
	["aac"] = {"Ari"},
	["aad"] = {"Amal"},
	["aae"] = {"Arbëreshë Albanian"},
	["aaf"] = {"Aranadan"},
	["aag"] = {"Ambrak"},
	["aah"] = {"Abu' Arapesh"},
	["aai"] = {"Arifama-Miniafia"},
	["aak"] = {"Ankave"},
	["aal"] = {"Afade"},
	["aan"] = {"Anambé"},
	["aao"] = {"Algerian Saharan Arabic"},
	["aap"] = {"Pará Arára"},
	["aaq"] = {"Eastern Abnaki"},
	["aas"] = {"Aasáx"},
	["aat"] = {"Arvanitika Albanian"},
	["aau"] = {"Abau"},
	["aav"] = {"Austro-Asiatic languages"},
	["aaw"] = {"Solong"},
	["aax"] = {"Mandobo Atas"},
	["aaz"] = {"Amarasi"},
	["aba"] = {"Abé"},
	["abb"] = {"Bankon"},
	["abc"] = {"Ambala Ayta"},
	["abd"] = {"Manide"},
	["abe"] = {"Western Abnaki"},
	["abf"] = {"Abai Sungai"},
	["abg"] = {"Abaga"},
	["abh"] = {"Tajiki Arabic"},
	["abi"] = {"Abidji"},
	["abj"] = {"Aka-Bea"},
	["abl"] = {"Lampung Nyo"},
	["abm"] = {"Abanyom"},
	["abn"] = {"Abua"},
	["abo"] = {"Abon"},
	["abp"] = {"Abellen Ayta"},
	["abq"] = {"Abaza"},
	["abr"] = {"Abron"},
	["abs"] = {"Ambonese Malay"},
	["abt"] = {"Ambulas"},
	["abu"] = {"Abure"},
	["abv"] = {"Baharna Arabic"},
	["abw"] = {"Pal"},
	["abx"] = {"Inabaknon"},
	["aby"] = {"Aneme Wake"},
	["abz"] = {"Abui"},
	["aca"] = {"Achagua"},
	["acb"] = {"Áncá"},
	["acd"] = {"Gikyode"},
	["ace"] = {"Achinese"},
	["acf"] = {"Saint Lucian Creole French"},
	["ach"] = {"Acoli"},
	["aci"] = {"Aka-Cari"},
	["ack"] = {"Aka-Kora"},
	["acl"] = {"Akar-Bale"},
	["acm"] = {"Mesopotamian Arabic"},
	["acn"] = {"Achang"},
	["acp"] = {"Eastern Acipa"},
	["acq"] = {"Ta'izzi-Adeni Arabic"},
	["acr"] = {"Achi"},
	["acs"] = {"Acroá"},
	["act"] = {"Achterhoeks"},
	["acu"] = {"Achuar-Shiwiar"},
	["acv"] = {"Achumawi"},
	["acw"] = {"Hijazi Arabic"},
	["acx"] = {"Omani Arabic"},
	["acy"] = {"Cypriot Arabic"},
	["acz"] = {"Acheron"},
	["ada"] = {"Adangme"},
	["adb"] = {"Atauran"},
	["add"] = {"Lidzonka", "Dzodinka"},
	["ade"] = {"Adele"},
	["adf"] = {"Dhofari Arabic"},
	["adg"] = {"Andegerebinha"},
	["adh"] = {"Adhola"},
	["adi"] = {"Adi"},
	["adj"] = {"Adioukrou"},
	["adl"] = {"Galo"},
	["adn"] = {"Adang"},
	["ado"] = {"Abu"},
	["adq"] = {"Adangbe"},
	["adr"] = {"Adonara"},
	["ads"] = {"Adamorobe Sign Language"},
	["adt"] = {"Adnyamathanha"},
	["adu"] = {"Aduge"},
	["adw"] = {"Amundava"},
	["adx"] = {"Amdo Tibetan"},
	["ady"] = {"Adyghe", "Adygei"},
	["adz"] = {"Adzera"},
	["aea"] = {"Areba"},
	["aeb"] = {"Tunisian Arabic"},
	["aec"] = {"Saidi Arabic"},
	["aed"] = {"Argentine Sign Language"},
	["aee"] = {"Northeast Pashai", "Northeast Pashayi"},
	["aek"] = {"Haeke"},
	["ael"] = {"Ambele"},
	["aem"] = {"Arem"},
	["aen"] = {"Armenian Sign Language"},
	["aeq"] = {"Aer"},
	["aer"] = {"Eastern Arrernte"},
	["aes"] = {"Alsea"},
	["aeu"] = {"Akeu"},
	["aew"] = {"Ambakich"},
	["aey"] = {"Amele"},
	["aez"] = {"Aeka"},
	["afa"] = {"Afro-Asiatic languages"},
	["afb"] = {"Gulf Arabic"},
	["afd"] = {"Andai"},
	["afe"] = {"Putukwam"},
	["afg"] = {"Afghan Sign Language"},
	["afh"] = {"Afrihili"},
	["afi"] = {"Akrukay", "Chini"},
	["afk"] = {"Nanubae"},
	["afn"] = {"Defaka"},
	["afo"] = {"Eloyi"},
	["afp"] = {"Tapei"},
	["afs"] = {"Afro-Seminole Creole"},
	["aft"] = {"Afitti"},
	["afu"] = {"Awutu"},
	["afz"] = {"Obokuitai"},
	["aga"] = {"Aguano"},
	["agb"] = {"Legbo"},
	["agc"] = {"Agatu"},
	["agd"] = {"Agarabi"},
	["age"] = {"Angal"},
	["agf"] = {"Arguni"},
	["agg"] = {"Angor"},
	["agh"] = {"Ngelima"},
	["agi"] = {"Agariya"},
	["agj"] = {"Argobba"},
	["agk"] = {"Isarog Agta"},
	["agl"] = {"Fembe"},
	["agm"] = {"Angaataha"},
	["agn"] = {"Agutaynen"},
	["ago"] = {"Tainae"},
	["agq"] = {"Aghem"},
	["agr"] = {"Aguaruna"},
	["ags"] = {"Esimbi"},
	["agt"] = {"Central Cagayan Agta"},
	["agu"] = {"Aguacateco"},
	["agv"] = {"Remontado Dumagat"},
	["agw"] = {"Kahua"},
	["agx"] = {"Aghul"},
	["agy"] = {"Southern Alta"},
	["agz"] = {"Mt. Iriga Agta"},
	["aha"] = {"Ahanta"},
	["ahb"] = {"Axamb"},
	["ahg"] = {"Qimant"},
	["ahh"] = {"Aghu"},
	["ahi"] = {"Tiagbamrin Aizi"},
	["ahk"] = {"Akha"},
	["ahl"] = {"Igo"},
	["ahm"] = {"Mobumrin Aizi"},
	["ahn"] = {"Àhàn"},
	["aho"] = {"Ahom"},
	["ahp"] = {"Aproumu Aizi"},
	["ahr"] = {"Ahirani"},
	["ahs"] = {"Ashe"},
	["aht"] = {"Ahtena"},
	["aia"] = {"Arosi"},
	["aib"] = {"Ainu (China)"},
	["aic"] = {"Ainbai"},
	["aid"] = {"Alngith"},
	["aie"] = {"Amara"},
	["aif"] = {"Agi"},
	["aig"] = {"Antigua and Barbuda Creole English"},
	["aih"] = {"Ai-Cham"},
	["aii"] = {"Assyrian Neo-Aramaic"},
	["aij"] = {"Lishanid Noshan"},
	["aik"] = {"Ake"},
	["ail"] = {"Aimele"},
	["aim"] = {"Aimol"},
	["ain"] = {"Ainu (Japan)"},
	["aio"] = {"Aiton"},
	["aip"] = {"Burumakok"},
	["aiq"] = {"Aimaq"},
	["air"] = {"Airoran"},
	["ait"] = {"Arikem"},
	["aiw"] = {"Aari"},
	["aix"] = {"Aighon"},
	["aiy"] = {"Ali"},
	["aja"] = {"Aja (South Sudan)"},
	["ajg"] = {"Aja (Benin)"},
	["aji"] = {"Ajië"},
	["ajn"] = {"Andajin"},
	["ajs"] = {"Algerian Jewish Sign Language"},
	["aju"] = {"Judeo-Moroccan Arabic"},
	["ajw"] = {"Ajawa"},
	["ajz"] = {"Amri Karbi"},
	["akb"] = {"Batak Angkola"},
	["akc"] = {"Mpur"},
	["akd"] = {"Ukpet-Ehom"},
	["ake"] = {"Akawaio"},
	["akf"] = {"Akpa"},
	["akg"] = {"Anakalangu"},
	["akh"] = {"Angal Heneng"},
	["aki"] = {"Aiome"},
	["akj"] = {"Aka-Jeru"},
	["akk"] = {"Akkadian"},
	["akl"] = {"Aklanon"},
	["akm"] = {"Aka-Bo"},
	["ako"] = {"Akurio"},
	["akp"] = {"Siwu"},
	["akq"] = {"Ak"},
	["akr"] = {"Araki"},
	["aks"] = {"Akaselem"},
	["akt"] = {"Akolet"},
	["aku"] = {"Akum"},
	["akv"] = {"Akhvakh"},
	["akw"] = {"Akwa"},
	["akx"] = {"Aka-Kede"},
	["aky"] = {"Aka-Kol"},
	["akz"] = {"Alabama"},
	["ala"] = {"Alago"},
	["alc"] = {"Qawasqar"},
	["ald"] = {"Alladian"},
	["ale"] = {"Aleut"},
	["alf"] = {"Alege"},
	["alg"] = {"Algonquian languages"},
	["alh"] = {"Alawa"},
	["ali"] = {"Amaimon"},
	["alj"] = {"Alangan"},
	["alk"] = {"Alak"},
	["all"] = {"Allar"},
	["alm"] = {"Amblong"},
	["aln"] = {"Gheg Albanian"},
	["alo"] = {"Larike-Wakasihu"},
	["alp"] = {"Alune"},
	["alq"] = {"Algonquin"},
	["alr"] = {"Alutor"},
	["als"] = {"Tosk Albanian"},
	["alt"] = {"Southern Altai"},
	["alu"] = {"'Are'are"},
	["alv"] = {"Atlantic-Congo languages"},
	["alw"] = {"Alaba-K’abeena", "Wanbasana"},
	["alx"] = {"Amol"},
	["aly"] = {"Alyawarr"},
	["alz"] = {"Alur"},
	["ama"] = {"Amanayé"},
	["amb"] = {"Ambo"},
	["amc"] = {"Amahuaca"},
	["ame"] = {"Yanesha'"},
	["amf"] = {"Hamer-Banna"},
	["amg"] = {"Amurdak"},
	["ami"] = {"Amis"},
	["amj"] = {"Amdang"},
	["amk"] = {"Ambai"},
	["aml"] = {"War-Jaintia"},
	["amm"] = {"Ama (Papua New Guinea)"},
	["amn"] = {"Amanab"},
	["amo"] = {"Amo"},
	["amp"] = {"Alamblak"},
	["amq"] = {"Amahai"},
	["amr"] = {"Amarakaeri"},
	["ams"] = {"Southern Amami-Oshima"},
	["amt"] = {"Amto"},
	["amu"] = {"Guerrero Amuzgo"},
	["amv"] = {"Ambelau"},
	["amw"] = {"Western Neo-Aramaic"},
	["amx"] = {"Anmatyerre"},
	["amy"] = {"Ami"},
	["amz"] = {"Atampaya"},
	["ana"] = {"Andaqui"},
	["anb"] = {"Andoa"},
	["anc"] = {"Ngas"},
	["and"] = {"Ansus"},
	["ane"] = {"Xârâcùù"},
	["anf"] = {"Animere"},
	["ang"] = {"Old English (ca. 450-1100)"},
	["anh"] = {"Nend"},
	["ani"] = {"Andi"},
	["anj"] = {"Anor"},
	["ank"] = {"Goemai"},
	["anl"] = {"Anu-Hkongso Chin"},
	["anm"] = {"Anal"},
	["ann"] = {"Obolo"},
	["ano"] = {"Andoque"},
	["anp"] = {"Angika"},
	["anq"] = {"Jarawa (India)"},
	["anr"] = {"Andh"},
	["ans"] = {"Anserma"},
	["ant"] = {"Antakarinya", "Antikarinya"},
	["anu"] = {"Anuak"},
	["anv"] = {"Denya"},
	["anw"] = {"Anaang"},
	["anx"] = {"Andra-Hus"},
	["any"] = {"Anyin"},
	["anz"] = {"Anem"},
	["aoa"] = {"Angolar"},
	["aob"] = {"Abom"},
	["aoc"] = {"Pemon"},
	["aod"] = {"Andarum"},
	["aoe"] = {"Angal Enen"},
	["aof"] = {"Bragat"},
	["aog"] = {"Angoram"},
	["aoi"] = {"Anindilyakwa"},
	["aoj"] = {"Mufian"},
	["aok"] = {"Arhö"},
	["aol"] = {"Alor"},
	["aom"] = {"Ömie"},
	["aon"] = {"Bumbita Arapesh"},
	["aor"] = {"Aore"},
	["aos"] = {"Taikat"},
	["aot"] = {"Atong (India)", "A'tong"},
	["aou"] = {"A'ou"},
	["aox"] = {"Atorada"},
	["aoz"] = {"Uab Meto"},
	["apa"] = {"Apache languages"},
	["apb"] = {"Sa'a"},
	["apc"] = {"Levantine Arabic"},
	["apd"] = {"Sudanese Arabic"},
	["ape"] = {"Bukiyip"},
	["apf"] = {"Pahanan Agta"},
	["apg"] = {"Ampanang"},
	["aph"] = {"Athpariya"},
	["api"] = {"Apiaká"},
	["apj"] = {"Jicarilla Apache"},
	["apk"] = {"Kiowa Apache"},
	["apl"] = {"Lipan Apache"},
	["apm"] = {"Mescalero-Chiricahua Apache"},
	["apn"] = {"Apinayé"},
	["apo"] = {"Ambul"},
	["app"] = {"Apma"},
	["apq"] = {"A-Pucikwar"},
	["apr"] = {"Arop-Lokep"},
	["aps"] = {"Arop-Sissano"},
	["apt"] = {"Apatani"},
	["apu"] = {"Apurinã"},
	["apv"] = {"Alapmunte"},
	["apw"] = {"Western Apache"},
	["apx"] = {"Aputai"},
	["apy"] = {"Apalaí"},
	["apz"] = {"Safeyoka"},
	["aqa"] = {"Alacalufan languages"},
	["aqc"] = {"Archi"},
	["aqd"] = {"Ampari Dogon"},
	["aqg"] = {"Arigidi"},
	["aqk"] = {"Aninka"},
	["aql"] = {"Algic languages"},
	["aqm"] = {"Atohwaim"},
	["aqn"] = {"Northern Alta"},
	["aqp"] = {"Atakapa"},
	["aqr"] = {"Arhâ"},
	["aqt"] = {"Angaité"},
	["aqz"] = {"Akuntsu"},
	["arb"] = {"Standard Arabic"},
	["arc"] = {"Official Aramaic (700-300 BCE)", "Imperial Aramaic (700-300 BCE)"},
	["ard"] = {"Arabana"},
	["are"] = {"Western Arrarnta"},
	["arh"] = {"Arhuaco"},
	["ari"] = {"Arikara"},
	["arj"] = {"Arapaso"},
	["ark"] = {"Arikapú"},
	["arl"] = {"Arabela"},
	["arn"] = {"Mapudungun", "Mapuche"},
	["aro"] = {"Araona"},
	["arp"] = {"Arapaho"},
	["arq"] = {"Algerian Arabic"},
	["arr"] = {"Karo (Brazil)"},
	["ars"] = {"Najdi Arabic"},
	["art"] = {"Artificial languages"},
	["aru"] = {"Aruá (Amazonas State)", "Arawá"},
	["arv"] = {"Arbore"},
	["arw"] = {"Arawak"},
	["arx"] = {"Aruá (Rodonia State)"},
	["ary"] = {"Moroccan Arabic"},
	["arz"] = {"Egyptian Arabic"},
	["asa"] = {"Asu (Tanzania)"},
	["asb"] = {"Assiniboine"},
	["asc"] = {"Casuarina Coast Asmat"},
	["ase"] = {"American Sign Language"},
	["asf"] = {"Auslan", "Australian Sign Language"},
	["asg"] = {"Cishingini"},
	["ash"] = {"Abishira"},
	["asi"] = {"Buruwai"},
	["asj"] = {"Sari"},
	["ask"] = {"Ashkun"},
	["asl"] = {"Asilulu"},
	["asn"] = {"Xingú Asuriní"},
	["aso"] = {"Dano"},
	["asp"] = {"Algerian Sign Language"},
	["asq"] = {"Austrian Sign Language"},
	["asr"] = {"Asuri"},
	["ass"] = {"Ipulo"},
	["ast"] = {"Asturian", "Asturleonese", "Bable", "Leonese"},
	["asu"] = {"Tocantins Asurini"},
	["asv"] = {"Asoa"},
	["asw"] = {"Australian Aborigines Sign Language"},
	["asx"] = {"Muratayak"},
	["asy"] = {"Yaosakor Asmat"},
	["asz"] = {"As"},
	["ata"] = {"Pele-Ata"},
	["atb"] = {"Zaiwa"},
	["atc"] = {"Atsahuaca"},
	["atd"] = {"Ata Manobo"},
	["ate"] = {"Atemble"},
	["atg"] = {"Ivbie North-Okpela-Arhe"},
	["ath"] = {"Athapascan languages"},
	["ati"] = {"Attié"},
	["atj"] = {"Atikamekw"},
	["atk"] = {"Ati"},
	["atl"] = {"Mt. Iraya Agta"},
	["atm"] = {"Ata"},
	["atn"] = {"Ashtiani"},
	["ato"] = {"Atong (Cameroon)"},
	["atp"] = {"Pudtol Atta"},
	["atq"] = {"Aralle-Tabulahan"},
	["atr"] = {"Waimiri-Atroari"},
	["ats"] = {"Gros Ventre"},
	["att"] = {"Pamplona Atta"},
	["atu"] = {"Reel"},
	["atv"] = {"Northern Altai"},
	["atw"] = {"Atsugewi"},
	["atx"] = {"Arutani"},
	["aty"] = {"Aneityum"},
	["atz"] = {"Arta"},
	["aua"] = {"Asumboa"},
	["aub"] = {"Alugu"},
	["auc"] = {"Waorani"},
	["aud"] = {"Anuta"},
	["auf"] = {"Arauan languages"},
	["aug"] = {"Aguna"},
	["auh"] = {"Aushi"},
	["aui"] = {"Anuki"},
	["auj"] = {"Awjilah"},
	["auk"] = {"Heyo"},
	["aul"] = {"Aulua"},
	["aum"] = {"Asu (Nigeria)"},
	["aun"] = {"Molmo One"},
	["auo"] = {"Auyokawa"},
	["aup"] = {"Makayam"},
	["auq"] = {"Anus", "Korur"},
	["aur"] = {"Aruek"},
	["aus"] = {"Australian languages"},
	["aut"] = {"Austral"},
	["auu"] = {"Auye"},
	["auw"] = {"Awyi"},
	["aux"] = {"Aurá"},
	["auy"] = {"Awiyaana"},
	["auz"] = {"Uzbeki Arabic"},
	["avb"] = {"Avau"},
	["avd"] = {"Alviri-Vidari"},
	["avi"] = {"Avikam"},
	["avk"] = {"Kotava"},
	["avl"] = {"Eastern Egyptian Bedawi Arabic"},
	["avm"] = {"Angkamuthi"},
	["avn"] = {"Avatime"},
	["avo"] = {"Agavotaguerra"},
	["avs"] = {"Aushiri"},
	["avt"] = {"Au"},
	["avu"] = {"Avokaya"},
	["avv"] = {"Avá-Canoeiro"},
	["awa"] = {"Awadhi"},
	["awb"] = {"Awa (Papua New Guinea)"},
	["awc"] = {"Cicipu"},
	["awd"] = {"Arawakan languages"},
	["awe"] = {"Awetí"},
	["awg"] = {"Anguthimri"},
	["awh"] = {"Awbono"},
	["awi"] = {"Aekyom"},
	["awk"] = {"Awabakal"},
	["awm"] = {"Arawum"},
	["awn"] = {"Awngi"},
	["awo"] = {"Awak"},
	["awr"] = {"Awera"},
	["aws"] = {"South Awyu"},
	["awt"] = {"Araweté"},
	["awu"] = {"Central Awyu"},
	["awv"] = {"Jair Awyu"},
	["aww"] = {"Awun"},
	["awx"] = {"Awara"},
	["awy"] = {"Edera Awyu"},
	["axb"] = {"Abipon"},
	["axe"] = {"Ayerrerenge"},
	["axg"] = {"Mato Grosso Arára"},
	["axk"] = {"Yaka (Central African Republic)"},
	["axl"] = {"Lower Southern Aranda"},
	["axm"] = {"Middle Armenian"},
	["axx"] = {"Xârâgurè"},
	["aya"] = {"Awar"},
	["ayb"] = {"Ayizo Gbe"},
	["ayc"] = {"Southern Aymara"},
	["ayd"] = {"Ayabadhu"},
	["aye"] = {"Ayere"},
	["ayg"] = {"Ginyanga"},
	["ayh"] = {"Hadrami Arabic"},
	["ayi"] = {"Leyigha"},
	["ayk"] = {"Akuku"},
	["ayl"] = {"Libyan Arabic"},
	["ayn"] = {"Sanaani Arabic"},
	["ayo"] = {"Ayoreo"},
	["ayp"] = {"North Mesopotamian Arabic"},
	["ayq"] = {"Ayi (Papua New Guinea)"},
	["ayr"] = {"Central Aymara"},
	["ays"] = {"Sorsogon Ayta"},
	["ayt"] = {"Magbukun Ayta"},
	["ayu"] = {"Ayu"},
	["ayz"] = {"Mai Brat"},
	["aza"] = {"Azha"},
	["azb"] = {"South Azerbaijani"},
	["azc"] = {"Uto-Aztecan languages"},
	["azd"] = {"Eastern Durango Nahuatl"},
	["azg"] = {"San Pedro Amuzgos Amuzgo"},
	["azj"] = {"North Azerbaijani"},
	["azm"] = {"Ipalapa Amuzgo"},
	["azn"] = {"Western Durango Nahuatl"},
	["azo"] = {"Awing"},
	["azt"] = {"Faire Atta"},
	["azz"] = {"Highland Puebla Nahuatl"},
	["baa"] = {"Babatana"},
	["bab"] = {"Bainouk-Gunyuño"},
	["bac"] = {"Badui"},
	["bad"] = {"Banda languages"},
	["bae"] = {"Baré"},
	["baf"] = {"Nubaca"},
	["bag"] = {"Tuki"},
	["bah"] = {"Bahamas Creole English"},
	["bai"] = {"Bamileke languages"},
	["baj"] = {"Barakai"},
	["bal"] = {"Baluchi"},
	["ban"] = {"Balinese"},
	["bao"] = {"Waimaha"},
	["bap"] = {"Bantawa"},
	["bar"] = {"Bavarian"},
	["bas"] = {"Basa (Cameroon)"},
	["bat"] = {"Baltic languages"},
	["bau"] = {"Bada (Nigeria)"},
	["bav"] = {"Vengo"},
	["baw"] = {"Bambili-Bambui"},
	["bax"] = {"Bamun"},
	["bay"] = {"Batuley"},
	["bba"] = {"Baatonum"},
	["bbb"] = {"Barai"},
	["bbc"] = {"Batak Toba"},
	["bbd"] = {"Bau"},
	["bbe"] = {"Bangba"},
	["bbf"] = {"Baibai"},
	["bbg"] = {"Barama"},
	["bbh"] = {"Bugan"},
	["bbi"] = {"Barombi"},
	["bbj"] = {"Ghomálá'"},
	["bbk"] = {"Babanki"},
	["bbl"] = {"Bats"},
	["bbm"] = {"Babango"},
	["bbn"] = {"Uneapa"},
	["bbo"] = {"Northern Bobo Madaré", "Konabéré"},
	["bbp"] = {"West Central Banda"},
	["bbq"] = {"Bamali"},
	["bbr"] = {"Girawa"},
	["bbs"] = {"Bakpinka"},
	["bbt"] = {"Mburku"},
	["bbu"] = {"Kulung (Nigeria)"},
	["bbv"] = {"Karnai"},
	["bbw"] = {"Baba"},
	["bbx"] = {"Bubia"},
	["bby"] = {"Befang"},
	["bca"] = {"Central Bai"},
	["bcb"] = {"Bainouk-Samik"},
	["bcc"] = {"Southern Balochi"},
	["bcd"] = {"North Babar"},
	["bce"] = {"Bamenyam"},
	["bcf"] = {"Bamu"},
	["bcg"] = {"Baga Pokur"},
	["bch"] = {"Bariai"},
	["bci"] = {"Baoulé"},
	["bcj"] = {"Bardi"},
	["bck"] = {"Bunuba"},
	["bcl"] = {"Central Bikol"},
	["bcm"] = {"Bannoni"},
	["bcn"] = {"Bali (Nigeria)"},
	["bco"] = {"Kaluli"},
	["bcp"] = {"Bali (Democratic Republic of Congo)"},
	["bcq"] = {"Bench"},
	["bcr"] = {"Babine"},
	["bcs"] = {"Kohumono"},
	["bct"] = {"Bendi"},
	["bcu"] = {"Awad Bing"},
	["bcv"] = {"Shoo-Minda-Nye"},
	["bcw"] = {"Bana"},
	["bcy"] = {"Bacama"},
	["bcz"] = {"Bainouk-Gunyaamolo"},
	["bda"] = {"Bayot"},
	["bdb"] = {"Basap"},
	["bdc"] = {"Emberá-Baudó"},
	["bdd"] = {"Bunama"},
	["bde"] = {"Bade"},
	["bdf"] = {"Biage"},
	["bdg"] = {"Bonggi"},
	["bdh"] = {"Baka (South Sudan)"},
	["bdi"] = {"Burun"},
	["bdj"] = {"Bai (South Sudan)", "Bai"},
	["bdk"] = {"Budukh"},
	["bdl"] = {"Indonesian Bajau"},
	["bdm"] = {"Buduma"},
	["bdn"] = {"Baldemu"},
	["bdo"] = {"Morom"},
	["bdp"] = {"Bende"},
	["bdq"] = {"Bahnar"},
	["bdr"] = {"West Coast Bajau"},
	["bds"] = {"Burunge"},
	["bdt"] = {"Bokoto"},
	["bdu"] = {"Oroko"},
	["bdv"] = {"Bodo Parja"},
	["bdw"] = {"Baham"},
	["bdx"] = {"Budong-Budong"},
	["bdy"] = {"Bandjalang"},
	["bdz"] = {"Badeshi"},
	["bea"] = {"Beaver"},
	["beb"] = {"Bebele"},
	["bec"] = {"Iceve-Maci"},
	["bed"] = {"Bedoanas"},
	["bee"] = {"Byangsi"},
	["bef"] = {"Benabena"},
	["beg"] = {"Belait"},
	["beh"] = {"Biali"},
	["bei"] = {"Bekati'"},
	["bej"] = {"Beja", "Bedawiyet"},
	["bek"] = {"Bebeli"},
	["bem"] = {"Bemba (Zambia)"},
	["beo"] = {"Beami"},
	["bep"] = {"Besoa"},
	["beq"] = {"Beembe"},
	["ber"] = {"Berber languages"},
	["bes"] = {"Besme"},
	["bet"] = {"Guiberoua Béte"},
	["beu"] = {"Blagar"},
	["bev"] = {"Daloa Bété"},
	["bew"] = {"Betawi"},
	["bex"] = {"Jur Modo"},
	["bey"] = {"Beli (Papua New Guinea)"},
	["bez"] = {"Bena (Tanzania)"},
	["bfa"] = {"Bari"},
	["bfb"] = {"Pauri Bareli"},
	["bfc"] = {"Panyi Bai", "Northern Bai"},
	["bfd"] = {"Bafut"},
	["bfe"] = {"Betaf", "Tena"},
	["bff"] = {"Bofi"},
	["bfg"] = {"Busang Kayan"},
	["bfh"] = {"Blafe"},
	["bfi"] = {"British Sign Language"},
	["bfj"] = {"Bafanji"},
	["bfk"] = {"Ban Khor Sign Language"},
	["bfl"] = {"Banda-Ndélé"},
	["bfm"] = {"Mmen"},
	["bfn"] = {"Bunak"},
	["bfo"] = {"Malba Birifor"},
	["bfp"] = {"Beba"},
	["bfq"] = {"Badaga"},
	["bfr"] = {"Bazigar"},
	["bfs"] = {"Southern Bai"},
	["bft"] = {"Balti"},
	["bfu"] = {"Gahri"},
	["bfw"] = {"Bondo"},
	["bfx"] = {"Bantayanon"},
	["bfy"] = {"Bagheli"},
	["bfz"] = {"Mahasu Pahari"},
	["bga"] = {"Gwamhi-Wuri"},
	["bgb"] = {"Bobongko"},
	["bgc"] = {"Haryanvi"},
	["bgd"] = {"Rathwi Bareli"},
	["bge"] = {"Bauria"},
	["bgf"] = {"Bangandu"},
	["bgg"] = {"Bugun"},
	["bgi"] = {"Giangan"},
	["bgj"] = {"Bangolan"},
	["bgk"] = {"Bit", "Buxinhua"},
	["bgl"] = {"Bo (Laos)"},
	["bgn"] = {"Western Balochi"},
	["bgo"] = {"Baga Koga"},
	["bgp"] = {"Eastern Balochi"},
	["bgq"] = {"Bagri"},
	["bgr"] = {"Bawm Chin"},
	["bgs"] = {"Tagabawa"},
	["bgt"] = {"Bughotu"},
	["bgu"] = {"Mbongno"},
	["bgv"] = {"Warkay-Bipim"},
	["bgw"] = {"Bhatri"},
	["bgx"] = {"Balkan Gagauz Turkish"},
	["bgy"] = {"Benggoi"},
	["bgz"] = {"Banggai"},
	["bha"] = {"Bharia"},
	["bhb"] = {"Bhili"},
	["bhc"] = {"Biga"},
	["bhd"] = {"Bhadrawahi"},
	["bhe"] = {"Bhaya"},
	["bhf"] = {"Odiai"},
	["bhg"] = {"Binandere"},
	["bhh"] = {"Bukharic"},
	["bhi"] = {"Bhilali"},
	["bhj"] = {"Bahing"},
	["bhl"] = {"Bimin"},
	["bhm"] = {"Bathari"},
	["bhn"] = {"Bohtan Neo-Aramaic"},
	["bho"] = {"Bhojpuri"},
	["bhp"] = {"Bima"},
	["bhq"] = {"Tukang Besi South"},
	["bhr"] = {"Bara Malagasy"},
	["bhs"] = {"Buwal"},
	["bht"] = {"Bhattiyali"},
	["bhu"] = {"Bhunjia"},
	["bhv"] = {"Bahau"},
	["bhw"] = {"Biak"},
	["bhx"] = {"Bhalay"},
	["bhy"] = {"Bhele"},
	["bhz"] = {"Bada (Indonesia)"},
	["bia"] = {"Badimaya"},
	["bib"] = {"Bissa", "Bisa"},
	["bid"] = {"Bidiyo"},
	["bie"] = {"Bepour"},
	["bif"] = {"Biafada"},
	["big"] = {"Biangai"},
	["bik"] = {"Bikol"},
	["bil"] = {"Bile"},
	["bim"] = {"Bimoba"},
	["bin"] = {"Bini", "Edo"},
	["bio"] = {"Nai"},
	["bip"] = {"Bila"},
	["biq"] = {"Bipi"},
	["bir"] = {"Bisorio"},
	["bit"] = {"Berinomo"},
	["biu"] = {"Biete"},
	["biv"] = {"Southern Birifor"},
	["biw"] = {"Kol (Cameroon)"},
	["bix"] = {"Bijori"},
	["biy"] = {"Birhor"},
	["biz"] = {"Baloi"},
	["bja"] = {"Budza"},
	["bjb"] = {"Banggarla"},
	["bjc"] = {"Bariji"},
	["bje"] = {"Biao-Jiao Mien"},
	["bjf"] = {"Barzani Jewish Neo-Aramaic"},
	["bjg"] = {"Bidyogo"},
	["bjh"] = {"Bahinemo"},
	["bji"] = {"Burji"},
	["bjj"] = {"Kanauji"},
	["bjk"] = {"Barok"},
	["bjl"] = {"Bulu (Papua New Guinea)"},
	["bjm"] = {"Bajelani"},
	["bjn"] = {"Banjar"},
	["bjo"] = {"Mid-Southern Banda"},
	["bjp"] = {"Fanamaket"},
	["bjr"] = {"Binumarien"},
	["bjs"] = {"Bajan"},
	["bjt"] = {"Balanta-Ganja"},
	["bju"] = {"Busuu"},
	["bjv"] = {"Bedjond"},
	["bjw"] = {"Bakwé"},
	["bjx"] = {"Banao Itneg"},
	["bjy"] = {"Bayali"},
	["bjz"] = {"Baruga"},
	["bka"] = {"Kyak"},
	["bkc"] = {"Baka (Cameroon)"},
	["bkd"] = {"Binukid", "Talaandig"},
	["bkf"] = {"Beeke"},
	["bkg"] = {"Buraka"},
	["bkh"] = {"Bakoko"},
	["bki"] = {"Baki"},
	["bkj"] = {"Pande"},
	["bkk"] = {"Brokskat"},
	["bkl"] = {"Berik"},
	["bkm"] = {"Kom (Cameroon)"},
	["bkn"] = {"Bukitan"},
	["bko"] = {"Kwa'"},
	["bkp"] = {"Boko (Democratic Republic of Congo)"},
	["bkq"] = {"Bakairí"},
	["bkr"] = {"Bakumpai"},
	["bks"] = {"Northern Sorsoganon"},
	["bkt"] = {"Boloki"},
	["bku"] = {"Buhid"},
	["bkv"] = {"Bekwarra"},
	["bkw"] = {"Bekwel"},
	["bkx"] = {"Baikeno"},
	["bky"] = {"Bokyi"},
	["bkz"] = {"Bungku"},
	["bla"] = {"Siksika"},
	["blb"] = {"Bilua"},
	["blc"] = {"Bella Coola"},
	["bld"] = {"Bolango"},
	["ble"] = {"Balanta-Kentohe"},
	["blf"] = {"Buol"},
	["blh"] = {"Kuwaa"},
	["bli"] = {"Bolia"},
	["blj"] = {"Bolongan"},
	["blk"] = {"Pa'o Karen", "Pa'O"},
	["bll"] = {"Biloxi"},
	["blm"] = {"Beli (South Sudan)"},
	["bln"] = {"Southern Catanduanes Bikol"},
	["blo"] = {"Anii"},
	["blp"] = {"Blablanga"},
	["blq"] = {"Baluan-Pam"},
	["blr"] = {"Blang"},
	["bls"] = {"Balaesang"},
	["blt"] = {"Tai Dam"},
	["blv"] = {"Kibala", "Bolo"},
	["blw"] = {"Balangao"},
	["blx"] = {"Mag-Indi Ayta"},
	["bly"] = {"Notre"},
	["blz"] = {"Balantak"},
	["bma"] = {"Lame"},
	["bmb"] = {"Bembe"},
	["bmc"] = {"Biem"},
	["bmd"] = {"Baga Manduri"},
	["bme"] = {"Limassa"},
	["bmf"] = {"Bom-Kim"},
	["bmg"] = {"Bamwe"},
	["bmh"] = {"Kein"},
	["bmi"] = {"Bagirmi"},
	["bmj"] = {"Bote-Majhi"},
	["bmk"] = {"Ghayavi"},
	["bml"] = {"Bomboli"},
	["bmm"] = {"Northern Betsimisaraka Malagasy"},
	["bmn"] = {"Bina (Papua New Guinea)"},
	["bmo"] = {"Bambalang"},
	["bmp"] = {"Bulgebi"},
	["bmq"] = {"Bomu"},
	["bmr"] = {"Muinane"},
	["bms"] = {"Bilma Kanuri"},
	["bmt"] = {"Biao Mon"},
	["bmu"] = {"Somba-Siawari"},
	["bmv"] = {"Bum"},
	["bmw"] = {"Bomwali"},
	["bmx"] = {"Baimak"},
	["bmz"] = {"Baramu"},
	["bna"] = {"Bonerate"},
	["bnb"] = {"Bookan"},
	["bnc"] = {"Bontok"},
	["bnd"] = {"Banda (Indonesia)"},
	["bne"] = {"Bintauna"},
	["bnf"] = {"Masiwang"},
	["bng"] = {"Benga"},
	["bni"] = {"Bangi"},
	["bnj"] = {"Eastern Tawbuid"},
	["bnk"] = {"Bierebo"},
	["bnl"] = {"Boon"},
	["bnm"] = {"Batanga"},
	["bnn"] = {"Bunun"},
	["bno"] = {"Bantoanon"},
	["bnp"] = {"Bola"},
	["bnq"] = {"Bantik"},
	["bnr"] = {"Butmas-Tur"},
	["bns"] = {"Bundeli"},
	["bnt"] = {"Bantu languages"},
	["bnu"] = {"Bentong"},
	["bnv"] = {"Bonerif", "Beneraf", "Edwas"},
	["bnw"] = {"Bisis"},
	["bnx"] = {"Bangubangu"},
	["bny"] = {"Bintulu"},
	["bnz"] = {"Beezen"},
	["boa"] = {"Bora"},
	["bob"] = {"Aweer"},
	["boe"] = {"Mundabli"},
	["bof"] = {"Bolon"},
	["bog"] = {"Bamako Sign Language"},
	["boh"] = {"Boma"},
	["boi"] = {"Barbareño"},
	["boj"] = {"Anjam"},
	["bok"] = {"Bonjo"},
	["bol"] = {"Bole"},
	["bom"] = {"Berom"},
	["bon"] = {"Bine"},
	["boo"] = {"Tiemacèwè Bozo"},
	["bop"] = {"Bonkiman"},
	["boq"] = {"Bogaya"},
	["bor"] = {"Borôro"},
	["bot"] = {"Bongo"},
	["bou"] = {"Bondei"},
	["bov"] = {"Tuwuli"},
	["bow"] = {"Rema"},
	["box"] = {"Buamu"},
	["boy"] = {"Bodo (Central African Republic)"},
	["boz"] = {"Tiéyaxo Bozo"},
	["bpa"] = {"Daakaka"},
	["bpc"] = {"Mbuk"},
	["bpd"] = {"Banda-Banda"},
	["bpe"] = {"Bauni"},
	["bpg"] = {"Bonggo"},
	["bph"] = {"Botlikh"},
	["bpi"] = {"Bagupi"},
	["bpj"] = {"Binji"},
	["bpk"] = {"Orowe", "'Ôrôê"},
	["bpl"] = {"Broome Pearling Lugger Pidgin"},
	["bpm"] = {"Biyom"},
	["bpn"] = {"Dzao Min"},
	["bpo"] = {"Anasi"},
	["bpp"] = {"Kaure"},
	["bpq"] = {"Banda Malay"},
	["bpr"] = {"Koronadal Blaan"},
	["bps"] = {"Sarangani Blaan"},
	["bpt"] = {"Barrow Point"},
	["bpu"] = {"Bongu"},
	["bpv"] = {"Bian Marind"},
	["bpw"] = {"Bo (Papua New Guinea)"},
	["bpx"] = {"Palya Bareli"},
	["bpy"] = {"Bishnupriya"},
	["bpz"] = {"Bilba"},
	["bqa"] = {"Tchumbuli"},
	["bqb"] = {"Bagusa"},
	["bqc"] = {"Boko (Benin)", "Boo"},
	["bqd"] = {"Bung"},
	["bqf"] = {"Baga Kaloum"},
	["bqg"] = {"Bago-Kusuntu"},
	["bqh"] = {"Baima"},
	["bqi"] = {"Bakhtiari"},
	["bqj"] = {"Bandial"},
	["bqk"] = {"Banda-Mbrès"},
	["bql"] = {"Bilakura"},
	["bqm"] = {"Wumboko"},
	["bqn"] = {"Bulgarian Sign Language"},
	["bqo"] = {"Balo"},
	["bqp"] = {"Busa"},
	["bqq"] = {"Biritai"},
	["bqr"] = {"Burusu"},
	["bqs"] = {"Bosngun"},
	["bqt"] = {"Bamukumbit"},
	["bqu"] = {"Boguru"},
	["bqv"] = {"Koro Wachi", "Begbere-Ejar"},
	["bqw"] = {"Buru (Nigeria)"},
	["bqx"] = {"Baangi"},
	["bqy"] = {"Bengkala Sign Language"},
	["bqz"] = {"Bakaka"},
	["bra"] = {"Braj"},
	["brb"] = {"Brao", "Lave"},
	["brc"] = {"Berbice Creole Dutch"},
	["brd"] = {"Baraamu"},
	["brf"] = {"Bira"},
	["brg"] = {"Baure"},
	["brh"] = {"Brahui"},
	["bri"] = {"Mokpwe"},
	["brj"] = {"Bieria"},
	["brk"] = {"Birked"},
	["brl"] = {"Birwa"},
	["brm"] = {"Barambu"},
	["brn"] = {"Boruca"},
	["bro"] = {"Brokkat"},
	["brp"] = {"Barapasi"},
	["brq"] = {"Breri"},
	["brr"] = {"Birao"},
	["brs"] = {"Baras"},
	["brt"] = {"Bitare"},
	["bru"] = {"Eastern Bru"},
	["brv"] = {"Western Bru"},
	["brw"] = {"Bellari"},
	["brx"] = {"Bodo (India)"},
	["bry"] = {"Burui"},
	["brz"] = {"Bilbil"},
	["bsa"] = {"Abinomn"},
	["bsb"] = {"Brunei Bisaya"},
	["bsc"] = {"Bassari", "Oniyan"},
	["bse"] = {"Wushi"},
	["bsf"] = {"Bauchi"},
	["bsg"] = {"Bashkardi"},
	["bsh"] = {"Kati"},
	["bsi"] = {"Bassossi"},
	["bsj"] = {"Bangwinji"},
	["bsk"] = {"Burushaski"},
	["bsl"] = {"Basa-Gumna"},
	["bsm"] = {"Busami"},
	["bsn"] = {"Barasana-Eduria"},
	["bso"] = {"Buso"},
	["bsp"] = {"Baga Sitemu"},
	["bsq"] = {"Bassa"},
	["bsr"] = {"Bassa-Kontagora"},
	["bss"] = {"Akoose"},
	["bst"] = {"Basketo"},
	["bsu"] = {"Bahonsuai"},
	["bsv"] = {"Baga Sobané"},
	["bsw"] = {"Baiso"},
	["bsx"] = {"Yangkam"},
	["bsy"] = {"Sabah Bisaya"},
	["bta"] = {"Bata"},
	["btc"] = {"Bati (Cameroon)"},
	["btd"] = {"Batak Dairi"},
	["bte"] = {"Gamo-Ningi"},
	["btf"] = {"Birgit"},
	["btg"] = {"Gagnoa Bété"},
	["bth"] = {"Biatah Bidayuh"},
	["bti"] = {"Burate"},
	["btj"] = {"Bacanese Malay"},
	["btk"] = {"Batak languages"},
	["btm"] = {"Batak Mandailing"},
	["btn"] = {"Ratagnon"},
	["bto"] = {"Rinconada Bikol"},
	["btp"] = {"Budibud"},
	["btq"] = {"Batek"},
	["btr"] = {"Baetora"},
	["bts"] = {"Batak Simalungun"},
	["btt"] = {"Bete-Bendi"},
	["btu"] = {"Batu"},
	["btv"] = {"Bateri"},
	["btw"] = {"Butuanon"},
	["btx"] = {"Batak Karo"},
	["bty"] = {"Bobot"},
	["btz"] = {"Batak Alas-Kluet"},
	["bua"] = {"Buriat"},
	["bub"] = {"Bua"},
	["buc"] = {"Bushi"},
	["bud"] = {"Ntcham"},
	["bue"] = {"Beothuk"},
	["buf"] = {"Bushoong"},
	["bug"] = {"Buginese"},
	["buh"] = {"Younuo Bunu"},
	["bui"] = {"Bongili"},
	["buj"] = {"Basa-Gurmana"},
	["buk"] = {"Bugawac"},
	["bum"] = {"Bulu (Cameroon)"},
	["bun"] = {"Sherbro"},
	["buo"] = {"Terei"},
	["bup"] = {"Busoa"},
	["buq"] = {"Brem"},
	["bus"] = {"Bokobaru"},
	["but"] = {"Bungain"},
	["buu"] = {"Budu"},
	["buv"] = {"Bun"},
	["buw"] = {"Bubi"},
	["bux"] = {"Boghom"},
	["buy"] = {"Bullom So"},
	["buz"] = {"Bukwen"},
	["bva"] = {"Barein"},
	["bvb"] = {"Bube"},
	["bvc"] = {"Baelelea"},
	["bvd"] = {"Baeggu"},
	["bve"] = {"Berau Malay"},
	["bvf"] = {"Boor"},
	["bvg"] = {"Bonkeng"},
	["bvh"] = {"Bure"},
	["bvi"] = {"Belanda Viri"},
	["bvj"] = {"Baan"},
	["bvk"] = {"Bukat"},
	["bvl"] = {"Bolivian Sign Language"},
	["bvm"] = {"Bamunka"},
	["bvn"] = {"Buna"},
	["bvo"] = {"Bolgo"},
	["bvp"] = {"Bumang"},
	["bvq"] = {"Birri"},
	["bvr"] = {"Burarra"},
	["bvt"] = {"Bati (Indonesia)"},
	["bvu"] = {"Bukit Malay"},
	["bvv"] = {"Baniva"},
	["bvw"] = {"Boga"},
	["bvx"] = {"Dibole"},
	["bvy"] = {"Baybayanon"},
	["bvz"] = {"Bauzi"},
	["bwa"] = {"Bwatoo"},
	["bwb"] = {"Namosi-Naitasiri-Serua"},
	["bwc"] = {"Bwile"},
	["bwd"] = {"Bwaidoka"},
	["bwe"] = {"Bwe Karen"},
	["bwf"] = {"Boselewa"},
	["bwg"] = {"Barwe"},
	["bwh"] = {"Bishuo"},
	["bwi"] = {"Baniwa"},
	["bwj"] = {"Láá Láá Bwamu"},
	["bwk"] = {"Bauwaki"},
	["bwl"] = {"Bwela"},
	["bwm"] = {"Biwat"},
	["bwn"] = {"Wunai Bunu"},
	["bwo"] = {"Boro (Ethiopia)", "Borna (Ethiopia)"},
	["bwp"] = {"Mandobo Bawah"},
	["bwq"] = {"Southern Bobo Madaré"},
	["bwr"] = {"Bura-Pabir"},
	["bws"] = {"Bomboma"},
	["bwt"] = {"Bafaw-Balong"},
	["bwu"] = {"Buli (Ghana)"},
	["bww"] = {"Bwa"},
	["bwx"] = {"Bu-Nao Bunu"},
	["bwy"] = {"Cwi Bwamu"},
	["bwz"] = {"Bwisi"},
	["bxa"] = {"Tairaha"},
	["bxb"] = {"Belanda Bor"},
	["bxc"] = {"Molengue"},
	["bxd"] = {"Pela"},
	["bxe"] = {"Birale"},
	["bxf"] = {"Bilur", "Minigir"},
	["bxg"] = {"Bangala"},
	["bxh"] = {"Buhutu"},
	["bxi"] = {"Pirlatapa"},
	["bxj"] = {"Bayungu"},
	["bxk"] = {"Bukusu", "Lubukusu"},
	["bxl"] = {"Jalkunan"},
	["bxm"] = {"Mongolia Buriat"},
	["bxn"] = {"Burduna"},
	["bxo"] = {"Barikanchi"},
	["bxp"] = {"Bebil"},
	["bxq"] = {"Beele"},
	["bxr"] = {"Russia Buriat"},
	["bxs"] = {"Busam"},
	["bxu"] = {"China Buriat"},
	["bxv"] = {"Berakou"},
	["bxw"] = {"Bankagooma"},
	["bxz"] = {"Binahari"},
	["bya"] = {"Batak"},
	["byb"] = {"Bikya"},
	["byc"] = {"Ubaghara"},
	["byd"] = {"Benyadu'"},
	["bye"] = {"Pouye"},
	["byf"] = {"Bete"},
	["byg"] = {"Baygo"},
	["byh"] = {"Bhujel"},
	["byi"] = {"Buyu"},
	["byj"] = {"Bina (Nigeria)"},
	["byk"] = {"Biao"},
	["byl"] = {"Bayono"},
	["bym"] = {"Bidjara"},
	["byn"] = {"Bilin", "Blin"},
	["byo"] = {"Biyo"},
	["byp"] = {"Bumaji"},
	["byq"] = {"Basay"},
	["byr"] = {"Baruya", "Yipma"},
	["bys"] = {"Burak"},
	["byt"] = {"Berti"},
	["byv"] = {"Medumba"},
	["byw"] = {"Belhariya"},
	["byx"] = {"Qaqet"},
	["byz"] = {"Banaro"},
	["bza"] = {"Bandi"},
	["bzb"] = {"Andio"},
	["bzc"] = {"Southern Betsimisaraka Malagasy"},
	["bzd"] = {"Bribri"},
	["bze"] = {"Jenaama Bozo"},
	["bzf"] = {"Boikin"},
	["bzg"] = {"Babuza"},
	["bzh"] = {"Mapos Buang"},
	["bzi"] = {"Bisu"},
	["bzj"] = {"Belize Kriol English"},
	["bzk"] = {"Nicaragua Creole English"},
	["bzl"] = {"Boano (Sulawesi)"},
	["bzm"] = {"Bolondo"},
	["bzn"] = {"Boano (Maluku)"},
	["bzo"] = {"Bozaba"},
	["bzp"] = {"Kemberano"},
	["bzq"] = {"Buli (Indonesia)"},
	["bzr"] = {"Biri"},
	["bzs"] = {"Brazilian Sign Language"},
	["bzt"] = {"Brithenig"},
	["bzu"] = {"Burmeso"},
	["bzv"] = {"Naami"},
	["bzw"] = {"Basa (Nigeria)"},
	["bzx"] = {"Kɛlɛngaxo Bozo"},
	["bzy"] = {"Obanliku"},
	["bzz"] = {"Evant"},
	["caa"] = {"Chortí"},
	["cab"] = {"Garifuna"},
	["cac"] = {"Chuj"},
	["cad"] = {"Caddo"},
	["cae"] = {"Lehar", "Laalaa"},
	["caf"] = {"Southern Carrier"},
	["cag"] = {"Nivaclé"},
	["cah"] = {"Cahuarano"},
	["cai"] = {"Central American Indian languages"},
	["caj"] = {"Chané"},
	["cak"] = {"Kaqchikel", "Cakchiquel"},
	["cal"] = {"Carolinian"},
	["cam"] = {"Cemuhî"},
	["can"] = {"Chambri"},
	["cao"] = {"Chácobo"},
	["cap"] = {"Chipaya"},
	["caq"] = {"Car Nicobarese"},
	["car"] = {"Galibi Carib"},
	["cas"] = {"Tsimané"},
	["cau"] = {"Caucasian languages"},
	["cav"] = {"Cavineña"},
	["caw"] = {"Callawalla"},
	["cax"] = {"Chiquitano"},
	["cay"] = {"Cayuga"},
	["caz"] = {"Canichana"},
	["cba"] = {"Chibchan languages"},
	["cbb"] = {"Cabiyarí"},
	["cbc"] = {"Carapana"},
	["cbd"] = {"Carijona"},
	["cbg"] = {"Chimila"},
	["cbi"] = {"Chachi"},
	["cbj"] = {"Ede Cabe"},
	["cbk"] = {"Chavacano"},
	["cbl"] = {"Bualkhaw Chin"},
	["cbn"] = {"Nyahkur"},
	["cbo"] = {"Izora"},
	["cbq"] = {"Tsucuba", "Cuba"},
	["cbr"] = {"Cashibo-Cacataibo"},
	["cbs"] = {"Cashinahua"},
	["cbt"] = {"Chayahuita"},
	["cbu"] = {"Candoshi-Shapra"},
	["cbv"] = {"Cacua"},
	["cbw"] = {"Kinabalian"},
	["cby"] = {"Carabayo"},
	["ccc"] = {"Chamicuro"},
	["ccd"] = {"Cafundo Creole"},
	["cce"] = {"Chopi"},
	["ccg"] = {"Samba Daka"},
	["cch"] = {"Atsam"},
	["ccj"] = {"Kasanga"},
	["ccl"] = {"Cutchi-Swahili"},
	["ccm"] = {"Malaccan Creole Malay"},
	["ccn"] = {"North Caucasian languages"},
	["cco"] = {"Comaltepec Chinantec"},
	["ccp"] = {"Chakma"},
	["ccr"] = {"Cacaopera"},
	["ccs"] = {"South Caucasian languages"},
	["cda"] = {"Choni"},
	["cdc"] = {"Chadic languages"},
	["cdd"] = {"Caddoan languages"},
	["cde"] = {"Chenchu"},
	["cdf"] = {"Chiru"},
	["cdh"] = {"Chambeali"},
	["cdi"] = {"Chodri"},
	["cdj"] = {"Churahi"},
	["cdm"] = {"Chepang"},
	["cdn"] = {"Chaudangsi"},
	["cdo"] = {"Min Dong Chinese"},
	["cdr"] = {"Cinda-Regi-Tiyal"},
	["cds"] = {"Chadian Sign Language"},
	["cdy"] = {"Chadong"},
	["cdz"] = {"Koda"},
	["cea"] = {"Lower Chehalis"},
	["ceb"] = {"Cebuano"},
	["ceg"] = {"Chamacoco"},
	["cek"] = {"Eastern Khumi Chin"},
	["cel"] = {"Celtic languages"},
	["cen"] = {"Cen"},
	["cet"] = {"Centúúm"},
	["cey"] = {"Ekai Chin"},
	["cfa"] = {"Dijim-Bwilim"},
	["cfd"] = {"Cara"},
	["cfg"] = {"Como Karim"},
	["cfm"] = {"Falam Chin"},
	["cga"] = {"Changriwa"},
	["cgc"] = {"Kagayanen"},
	["cgg"] = {"Chiga"},
	["cgk"] = {"Chocangacakha"},
	["chb"] = {"Chibcha"},
	["chc"] = {"Catawba"},
	["chd"] = {"Highland Oaxaca Chontal"},
	["chf"] = {"Tabasco Chontal"},
	["chg"] = {"Chagatai"},
	["chh"] = {"Chinook"},
	["chj"] = {"Ojitlán Chinantec"},
	["chk"] = {"Chuukese"},
	["chl"] = {"Cahuilla"},
	["chm"] = {"Mari (Russia)"},
	["chn"] = {"Chinook jargon"},
	["cho"] = {"Choctaw"},
	["chp"] = {"Chipewyan", "Dene Suline"},
	["chq"] = {"Quiotepec Chinantec"},
	["chr"] = {"Cherokee"},
	["cht"] = {"Cholón"},
	["chw"] = {"Chuwabu"},
	["chx"] = {"Chantyal"},
	["chy"] = {"Cheyenne"},
	["chz"] = {"Ozumacín Chinantec"},
	["cia"] = {"Cia-Cia"},
	["cib"] = {"Ci Gbe"},
	["cic"] = {"Chickasaw"},
	["cid"] = {"Chimariko"},
	["cie"] = {"Cineni"},
	["cih"] = {"Chinali"},
	["cik"] = {"Chitkuli Kinnauri"},
	["cim"] = {"Cimbrian"},
	["cin"] = {"Cinta Larga"},
	["cip"] = {"Chiapanec"},
	["cir"] = {"Tiri", "Haméa", "Méa"},
	["ciw"] = {"Chippewa"},
	["ciy"] = {"Chaima"},
	["cja"] = {"Western Cham"},
	["cje"] = {"Chru"},
	["cjh"] = {"Upper Chehalis"},
	["cji"] = {"Chamalal"},
	["cjk"] = {"Chokwe"},
	["cjm"] = {"Eastern Cham"},
	["cjn"] = {"Chenapian"},
	["cjo"] = {"Ashéninka Pajonal"},
	["cjp"] = {"Cabécar"},
	["cjs"] = {"Shor"},
	["cjv"] = {"Chuave"},
	["cjy"] = {"Jinyu Chinese"},
	["ckb"] = {"Central Kurdish"},
	["ckh"] = {"Chak"},
	["ckl"] = {"Cibak"},
	["ckm"] = {"Chakavian"},
	["ckn"] = {"Kaang Chin"},
	["cko"] = {"Anufo"},
	["ckq"] = {"Kajakse"},
	["ckr"] = {"Kairak"},
	["cks"] = {"Tayo"},
	["ckt"] = {"Chukot"},
	["cku"] = {"Koasati"},
	["ckv"] = {"Kavalan"},
	["ckx"] = {"Caka"},
	["cky"] = {"Cakfem-Mushere"},
	["ckz"] = {"Cakchiquel-Quiché Mixed Language"},
	["cla"] = {"Ron"},
	["clc"] = {"Chilcotin"},
	["cld"] = {"Chaldean Neo-Aramaic"},
	["cle"] = {"Lealao Chinantec"},
	["clh"] = {"Chilisso"},
	["cli"] = {"Chakali"},
	["clj"] = {"Laitu Chin"},
	["clk"] = {"Idu-Mishmi"},
	["cll"] = {"Chala"},
	["clm"] = {"Clallam"},
	["clo"] = {"Lowland Oaxaca Chontal"},
	["cls"] = {"Classical Sanskrit"},
	["clt"] = {"Lautu Chin"},
	["clu"] = {"Caluyanun"},
	["clw"] = {"Chulym"},
	["cly"] = {"Eastern Highland Chatino"},
	["cma"] = {"Maa"},
	["cmc"] = {"Chamic languages"},
	["cme"] = {"Cerma"},
	["cmg"] = {"Classical Mongolian"},
	["cmi"] = {"Emberá-Chamí"},
	["cml"] = {"Campalagian"},
	["cmm"] = {"Michigamea"},
	["cmn"] = {"Mandarin Chinese"},
	["cmo"] = {"Central Mnong"},
	["cmr"] = {"Mro-Khimi Chin"},
	["cms"] = {"Messapic"},
	["cmt"] = {"Camtho"},
	["cna"] = {"Changthang"},
	["cnb"] = {"Chinbon Chin"},
	["cnc"] = {"Côông"},
	["cng"] = {"Northern Qiang"},
	["cnh"] = {"Hakha Chin", "Haka Chin"},
	["cni"] = {"Asháninka"},
	["cnk"] = {"Khumi Chin"},
	["cnl"] = {"Lalana Chinantec"},
	["cno"] = {"Con"},
	["cnp"] = {"Northern Ping Chinese", "Northern Pinghua"},
	["cnq"] = {"Chung"},
	["cnr"] = {"Montenegrin"},
	["cns"] = {"Central Asmat"},
	["cnt"] = {"Tepetotutla Chinantec"},
	["cnu"] = {"Chenoua"},
	["cnw"] = {"Ngawn Chin"},
	["cnx"] = {"Middle Cornish"},
	["coa"] = {"Cocos Islands Malay"},
	["cob"] = {"Chicomuceltec"},
	["coc"] = {"Cocopa"},
	["cod"] = {"Cocama-Cocamilla"},
	["coe"] = {"Koreguaje"},
	["cof"] = {"Colorado"},
	["cog"] = {"Chong"},
	["coh"] = {"Chonyi-Dzihana-Kauma", "Chichonyi-Chidzihana-Chikauma"},
	["coj"] = {"Cochimi"},
	["cok"] = {"Santa Teresa Cora"},
	["col"] = {"Columbia-Wenatchi"},
	["com"] = {"Comanche"},
	["con"] = {"Cofán"},
	["coo"] = {"Comox"},
	["cop"] = {"Coptic"},
	["coq"] = {"Coquille"},
	["cot"] = {"Caquinte"},
	["cou"] = {"Wamey"},
	["cov"] = {"Cao Miao"},
	["cow"] = {"Cowlitz"},
	["cox"] = {"Nanti"},
	["coz"] = {"Chochotec"},
	["cpa"] = {"Palantla Chinantec"},
	["cpb"] = {"Ucayali-Yurúa Ashéninka"},
	["cpc"] = {"Ajyíninka Apurucayali"},
	["cpe"] = {"English-based creoles and pidgins"},
	["cpf"] = {"French-based creoles and pidgins"},
	["cpg"] = {"Cappadocian Greek"},
	["cpi"] = {"Chinese Pidgin English"},
	["cpn"] = {"Cherepon"},
	["cpo"] = {"Kpeego"},
	["cpp"] = {"Portuguese-based creoles and pidgins"},
	["cps"] = {"Capiznon"},
	["cpu"] = {"Pichis Ashéninka"},
	["cpx"] = {"Pu-Xian Chinese"},
	["cpy"] = {"South Ucayali Ashéninka"},
	["cqd"] = {"Chuanqiandian Cluster Miao"},
	["cra"] = {"Chara"},
	["crb"] = {"Island Carib"},
	["crc"] = {"Lonwolwol"},
	["crd"] = {"Coeur d'Alene"},
	["crf"] = {"Caramanta"},
	["crg"] = {"Michif"},
	["crh"] = {"Crimean Tatar", "Crimean Turkish"},
	["cri"] = {"Sãotomense"},
	["crj"] = {"Southern East Cree"},
	["crk"] = {"Plains Cree"},
	["crl"] = {"Northern East Cree"},
	["crm"] = {"Moose Cree"},
	["crn"] = {"El Nayar Cora"},
	["cro"] = {"Crow"},
	["crp"] = {"Creoles and pidgins"},
	["crq"] = {"Iyo'wujwa Chorote"},
	["crr"] = {"Carolina Algonquian"},
	["crs"] = {"Seselwa Creole French"},
	["crt"] = {"Iyojwa'ja Chorote"},
	["crv"] = {"Chaura"},
	["crw"] = {"Chrau"},
	["crx"] = {"Carrier"},
	["cry"] = {"Cori"},
	["crz"] = {"Cruzeño"},
	["csa"] = {"Chiltepec Chinantec"},
	["csb"] = {"Kashubian"},
	["csc"] = {"Catalan Sign Language", "Lengua de señas catalana", "Llengua de Signes Catalana"},
	["csd"] = {"Chiangmai Sign Language"},
	["cse"] = {"Czech Sign Language"},
	["csf"] = {"Cuba Sign Language"},
	["csg"] = {"Chilean Sign Language"},
	["csh"] = {"Asho Chin"},
	["csi"] = {"Coast Miwok"},
	["csj"] = {"Songlai Chin"},
	["csk"] = {"Jola-Kasa"},
	["csl"] = {"Chinese Sign Language"},
	["csm"] = {"Central Sierra Miwok"},
	["csn"] = {"Colombian Sign Language"},
	["cso"] = {"Sochiapam Chinantec", "Sochiapan Chinantec"},
	["csp"] = {"Southern Ping Chinese", "Southern Pinghua"},
	["csq"] = {"Croatia Sign Language"},
	["csr"] = {"Costa Rican Sign Language"},
	["css"] = {"Southern Ohlone"},
	["cst"] = {"Northern Ohlone"},
	["csu"] = {"Central Sudanic languages"},
	["csv"] = {"Sumtu Chin"},
	["csw"] = {"Swampy Cree"},
	["csx"] = {"Cambodian Sign Language"},
	["csy"] = {"Siyin Chin"},
	["csz"] = {"Coos"},
	["cta"] = {"Tataltepec Chatino"},
	["ctc"] = {"Chetco"},
	["ctd"] = {"Tedim Chin"},
	["cte"] = {"Tepinapa Chinantec"},
	["ctg"] = {"Chittagonian"},
	["cth"] = {"Thaiphum Chin"},
	["ctl"] = {"Tlacoatzintepec Chinantec"},
	["ctm"] = {"Chitimacha"},
	["ctn"] = {"Chhintange"},
	["cto"] = {"Emberá-Catío"},
	["ctp"] = {"Western Highland Chatino"},
	["cts"] = {"Northern Catanduanes Bikol"},
	["ctt"] = {"Wayanad Chetti"},
	["ctu"] = {"Chol"},
	["cty"] = {"Moundadan Chetty"},
	["ctz"] = {"Zacatepec Chatino"},
	["cua"] = {"Cua"},
	["cub"] = {"Cubeo"},
	["cuc"] = {"Usila Chinantec"},
	["cuh"] = {"Chuka", "Gichuka"},
	["cui"] = {"Cuiba"},
	["cuj"] = {"Mashco Piro"},
	["cuk"] = {"San Blas Kuna"},
	["cul"] = {"Culina", "Kulina"},
	["cuo"] = {"Cumanagoto"},
	["cup"] = {"Cupeño"},
	["cuq"] = {"Cun"},
	["cur"] = {"Chhulung"},
	["cus"] = {"Cushitic languages"},
	["cut"] = {"Teutila Cuicatec"},
	["cuu"] = {"Tai Ya"},
	["cuv"] = {"Cuvok"},
	["cuw"] = {"Chukwa"},
	["cux"] = {"Tepeuxila Cuicatec"},
	["cuy"] = {"Cuitlatec"},
	["cvg"] = {"Chug"},
	["cvn"] = {"Valle Nacional Chinantec"},
	["cwa"] = {"Kabwa"},
	["cwb"] = {"Maindo"},
	["cwd"] = {"Woods Cree"},
	["cwe"] = {"Kwere"},
	["cwg"] = {"Chewong", "Cheq Wong"},
	["cwt"] = {"Kuwaataay"},
	["cxh"] = {"Cha'ari"},
	["cya"] = {"Nopala Chatino"},
	["cyb"] = {"Cayubaba"},
	["cyo"] = {"Cuyonon"},
	["czh"] = {"Huizhou Chinese"},
	["czk"] = {"Knaanic"},
	["czn"] = {"Zenzontepec Chatino"},
	["czo"] = {"Min Zhong Chinese"},
	["czt"] = {"Zotung Chin"},
	["daa"] = {"Dangaléat"},
	["dac"] = {"Dambi"},
	["dad"] = {"Marik"},
	["dae"] = {"Duupa"},
	["dag"] = {"Dagbani"},
	["dah"] = {"Gwahatike"},
	["dai"] = {"Day"},
	["daj"] = {"Dar Fur Daju"},
	["dak"] = {"Dakota"},
	["dal"] = {"Dahalo"},
	["dam"] = {"Damakawa"},
	["dao"] = {"Daai Chin"},
	["daq"] = {"Dandami Maria"},
	["dar"] = {"Dargwa"},
	["das"] = {"Daho-Doo"},
	["dau"] = {"Dar Sila Daju"},
	["dav"] = {"Taita", "Dawida"},
	["daw"] = {"Davawenyo"},
	["dax"] = {"Dayi"},
	["day"] = {"Land Dayak languages"},
	["daz"] = {"Dao"},
	["dba"] = {"Bangime"},
	["dbb"] = {"Deno"},
	["dbd"] = {"Dadiya"},
	["dbe"] = {"Dabe"},
	["dbf"] = {"Edopi"},
	["dbg"] = {"Dogul Dom Dogon"},
	["dbi"] = {"Doka"},
	["dbj"] = {"Ida'an"},
	["dbl"] = {"Dyirbal"},
	["dbm"] = {"Duguri"},
	["dbn"] = {"Duriankere"},
	["dbo"] = {"Dulbu"},
	["dbp"] = {"Duwai"},
	["dbq"] = {"Daba"},
	["dbr"] = {"Dabarre"},
	["dbt"] = {"Ben Tey Dogon"},
	["dbu"] = {"Bondum Dom Dogon"},
	["dbv"] = {"Dungu"},
	["dbw"] = {"Bankan Tey Dogon"},
	["dby"] = {"Dibiyaso"},
	["dcc"] = {"Deccan"},
	["dcr"] = {"Negerhollands"},
	["dda"] = {"Dadi Dadi"},
	["ddd"] = {"Dongotono"},
	["dde"] = {"Doondo"},
	["ddg"] = {"Fataluku"},
	["ddi"] = {"West Goodenough"},
	["ddj"] = {"Jaru"},
	["ddn"] = {"Dendi (Benin)"},
	["ddo"] = {"Dido"},
	["ddr"] = {"Dhudhuroa"},
	["dds"] = {"Donno So Dogon"},
	["ddw"] = {"Dawera-Daweloor"},
	["dec"] = {"Dagik"},
	["ded"] = {"Dedua"},
	["dee"] = {"Dewoin"},
	["def"] = {"Dezfuli"},
	["deg"] = {"Degema"},
	["deh"] = {"Dehwari"},
	["dei"] = {"Demisa"},
	["dek"] = {"Dek"},
	["del"] = {"Delaware"},
	["dem"] = {"Dem"},
	["den"] = {"Slave (Athapascan)"},
	["dep"] = {"Pidgin Delaware"},
	["deq"] = {"Dendi (Central African Republic)"},
	["der"] = {"Deori"},
	["des"] = {"Desano"},
	["dev"] = {"Domung"},
	["dez"] = {"Dengese"},
	["dga"] = {"Southern Dagaare"},
	["dgb"] = {"Bunoge Dogon"},
	["dgc"] = {"Casiguran Dumagat Agta"},
	["dgd"] = {"Dagaari Dioula"},
	["dge"] = {"Degenan"},
	["dgg"] = {"Doga"},
	["dgh"] = {"Dghwede"},
	["dgi"] = {"Northern Dagara"},
	["dgk"] = {"Dagba"},
	["dgl"] = {"Andaandi", "Dongolawi"},
	["dgn"] = {"Dagoman"},
	["dgo"] = {"Dogri (individual language)"},
	["dgr"] = {"Dogrib", "Tłı̨chǫ"},
	["dgs"] = {"Dogoso"},
	["dgt"] = {"Ndra'ngith"},
	["dgw"] = {"Daungwurrung"},
	["dgx"] = {"Doghoro"},
	["dgz"] = {"Daga"},
	["dhd"] = {"Dhundari"},
	["dhg"] = {"Dhangu-Djangu", "Dhangu", "Djangu"},
	["dhi"] = {"Dhimal"},
	["dhl"] = {"Dhalandji"},
	["dhm"] = {"Zemba"},
	["dhn"] = {"Dhanki"},
	["dho"] = {"Dhodia"},
	["dhr"] = {"Dhargari"},
	["dhs"] = {"Dhaiso"},
	["dhu"] = {"Dhurga"},
	["dhv"] = {"Dehu", "Drehu"},
	["dhw"] = {"Dhanwar (Nepal)"},
	["dhx"] = {"Dhungaloo"},
	["dia"] = {"Dia"},
	["dib"] = {"South Central Dinka"},
	["dic"] = {"Lakota Dida"},
	["did"] = {"Didinga"},
	["dif"] = {"Dieri", "Diyari"},
	["dig"] = {"Digo", "Chidigo"},
	["dih"] = {"Kumiai"},
	["dii"] = {"Dimbong"},
	["dij"] = {"Dai"},
	["dik"] = {"Southwestern Dinka"},
	["dil"] = {"Dilling"},
	["dim"] = {"Dime"},
	["din"] = {"Dinka"},
	["dio"] = {"Dibo"},
	["dip"] = {"Northeastern Dinka"},
	["diq"] = {"Dimli (individual language)"},
	["dir"] = {"Dirim"},
	["dis"] = {"Dimasa"},
	["diu"] = {"Diriku"},
	["diw"] = {"Northwestern Dinka"},
	["dix"] = {"Dixon Reef"},
	["diy"] = {"Diuwe"},
	["diz"] = {"Ding"},
	["dja"] = {"Djadjawurrung"},
	["djb"] = {"Djinba"},
	["djc"] = {"Dar Daju Daju"},
	["djd"] = {"Djamindjung", "Ngaliwurru"},
	["dje"] = {"Zarma"},
	["djf"] = {"Djangun"},
	["dji"] = {"Djinang"},
	["djj"] = {"Djeebbana"},
	["djk"] = {"Eastern Maroon Creole", "Businenge Tongo", "Nenge"},
	["djm"] = {"Jamsay Dogon"},
	["djn"] = {"Jawoyn", "Djauan"},
	["djo"] = {"Jangkang"},
	["djr"] = {"Djambarrpuyngu"},
	["dju"] = {"Kapriman"},
	["djw"] = {"Djawi"},
	["dka"] = {"Dakpakha"},
	["dkg"] = {"Kadung"},
	["dkk"] = {"Dakka"},
	["dkr"] = {"Kuijau"},
	["dks"] = {"Southeastern Dinka"},
	["dkx"] = {"Mazagway"},
	["dlg"] = {"Dolgan"},
	["dlk"] = {"Dahalik"},
	["dlm"] = {"Dalmatian"},
	["dln"] = {"Darlong"},
	["dma"] = {"Duma"},
	["dmb"] = {"Mombo Dogon"},
	["dmc"] = {"Gavak"},
	["dmd"] = {"Madhi Madhi"},
	["dme"] = {"Dugwor"},
	["dmf"] = {"Medefaidrin"},
	["dmg"] = {"Upper Kinabatangan"},
	["dmk"] = {"Domaaki"},
	["dml"] = {"Dameli"},
	["dmm"] = {"Dama"},
	["dmn"] = {"Mande languages"},
	["dmo"] = {"Kemedzung"},
	["dmr"] = {"East Damar"},
	["dms"] = {"Dampelas"},
	["dmu"] = {"Dubu", "Tebi"},
	["dmv"] = {"Dumpas"},
	["dmw"] = {"Mudburra"},
	["dmx"] = {"Dema"},
	["dmy"] = {"Demta", "Sowari"},
	["dna"] = {"Upper Grand Valley Dani"},
	["dnd"] = {"Daonda"},
	["dne"] = {"Ndendeule"},
	["dng"] = {"Dungan"},
	["dni"] = {"Lower Grand Valley Dani"},
	["dnj"] = {"Dan"},
	["dnk"] = {"Dengka"},
	["dnn"] = {"Dzùùngoo"},
	["dno"] = {"Ndrulo", "Northern Lendu"},
	["dnr"] = {"Danaru"},
	["dnt"] = {"Mid Grand Valley Dani"},
	["dnu"] = {"Danau"},
	["dnv"] = {"Danu"},
	["dnw"] = {"Western Dani"},
	["dny"] = {"Dení"},
	["doa"] = {"Dom"},
	["dob"] = {"Dobu"},
	["doc"] = {"Northern Dong"},
	["doe"] = {"Doe"},
	["dof"] = {"Domu"},
	["doh"] = {"Dong"},
	["doi"] = {"Dogri (macrolanguage)"},
	["dok"] = {"Dondo"},
	["dol"] = {"Doso"},
	["don"] = {"Toura (Papua New Guinea)"},
	["doo"] = {"Dongo"},
	["dop"] = {"Lukpa"},
	["doq"] = {"Dominican Sign Language"},
	["dor"] = {"Dori'o"},
	["dos"] = {"Dogosé"},
	["dot"] = {"Dass"},
	["dov"] = {"Dombe"},
	["dow"] = {"Doyayo"},
	["dox"] = {"Bussa"},
	["doy"] = {"Dompo"},
	["doz"] = {"Dorze"},
	["dpp"] = {"Papar"},
	["dra"] = {"Dravidian languages"},
	["drb"] = {"Dair"},
	["drc"] = {"Minderico"},
	["drd"] = {"Darmiya"},
	["dre"] = {"Dolpo"},
	["drg"] = {"Rungus"},
	["dri"] = {"C'Lela"},
	["drl"] = {"Paakantyi"},
	["drn"] = {"West Damar"},
	["dro"] = {"Daro-Matu Melanau"},
	["drq"] = {"Dura"},
	["drs"] = {"Gedeo"},
	["drt"] = {"Drents"},
	["dru"] = {"Rukai"},
	["dry"] = {"Darai"},
	["dsb"] = {"Lower Sorbian"},
	["dse"] = {"Dutch Sign Language"},
	["dsh"] = {"Daasanach"},
	["dsi"] = {"Disa"},
	["dsk"] = {"Dokshi"},
	["dsl"] = {"Danish Sign Language"},
	["dsn"] = {"Dusner"},
	["dso"] = {"Desiya"},
	["dsq"] = {"Tadaksahak"},
	["dsz"] = {"Mardin Sign Language"},
	["dta"] = {"Daur"},
	["dtb"] = {"Labuk-Kinabatangan Kadazan"},
	["dtd"] = {"Ditidaht"},
	["dth"] = {"Adithinngithigh"},
	["dti"] = {"Ana Tinga Dogon"},
	["dtk"] = {"Tene Kan Dogon"},
	["dtm"] = {"Tomo Kan Dogon"},
	["dtn"] = {"Daatsʼíin"},
	["dto"] = {"Tommo So Dogon"},
	["dtp"] = {"Kadazan Dusun", "Central Dusun"},
	["dtr"] = {"Lotud"},
	["dts"] = {"Toro So Dogon"},
	["dtt"] = {"Toro Tegu Dogon"},
	["dtu"] = {"Tebul Ure Dogon"},
	["dty"] = {"Dotyali"},
	["dua"] = {"Duala"},
	["dub"] = {"Dubli"},
	["duc"] = {"Duna"},
	["due"] = {"Umiray Dumaget Agta"},
	["duf"] = {"Dumbea", "Drubea"},
	["dug"] = {"Duruma", "Chiduruma"},
	["duh"] = {"Dungra Bhil"},
	["dui"] = {"Dumun"},
	["duk"] = {"Uyajitaya"},
	["dul"] = {"Alabat Island Agta"},
	["dum"] = {"Middle Dutch (ca. 1050-1350)"},
	["dun"] = {"Dusun Deyah"},
	["duo"] = {"Dupaninan Agta"},
	["dup"] = {"Duano"},
	["duq"] = {"Dusun Malang"},
	["dur"] = {"Dii"},
	["dus"] = {"Dumi"},
	["duu"] = {"Drung"},
	["duv"] = {"Duvle"},
	["duw"] = {"Dusun Witu"},
	["dux"] = {"Duungooma"},
	["duy"] = {"Dicamay Agta"},
	["duz"] = {"Duli-Gey"},
	["dva"] = {"Duau"},
	["dwa"] = {"Diri"},
	["dwk"] = {"Dawik Kui"},
	["dwr"] = {"Dawro"},
	["dws"] = {"Dutton World Speedwords"},
	["dwu"] = {"Dhuwal"},
	["dww"] = {"Dawawa"},
	["dwy"] = {"Dhuwaya"},
	["dwz"] = {"Dewas Rai"},
	["dya"] = {"Dyan"},
	["dyb"] = {"Dyaberdyaber"},
	["dyd"] = {"Dyugun"},
	["dyg"] = {"Villa Viciosa Agta"},
	["dyi"] = {"Djimini Senoufo"},
	["dym"] = {"Yanda Dom Dogon"},
	["dyn"] = {"Dyangadi", "Dhanggatti"},
	["dyo"] = {"Jola-Fonyi"},
	["dyr"] = {"Dyarim"},
	["dyu"] = {"Dyula"},
	["dyy"] = {"Djabugay", "Dyaabugay"},
	["dza"] = {"Tunzu"},
	["dzd"] = {"Daza"},
	["dze"] = {"Djiwarli"},
	["dzg"] = {"Dazaga"},
	["dzl"] = {"Dzalakha"},
	["dzn"] = {"Dzando"},
	["eaa"] = {"Karenggapa"},
	["ebc"] = {"Beginci"},
	["ebg"] = {"Ebughu"},
	["ebk"] = {"Eastern Bontok"},
	["ebo"] = {"Teke-Ebo"},
	["ebr"] = {"Ebrié"},
	["ebu"] = {"Embu", "Kiembu"},
	["ecr"] = {"Eteocretan"},
	["ecs"] = {"Ecuadorian Sign Language"},
	["ecy"] = {"Eteocypriot"},
	["eee"] = {"E"},
	["efa"] = {"Efai"},
	["efe"] = {"Efe"},
	["efi"] = {"Efik"},
	["ega"] = {"Ega"},
	["egl"] = {"Emilian"},
	["egm"] = {"Benamanga"},
	["ego"] = {"Eggon"},
	["egx"] = {"Egyptian languages"},
	["egy"] = {"Egyptian (Ancient)"},
	["ehs"] = {"Miyakubo Sign Language"},
	["ehu"] = {"Ehueun"},
	["eip"] = {"Eipomek"},
	["eit"] = {"Eitiep"},
	["eiv"] = {"Askopan"},
	["eja"] = {"Ejamat"},
	["eka"] = {"Ekajuk"},
	["eke"] = {"Ekit"},
	["ekg"] = {"Ekari"},
	["eki"] = {"Eki"},
	["ekk"] = {"Standard Estonian"},
	["ekl"] = {"Kol (Bangladesh)", "Kol"},
	["ekm"] = {"Elip"},
	["eko"] = {"Koti"},
	["ekp"] = {"Ekpeye"},
	["ekr"] = {"Yace"},
	["eky"] = {"Eastern Kayah"},
	["ele"] = {"Elepi"},
	["elh"] = {"El Hugeirat"},
	["eli"] = {"Nding"},
	["elk"] = {"Elkei"},
	["elm"] = {"Eleme"},
	["elo"] = {"El Molo"},
	["elu"] = {"Elu"},
	["elx"] = {"Elamite"},
	["ema"] = {"Emai-Iuleha-Ora"},
	["emb"] = {"Embaloh"},
	["eme"] = {"Emerillon"},
	["emg"] = {"Eastern Meohang"},
	["emi"] = {"Mussau-Emira"},
	["emk"] = {"Eastern Maninkakan"},
	["emm"] = {"Mamulique"},
	["emn"] = {"Eman"},
	["emp"] = {"Northern Emberá"},
	["emq"] = {"Eastern Minyag"},
	["ems"] = {"Pacific Gulf Yupik"},
	["emu"] = {"Eastern Muria"},
	["emw"] = {"Emplawas"},
	["emx"] = {"Erromintxela"},
	["emy"] = {"Epigraphic Mayan"},
	["emz"] = {"Mbessa"},
	["ena"] = {"Apali"},
	["enb"] = {"Markweeta"},
	["enc"] = {"En"},
	["end"] = {"Ende"},
	["enf"] = {"Forest Enets"},
	["enh"] = {"Tundra Enets"},
	["enl"] = {"Enlhet"},
	["enm"] = {"Middle English (1100-1500)"},
	["enn"] = {"Engenni"},
	["eno"] = {"Enggano"},
	["enq"] = {"Enga"},
	["enr"] = {"Emumu", "Emem"},
	["enu"] = {"Enu"},
	["env"] = {"Enwan (Edo State)"},
	["enw"] = {"Enwan (Akwa Ibom State)"},
	["enx"] = {"Enxet"},
	["eot"] = {"Beti (Côte d'Ivoire)"},
	["epi"] = {"Epie"},
	["era"] = {"Eravallan"},
	["erg"] = {"Sie"},
	["erh"] = {"Eruwa"},
	["eri"] = {"Ogea"},
	["erk"] = {"South Efate"},
	["ero"] = {"Horpa"},
	["err"] = {"Erre"},
	["ers"] = {"Ersu"},
	["ert"] = {"Eritai"},
	["erw"] = {"Erokwanas"},
	["ese"] = {"Ese Ejja"},
	["esg"] = {"Aheri Gondi"},
	["esh"] = {"Eshtehardi"},
	["esi"] = {"North Alaskan Inupiatun"},
	["esk"] = {"Northwest Alaska Inupiatun"},
	["esl"] = {"Egypt Sign Language"},
	["esm"] = {"Esuma"},
	["esn"] = {"Salvadoran Sign Language"},
	["eso"] = {"Estonian Sign Language"},
	["esq"] = {"Esselen"},
	["ess"] = {"Central Siberian Yupik"},
	["esu"] = {"Central Yupik"},
	["esx"] = {"Eskimo-Aleut languages"},
	["esy"] = {"Eskayan"},
	["etb"] = {"Etebi"},
	["etc"] = {"Etchemin"},
	["eth"] = {"Ethiopian Sign Language"},
	["etn"] = {"Eton (Vanuatu)"},
	["eto"] = {"Eton (Cameroon)"},
	["etr"] = {"Edolo"},
	["ets"] = {"Yekhee"},
	["ett"] = {"Etruscan"},
	["etu"] = {"Ejagham"},
	["etx"] = {"Eten"},
	["etz"] = {"Semimi"},
	["eud"] = {"Eudeve"},
	["euq"] = {"Basque (family)"},
	["eve"] = {"Even"},
	["evh"] = {"Uvbie"},
	["evn"] = {"Evenki"},
	["ewo"] = {"Ewondo"},
	["ext"] = {"Extremaduran"},
	["eya"] = {"Eyak"},
	["eyo"] = {"Keiyo"},
	["eza"] = {"Ezaa"},
	["eze"] = {"Uzekwe"},
	["faa"] = {"Fasu"},
	["fab"] = {"Fa d'Ambu"},
	["fad"] = {"Wagi"},
	["faf"] = {"Fagani"},
	["fag"] = {"Finongan"},
	["fah"] = {"Baissa Fali"},
	["fai"] = {"Faiwol"},
	["faj"] = {"Faita"},
	["fak"] = {"Fang (Cameroon)"},
	["fal"] = {"South Fali"},
	["fam"] = {"Fam"},
	["fan"] = {"Fang (Equatorial Guinea)"},
	["fap"] = {"Paloor"},
	["far"] = {"Fataleka"},
	["fat"] = {"Fanti"},
	["fau"] = {"Fayu"},
	["fax"] = {"Fala"},
	["fay"] = {"Southwestern Fars"},
	["faz"] = {"Northwestern Fars"},
	["fbl"] = {"West Albay Bikol"},
	["fcs"] = {"Quebec Sign Language"},
	["fer"] = {"Feroge"},
	["ffi"] = {"Foia Foia"},
	["ffm"] = {"Maasina Fulfulde"},
	["fgr"] = {"Fongoro"},
	["fia"] = {"Nobiin"},
	["fie"] = {"Fyer"},
	["fif"] = {"Faifi"},
	["fil"] = {"Filipino", "Pilipino"},
	["fip"] = {"Fipa"},
	["fir"] = {"Firan"},
	["fit"] = {"Tornedalen Finnish", "Meänkieli"},
	["fiu"] = {"Finno-Ugrian languages"},
	["fiw"] = {"Fiwaga"},
	["fkk"] = {"Kirya-Konzəl"},
	["fkv"] = {"Kven Finnish"},
	["fla"] = {"Kalispel-Pend d'Oreille"},
	["flh"] = {"Foau"},
	["fli"] = {"Fali"},
	["fll"] = {"North Fali"},
	["fln"] = {"Flinders Island"},
	["flr"] = {"Fuliiru"},
	["fly"] = {"Flaaitaal", "Tsotsitaal"},
	["fmp"] = {"Fe'fe'"},
	["fmu"] = {"Far Western Muria"},
	["fnb"] = {"Fanbak"},
	["fng"] = {"Fanagalo"},
	["fni"] = {"Fania"},
	["fod"] = {"Foodo"},
	["foi"] = {"Foi"},
	["fom"] = {"Foma"},
	["fon"] = {"Fon"},
	["for"] = {"Fore"},
	["fos"] = {"Siraya"},
	["fox"] = {"Formosan languages"},
	["fpe"] = {"Fernando Po Creole English"},
	["fqs"] = {"Fas"},
	["frc"] = {"Cajun French"},
	["frd"] = {"Fordata"},
	["frk"] = {"Frankish"},
	["frm"] = {"Middle French (ca. 1400-1600)"},
	["fro"] = {"Old French (842-ca. 1400)"},
	["frp"] = {"Arpitan", "Francoprovençal"},
	["frq"] = {"Forak"},
	["frr"] = {"Northern Frisian"},
	["frs"] = {"Eastern Frisian"},
	["frt"] = {"Fortsenal"},
	["fse"] = {"Finnish Sign Language"},
	["fsl"] = {"French Sign Language"},
	["fss"] = {"Finland-Swedish Sign Language", "finlandssvenskt teckenspråk", "suomenruotsalainen viittomakieli"},
	["fub"] = {"Adamawa Fulfulde"},
	["fuc"] = {"Pulaar"},
	["fud"] = {"East Futuna"},
	["fue"] = {"Borgu Fulfulde"},
	["fuf"] = {"Pular"},
	["fuh"] = {"Western Niger Fulfulde"},
	["fui"] = {"Bagirmi Fulfulde"},
	["fuj"] = {"Ko"},
	["fum"] = {"Fum"},
	["fun"] = {"Fulniô"},
	["fuq"] = {"Central-Eastern Niger Fulfulde"},
	["fur"] = {"Friulian"},
	["fut"] = {"Futuna-Aniwa"},
	["fuu"] = {"Furu"},
	["fuv"] = {"Nigerian Fulfulde"},
	["fuy"] = {"Fuyug"},
	["fvr"] = {"Fur"},
	["fwa"] = {"Fwâi"},
	["fwe"] = {"Fwe"},
	["gaa"] = {"Ga"},
	["gab"] = {"Gabri"},
	["gac"] = {"Mixed Great Andamanese"},
	["gad"] = {"Gaddang"},
	["gae"] = {"Guarequena"},
	["gaf"] = {"Gende"},
	["gag"] = {"Gagauz"},
	["gah"] = {"Alekano"},
	["gai"] = {"Borei"},
	["gaj"] = {"Gadsup"},
	["gak"] = {"Gamkonora"},
	["gal"] = {"Galolen"},
	["gam"] = {"Kandawo"},
	["gan"] = {"Gan Chinese"},
	["gao"] = {"Gants"},
	["gap"] = {"Gal"},
	["gaq"] = {"Gata'"},
	["gar"] = {"Galeya"},
	["gas"] = {"Adiwasi Garasia"},
	["gat"] = {"Kenati"},
	["gau"] = {"Mudhili Gadaba"},
	["gaw"] = {"Nobonob"},
	["gax"] = {"Borana-Arsi-Guji Oromo"},
	["gay"] = {"Gayo"},
	["gaz"] = {"West Central Oromo"},
	["gba"] = {"Gbaya (Central African Republic)"},
	["gbb"] = {"Kaytetye"},
	["gbd"] = {"Karajarri"},
	["gbe"] = {"Niksek"},
	["gbf"] = {"Gaikundi"},
	["gbg"] = {"Gbanziri"},
	["gbh"] = {"Defi Gbe"},
	["gbi"] = {"Galela"},
	["gbj"] = {"Bodo Gadaba"},
	["gbk"] = {"Gaddi"},
	["gbl"] = {"Gamit"},
	["gbm"] = {"Garhwali"},
	["gbn"] = {"Mo'da"},
	["gbo"] = {"Northern Grebo"},
	["gbp"] = {"Gbaya-Bossangoa"},
	["gbq"] = {"Gbaya-Bozoum"},
	["gbr"] = {"Gbagyi"},
	["gbs"] = {"Gbesi Gbe"},
	["gbu"] = {"Gagadu"},
	["gbv"] = {"Gbanu"},
	["gbw"] = {"Gabi-Gabi"},
	["gbx"] = {"Eastern Xwla Gbe"},
	["gby"] = {"Gbari"},
	["gbz"] = {"Zoroastrian Dari"},
	["gcc"] = {"Mali"},
	["gcd"] = {"Ganggalida"},
	["gce"] = {"Galice"},
	["gcf"] = {"Guadeloupean Creole French"},
	["gcl"] = {"Grenadian Creole English"},
	["gcn"] = {"Gaina"},
	["gcr"] = {"Guianese Creole French"},
	["gct"] = {"Colonia Tovar German"},
	["gda"] = {"Gade Lohar"},
	["gdb"] = {"Pottangi Ollar Gadaba"},
	["gdc"] = {"Gugu Badhun"},
	["gdd"] = {"Gedaged"},
	["gde"] = {"Gude"},
	["gdf"] = {"Guduf-Gava"},
	["gdg"] = {"Ga'dang"},
	["gdh"] = {"Gadjerawang", "Gajirrabeng"},
	["gdi"] = {"Gundi"},
	["gdj"] = {"Gurdjar"},
	["gdk"] = {"Gadang"},
	["gdl"] = {"Dirasha"},
	["gdm"] = {"Laal"},
	["gdn"] = {"Umanakaina"},
	["gdo"] = {"Ghodoberi"},
	["gdq"] = {"Mehri"},
	["gdr"] = {"Wipi"},
	["gds"] = {"Ghandruk Sign Language"},
	["gdt"] = {"Kungardutyi"},
	["gdu"] = {"Gudu"},
	["gdx"] = {"Godwari"},
	["gea"] = {"Geruma"},
	["geb"] = {"Kire"},
	["gec"] = {"Gboloo Grebo"},
	["ged"] = {"Gade"},
	["gef"] = {"Gerai"},
	["geg"] = {"Gengle"},
	["geh"] = {"Hutterite German", "Hutterisch"},
	["gei"] = {"Gebe"},
	["gej"] = {"Gen"},
	["gek"] = {"Ywom"},
	["gel"] = {"ut-Ma'in"},
	["gem"] = {"Germanic languages"},
	["geq"] = {"Geme"},
	["ges"] = {"Geser-Gorom"},
	["gev"] = {"Eviya"},
	["gew"] = {"Gera"},
	["gex"] = {"Garre"},
	["gey"] = {"Enya"},
	["gez"] = {"Geez"},
	["gfk"] = {"Patpatar"},
	["gft"] = {"Gafat"},
	["gga"] = {"Gao"},
	["ggb"] = {"Gbii"},
	["ggd"] = {"Gugadj"},
	["gge"] = {"Gurr-goni"},
	["ggg"] = {"Gurgula"},
	["ggk"] = {"Kungarakany"},
	["ggl"] = {"Ganglau"},
	["ggt"] = {"Gitua"},
	["ggu"] = {"Gagu", "Gban"},
	["ggw"] = {"Gogodala"},
	["gha"] = {"Ghadamès"},
	["ghc"] = {"Hiberno-Scottish Gaelic"},
	["ghe"] = {"Southern Ghale"},
	["ghh"] = {"Northern Ghale"},
	["ghk"] = {"Geko Karen"},
	["ghl"] = {"Ghulfan"},
	["ghn"] = {"Ghanongga"},
	["gho"] = {"Ghomara"},
	["ghr"] = {"Ghera"},
	["ghs"] = {"Guhu-Samane"},
	["ght"] = {"Kuke", "Kutang Ghale"},
	["gia"] = {"Kija"},
	["gib"] = {"Gibanawa"},
	["gic"] = {"Gail"},
	["gid"] = {"Gidar"},
	["gie"] = {"Gaɓogbo", "Guébie"},
	["gig"] = {"Goaria"},
	["gih"] = {"Githabul"},
	["gii"] = {"Girirra"},
	["gil"] = {"Gilbertese"},
	["gim"] = {"Gimi (Eastern Highlands)"},
	["gin"] = {"Hinukh"},
	["gip"] = {"Gimi (West New Britain)"},
	["giq"] = {"Green Gelao"},
	["gir"] = {"Red Gelao"},
	["gis"] = {"North Giziga"},
	["git"] = {"Gitxsan"},
	["giu"] = {"Mulao"},
	["giw"] = {"White Gelao"},
	["gix"] = {"Gilima"},
	["giy"] = {"Giyug"},
	["giz"] = {"South Giziga"},
	["gjk"] = {"Kachi Koli"},
	["gjm"] = {"Gunditjmara"},
	["gjn"] = {"Gonja"},
	["gjr"] = {"Gurindji Kriol"},
	["gju"] = {"Gujari"},
	["gka"] = {"Guya"},
	["gkd"] = {"Magɨ (Madang Province)"},
	["gke"] = {"Ndai"},
	["gkn"] = {"Gokana"},
	["gko"] = {"Kok-Nar"},
	["gkp"] = {"Guinea Kpelle"},
	["gku"] = {"ǂUngkue"},
	["glb"] = {"Belning"},
	["glc"] = {"Bon Gula"},
	["gld"] = {"Nanai"},
	["glh"] = {"Northwest Pashai", "Northwest Pashayi"},
	["glj"] = {"Gula Iro"},
	["glk"] = {"Gilaki"},
	["gll"] = {"Garlali"},
	["glo"] = {"Galambu"},
	["glr"] = {"Glaro-Twabo"},
	["glu"] = {"Gula (Chad)"},
	["glw"] = {"Glavda"},
	["gly"] = {"Gule"},
	["gma"] = {"Gambera"},
	["gmb"] = {"Gula'alaa"},
	["gmd"] = {"Mághdì"},
	["gme"] = {"East Germanic languages"},
	["gmg"] = {"Magɨyi"},
	["gmh"] = {"Middle High German (ca. 1050-1500)"},
	["gml"] = {"Middle Low German"},
	["gmm"] = {"Gbaya-Mbodomo"},
	["gmn"] = {"Gimnime"},
	["gmq"] = {"North Germanic languages"},
	["gmr"] = {"Mirning", "Mirniny"},
	["gmu"] = {"Gumalu"},
	["gmv"] = {"Gamo"},
	["gmw"] = {"West Germanic languages"},
	["gmx"] = {"Magoma"},
	["gmy"] = {"Mycenaean Greek"},
	["gmz"] = {"Mgbolizhia"},
	["gna"] = {"Kaansa"},
	["gnb"] = {"Gangte"},
	["gnc"] = {"Guanche"},
	["gnd"] = {"Zulgo-Gemzek"},
	["gne"] = {"Ganang"},
	["gng"] = {"Ngangam"},
	["gnh"] = {"Lere"},
	["gni"] = {"Gooniyandi"},
	["gnj"] = {"Ngen"},
	["gnk"] = {"ǁGana"},
	["gnl"] = {"Gangulu"},
	["gnm"] = {"Ginuman"},
	["gnn"] = {"Gumatj"},
	["gno"] = {"Northern Gondi"},
	["gnq"] = {"Gana"},
	["gnr"] = {"Gureng Gureng"},
	["gnt"] = {"Guntai"},
	["gnu"] = {"Gnau"},
	["gnw"] = {"Western Bolivian Guaraní"},
	["gnz"] = {"Ganzi"},
	["goa"] = {"Guro"},
	["gob"] = {"Playero"},
	["goc"] = {"Gorakor"},
	["god"] = {"Godié"},
	["goe"] = {"Gongduk"},
	["gof"] = {"Gofa"},
	["gog"] = {"Gogo"},
	["goh"] = {"Old High German (ca. 750-1050)"},
	["goi"] = {"Gobasi"},
	["goj"] = {"Gowlan"},
	["gok"] = {"Gowli"},
	["gol"] = {"Gola"},
	["gom"] = {"Goan Konkani"},
	["gon"] = {"Gondi"},
	["goo"] = {"Gone Dau"},
	["gop"] = {"Yeretuar"},
	["goq"] = {"Gorap"},
	["gor"] = {"Gorontalo"},
	["gos"] = {"Gronings"},
	["got"] = {"Gothic"},
	["gou"] = {"Gavar"},
	["gov"] = {"Goo"},
	["gow"] = {"Gorowa"},
	["gox"] = {"Gobu"},
	["goy"] = {"Goundo"},
	["goz"] = {"Gozarkhani"},
	["gpa"] = {"Gupa-Abawa"},
	["gpe"] = {"Ghanaian Pidgin English"},
	["gpn"] = {"Taiap"},
	["gqa"] = {"Ga'anda"},
	["gqi"] = {"Guiqiong"},
	["gqn"] = {"Guana (Brazil)"},
	["gqr"] = {"Gor"},
	["gqu"] = {"Qau"},
	["gra"] = {"Rajput Garasia"},
	["grb"] = {"Grebo"},
	["grc"] = {"Ancient Greek (to 1453)"},
	["grd"] = {"Guruntum-Mbaaru"},
	["grg"] = {"Madi"},
	["grh"] = {"Gbiri-Niragu"},
	["gri"] = {"Ghari"},
	["grj"] = {"Southern Grebo"},
	["grk"] = {"Greek languages"},
	["grm"] = {"Kota Marudu Talantang"},
	["gro"] = {"Groma"},
	["grq"] = {"Gorovu"},
	["grr"] = {"Taznatit"},
	["grs"] = {"Gresi"},
	["grt"] = {"Garo"},
	["gru"] = {"Kistane"},
	["grv"] = {"Central Grebo"},
	["grw"] = {"Gweda"},
	["grx"] = {"Guriaso"},
	["gry"] = {"Barclayville Grebo"},
	["grz"] = {"Guramalum"},
	["gse"] = {"Ghanaian Sign Language"},
	["gsg"] = {"German Sign Language"},
	["gsl"] = {"Gusilay"},
	["gsm"] = {"Guatemalan Sign Language"},
	["gsn"] = {"Nema", "Gusan"},
	["gso"] = {"Southwest Gbaya"},
	["gsp"] = {"Wasembo"},
	["gss"] = {"Greek Sign Language"},
	["gsw"] = {"Swiss German", "Alemannic", "Alsatian"},
	["gta"] = {"Guató"},
	["gtu"] = {"Aghu-Tharnggala"},
	["gua"] = {"Shiki"},
	["gub"] = {"Guajajára"},
	["guc"] = {"Wayuu"},
	["gud"] = {"Yocoboué Dida"},
	["gue"] = {"Gurindji"},
	["guf"] = {"Gupapuyngu"},
	["gug"] = {"Paraguayan Guaraní"},
	["guh"] = {"Guahibo"},
	["gui"] = {"Eastern Bolivian Guaraní"},
	["guk"] = {"Gumuz"},
	["gul"] = {"Sea Island Creole English"},
	["gum"] = {"Guambiano"},
	["gun"] = {"Mbyá Guaraní"},
	["guo"] = {"Guayabero"},
	["gup"] = {"Gunwinggu"},
	["guq"] = {"Aché"},
	["gur"] = {"Farefare"},
	["gus"] = {"Guinean Sign Language"},
	["gut"] = {"Maléku Jaíka"},
	["guu"] = {"Yanomamö"},
	["guw"] = {"Gun"},
	["gux"] = {"Gourmanchéma"},
	["guz"] = {"Gusii", "Ekegusii"},
	["gva"] = {"Guana (Paraguay)"},
	["gvc"] = {"Guanano"},
	["gve"] = {"Duwet"},
	["gvf"] = {"Golin"},
	["gvj"] = {"Guajá"},
	["gvl"] = {"Gulay"},
	["gvm"] = {"Gurmana"},
	["gvn"] = {"Kuku-Yalanji"},
	["gvo"] = {"Gavião Do Jiparaná"},
	["gvp"] = {"Pará Gavião"},
	["gvr"] = {"Gurung"},
	["gvs"] = {"Gumawana"},
	["gvy"] = {"Guyani"},
	["gwa"] = {"Mbato"},
	["gwb"] = {"Gwa"},
	["gwc"] = {"Gawri", "Kalami"},
	["gwd"] = {"Gawwada"},
	["gwe"] = {"Gweno"},
	["gwf"] = {"Gowro"},
	["gwg"] = {"Moo"},
	["gwi"] = {"Gwichʼin"},
	["gwj"] = {"ǀGwi"},
	["gwm"] = {"Awngthim"},
	["gwn"] = {"Gwandara"},
	["gwr"] = {"Gwere"},
	["gwt"] = {"Gawar-Bati"},
	["gwu"] = {"Guwamu"},
	["gww"] = {"Kwini"},
	["gwx"] = {"Gua"},
	["gxx"] = {"Wè Southern"},
	["gya"] = {"Northwest Gbaya"},
	["gyb"] = {"Garus"},
	["gyd"] = {"Kayardild"},
	["gye"] = {"Gyem"},
	["gyf"] = {"Gungabula"},
	["gyg"] = {"Gbayi"},
	["gyi"] = {"Gyele"},
	["gyl"] = {"Gayil"},
	["gym"] = {"Ngäbere"},
	["gyn"] = {"Guyanese Creole English"},
	["gyo"] = {"Gyalsumdo"},
	["gyr"] = {"Guarayu"},
	["gyy"] = {"Gunya"},
	["gyz"] = {"Geji", "Gyaazi"},
	["gza"] = {"Ganza"},
	["gzi"] = {"Gazi"},
	["gzn"] = {"Gane"},
	["haa"] = {"Han"},
	["hab"] = {"Hanoi Sign Language"},
	["hac"] = {"Gurani"},
	["had"] = {"Hatam"},
	["hae"] = {"Eastern Oromo"},
	["haf"] = {"Haiphong Sign Language"},
	["hag"] = {"Hanga"},
	["hah"] = {"Hahon"},
	["hai"] = {"Haida"},
	["haj"] = {"Hajong"},
	["hak"] = {"Hakka Chinese"},
	["hal"] = {"Halang"},
	["ham"] = {"Hewa"},
	["han"] = {"Hangaza"},
	["hao"] = {"Hakö"},
	["hap"] = {"Hupla"},
	["haq"] = {"Ha"},
	["har"] = {"Harari"},
	["has"] = {"Haisla"},
	["hav"] = {"Havu"},
	["haw"] = {"Hawaiian"},
	["hax"] = {"Southern Haida"},
	["hay"] = {"Haya"},
	["haz"] = {"Hazaragi"},
	["hba"] = {"Hamba"},
	["hbb"] = {"Huba"},
	["hbn"] = {"Heiban"},
	["hbo"] = {"Ancient Hebrew"},
	["hbu"] = {"Habu"},
	["hca"] = {"Andaman Creole Hindi"},
	["hch"] = {"Huichol"},
	["hdn"] = {"Northern Haida"},
	["hds"] = {"Honduras Sign Language"},
	["hdy"] = {"Hadiyya"},
	["hea"] = {"Northern Qiandong Miao"},
	["hed"] = {"Herdé"},
	["heg"] = {"Helong"},
	["heh"] = {"Hehe"},
	["hei"] = {"Heiltsuk"},
	["hem"] = {"Hemba"},
	["hgm"] = {"Haiǁom"},
	["hgw"] = {"Haigwai"},
	["hhi"] = {"Hoia Hoia"},
	["hhr"] = {"Kerak"},
	["hhy"] = {"Hoyahoya"},
	["hia"] = {"Lamang"},
	["hib"] = {"Hibito"},
	["hid"] = {"Hidatsa"},
	["hif"] = {"Fiji Hindi"},
	["hig"] = {"Kamwe"},
	["hih"] = {"Pamosu"},
	["hii"] = {"Hinduri"},
	["hij"] = {"Hijuk"},
	["hik"] = {"Seit-Kaitetu"},
	["hil"] = {"Hiligaynon"},
	["him"] = {"Himachali languages", "Western Pahari languages"},
	["hio"] = {"Tsoa"},
	["hir"] = {"Himarimã"},
	["hit"] = {"Hittite"},
	["hiw"] = {"Hiw"},
	["hix"] = {"Hixkaryána"},
	["hji"] = {"Haji"},
	["hka"] = {"Kahe"},
	["hke"] = {"Hunde"},
	["hkh"] = {"Khah", "Poguli"},
	["hkk"] = {"Hunjara-Kaina Ke"},
	["hkn"] = {"Mel-Khaonh"},
	["hks"] = {"Hong Kong Sign Language", "Heung Kong Sau Yue"},
	["hla"] = {"Halia"},
	["hlb"] = {"Halbi"},
	["hld"] = {"Halang Doan"},
	["hle"] = {"Hlersu"},
	["hlt"] = {"Matu Chin"},
	["hlu"] = {"Hieroglyphic Luwian"},
	["hma"] = {"Southern Mashan Hmong", "Southern Mashan Miao"},
	["hmb"] = {"Humburi Senni Songhay"},
	["hmc"] = {"Central Huishui Hmong", "Central Huishui Miao"},
	["hmd"] = {"Large Flowery Miao", "A-hmaos", "Da-Hua Miao"},
	["hme"] = {"Eastern Huishui Hmong", "Eastern Huishui Miao"},
	["hmf"] = {"Hmong Don"},
	["hmg"] = {"Southwestern Guiyang Hmong"},
	["hmh"] = {"Southwestern Huishui Hmong", "Southwestern Huishui Miao"},
	["hmi"] = {"Northern Huishui Hmong", "Northern Huishui Miao"},
	["hmj"] = {"Ge", "Gejia"},
	["hmk"] = {"Maek"},
	["hml"] = {"Luopohe Hmong", "Luopohe Miao"},
	["hmm"] = {"Central Mashan Hmong", "Central Mashan Miao"},
	["hmn"] = {"Hmong", "Mong"},
	["hmp"] = {"Northern Mashan Hmong", "Northern Mashan Miao"},
	["hmq"] = {"Eastern Qiandong Miao"},
	["hmr"] = {"Hmar"},
	["hms"] = {"Southern Qiandong Miao"},
	["hmt"] = {"Hamtai"},
	["hmu"] = {"Hamap"},
	["hmv"] = {"Hmong Dô"},
	["hmw"] = {"Western Mashan Hmong", "Western Mashan Miao"},
	["hmx"] = {"Hmong-Mien languages"},
	["hmy"] = {"Southern Guiyang Hmong", "Southern Guiyang Miao"},
	["hmz"] = {"Hmong Shua", "Sinicized Miao"},
	["hna"] = {"Mina (Cameroon)"},
	["hnd"] = {"Southern Hindko"},
	["hne"] = {"Chhattisgarhi"},
	["hng"] = {"Hungu"},
	["hnh"] = {"ǁAni"},
	["hni"] = {"Hani"},
	["hnj"] = {"Hmong Njua", "Mong Leng", "Mong Njua"},
	["hnn"] = {"Hanunoo"},
	["hno"] = {"Northern Hindko"},
	["hns"] = {"Caribbean Hindustani"},
	["hnu"] = {"Hung"},
	["hoa"] = {"Hoava"},
	["hob"] = {"Mari (Madang Province)"},
	["hoc"] = {"Ho"},
	["hod"] = {"Holma"},
	["hoe"] = {"Horom"},
	["hoh"] = {"Hobyót"},
	["hoi"] = {"Holikachuk"},
	["hoj"] = {"Hadothi", "Haroti"},
	["hok"] = {"Hokan languages"},
	["hol"] = {"Holu"},
	["hom"] = {"Homa"},
	["hoo"] = {"Holoholo"},
	["hop"] = {"Hopi"},
	["hor"] = {"Horo"},
	["hos"] = {"Ho Chi Minh City Sign Language"},
	["hot"] = {"Hote", "Malê"},
	["hov"] = {"Hovongan"},
	["how"] = {"Honi"},
	["hoy"] = {"Holiya"},
	["hoz"] = {"Hozo"},
	["hpo"] = {"Hpon"},
	["hps"] = {"Hawai'i Sign Language (HSL)", "Hawai'i Pidgin Sign Language"},
	["hra"] = {"Hrangkhol"},
	["hrc"] = {"Niwer Mil"},
	["hre"] = {"Hre"},
	["hrk"] = {"Haruku"},
	["hrm"] = {"Horned Miao"},
	["hro"] = {"Haroi"},
	["hrp"] = {"Nhirrpi"},
	["hrt"] = {"Hértevin"},
	["hru"] = {"Hruso"},
	["hrw"] = {"Warwar Feni"},
	["hrx"] = {"Hunsrik"},
	["hrz"] = {"Harzani"},
	["hsb"] = {"Upper Sorbian"},
	["hsh"] = {"Hungarian Sign Language"},
	["hsl"] = {"Hausa Sign Language"},
	["hsn"] = {"Xiang Chinese"},
	["hss"] = {"Harsusi"},
	["hti"] = {"Hoti"},
	["hto"] = {"Minica Huitoto"},
	["hts"] = {"Hadza"},
	["htu"] = {"Hitu"},
	["htx"] = {"Middle Hittite"},
	["hub"] = {"Huambisa"},
	["huc"] = {"ǂHua", "ǂʼAmkhoe"},
	["hud"] = {"Huaulu"},
	["hue"] = {"San Francisco Del Mar Huave"},
	["huf"] = {"Humene"},
	["hug"] = {"Huachipaeri"},
	["huh"] = {"Huilliche"},
	["hui"] = {"Huli"},
	["huj"] = {"Northern Guiyang Hmong", "Northern Guiyang Miao"},
	["huk"] = {"Hulung"},
	["hul"] = {"Hula"},
	["hum"] = {"Hungana"},
	["huo"] = {"Hu"},
	["hup"] = {"Hupa"},
	["huq"] = {"Tsat"},
	["hur"] = {"Halkomelem"},
	["hus"] = {"Huastec"},
	["hut"] = {"Humla"},
	["huu"] = {"Murui Huitoto"},
	["huv"] = {"San Mateo Del Mar Huave"},
	["huw"] = {"Hukumina"},
	["hux"] = {"Nüpode Huitoto"},
	["huy"] = {"Hulaulá"},
	["huz"] = {"Hunzib"},
	["hvc"] = {"Haitian Vodoun Culture Language"},
	["hve"] = {"San Dionisio Del Mar Huave"},
	["hvk"] = {"Haveke"},
	["hvn"] = {"Sabu"},
	["hvv"] = {"Santa María Del Mar Huave"},
	["hwa"] = {"Wané"},
	["hwc"] = {"Hawai'i Creole English", "Hawai'i Pidgin"},
	["hwo"] = {"Hwana"},
	["hya"] = {"Hya"},
	["hyw"] = {"Western Armenian"},
	["hyx"] = {"Armenian (family)"},
	["iai"] = {"Iaai"},
	["ian"] = {"Iatmul"},
	["iar"] = {"Purari"},
	["iba"] = {"Iban"},
	["ibb"] = {"Ibibio"},
	["ibd"] = {"Iwaidja"},
	["ibe"] = {"Akpes"},
	["ibg"] = {"Ibanag"},
	["ibh"] = {"Bih"},
	["ibl"] = {"Ibaloi"},
	["ibm"] = {"Agoi"},
	["ibn"] = {"Ibino"},
	["ibr"] = {"Ibuoro"},
	["ibu"] = {"Ibu"},
	["iby"] = {"Ibani"},
	["ica"] = {"Ede Ica"},
	["ich"] = {"Etkywan"},
	["icl"] = {"Icelandic Sign Language"},
	["icr"] = {"Islander Creole English"},
	["ida"] = {"Idakho-Isukha-Tiriki", "Luidakho-Luisukha-Lutirichi"},
	["idb"] = {"Indo-Portuguese"},
	["idc"] = {"Idon", "Ajiya"},
	["idd"] = {"Ede Idaca"},
	["ide"] = {"Idere"},
	["idi"] = {"Idi"},
	["idr"] = {"Indri"},
	["ids"] = {"Idesa"},
	["idt"] = {"Idaté"},
	["idu"] = {"Idoma"},
	["ifa"] = {"Amganad Ifugao"},
	["ifb"] = {"Batad Ifugao", "Ayangan Ifugao"},
	["ife"] = {"Ifè"},
	["iff"] = {"Ifo"},
	["ifk"] = {"Tuwali Ifugao"},
	["ifm"] = {"Teke-Fuumu"},
	["ifu"] = {"Mayoyao Ifugao"},
	["ify"] = {"Keley-I Kallahan"},
	["igb"] = {"Ebira"},
	["ige"] = {"Igede"},
	["igg"] = {"Igana"},
	["igl"] = {"Igala"},
	["igm"] = {"Kanggape"},
	["ign"] = {"Ignaciano"},
	["igo"] = {"Isebe"},
	["igs"] = {"Interglossa"},
	["igw"] = {"Igwe"},
	["ihb"] = {"Iha Based Pidgin"},
	["ihi"] = {"Ihievbe"},
	["ihp"] = {"Iha"},
	["ihw"] = {"Bidhawal"},
	["iin"] = {"Thiin"},
	["iir"] = {"Indo-Iranian languages"},
	["ijc"] = {"Izon"},
	["ije"] = {"Biseni"},
	["ijj"] = {"Ede Ije"},
	["ijn"] = {"Kalabari"},
	["ijo"] = {"Ijo languages"},
	["ijs"] = {"Southeast Ijo"},
	["ike"] = {"Eastern Canadian Inuktitut"},
	["ikh"] = {"Ikhin-Arokho"},
	["iki"] = {"Iko"},
	["ikk"] = {"Ika"},
	["ikl"] = {"Ikulu"},
	["iko"] = {"Olulumo-Ikom"},
	["ikp"] = {"Ikpeshi"},
	["ikr"] = {"Ikaranggal"},
	["iks"] = {"Inuit Sign Language"},
	["ikt"] = {"Inuinnaqtun", "Western Canadian Inuktitut"},
	["ikv"] = {"Iku-Gora-Ankwa"},
	["ikw"] = {"Ikwere"},
	["ikx"] = {"Ik"},
	["ikz"] = {"Ikizu"},
	["ila"] = {"Ile Ape"},
	["ilb"] = {"Ila"},
	["ilg"] = {"Garig-Ilgar"},
	["ili"] = {"Ili Turki"},
	["ilk"] = {"Ilongot"},
	["ilm"] = {"Iranun (Malaysia)"},
	["ilo"] = {"Iloko"},
	["ilp"] = {"Iranun (Philippines)"},
	["ils"] = {"International Sign"},
	["ilu"] = {"Ili'uun"},
	["ilv"] = {"Ilue"},
	["ima"] = {"Mala Malasar"},
	["imi"] = {"Anamgura"},
	["iml"] = {"Miluk"},
	["imn"] = {"Imonda"},
	["imo"] = {"Imbongu"},
	["imr"] = {"Imroing"},
	["ims"] = {"Marsian"},
	["imt"] = {"Imotong"},
	["imy"] = {"Milyan"},
	["inb"] = {"Inga"},
	["inc"] = {"Indic languages"},
	["ine"] = {"Indo-European languages"},
	["ing"] = {"Degexit'an"},
	["inh"] = {"Ingush"},
	["inj"] = {"Jungle Inga"},
	["inl"] = {"Indonesian Sign Language"},
	["inm"] = {"Minaean"},
	["inn"] = {"Isinai"},
	["ino"] = {"Inoke-Yate"},
	["inp"] = {"Iñapari"},
	["ins"] = {"Indian Sign Language"},
	["int"] = {"Intha"},
	["inz"] = {"Ineseño"},
	["ior"] = {"Inor"},
	["iou"] = {"Tuma-Irumu"},
	["iow"] = {"Iowa-Oto"},
	["ipi"] = {"Ipili"},
	["ipo"] = {"Ipiko"},
	["iqu"] = {"Iquito"},
	["iqw"] = {"Ikwo"},
	["ira"] = {"Iranian languages"},
	["ire"] = {"Iresim"},
	["irh"] = {"Irarutu"},
	["iri"] = {"Rigwe", "Irigwe"},
	["irk"] = {"Iraqw"},
	["irn"] = {"Irántxe"},
	["iro"] = {"Iroquoian languages"},
	["irr"] = {"Ir"},
	["iru"] = {"Irula"},
	["irx"] = {"Kamberau"},
	["iry"] = {"Iraya"},
	["isa"] = {"Isabi"},
	["isc"] = {"Isconahua"},
	["isd"] = {"Isnag"},
	["ise"] = {"Italian Sign Language"},
	["isg"] = {"Irish Sign Language"},
	["ish"] = {"Esan"},
	["isi"] = {"Nkem-Nkum"},
	["isk"] = {"Ishkashimi"},
	["ism"] = {"Masimasi"},
	["isn"] = {"Isanzu"},
	["iso"] = {"Isoko"},
	["isr"] = {"Israeli Sign Language"},
	["ist"] = {"Istriot"},
	["isu"] = {"Isu (Menchum Division)"},
	["itb"] = {"Binongan Itneg"},
	["itc"] = {"Italic languages"},
	["itd"] = {"Southern Tidung"},
	["ite"] = {"Itene"},
	["iti"] = {"Inlaod Itneg"},
	["itk"] = {"Judeo-Italian"},
	["itl"] = {"Itelmen"},
	["itm"] = {"Itu Mbon Uzo"},
	["ito"] = {"Itonama"},
	["itr"] = {"Iteri"},
	["its"] = {"Isekiri"},
	["itt"] = {"Maeng Itneg"},
	["itv"] = {"Itawit"},
	["itw"] = {"Ito"},
	["itx"] = {"Itik"},
	["ity"] = {"Moyadan Itneg"},
	["itz"] = {"Itzá"},
	["ium"] = {"Iu Mien"},
	["ivb"] = {"Ibatan"},
	["ivv"] = {"Ivatan"},
	["iwk"] = {"I-Wak"},
	["iwm"] = {"Iwam"},
	["iwo"] = {"Iwur"},
	["iws"] = {"Sepik Iwam"},
	["ixc"] = {"Ixcatec"},
	["ixl"] = {"Ixil"},
	["iya"] = {"Iyayu"},
	["iyo"] = {"Mesaka"},
	["iyx"] = {"Yaka (Congo)"},
	["izh"] = {"Ingrian"},
	["izm"] = {"Kizamani"},
	["izr"] = {"Izere"},
	["izz"] = {"Izii"},
	["jaa"] = {"Jamamadí"},
	["jab"] = {"Hyam"},
	["jac"] = {"Popti'", "Jakalteko"},
	["jad"] = {"Jahanka"},
	["jae"] = {"Yabem"},
	["jaf"] = {"Jara"},
	["jah"] = {"Jah Hut"},
	["jaj"] = {"Zazao"},
	["jak"] = {"Jakun"},
	["jal"] = {"Yalahatan"},
	["jam"] = {"Jamaican Creole English"},
	["jan"] = {"Jandai"},
	["jao"] = {"Yanyuwa"},
	["jaq"] = {"Yaqay"},
	["jas"] = {"New Caledonian Javanese"},
	["jat"] = {"Jakati"},
	["jau"] = {"Yaur"},
	["jax"] = {"Jambi Malay"},
	["jay"] = {"Yan-nhangu", "Nhangu"},
	["jaz"] = {"Jawe"},
	["jbe"] = {"Judeo-Berber"},
	["jbi"] = {"Badjiri"},
	["jbj"] = {"Arandai"},
	["jbk"] = {"Barikewa"},
	["jbm"] = {"Bijim"},
	["jbn"] = {"Nafusi"},
	["jbo"] = {"Lojban"},
	["jbr"] = {"Jofotek-Bromnya"},
	["jbt"] = {"Jabutí"},
	["jbu"] = {"Jukun Takum"},
	["jbw"] = {"Yawijibaya"},
	["jcs"] = {"Jamaican Country Sign Language"},
	["jct"] = {"Krymchak"},
	["jda"] = {"Jad"},
	["jdg"] = {"Jadgali"},
	["jdt"] = {"Judeo-Tat"},
	["jeb"] = {"Jebero"},
	["jee"] = {"Jerung"},
	["jeh"] = {"Jeh"},
	["jei"] = {"Yei"},
	["jek"] = {"Jeri Kuo"},
	["jel"] = {"Yelmek"},
	["jen"] = {"Dza"},
	["jer"] = {"Jere"},
	["jet"] = {"Manem"},
	["jeu"] = {"Jonkor Bourmataguil"},
	["jgb"] = {"Ngbee"},
	["jge"] = {"Judeo-Georgian"},
	["jgk"] = {"Gwak"},
	["jgo"] = {"Ngomba"},
	["jhi"] = {"Jehai"},
	["jhs"] = {"Jhankot Sign Language"},
	["jia"] = {"Jina"},
	["jib"] = {"Jibu"},
	["jic"] = {"Tol"},
	["jid"] = {"Bu (Kaduna State)"},
	["jie"] = {"Jilbe"},
	["jig"] = {"Jingulu", "Djingili"},
	["jih"] = {"sTodsde", "Shangzhai"},
	["jii"] = {"Jiiddu"},
	["jil"] = {"Jilim"},
	["jim"] = {"Jimi (Cameroon)"},
	["jio"] = {"Jiamao"},
	["jiq"] = {"Guanyinqiao", "Lavrung"},
	["jit"] = {"Jita"},
	["jiu"] = {"Youle Jinuo"},
	["jiv"] = {"Shuar"},
	["jiy"] = {"Buyuan Jinuo"},
	["jje"] = {"Jejueo"},
	["jjr"] = {"Bankal"},
	["jka"] = {"Kaera"},
	["jkm"] = {"Mobwa Karen"},
	["jko"] = {"Kubo"},
	["jkp"] = {"Paku Karen"},
	["jkr"] = {"Koro (India)"},
	["jks"] = {"Amami Koniya Sign Language"},
	["jku"] = {"Labir"},
	["jle"] = {"Ngile"},
	["jls"] = {"Jamaican Sign Language"},
	["jma"] = {"Dima"},
	["jmb"] = {"Zumbun"},
	["jmc"] = {"Machame"},
	["jmd"] = {"Yamdena"},
	["jmi"] = {"Jimi (Nigeria)"},
	["jml"] = {"Jumli"},
	["jmn"] = {"Makuri Naga"},
	["jmr"] = {"Kamara"},
	["jms"] = {"Mashi (Nigeria)"},
	["jmw"] = {"Mouwase"},
	["jmx"] = {"Western Juxtlahuaca Mixtec"},
	["jna"] = {"Jangshung"},
	["jnd"] = {"Jandavra"},
	["jng"] = {"Yangman"},
	["jni"] = {"Janji"},
	["jnj"] = {"Yemsa"},
	["jnl"] = {"Rawat"},
	["jns"] = {"Jaunsari"},
	["job"] = {"Joba"},
	["jod"] = {"Wojenaka"},
	["jog"] = {"Jogi"},
	["jor"] = {"Jorá"},
	["jos"] = {"Jordanian Sign Language"},
	["jow"] = {"Jowulu"},
	["jpa"] = {"Jewish Palestinian Aramaic"},
	["jpr"] = {"Judeo-Persian"},
	["jpx"] = {"Japanese (family)"},
	["jqr"] = {"Jaqaru"},
	["jra"] = {"Jarai"},
	["jrb"] = {"Judeo-Arabic"},
	["jrr"] = {"Jiru"},
	["jrt"] = {"Jakattoe"},
	["jru"] = {"Japrería"},
	["jsl"] = {"Japanese Sign Language"},
	["jua"] = {"Júma"},
	["jub"] = {"Wannu"},
	["juc"] = {"Jurchen"},
	["jud"] = {"Worodougou"},
	["juh"] = {"Hõne"},
	["jui"] = {"Ngadjuri"},
	["juk"] = {"Wapan"},
	["jul"] = {"Jirel"},
	["jum"] = {"Jumjum"},
	["jun"] = {"Juang"},
	["juo"] = {"Jiba"},
	["jup"] = {"Hupdë"},
	["jur"] = {"Jurúna"},
	["jus"] = {"Jumla Sign Language"},
	["jut"] = {"Jutish"},
	["juu"] = {"Ju"},
	["juw"] = {"Wãpha"},
	["juy"] = {"Juray"},
	["jvd"] = {"Javindo"},
	["jvn"] = {"Caribbean Javanese"},
	["jwi"] = {"Jwira-Pepesa"},
	["jya"] = {"Jiarong"},
	["jye"] = {"Judeo-Yemeni Arabic"},
	["jyy"] = {"Jaya"},
	["kaa"] = {"Kara-Kalpak", "Karakalpak"},
	["kab"] = {"Kabyle"},
	["kac"] = {"Kachin", "Jingpho"},
	["kad"] = {"Adara"},
	["kae"] = {"Ketangalan"},
	["kaf"] = {"Katso"},
	["kag"] = {"Kajaman"},
	["kah"] = {"Kara (Central African Republic)"},
	["kai"] = {"Karekare"},
	["kaj"] = {"Jju"},
	["kak"] = {"Kalanguya", "Kayapa Kallahan"},
	["kam"] = {"Kamba (Kenya)"},
	["kao"] = {"Xaasongaxango"},
	["kap"] = {"Bezhta"},
	["kaq"] = {"Capanahua"},
	["kar"] = {"Karen languages"},
	["kav"] = {"Katukína"},
	["kaw"] = {"Kawi"},
	["kax"] = {"Kao"},
	["kay"] = {"Kamayurá"},
	["kba"] = {"Kalarko"},
	["kbb"] = {"Kaxuiâna"},
	["kbc"] = {"Kadiwéu"},
	["kbd"] = {"Kabardian"},
	["kbe"] = {"Kanju"},
	["kbg"] = {"Khamba"},
	["kbh"] = {"Camsá"},
	["kbi"] = {"Kaptiau"},
	["kbj"] = {"Kari"},
	["kbk"] = {"Grass Koiari"},
	["kbl"] = {"Kanembu"},
	["kbm"] = {"Iwal"},
	["kbn"] = {"Kare (Central African Republic)"},
	["kbo"] = {"Keliko"},
	["kbp"] = {"Kabiyè"},
	["kbq"] = {"Kamano"},
	["kbr"] = {"Kafa"},
	["kbs"] = {"Kande"},
	["kbt"] = {"Abadi"},
	["kbu"] = {"Kabutra"},
	["kbv"] = {"Dera (Indonesia)"},
	["kbw"] = {"Kaiep"},
	["kbx"] = {"Ap Ma"},
	["kby"] = {"Manga Kanuri"},
	["kbz"] = {"Duhwa"},
	["kca"] = {"Khanty"},
	["kcb"] = {"Kawacha"},
	["kcc"] = {"Lubila"},
	["kcd"] = {"Ngkâlmpw Kanum"},
	["kce"] = {"Kaivi"},
	["kcf"] = {"Ukaan"},
	["kcg"] = {"Tyap"},
	["kch"] = {"Vono"},
	["kci"] = {"Kamantan"},
	["kcj"] = {"Kobiana"},
	["kck"] = {"Kalanga"},
	["kcl"] = {"Kela (Papua New Guinea)", "Kala"},
	["kcm"] = {"Gula (Central African Republic)"},
	["kcn"] = {"Nubi"},
	["kco"] = {"Kinalakna"},
	["kcp"] = {"Kanga"},
	["kcq"] = {"Kamo"},
	["kcr"] = {"Katla"},
	["kcs"] = {"Koenoem"},
	["kct"] = {"Kaian"},
	["kcu"] = {"Kami (Tanzania)"},
	["kcv"] = {"Kete"},
	["kcw"] = {"Kabwari"},
	["kcx"] = {"Kachama-Ganjule"},
	["kcy"] = {"Korandje"},
	["kcz"] = {"Konongo"},
	["kda"] = {"Worimi"},
	["kdc"] = {"Kutu"},
	["kdd"] = {"Yankunytjatjara"},
	["kde"] = {"Makonde"},
	["kdf"] = {"Mamusi"},
	["kdg"] = {"Seba"},
	["kdh"] = {"Tem"},
	["kdi"] = {"Kumam"},
	["kdj"] = {"Karamojong"},
	["kdk"] = {"Numèè", "Kwényi"},
	["kdl"] = {"Tsikimba"},
	["kdm"] = {"Kagoma"},
	["kdn"] = {"Kunda"},
	["kdo"] = {"Kordofanian languages"},
	["kdp"] = {"Kaningdon-Nindem"},
	["kdq"] = {"Koch"},
	["kdr"] = {"Karaim"},
	["kdt"] = {"Kuy"},
	["kdu"] = {"Kadaru"},
	["kdw"] = {"Koneraw"},
	["kdx"] = {"Kam"},
	["kdy"] = {"Keder", "Keijar"},
	["kdz"] = {"Kwaja"},
	["kea"] = {"Kabuverdianu"},
	["keb"] = {"Kélé"},
	["kec"] = {"Keiga"},
	["ked"] = {"Kerewe"},
	["kee"] = {"Eastern Keres"},
	["kef"] = {"Kpessi"},
	["keg"] = {"Tese"},
	["keh"] = {"Keak"},
	["kei"] = {"Kei"},
	["kej"] = {"Kadar"},
	["kek"] = {"Kekchí"},
	["kel"] = {"Kela (Democratic Republic of Congo)"},
	["kem"] = {"Kemak"},
	["ken"] = {"Kenyang"},
	["keo"] = {"Kakwa"},
	["kep"] = {"Kaikadi"},
	["keq"] = {"Kamar"},
	["ker"] = {"Kera"},
	["kes"] = {"Kugbo"},
	["ket"] = {"Ket"},
	["keu"] = {"Akebu"},
	["kev"] = {"Kanikkaran"},
	["kew"] = {"West Kewa"},
	["kex"] = {"Kukna"},
	["key"] = {"Kupia"},
	["kez"] = {"Kukele"},
	["kfa"] = {"Kodava"},
	["kfb"] = {"Northwestern Kolami"},
	["kfc"] = {"Konda-Dora"},
	["kfd"] = {"Korra Koraga"},
	["kfe"] = {"Kota (India)"},
	["kff"] = {"Koya"},
	["kfg"] = {"Kudiya"},
	["kfh"] = {"Kurichiya"},
	["kfi"] = {"Kannada Kurumba"},
	["kfj"] = {"Kemiehua"},
	["kfk"] = {"Kinnauri"},
	["kfl"] = {"Kung"},
	["kfm"] = {"Khunsari"},
	["kfn"] = {"Kuk"},
	["kfo"] = {"Koro (Côte d'Ivoire)"},
	["kfp"] = {"Korwa"},
	["kfq"] = {"Korku"},
	["kfr"] = {"Kachhi", "Kutchi"},
	["kfs"] = {"Bilaspuri"},
	["kft"] = {"Kanjari"},
	["kfu"] = {"Katkari"},
	["kfv"] = {"Kurmukar"},
	["kfw"] = {"Kharam Naga"},
	["kfx"] = {"Kullu Pahari"},
	["kfy"] = {"Kumaoni"},
	["kfz"] = {"Koromfé"},
	["kga"] = {"Koyaga"},
	["kgb"] = {"Kawe"},
	["kge"] = {"Komering"},
	["kgf"] = {"Kube"},
	["kgg"] = {"Kusunda"},
	["kgi"] = {"Selangor Sign Language"},
	["kgj"] = {"Gamale Kham"},
	["kgk"] = {"Kaiwá"},
	["kgl"] = {"Kunggari"},
	["kgn"] = {"Karingani"},
	["kgo"] = {"Krongo"},
	["kgp"] = {"Kaingang"},
	["kgq"] = {"Kamoro"},
	["kgr"] = {"Abun"},
	["kgs"] = {"Kumbainggar"},
	["kgt"] = {"Somyev"},
	["kgu"] = {"Kobol"},
	["kgv"] = {"Karas"},
	["kgw"] = {"Karon Dori"},
	["kgx"] = {"Kamaru"},
	["kgy"] = {"Kyerung"},
	["kha"] = {"Khasi"},
	["khb"] = {"Lü"},
	["khc"] = {"Tukang Besi North"},
	["khd"] = {"Bädi Kanum"},
	["khe"] = {"Korowai"},
	["khf"] = {"Khuen"},
	["khg"] = {"Khams Tibetan"},
	["khh"] = {"Kehu"},
	["khi"] = {"Khoisan languages"},
	["khj"] = {"Kuturmi"},
	["khk"] = {"Halh Mongolian"},
	["khl"] = {"Lusi"},
	["khn"] = {"Khandesi"},
	["kho"] = {"Khotanese", "Sakan"},
	["khp"] = {"Kapori", "Kapauri"},
	["khq"] = {"Koyra Chiini Songhay"},
	["khr"] = {"Kharia"},
	["khs"] = {"Kasua"},
	["kht"] = {"Khamti"},
	["khu"] = {"Nkhumbi"},
	["khv"] = {"Khvarshi"},
	["khw"] = {"Khowar"},
	["khx"] = {"Kanu"},
	["khy"] = {"Kele (Democratic Republic of Congo)"},
	["khz"] = {"Keapara"},
	["kia"] = {"Kim"},
	["kib"] = {"Koalib"},
	["kic"] = {"Kickapoo"},
	["kid"] = {"Koshin"},
	["kie"] = {"Kibet"},
	["kif"] = {"Eastern Parbate Kham"},
	["kig"] = {"Kimaama", "Kimaghima"},
	["kih"] = {"Kilmeri"},
	["kii"] = {"Kitsai"},
	["kij"] = {"Kilivila"},
	["kil"] = {"Kariya"},
	["kim"] = {"Karagas"},
	["kio"] = {"Kiowa"},
	["kip"] = {"Sheshi Kham"},
	["kiq"] = {"Kosadle", "Kosare"},
	["kis"] = {"Kis"},
	["kit"] = {"Agob"},
	["kiu"] = {"Kirmanjki (individual language)"},
	["kiv"] = {"Kimbu"},
	["kiw"] = {"Northeast Kiwai"},
	["kix"] = {"Khiamniungan Naga"},
	["kiy"] = {"Kirikiri"},
	["kiz"] = {"Kisi"},
	["kja"] = {"Mlap"},
	["kjb"] = {"Q'anjob'al", "Kanjobal"},
	["kjc"] = {"Coastal Konjo"},
	["kjd"] = {"Southern Kiwai"},
	["kje"] = {"Kisar"},
	["kjg"] = {"Khmu"},
	["kjh"] = {"Khakas"},
	["kji"] = {"Zabana"},
	["kjj"] = {"Khinalugh"},
	["kjk"] = {"Highland Konjo"},
	["kjl"] = {"Western Parbate Kham"},
	["kjm"] = {"Kháng"},
	["kjn"] = {"Kunjen"},
	["kjo"] = {"Harijan Kinnauri"},
	["kjp"] = {"Pwo Eastern Karen"},
	["kjq"] = {"Western Keres"},
	["kjr"] = {"Kurudu"},
	["kjs"] = {"East Kewa"},
	["kjt"] = {"Phrae Pwo Karen"},
	["kju"] = {"Kashaya"},
	["kjv"] = {"Kaikavian Literary Language"},
	["kjx"] = {"Ramopa"},
	["kjy"] = {"Erave"},
	["kjz"] = {"Bumthangkha"},
	["kka"] = {"Kakanda"},
	["kkb"] = {"Kwerisa"},
	["kkc"] = {"Odoodee"},
	["kkd"] = {"Kinuku"},
	["kke"] = {"Kakabe"},
	["kkf"] = {"Kalaktang Monpa"},
	["kkg"] = {"Mabaka Valley Kalinga"},
	["kkh"] = {"Khün"},
	["kki"] = {"Kagulu"},
	["kkj"] = {"Kako"},
	["kkk"] = {"Kokota"},
	["kkl"] = {"Kosarek Yale"},
	["kkm"] = {"Kiong"},
	["kkn"] = {"Kon Keu"},
	["kko"] = {"Karko"},
	["kkp"] = {"Gugubera", "Koko-Bera"},
	["kkq"] = {"Kaeku"},
	["kkr"] = {"Kir-Balar"},
	["kks"] = {"Giiwo"},
	["kkt"] = {"Koi"},
	["kku"] = {"Tumi"},
	["kkv"] = {"Kangean"},
	["kkw"] = {"Teke-Kukuya"},
	["kkx"] = {"Kohin"},
	["kky"] = {"Guugu Yimidhirr", "Guguyimidjir"},
	["kkz"] = {"Kaska"},
	["kla"] = {"Klamath-Modoc"},
	["klb"] = {"Kiliwa"},
	["klc"] = {"Kolbila"},
	["kld"] = {"Gamilaraay"},
	["kle"] = {"Kulung (Nepal)"},
	["klf"] = {"Kendeje"},
	["klg"] = {"Tagakaulo"},
	["klh"] = {"Weliki"},
	["kli"] = {"Kalumpang"},
	["klj"] = {"Khalaj"},
	["klk"] = {"Kono (Nigeria)"},
	["kll"] = {"Kagan Kalagan"},
	["klm"] = {"Migum"},
	["kln"] = {"Kalenjin"},
	["klo"] = {"Kapya"},
	["klp"] = {"Kamasa"},
	["klq"] = {"Rumu"},
	["klr"] = {"Khaling"},
	["kls"] = {"Kalasha"},
	["klt"] = {"Nukna"},
	["klu"] = {"Klao"},
	["klv"] = {"Maskelynes"},
	["klw"] = {"Tado", "Lindu"},
	["klx"] = {"Koluwawa"},
	["kly"] = {"Kalao"},
	["klz"] = {"Kabola"},
	["kma"] = {"Konni"},
	["kmb"] = {"Kimbundu"},
	["kmc"] = {"Southern Dong"},
	["kmd"] = {"Majukayang Kalinga"},
	["kme"] = {"Bakole"},
	["kmf"] = {"Kare (Papua New Guinea)"},
	["kmg"] = {"Kâte"},
	["kmh"] = {"Kalam"},
	["kmi"] = {"Kami (Nigeria)"},
	["kmj"] = {"Kumarbhag Paharia"},
	["kmk"] = {"Limos Kalinga"},
	["kml"] = {"Tanudan Kalinga"},
	["kmm"] = {"Kom (India)"},
	["kmn"] = {"Awtuw"},
	["kmo"] = {"Kwoma"},
	["kmp"] = {"Gimme"},
	["kmq"] = {"Kwama"},
	["kmr"] = {"Northern Kurdish"},
	["kms"] = {"Kamasau"},
	["kmt"] = {"Kemtuik"},
	["kmu"] = {"Kanite"},
	["kmv"] = {"Karipúna Creole French"},
	["kmw"] = {"Komo (Democratic Republic of Congo)"},
	["kmx"] = {"Waboda"},
	["kmy"] = {"Koma"},
	["kmz"] = {"Khorasani Turkish"},
	["kna"] = {"Dera (Nigeria)"},
	["knb"] = {"Lubuagan Kalinga"},
	["knc"] = {"Central Kanuri"},
	["knd"] = {"Konda"},
	["kne"] = {"Kankanaey"},
	["knf"] = {"Mankanya"},
	["kng"] = {"Koongo"},
	["kni"] = {"Kanufi"},
	["knj"] = {"Western Kanjobal"},
	["knk"] = {"Kuranko"},
	["knl"] = {"Keninjal"},
	["knm"] = {"Kanamarí"},
	["knn"] = {"Konkani (individual language)"},
	["kno"] = {"Kono (Sierra Leone)"},
	["knp"] = {"Kwanja"},
	["knq"] = {"Kintaq"},
	["knr"] = {"Kaningra"},
	["kns"] = {"Kensiu"},
	["knt"] = {"Panoan Katukína"},
	["knu"] = {"Kono (Guinea)"},
	["knv"] = {"Tabo"},
	["knw"] = {"Kung-Ekoka"},
	["knx"] = {"Kendayan", "Salako"},
	["kny"] = {"Kanyok"},
	["knz"] = {"Kalamsé"},
	["koa"] = {"Konomala"},
	["koc"] = {"Kpati"},
	["kod"] = {"Kodi"},
	["koe"] = {"Kacipo-Bale Suri"},
	["kof"] = {"Kubi"},
	["kog"] = {"Cogui", "Kogi"},
	["koh"] = {"Koyo"},
	["koi"] = {"Komi-Permyak"},
	["kok"] = {"Konkani (macrolanguage)"},
	["kol"] = {"Kol (Papua New Guinea)"},
	["koo"] = {"Konzo"},
	["kop"] = {"Waube"},
	["koq"] = {"Kota (Gabon)"},
	["kos"] = {"Kosraean"},
	["kot"] = {"Lagwan"},
	["kou"] = {"Koke"},
	["kov"] = {"Kudu-Camo"},
	["kow"] = {"Kugama"},
	["koy"] = {"Koyukon"},
	["koz"] = {"Korak"},
	["kpa"] = {"Kutto"},
	["kpb"] = {"Mullu Kurumba"},
	["kpc"] = {"Curripaco"},
	["kpd"] = {"Koba"},
	["kpe"] = {"Kpelle"},
	["kpf"] = {"Komba"},
	["kpg"] = {"Kapingamarangi"},
	["kph"] = {"Kplang"},
	["kpi"] = {"Kofei"},
	["kpj"] = {"Karajá"},
	["kpk"] = {"Kpan"},
	["kpl"] = {"Kpala"},
	["kpm"] = {"Koho"},
	["kpn"] = {"Kepkiriwát"},
	["kpo"] = {"Ikposo"},
	["kpq"] = {"Korupun-Sela"},
	["kpr"] = {"Korafe-Yegha"},
	["kps"] = {"Tehit"},
	["kpt"] = {"Karata"},
	["kpu"] = {"Kafoa"},
	["kpv"] = {"Komi-Zyrian"},
	["kpw"] = {"Kobon"},
	["kpx"] = {"Mountain Koiali"},
	["kpy"] = {"Koryak"},
	["kpz"] = {"Kupsabiny"},
	["kqa"] = {"Mum"},
	["kqb"] = {"Kovai"},
	["kqc"] = {"Doromu-Koki"},
	["kqd"] = {"Koy Sanjaq Surat"},
	["kqe"] = {"Kalagan"},
	["kqf"] = {"Kakabai"},
	["kqg"] = {"Khe"},
	["kqh"] = {"Kisankasa"},
	["kqi"] = {"Koitabu"},
	["kqj"] = {"Koromira"},
	["kqk"] = {"Kotafon Gbe"},
	["kql"] = {"Kyenele"},
	["kqm"] = {"Khisa"},
	["kqn"] = {"Kaonde"},
	["kqo"] = {"Eastern Krahn"},
	["kqp"] = {"Kimré"},
	["kqq"] = {"Krenak"},
	["kqr"] = {"Kimaragang"},
	["kqs"] = {"Northern Kissi"},
	["kqt"] = {"Klias River Kadazan"},
	["kqu"] = {"Seroa"},
	["kqv"] = {"Okolod"},
	["kqw"] = {"Kandas"},
	["kqx"] = {"Mser"},
	["kqy"] = {"Koorete"},
	["kqz"] = {"Korana"},
	["kra"] = {"Kumhali"},
	["krb"] = {"Karkin"},
	["krc"] = {"Karachay-Balkar"},
	["krd"] = {"Kairui-Midiki"},
	["kre"] = {"Panará"},
	["krf"] = {"Koro (Vanuatu)"},
	["krh"] = {"Kurama"},
	["kri"] = {"Krio"},
	["krj"] = {"Kinaray-A"},
	["krk"] = {"Kerek"},
	["krl"] = {"Karelian"},
	["krn"] = {"Sapo"},
	["kro"] = {"Kru languages"},
	["krp"] = {"Durop"},
	["krr"] = {"Krung"},
	["krs"] = {"Gbaya (Sudan)"},
	["krt"] = {"Tumari Kanuri"},
	["kru"] = {"Kurukh"},
	["krv"] = {"Kavet"},
	["krw"] = {"Western Krahn"},
	["krx"] = {"Karon"},
	["kry"] = {"Kryts"},
	["krz"] = {"Sota Kanum"},
	["ksb"] = {"Shambala"},
	["ksc"] = {"Southern Kalinga"},
	["ksd"] = {"Kuanua"},
	["kse"] = {"Kuni"},
	["ksf"] = {"Bafia"},
	["ksg"] = {"Kusaghe"},
	["ksh"] = {"Kölsch"},
	["ksi"] = {"Krisa", "I'saka"},
	["ksj"] = {"Uare"},
	["ksk"] = {"Kansa"},
	["ksl"] = {"Kumalu"},
	["ksm"] = {"Kumba"},
	["ksn"] = {"Kasiguranin"},
	["kso"] = {"Kofa"},
	["ksp"] = {"Kaba"},
	["ksq"] = {"Kwaami"},
	["ksr"] = {"Borong"},
	["kss"] = {"Southern Kisi"},
	["kst"] = {"Winyé"},
	["ksu"] = {"Khamyang"},
	["ksv"] = {"Kusu"},
	["ksw"] = {"S'gaw Karen"},
	["ksx"] = {"Kedang"},
	["ksy"] = {"Kharia Thar"},
	["ksz"] = {"Kodaku"},
	["kta"] = {"Katua"},
	["ktb"] = {"Kambaata"},
	["ktc"] = {"Kholok"},
	["ktd"] = {"Kokata", "Kukatha"},
	["kte"] = {"Nubri"},
	["ktf"] = {"Kwami"},
	["ktg"] = {"Kalkutung"},
	["kth"] = {"Karanga"},
	["kti"] = {"North Muyu"},
	["ktj"] = {"Plapo Krumen"},
	["ktk"] = {"Kaniet"},
	["ktl"] = {"Koroshi"},
	["ktm"] = {"Kurti"},
	["ktn"] = {"Karitiâna"},
	["kto"] = {"Kuot"},
	["ktp"] = {"Kaduo"},
	["ktq"] = {"Katabaga"},
	["kts"] = {"South Muyu"},
	["ktt"] = {"Ketum"},
	["ktu"] = {"Kituba (Democratic Republic of Congo)"},
	["ktv"] = {"Eastern Katu"},
	["ktw"] = {"Kato"},
	["ktx"] = {"Kaxararí"},
	["kty"] = {"Kango (Bas-Uélé District)"},
	["ktz"] = {"Juǀʼhoan", "Juǀʼhoansi"},
	["kub"] = {"Kutep"},
	["kuc"] = {"Kwinsu"},
	["kud"] = {"'Auhelawa"},
	["kue"] = {"Kuman (Papua New Guinea)"},
	["kuf"] = {"Western Katu"},
	["kug"] = {"Kupa"},
	["kuh"] = {"Kushi"},
	["kui"] = {"Kuikúro-Kalapálo", "Kalapalo"},
	["kuj"] = {"Kuria"},
	["kuk"] = {"Kepo'"},
	["kul"] = {"Kulere"},
	["kum"] = {"Kumyk"},
	["kun"] = {"Kunama"},
	["kuo"] = {"Kumukio"},
	["kup"] = {"Kunimaipa"},
	["kuq"] = {"Karipuna"},
	["kus"] = {"Kusaal"},
	["kut"] = {"Kutenai"},
	["kuu"] = {"Upper Kuskokwim"},
	["kuv"] = {"Kur"},
	["kuw"] = {"Kpagua"},
	["kux"] = {"Kukatja"},
	["kuy"] = {"Kuuku-Ya'u"},
	["kuz"] = {"Kunza"},
	["kva"] = {"Bagvalal"},
	["kvb"] = {"Kubu"},
	["kvc"] = {"Kove"},
	["kvd"] = {"Kui (Indonesia)"},
	["kve"] = {"Kalabakan"},
	["kvf"] = {"Kabalai"},
	["kvg"] = {"Kuni-Boazi"},
	["kvh"] = {"Komodo"},
	["kvi"] = {"Kwang"},
	["kvj"] = {"Psikye"},
	["kvk"] = {"Korean Sign Language"},
	["kvl"] = {"Kayaw"},
	["kvm"] = {"Kendem"},
	["kvn"] = {"Border Kuna"},
	["kvo"] = {"Dobel"},
	["kvp"] = {"Kompane"},
	["kvq"] = {"Geba Karen"},
	["kvr"] = {"Kerinci"},
	["kvt"] = {"Lahta Karen", "Lahta"},
	["kvu"] = {"Yinbaw Karen"},
	["kvv"] = {"Kola"},
	["kvw"] = {"Wersing"},
	["kvx"] = {"Parkari Koli"},
	["kvy"] = {"Yintale Karen", "Yintale"},
	["kvz"] = {"Tsakwambo", "Tsaukambo"},
	["kwa"] = {"Dâw"},
	["kwb"] = {"Kwa"},
	["kwc"] = {"Likwala"},
	["kwd"] = {"Kwaio"},
	["kwe"] = {"Kwerba"},
	["kwf"] = {"Kwara'ae"},
	["kwg"] = {"Sara Kaba Deme"},
	["kwh"] = {"Kowiai"},
	["kwi"] = {"Awa-Cuaiquer"},
	["kwj"] = {"Kwanga"},
	["kwk"] = {"Kwakiutl"},
	["kwl"] = {"Kofyar"},
	["kwm"] = {"Kwambi"},
	["kwn"] = {"Kwangali"},
	["kwo"] = {"Kwomtari"},
	["kwp"] = {"Kodia"},
	["kwr"] = {"Kwer"},
	["kws"] = {"Kwese"},
	["kwt"] = {"Kwesten"},
	["kwu"] = {"Kwakum"},
	["kwv"] = {"Sara Kaba Náà"},
	["kww"] = {"Kwinti"},
	["kwx"] = {"Khirwar"},
	["kwy"] = {"San Salvador Kongo"},
	["kwz"] = {"Kwadi"},
	["kxa"] = {"Kairiru"},
	["kxb"] = {"Krobu"},
	["kxc"] = {"Konso", "Khonso"},
	["kxd"] = {"Brunei"},
	["kxf"] = {"Manumanaw Karen", "Manumanaw"},
	["kxh"] = {"Karo (Ethiopia)"},
	["kxi"] = {"Keningau Murut"},
	["kxj"] = {"Kulfa"},
	["kxk"] = {"Zayein Karen"},
	["kxm"] = {"Northern Khmer"},
	["kxn"] = {"Kanowit-Tanjong Melanau"},
	["kxo"] = {"Kanoé"},
	["kxp"] = {"Wadiyara Koli"},
	["kxq"] = {"Smärky Kanum"},
	["kxr"] = {"Koro (Papua New Guinea)"},
	["kxs"] = {"Kangjia"},
	["kxt"] = {"Koiwat"},
	["kxv"] = {"Kuvi"},
	["kxw"] = {"Konai"},
	["kxx"] = {"Likuba"},
	["kxy"] = {"Kayong"},
	["kxz"] = {"Kerewo"},
	["kya"] = {"Kwaya"},
	["kyb"] = {"Butbut Kalinga"},
	["kyc"] = {"Kyaka"},
	["kyd"] = {"Karey"},
	["kye"] = {"Krache"},
	["kyf"] = {"Kouya"},
	["kyg"] = {"Keyagana"},
	["kyh"] = {"Karok"},
	["kyi"] = {"Kiput"},
	["kyj"] = {"Karao"},
	["kyk"] = {"Kamayo"},
	["kyl"] = {"Kalapuya"},
	["kym"] = {"Kpatili"},
	["kyn"] = {"Northern Binukidnon"},
	["kyo"] = {"Kelon"},
	["kyp"] = {"Kang"},
	["kyq"] = {"Kenga"},
	["kyr"] = {"Kuruáya"},
	["kys"] = {"Baram Kayan"},
	["kyt"] = {"Kayagar"},
	["kyu"] = {"Western Kayah"},
	["kyv"] = {"Kayort"},
	["kyw"] = {"Kudmali"},
	["kyx"] = {"Rapoisi"},
	["kyy"] = {"Kambaira"},
	["kyz"] = {"Kayabí"},
	["kza"] = {"Western Karaboro"},
	["kzb"] = {"Kaibobo"},
	["kzc"] = {"Bondoukou Kulango"},
	["kzd"] = {"Kadai"},
	["kze"] = {"Kosena"},
	["kzf"] = {"Da'a Kaili"},
	["kzg"] = {"Kikai"},
	["kzi"] = {"Kelabit"},
	["kzk"] = {"Kazukuru"},
	["kzl"] = {"Kayeli"},
	["kzm"] = {"Kais"},
	["kzn"] = {"Kokola"},
	["kzo"] = {"Kaningi"},
	["kzp"] = {"Kaidipang"},
	["kzq"] = {"Kaike"},
	["kzr"] = {"Karang"},
	["kzs"] = {"Sugut Dusun"},
	["kzu"] = {"Kayupulau"},
	["kzv"] = {"Komyandaret"},
	["kzw"] = {"Karirí-Xocó"},
	["kzx"] = {"Kamarian"},
	["kzy"] = {"Kango (Tshopo District)"},
	["kzz"] = {"Kalabra"},
	["laa"] = {"Southern Subanen"},
	["lab"] = {"Linear A"},
	["lac"] = {"Lacandon"},
	["lad"] = {"Ladino"},
	["lae"] = {"Pattani"},
	["laf"] = {"Lafofa"},
	["lag"] = {"Rangi"},
	["lah"] = {"Lahnda"},
	["lai"] = {"Lambya"},
	["laj"] = {"Lango (Uganda)"},
	["lal"] = {"Lalia"},
	["lam"] = {"Lamba"},
	["lan"] = {"Laru"},
	["lap"] = {"Laka (Chad)"},
	["laq"] = {"Qabiao"},
	["lar"] = {"Larteh"},
	["las"] = {"Lama (Togo)"},
	["lau"] = {"Laba"},
	["law"] = {"Lauje"},
	["lax"] = {"Tiwa"},
	["lay"] = {"Lama Bai"},
	["laz"] = {"Aribwatsa"},
	["lbb"] = {"Label"},
	["lbc"] = {"Lakkia"},
	["lbe"] = {"Lak"},
	["lbf"] = {"Tinani"},
	["lbg"] = {"Laopang"},
	["lbi"] = {"La'bi"},
	["lbj"] = {"Ladakhi"},
	["lbk"] = {"Central Bontok"},
	["lbl"] = {"Libon Bikol"},
	["lbm"] = {"Lodhi"},
	["lbn"] = {"Rmeet"},
	["lbo"] = {"Laven"},
	["lbq"] = {"Wampar"},
	["lbr"] = {"Lohorung"},
	["lbs"] = {"Libyan Sign Language"},
	["lbt"] = {"Lachi"},
	["lbu"] = {"Labu"},
	["lbv"] = {"Lavatbura-Lamusong"},
	["lbw"] = {"Tolaki"},
	["lbx"] = {"Lawangan"},
	["lby"] = {"Lamalama", "Lamu-Lamu"},
	["lbz"] = {"Lardil"},
	["lcc"] = {"Legenyem"},
	["lcd"] = {"Lola"},
	["lce"] = {"Loncong", "Sekak"},
	["lcf"] = {"Lubu"},
	["lch"] = {"Luchazi"},
	["lcl"] = {"Lisela"},
	["lcm"] = {"Tungag"},
	["lcp"] = {"Western Lawa"},
	["lcq"] = {"Luhu"},
	["lcs"] = {"Lisabata-Nuniali"},
	["lda"] = {"Kla-Dan"},
	["ldb"] = {"Dũya"},
	["ldd"] = {"Luri"},
	["ldg"] = {"Lenyima"},
	["ldh"] = {"Lamja-Dengsa-Tola"},
	["ldi"] = {"Laari"},
	["ldj"] = {"Lemoro"},
	["ldk"] = {"Leelau"},
	["ldl"] = {"Kaan"},
	["ldm"] = {"Landoma"},
	["ldn"] = {"Láadan"},
	["ldo"] = {"Loo"},
	["ldp"] = {"Tso"},
	["ldq"] = {"Lufu"},
	["lea"] = {"Lega-Shabunda"},
	["leb"] = {"Lala-Bisa"},
	["lec"] = {"Leco"},
	["led"] = {"Lendu"},
	["lee"] = {"Lyélé"},
	["lef"] = {"Lelemi"},
	["leh"] = {"Lenje"},
	["lei"] = {"Lemio"},
	["lej"] = {"Lengola"},
	["lek"] = {"Leipon"},
	["lel"] = {"Lele (Democratic Republic of Congo)"},
	["lem"] = {"Nomaande"},
	["len"] = {"Lenca"},
	["leo"] = {"Leti (Cameroon)"},
	["lep"] = {"Lepcha"},
	["leq"] = {"Lembena"},
	["ler"] = {"Lenkau"},
	["les"] = {"Lese"},
	["let"] = {"Lesing-Gelimi", "Amio-Gelimi"},
	["leu"] = {"Kara (Papua New Guinea)"},
	["lev"] = {"Lamma"},
	["lew"] = {"Ledo Kaili"},
	["lex"] = {"Luang"},
	["ley"] = {"Lemolang"},
	["lez"] = {"Lezghian"},
	["lfa"] = {"Lefa"},
	["lfn"] = {"Lingua Franca Nova"},
	["lga"] = {"Lungga"},
	["lgb"] = {"Laghu"},
	["lgg"] = {"Lugbara"},
	["lgh"] = {"Laghuu"},
	["lgi"] = {"Lengilu"},
	["lgk"] = {"Lingarak", "Neverver"},
	["lgl"] = {"Wala"},
	["lgm"] = {"Lega-Mwenga"},
	["lgn"] = {"T'apo", "Opuuo"},
	["lgo"] = {"Lango (South Sudan)"},
	["lgq"] = {"Logba"},
	["lgr"] = {"Lengo"},
	["lgs"] = {"Guinea-Bissau Sign Language", "Língua Gestual Guineense"},
	["lgt"] = {"Pahi"},
	["lgu"] = {"Longgu"},
	["lgz"] = {"Ligenza"},
	["lha"] = {"Laha (Viet Nam)"},
	["lhh"] = {"Laha (Indonesia)"},
	["lhi"] = {"Lahu Shi"},
	["lhl"] = {"Lahul Lohar"},
	["lhm"] = {"Lhomi"},
	["lhn"] = {"Lahanan"},
	["lhp"] = {"Lhokpu"},
	["lhs"] = {"Mlahsö"},
	["lht"] = {"Lo-Toga"},
	["lhu"] = {"Lahu"},
	["lia"] = {"West-Central Limba"},
	["lib"] = {"Likum"},
	["lic"] = {"Hlai"},
	["lid"] = {"Nyindrou"},
	["lie"] = {"Likila"},
	["lif"] = {"Limbu"},
	["lig"] = {"Ligbi"},
	["lih"] = {"Lihir"},
	["lij"] = {"Ligurian"},
	["lik"] = {"Lika"},
	["lil"] = {"Lillooet"},
	["lio"] = {"Liki"},
	["lip"] = {"Sekpele"},
	["liq"] = {"Libido"},
	["lir"] = {"Liberian English"},
	["lis"] = {"Lisu"},
	["liu"] = {"Logorik"},
	["liv"] = {"Liv"},
	["liw"] = {"Col"},
	["lix"] = {"Liabuku"},
	["liy"] = {"Banda-Bambari"},
	["liz"] = {"Libinza"},
	["lja"] = {"Golpa"},
	["lje"] = {"Rampi"},
	["lji"] = {"Laiyolo"},
	["ljl"] = {"Li'o"},
	["ljp"] = {"Lampung Api"},
	["ljw"] = {"Yirandali"},
	["ljx"] = {"Yuru"},
	["lka"] = {"Lakalei"},
	["lkb"] = {"Kabras", "Lukabaras"},
	["lkc"] = {"Kucong"},
	["lkd"] = {"Lakondê"},
	["lke"] = {"Kenyi"},
	["lkh"] = {"Lakha"},
	["lki"] = {"Laki"},
	["lkj"] = {"Remun"},
	["lkl"] = {"Laeko-Libuat"},
	["lkm"] = {"Kalaamaya"},
	["lkn"] = {"Lakon", "Vure"},
	["lko"] = {"Khayo", "Olukhayo"},
	["lkr"] = {"Päri"},
	["lks"] = {"Kisa", "Olushisa"},
	["lkt"] = {"Lakota"},
	["lku"] = {"Kungkari"},
	["lky"] = {"Lokoya"},
	["lla"] = {"Lala-Roba"},
	["llb"] = {"Lolo"},
	["llc"] = {"Lele (Guinea)"},
	["lld"] = {"Ladin"},
	["lle"] = {"Lele (Papua New Guinea)"},
	["llf"] = {"Hermit"},
	["llg"] = {"Lole"},
	["llh"] = {"Lamu"},
	["lli"] = {"Teke-Laali"},
	["llj"] = {"Ladji Ladji"},
	["llk"] = {"Lelak"},
	["lll"] = {"Lilau"},
	["llm"] = {"Lasalimu"},
	["lln"] = {"Lele (Chad)"},
	["llp"] = {"North Efate"},
	["llq"] = {"Lolak"},
	["lls"] = {"Lithuanian Sign Language"},
	["llu"] = {"Lau"},
	["llx"] = {"Lauan"},
	["lma"] = {"East Limba"},
	["lmb"] = {"Merei"},
	["lmc"] = {"Limilngan"},
	["lmd"] = {"Lumun"},
	["lme"] = {"Pévé"},
	["lmf"] = {"South Lembata"},
	["lmg"] = {"Lamogai"},
	["lmh"] = {"Lambichhong"},
	["lmi"] = {"Lombi"},
	["lmj"] = {"West Lembata"},
	["lmk"] = {"Lamkang"},
	["lml"] = {"Hano"},
	["lmn"] = {"Lambadi"},
	["lmo"] = {"Lombard"},
	["lmp"] = {"Limbum"},
	["lmq"] = {"Lamatuka"},
	["lmr"] = {"Lamalera"},
	["lmu"] = {"Lamenu"},
	["lmv"] = {"Lomaiviti"},
	["lmw"] = {"Lake Miwok"},
	["lmx"] = {"Laimbue"},
	["lmy"] = {"Lamboya"},
	["lna"] = {"Langbashe"},
	["lnb"] = {"Mbalanhu"},
	["lnd"] = {"Lundayeh", "Lun Bawang"},
	["lng"] = {"Langobardic"},
	["lnh"] = {"Lanoh"},
	["lni"] = {"Daantanai'"},
	["lnj"] = {"Leningitij"},
	["lnl"] = {"South Central Banda"},
	["lnm"] = {"Langam"},
	["lnn"] = {"Lorediakarkar"},
	["lns"] = {"Lamnso'"},
	["lnu"] = {"Longuda"},
	["lnw"] = {"Lanima"},
	["lnz"] = {"Lonzo"},
	["loa"] = {"Loloda"},
	["lob"] = {"Lobi"},
	["loc"] = {"Inonhan"},
	["loe"] = {"Saluan"},
	["lof"] = {"Logol"},
	["log"] = {"Logo"},
	["loh"] = {"Laarim", "Narim"},
	["loi"] = {"Loma (Côte d'Ivoire)"},
	["loj"] = {"Lou"},
	["lok"] = {"Loko"},
	["lol"] = {"Mongo"},
	["lom"] = {"Loma (Liberia)"},
	["lon"] = {"Malawi Lomwe"},
	["loo"] = {"Lombo"},
	["lop"] = {"Lopa"},
	["loq"] = {"Lobala"},
	["lor"] = {"Téén"},
	["los"] = {"Loniu"},
	["lot"] = {"Otuho"},
	["lou"] = {"Louisiana Creole"},
	["lov"] = {"Lopi"},
	["low"] = {"Tampias Lobu"},
	["lox"] = {"Loun"},
	["loy"] = {"Loke"},
	["loz"] = {"Lozi"},
	["lpa"] = {"Lelepa"},
	["lpe"] = {"Lepki"},
	["lpn"] = {"Long Phuri Naga"},
	["lpo"] = {"Lipo"},
	["lpx"] = {"Lopit"},
	["lqr"] = {"Logir"},
	["lra"] = {"Rara Bakati'"},
	["lrc"] = {"Northern Luri"},
	["lre"] = {"Laurentian"},
	["lrg"] = {"Laragia"},
	["lri"] = {"Marachi", "Olumarachi"},
	["lrk"] = {"Loarki"},
	["lrl"] = {"Lari"},
	["lrm"] = {"Marama", "Olumarama"},
	["lrn"] = {"Lorang"},
	["lro"] = {"Laro"},
	["lrr"] = {"Southern Yamphu"},
	["lrt"] = {"Larantuka Malay"},
	["lrv"] = {"Larevat"},
	["lrz"] = {"Lemerig"},
	["lsa"] = {"Lasgerdi"},
	["lsb"] = {"Burundian Sign Language", "Langue des Signes Burundaise"},
	["lsc"] = {"Albarradas Sign Language", "Lengua de señas Albarradas"},
	["lsd"] = {"Lishana Deni"},
	["lse"] = {"Lusengo"},
	["lsh"] = {"Lish"},
	["lsi"] = {"Lashi"},
	["lsl"] = {"Latvian Sign Language"},
	["lsm"] = {"Saamia", "Olusamia"},
	["lsn"] = {"Tibetan Sign Language"},
	["lso"] = {"Laos Sign Language"},
	["lsp"] = {"Panamanian Sign Language", "Lengua de Señas Panameñas"},
	["lsr"] = {"Aruop"},
	["lss"] = {"Lasi"},
	["lst"] = {"Trinidad and Tobago Sign Language"},
	["lsv"] = {"Sivia Sign Language"},
	["lsw"] = {"Seychelles Sign Language", "Lalang Siny Seselwa", "Langue des Signes Seychelloise"},
	["lsy"] = {"Mauritian Sign Language"},
	["ltc"] = {"Late Middle Chinese"},
	["ltg"] = {"Latgalian"},
	["lth"] = {"Thur"},
	["lti"] = {"Leti (Indonesia)"},
	["ltn"] = {"Latundê"},
	["lto"] = {"Tsotso", "Olutsotso"},
	["lts"] = {"Tachoni", "Lutachoni"},
	["ltu"] = {"Latu"},
	["lua"] = {"Luba-Lulua"},
	["luc"] = {"Aringa"},
	["lud"] = {"Ludian"},
	["lue"] = {"Luvale"},
	["luf"] = {"Laua"},
	["lui"] = {"Luiseno"},
	["luj"] = {"Luna"},
	["luk"] = {"Lunanakha"},
	["lul"] = {"Olu'bo"},
	["lum"] = {"Luimbi"},
	["lun"] = {"Lunda"},
	["luo"] = {"Luo (Kenya and Tanzania)", "Dholuo"},
	["lup"] = {"Lumbu"},
	["luq"] = {"Lucumi"},
	["lur"] = {"Laura"},
	["lus"] = {"Lushai"},
	["lut"] = {"Lushootseed"},
	["luu"] = {"Lumba-Yakkha"},
	["luv"] = {"Luwati"},
	["luw"] = {"Luo (Cameroon)"},
	["luy"] = {"Luyia", "Oluluyia"},
	["luz"] = {"Southern Luri"},
	["lva"] = {"Maku'a"},
	["lvi"] = {"Lavi"},
	["lvk"] = {"Lavukaleve"},
	["lvl"] = {"Lwel"},
	["lvs"] = {"Standard Latvian"},
	["lvu"] = {"Levuka"},
	["lwa"] = {"Lwalu"},
	["lwe"] = {"Lewo Eleng"},
	["lwg"] = {"Wanga", "Oluwanga"},
	["lwh"] = {"White Lachi"},
	["lwl"] = {"Eastern Lawa"},
	["lwm"] = {"Laomian"},
	["lwo"] = {"Luwo"},
	["lws"] = {"Malawian Sign Language"},
	["lwt"] = {"Lewotobi"},
	["lwu"] = {"Lawu"},
	["lww"] = {"Lewo"},
	["lxm"] = {"Lakurumau"},
	["lya"] = {"Layakha"},
	["lyg"] = {"Lyngngam"},
	["lyn"] = {"Luyana"},
	["lzh"] = {"Literary Chinese"},
	["lzl"] = {"Litzlitz"},
	["lzn"] = {"Leinong Naga"},
	["lzz"] = {"Laz"},
	["maa"] = {"San Jerónimo Tecóatl Mazatec"},
	["mab"] = {"Yutanduchi Mixtec"},
	["mad"] = {"Madurese"},
	["mae"] = {"Bo-Rukul"},
	["maf"] = {"Mafa"},
	["mag"] = {"Magahi"},
	["mai"] = {"Maithili"},
	["maj"] = {"Jalapa De Díaz Mazatec"},
	["mak"] = {"Makasar"},
	["mam"] = {"Mam"},
	["man"] = {"Mandingo", "Manding"},
	["map"] = {"Austronesian languages"},
	["maq"] = {"Chiquihuitlán Mazatec"},
	["mas"] = {"Masai"},
	["mat"] = {"San Francisco Matlatzinca"},
	["mau"] = {"Huautla Mazatec"},
	["mav"] = {"Sateré-Mawé"},
	["maw"] = {"Mampruli"},
	["max"] = {"North Moluccan Malay"},
	["maz"] = {"Central Mazahua"},
	["mba"] = {"Higaonon"},
	["mbb"] = {"Western Bukidnon Manobo"},
	["mbc"] = {"Macushi"},
	["mbd"] = {"Dibabawon Manobo"},
	["mbe"] = {"Molale"},
	["mbf"] = {"Baba Malay"},
	["mbh"] = {"Mangseng"},
	["mbi"] = {"Ilianen Manobo"},
	["mbj"] = {"Nadëb"},
	["mbk"] = {"Malol"},
	["mbl"] = {"Maxakalí"},
	["mbm"] = {"Ombamba"},
	["mbn"] = {"Macaguán"},
	["mbo"] = {"Mbo (Cameroon)"},
	["mbp"] = {"Malayo"},
	["mbq"] = {"Maisin"},
	["mbr"] = {"Nukak Makú"},
	["mbs"] = {"Sarangani Manobo"},
	["mbt"] = {"Matigsalug Manobo"},
	["mbu"] = {"Mbula-Bwazza"},
	["mbv"] = {"Mbulungish"},
	["mbw"] = {"Maring"},
	["mbx"] = {"Mari (East Sepik Province)"},
	["mby"] = {"Memoni"},
	["mbz"] = {"Amoltepec Mixtec"},
	["mca"] = {"Maca"},
	["mcb"] = {"Machiguenga"},
	["mcc"] = {"Bitur"},
	["mcd"] = {"Sharanahua"},
	["mce"] = {"Itundujia Mixtec"},
	["mcf"] = {"Matsés"},
	["mcg"] = {"Mapoyo"},
	["mch"] = {"Maquiritari"},
	["mci"] = {"Mese"},
	["mcj"] = {"Mvanip"},
	["mck"] = {"Mbunda"},
	["mcl"] = {"Macaguaje"},
	["mcm"] = {"Malaccan Creole Portuguese"},
	["mcn"] = {"Masana"},
	["mco"] = {"Coatlán Mixe"},
	["mcp"] = {"Makaa"},
	["mcq"] = {"Ese"},
	["mcr"] = {"Menya"},
	["mcs"] = {"Mambai"},
	["mct"] = {"Mengisa"},
	["mcu"] = {"Cameroon Mambila"},
	["mcv"] = {"Minanibai"},
	["mcw"] = {"Mawa (Chad)"},
	["mcx"] = {"Mpiemo"},
	["mcy"] = {"South Watut"},
	["mcz"] = {"Mawan"},
	["mda"] = {"Mada (Nigeria)"},
	["mdb"] = {"Morigi"},
	["mdc"] = {"Male (Papua New Guinea)"},
	["mdd"] = {"Mbum"},
	["mde"] = {"Maba (Chad)"},
	["mdf"] = {"Moksha"},
	["mdg"] = {"Massalat"},
	["mdh"] = {"Maguindanaon"},
	["mdi"] = {"Mamvu"},
	["mdj"] = {"Mangbetu"},
	["mdk"] = {"Mangbutu"},
	["mdl"] = {"Maltese Sign Language"},
	["mdm"] = {"Mayogo"},
	["mdn"] = {"Mbati"},
	["mdp"] = {"Mbala"},
	["mdq"] = {"Mbole"},
	["mdr"] = {"Mandar"},
	["mds"] = {"Maria (Papua New Guinea)"},
	["mdt"] = {"Mbere"},
	["mdu"] = {"Mboko"},
	["mdv"] = {"Santa Lucía Monteverde Mixtec"},
	["mdw"] = {"Mbosi"},
	["mdx"] = {"Dizin"},
	["mdy"] = {"Male (Ethiopia)"},
	["mdz"] = {"Suruí Do Pará"},
	["mea"] = {"Menka"},
	["meb"] = {"Ikobi"},
	["mec"] = {"Marra"},
	["med"] = {"Melpa"},
	["mee"] = {"Mengen"},
	["mef"] = {"Megam"},
	["meh"] = {"Southwestern Tlaxiaco Mixtec"},
	["mei"] = {"Midob"},
	["mej"] = {"Meyah"},
	["mek"] = {"Mekeo"},
	["mel"] = {"Central Melanau"},
	["mem"] = {"Mangala"},
	["men"] = {"Mende (Sierra Leone)"},
	["meo"] = {"Kedah Malay"},
	["mep"] = {"Miriwoong"},
	["meq"] = {"Merey"},
	["mer"] = {"Meru"},
	["mes"] = {"Masmaje"},
	["met"] = {"Mato"},
	["meu"] = {"Motu"},
	["mev"] = {"Mano"},
	["mew"] = {"Maaka"},
	["mey"] = {"Hassaniyya"},
	["mez"] = {"Menominee"},
	["mfa"] = {"Pattani Malay"},
	["mfb"] = {"Bangka"},
	["mfc"] = {"Mba"},
	["mfd"] = {"Mendankwe-Nkwen"},
	["mfe"] = {"Morisyen"},
	["mff"] = {"Naki"},
	["mfg"] = {"Mogofin"},
	["mfh"] = {"Matal"},
	["mfi"] = {"Wandala"},
	["mfj"] = {"Mefele"},
	["mfk"] = {"North Mofu"},
	["mfl"] = {"Putai"},
	["mfm"] = {"Marghi South"},
	["mfn"] = {"Cross River Mbembe"},
	["mfo"] = {"Mbe"},
	["mfp"] = {"Makassar Malay"},
	["mfq"] = {"Moba"},
	["mfr"] = {"Marrithiyel"},
	["mfs"] = {"Mexican Sign Language"},
	["mft"] = {"Mokerang"},
	["mfu"] = {"Mbwela"},
	["mfv"] = {"Mandjak"},
	["mfw"] = {"Mulaha"},
	["mfx"] = {"Melo"},
	["mfy"] = {"Mayo"},
	["mfz"] = {"Mabaan"},
	["mga"] = {"Middle Irish (900-1200)"},
	["mgb"] = {"Mararit"},
	["mgc"] = {"Morokodo"},
	["mgd"] = {"Moru"},
	["mge"] = {"Mango"},
	["mgf"] = {"Maklew"},
	["mgg"] = {"Mpumpong"},
	["mgh"] = {"Makhuwa-Meetto"},
	["mgi"] = {"Lijili"},
	["mgj"] = {"Abureni"},
	["mgk"] = {"Mawes"},
	["mgl"] = {"Maleu-Kilenge"},
	["mgm"] = {"Mambae"},
	["mgn"] = {"Mbangi"},
	["mgo"] = {"Meta'"},
	["mgp"] = {"Eastern Magar"},
	["mgq"] = {"Malila"},
	["mgr"] = {"Mambwe-Lungu"},
	["mgs"] = {"Manda (Tanzania)"},
	["mgt"] = {"Mongol"},
	["mgu"] = {"Mailu"},
	["mgv"] = {"Matengo"},
	["mgw"] = {"Matumbi"},
	["mgy"] = {"Mbunga"},
	["mgz"] = {"Mbugwe"},
	["mha"] = {"Manda (India)"},
	["mhb"] = {"Mahongwe"},
	["mhc"] = {"Mocho"},
	["mhd"] = {"Mbugu"},
	["mhe"] = {"Besisi", "Mah Meri"},
	["mhf"] = {"Mamaa"},
	["mhg"] = {"Margu"},
	["mhi"] = {"Ma'di"},
	["mhj"] = {"Mogholi"},
	["mhk"] = {"Mungaka"},
	["mhl"] = {"Mauwake"},
	["mhm"] = {"Makhuwa-Moniga"},
	["mhn"] = {"Mócheno"},
	["mho"] = {"Mashi (Zambia)"},
	["mhp"] = {"Balinese Malay"},
	["mhq"] = {"Mandan"},
	["mhr"] = {"Eastern Mari"},
	["mhs"] = {"Buru (Indonesia)"},
	["mht"] = {"Mandahuaca"},
	["mhu"] = {"Digaro-Mishmi", "Darang Deng"},
	["mhw"] = {"Mbukushu"},
	["mhx"] = {"Maru", "Lhaovo"},
	["mhy"] = {"Ma'anyan"},
	["mhz"] = {"Mor (Mor Islands)"},
	["mia"] = {"Miami"},
	["mib"] = {"Atatláhuca Mixtec"},
	["mic"] = {"Mi'kmaq", "Micmac"},
	["mid"] = {"Mandaic"},
	["mie"] = {"Ocotepec Mixtec"},
	["mif"] = {"Mofu-Gudur"},
	["mig"] = {"San Miguel El Grande Mixtec"},
	["mih"] = {"Chayuco Mixtec"},
	["mii"] = {"Chigmecatitlán Mixtec"},
	["mij"] = {"Abar", "Mungbam"},
	["mik"] = {"Mikasuki"},
	["mil"] = {"Peñoles Mixtec"},
	["mim"] = {"Alacatlatzala Mixtec"},
	["min"] = {"Minangkabau"},
	["mio"] = {"Pinotepa Nacional Mixtec"},
	["mip"] = {"Apasco-Apoala Mixtec"},
	["miq"] = {"Mískito"},
	["mir"] = {"Isthmus Mixe"},
	["mis"] = {"Uncoded languages"},
	["mit"] = {"Southern Puebla Mixtec"},
	["miu"] = {"Cacaloxtepec Mixtec"},
	["miw"] = {"Akoye"},
	["mix"] = {"Mixtepec Mixtec"},
	["miy"] = {"Ayutla Mixtec"},
	["miz"] = {"Coatzospan Mixtec"},
	["mjb"] = {"Makalero"},
	["mjc"] = {"San Juan Colorado Mixtec"},
	["mjd"] = {"Northwest Maidu"},
	["mje"] = {"Muskum"},
	["mjg"] = {"Tu"},
	["mjh"] = {"Mwera (Nyasa)"},
	["mji"] = {"Kim Mun"},
	["mjj"] = {"Mawak"},
	["mjk"] = {"Matukar"},
	["mjl"] = {"Mandeali"},
	["mjm"] = {"Medebur"},
	["mjn"] = {"Ma (Papua New Guinea)"},
	["mjo"] = {"Malankuravan"},
	["mjp"] = {"Malapandaram"},
	["mjq"] = {"Malaryan"},
	["mjr"] = {"Malavedan"},
	["mjs"] = {"Miship"},
	["mjt"] = {"Sauria Paharia"},
	["mju"] = {"Manna-Dora"},
	["mjv"] = {"Mannan"},
	["mjw"] = {"Karbi"},
	["mjx"] = {"Mahali"},
	["mjy"] = {"Mahican"},
	["mjz"] = {"Majhi"},
	["mka"] = {"Mbre"},
	["mkb"] = {"Mal Paharia"},
	["mkc"] = {"Siliput"},
	["mke"] = {"Mawchi"},
	["mkf"] = {"Miya"},
	["mkg"] = {"Mak (China)"},
	["mkh"] = {"Mon-Khmer languages"},
	["mki"] = {"Dhatki"},
	["mkj"] = {"Mokilese"},
	["mkk"] = {"Byep"},
	["mkl"] = {"Mokole"},
	["mkm"] = {"Moklen"},
	["mkn"] = {"Kupang Malay"},
	["mko"] = {"Mingang Doso"},
	["mkp"] = {"Moikodi"},
	["mkq"] = {"Bay Miwok"},
	["mkr"] = {"Malas"},
	["mks"] = {"Silacayoapan Mixtec"},
	["mkt"] = {"Vamale"},
	["mku"] = {"Konyanka Maninka"},
	["mkv"] = {"Mafea"},
	["mkw"] = {"Kituba (Congo)"},
	["mkx"] = {"Kinamiging Manobo"},
	["mky"] = {"East Makian"},
	["mkz"] = {"Makasae"},
	["mla"] = {"Malo"},
	["mlb"] = {"Mbule"},
	["mlc"] = {"Cao Lan"},
	["mle"] = {"Manambu"},
	["mlf"] = {"Mal"},
	["mlh"] = {"Mape"},
	["mli"] = {"Malimpung"},
	["mlj"] = {"Miltu"},
	["mlk"] = {"Ilwana", "Kiwilwana"},
	["mll"] = {"Malua Bay"},
	["mlm"] = {"Mulam"},
	["mln"] = {"Malango"},
	["mlo"] = {"Mlomp"},
	["mlp"] = {"Bargam"},
	["mlq"] = {"Western Maninkakan"},
	["mlr"] = {"Vame"},
	["mls"] = {"Masalit"},
	["mlu"] = {"To'abaita"},
	["mlv"] = {"Motlav", "Mwotlap"},
	["mlw"] = {"Moloko"},
	["mlx"] = {"Malfaxal", "Naha'ai"},
	["mlz"] = {"Malaynon"},
	["mma"] = {"Mama"},
	["mmb"] = {"Momina"},
	["mmc"] = {"Michoacán Mazahua"},
	["mmd"] = {"Maonan"},
	["mme"] = {"Mae"},
	["mmf"] = {"Mundat"},
	["mmg"] = {"North Ambrym"},
	["mmh"] = {"Mehináku"},
	["mmi"] = {"Musar"},
	["mmj"] = {"Majhwar"},
	["mmk"] = {"Mukha-Dora"},
	["mml"] = {"Man Met"},
	["mmm"] = {"Maii"},
	["mmn"] = {"Mamanwa"},
	["mmo"] = {"Mangga Buang"},
	["mmp"] = {"Siawi"},
	["mmq"] = {"Musak"},
	["mmr"] = {"Western Xiangxi Miao"},
	["mmt"] = {"Malalamai"},
	["mmu"] = {"Mmaala"},
	["mmv"] = {"Miriti"},
	["mmw"] = {"Emae"},
	["mmx"] = {"Madak"},
	["mmy"] = {"Migaama"},
	["mmz"] = {"Mabaale"},
	["mna"] = {"Mbula"},
	["mnb"] = {"Muna"},
	["mnc"] = {"Manchu"},
	["mnd"] = {"Mondé"},
	["mne"] = {"Naba"},
	["mnf"] = {"Mundani"},
	["mng"] = {"Eastern Mnong"},
	["mnh"] = {"Mono (Democratic Republic of Congo)"},
	["mni"] = {"Manipuri"},
	["mnj"] = {"Munji"},
	["mnk"] = {"Mandinka"},
	["mnl"] = {"Tiale"},
	["mnm"] = {"Mapena"},
	["mnn"] = {"Southern Mnong"},
	["mno"] = {"Manobo languages"},
	["mnp"] = {"Min Bei Chinese"},
	["mnq"] = {"Minriq"},
	["mnr"] = {"Mono (USA)"},
	["mns"] = {"Mansi"},
	["mnu"] = {"Mer"},
	["mnv"] = {"Rennell-Bellona"},
	["mnw"] = {"Mon"},
	["mnx"] = {"Manikion"},
	["mny"] = {"Manyawa"},
	["mnz"] = {"Moni"},
	["moa"] = {"Mwan"},
	["moc"] = {"Mocoví"},
	["mod"] = {"Mobilian"},
	["moe"] = {"Innu", "Montagnais"},
	["mog"] = {"Mongondow"},
	["moh"] = {"Mohawk"},
	["moi"] = {"Mboi"},
	["moj"] = {"Monzombo"},
	["mok"] = {"Morori"},
	["mom"] = {"Mangue"},
	["moo"] = {"Monom"},
	["mop"] = {"Mopán Maya"},
	["moq"] = {"Mor (Bomberai Peninsula)"},
	["mor"] = {"Moro"},
	["mos"] = {"Mossi"},
	["mot"] = {"Barí"},
	["mou"] = {"Mogum"},
	["mov"] = {"Mohave"},
	["mow"] = {"Moi (Congo)"},
	["mox"] = {"Molima"},
	["moy"] = {"Shekkacho"},
	["moz"] = {"Mukulu", "Gergiko"},
	["mpa"] = {"Mpoto"},
	["mpb"] = {"Malak Malak", "Mullukmulluk"},
	["mpc"] = {"Mangarrayi"},
	["mpd"] = {"Machinere"},
	["mpe"] = {"Majang"},
	["mpg"] = {"Marba"},
	["mph"] = {"Maung"},
	["mpi"] = {"Mpade"},
	["mpj"] = {"Martu Wangka", "Wangkajunga"},
	["mpk"] = {"Mbara (Chad)"},
	["mpl"] = {"Middle Watut"},
	["mpm"] = {"Yosondúa Mixtec"},
	["mpn"] = {"Mindiri"},
	["mpo"] = {"Miu"},
	["mpp"] = {"Migabac"},
	["mpq"] = {"Matís"},
	["mpr"] = {"Vangunu"},
	["mps"] = {"Dadibi"},
	["mpt"] = {"Mian"},
	["mpu"] = {"Makuráp"},
	["mpv"] = {"Mungkip"},
	["mpw"] = {"Mapidian"},
	["mpx"] = {"Misima-Panaeati"},
	["mpy"] = {"Mapia"},
	["mpz"] = {"Mpi"},
	["mqa"] = {"Maba (Indonesia)"},
	["mqb"] = {"Mbuko"},
	["mqc"] = {"Mangole"},
	["mqe"] = {"Matepi"},
	["mqf"] = {"Momuna"},
	["mqg"] = {"Kota Bangun Kutai Malay"},
	["mqh"] = {"Tlazoyaltepec Mixtec"},
	["mqi"] = {"Mariri"},
	["mqj"] = {"Mamasa"},
	["mqk"] = {"Rajah Kabunsuwan Manobo"},
	["mql"] = {"Mbelime"},
	["mqm"] = {"South Marquesan"},
	["mqn"] = {"Moronene"},
	["mqo"] = {"Modole"},
	["mqp"] = {"Manipa"},
	["mqq"] = {"Minokok"},
	["mqr"] = {"Mander"},
	["mqs"] = {"West Makian"},
	["mqt"] = {"Mok"},
	["mqu"] = {"Mandari"},
	["mqv"] = {"Mosimo"},
	["mqw"] = {"Murupi"},
	["mqx"] = {"Mamuju"},
	["mqy"] = {"Manggarai"},
	["mqz"] = {"Pano"},
	["mra"] = {"Mlabri"},
	["mrb"] = {"Marino"},
	["mrc"] = {"Maricopa"},
	["mrd"] = {"Western Magar"},
	["mre"] = {"Martha's Vineyard Sign Language"},
	["mrf"] = {"Elseng"},
	["mrg"] = {"Mising"},
	["mrh"] = {"Mara Chin"},
	["mrj"] = {"Western Mari"},
	["mrk"] = {"Hmwaveke"},
	["mrl"] = {"Mortlockese"},
	["mrm"] = {"Merlav", "Mwerlap"},
	["mrn"] = {"Cheke Holo"},
	["mro"] = {"Mru"},
	["mrp"] = {"Morouas"},
	["mrq"] = {"North Marquesan"},
	["mrr"] = {"Maria (India)"},
	["mrs"] = {"Maragus"},
	["mrt"] = {"Marghi Central"},
	["mru"] = {"Mono (Cameroon)"},
	["mrv"] = {"Mangareva"},
	["mrw"] = {"Maranao"},
	["mrx"] = {"Maremgi", "Dineor"},
	["mry"] = {"Mandaya"},
	["mrz"] = {"Marind"},
	["msb"] = {"Masbatenyo"},
	["msc"] = {"Sankaran Maninka"},
	["msd"] = {"Yucatec Maya Sign Language"},
	["mse"] = {"Musey"},
	["msf"] = {"Mekwei"},
	["msg"] = {"Moraid"},
	["msh"] = {"Masikoro Malagasy"},
	["msi"] = {"Sabah Malay"},
	["msj"] = {"Ma (Democratic Republic of Congo)"},
	["msk"] = {"Mansaka"},
	["msl"] = {"Molof", "Poule"},
	["msm"] = {"Agusan Manobo"},
	["msn"] = {"Vurës"},
	["mso"] = {"Mombum"},
	["msp"] = {"Maritsauá"},
	["msq"] = {"Caac"},
	["msr"] = {"Mongolian Sign Language"},
	["mss"] = {"West Masela"},
	["msu"] = {"Musom"},
	["msv"] = {"Maslam"},
	["msw"] = {"Mansoanka"},
	["msx"] = {"Moresada"},
	["msy"] = {"Aruamu"},
	["msz"] = {"Momare"},
	["mta"] = {"Cotabato Manobo"},
	["mtb"] = {"Anyin Morofo"},
	["mtc"] = {"Munit"},
	["mtd"] = {"Mualang"},
	["mte"] = {"Mono (Solomon Islands)"},
	["mtf"] = {"Murik (Papua New Guinea)"},
	["mtg"] = {"Una"},
	["mth"] = {"Munggui"},
	["mti"] = {"Maiwa (Papua New Guinea)"},
	["mtj"] = {"Moskona"},
	["mtk"] = {"Mbe'"},
	["mtl"] = {"Montol"},
	["mtm"] = {"Mator"},
	["mtn"] = {"Matagalpa"},
	["mto"] = {"Totontepec Mixe"},
	["mtp"] = {"Wichí Lhamtés Nocten"},
	["mtq"] = {"Muong"},
	["mtr"] = {"Mewari"},
	["mts"] = {"Yora"},
	["mtt"] = {"Mota"},
	["mtu"] = {"Tututepec Mixtec"},
	["mtv"] = {"Asaro'o"},
	["mtw"] = {"Southern Binukidnon"},
	["mtx"] = {"Tidaá Mixtec"},
	["mty"] = {"Nabi"},
	["mua"] = {"Mundang"},
	["mub"] = {"Mubi"},
	["muc"] = {"Ajumbu"},
	["mud"] = {"Mednyj Aleut"},
	["mue"] = {"Media Lengua"},
	["mug"] = {"Musgu"},
	["muh"] = {"Mündü"},
	["mui"] = {"Musi"},
	["muj"] = {"Mabire"},
	["muk"] = {"Mugom"},
	["mul"] = {"Multiple languages"},
	["mum"] = {"Maiwala"},
	["mun"] = {"Munda languages"},
	["muo"] = {"Nyong"},
	["mup"] = {"Malvi"},
	["muq"] = {"Eastern Xiangxi Miao"},
	["mur"] = {"Murle"},
	["mus"] = {"Creek"},
	["mut"] = {"Western Muria"},
	["muu"] = {"Yaaku"},
	["muv"] = {"Muthuvan"},
	["mux"] = {"Bo-Ung"},
	["muy"] = {"Muyang"},
	["muz"] = {"Mursi"},
	["mva"] = {"Manam"},
	["mvb"] = {"Mattole"},
	["mvd"] = {"Mamboru"},
	["mve"] = {"Marwari (Pakistan)"},
	["mvf"] = {"Peripheral Mongolian"},
	["mvg"] = {"Yucuañe Mixtec"},
	["mvh"] = {"Mulgi"},
	["mvi"] = {"Miyako"},
	["mvk"] = {"Mekmek"},
	["mvl"] = {"Mbara (Australia)"},
	["mvn"] = {"Minaveha"},
	["mvo"] = {"Marovo"},
	["mvp"] = {"Duri"},
	["mvq"] = {"Moere"},
	["mvr"] = {"Marau"},
	["mvs"] = {"Massep"},
	["mvt"] = {"Mpotovoro"},
	["mvu"] = {"Marfa"},
	["mvv"] = {"Tagal Murut"},
	["mvw"] = {"Machinga"},
	["mvx"] = {"Meoswar"},
	["mvy"] = {"Indus Kohistani"},
	["mvz"] = {"Mesqan"},
	["mwa"] = {"Mwatebu"},
	["mwb"] = {"Juwal"},
	["mwc"] = {"Are"},
	["mwe"] = {"Mwera (Chimwera)"},
	["mwf"] = {"Murrinh-Patha"},
	["mwg"] = {"Aiklep"},
	["mwh"] = {"Mouk-Aria"},
	["mwi"] = {"Labo", "Ninde"},
	["mwk"] = {"Kita Maninkakan"},
	["mwl"] = {"Mirandese"},
	["mwm"] = {"Sar"},
	["mwn"] = {"Nyamwanga"},
	["mwo"] = {"Central Maewo"},
	["mwp"] = {"Kala Lagaw Ya"},
	["mwq"] = {"Mün Chin"},
	["mwr"] = {"Marwari"},
	["mws"] = {"Mwimbi-Muthambi"},
	["mwt"] = {"Moken"},
	["mwu"] = {"Mittu"},
	["mwv"] = {"Mentawai"},
	["mww"] = {"Hmong Daw"},
	["mwz"] = {"Moingi"},
	["mxa"] = {"Northwest Oaxaca Mixtec"},
	["mxb"] = {"Tezoatlán Mixtec"},
	["mxc"] = {"Manyika"},
	["mxd"] = {"Modang"},
	["mxe"] = {"Mele-Fila"},
	["mxf"] = {"Malgbe"},
	["mxg"] = {"Mbangala"},
	["mxh"] = {"Mvuba"},
	["mxi"] = {"Mozarabic"},
	["mxj"] = {"Miju-Mishmi", "Geman Deng"},
	["mxk"] = {"Monumbo"},
	["mxl"] = {"Maxi Gbe"},
	["mxm"] = {"Meramera"},
	["mxn"] = {"Moi (Indonesia)"},
	["mxo"] = {"Mbowe"},
	["mxp"] = {"Tlahuitoltepec Mixe"},
	["mxq"] = {"Juquila Mixe"},
	["mxr"] = {"Murik (Malaysia)"},
	["mxs"] = {"Huitepec Mixtec"},
	["mxt"] = {"Jamiltepec Mixtec"},
	["mxu"] = {"Mada (Cameroon)"},
	["mxv"] = {"Metlatónoc Mixtec"},
	["mxw"] = {"Namo"},
	["mxx"] = {"Mahou", "Mawukakan"},
	["mxy"] = {"Southeastern Nochixtlán Mixtec"},
	["mxz"] = {"Central Masela"},
	["myb"] = {"Mbay"},
	["myc"] = {"Mayeka"},
	["mye"] = {"Myene"},
	["myf"] = {"Bambassi"},
	["myg"] = {"Manta"},
	["myh"] = {"Makah"},
	["myj"] = {"Mangayat"},
	["myk"] = {"Mamara Senoufo"},
	["myl"] = {"Moma"},
	["mym"] = {"Me'en"},
	["myn"] = {"Mayan languages"},
	["myo"] = {"Anfillo"},
	["myp"] = {"Pirahã"},
	["myr"] = {"Muniche"},
	["mys"] = {"Mesmes"},
	["myu"] = {"Mundurukú"},
	["myv"] = {"Erzya"},
	["myw"] = {"Muyuw"},
	["myx"] = {"Masaaba"},
	["myy"] = {"Macuna"},
	["myz"] = {"Classical Mandaic"},
	["mza"] = {"Santa María Zacatepec Mixtec"},
	["mzb"] = {"Tumzabt"},
	["mzc"] = {"Madagascar Sign Language"},
	["mzd"] = {"Malimba"},
	["mze"] = {"Morawa"},
	["mzg"] = {"Monastic Sign Language"},
	["mzh"] = {"Wichí Lhamtés Güisnay"},
	["mzi"] = {"Ixcatlán Mazatec"},
	["mzj"] = {"Manya"},
	["mzk"] = {"Nigeria Mambila"},
	["mzl"] = {"Mazatlán Mixe"},
	["mzm"] = {"Mumuye"},
	["mzn"] = {"Mazanderani"},
	["mzo"] = {"Matipuhy"},
	["mzp"] = {"Movima"},
	["mzq"] = {"Mori Atas"},
	["mzr"] = {"Marúbo"},
	["mzs"] = {"Macanese"},
	["mzt"] = {"Mintil"},
	["mzu"] = {"Inapang"},
	["mzv"] = {"Manza"},
	["mzw"] = {"Deg"},
	["mzx"] = {"Mawayana"},
	["mzy"] = {"Mozambican Sign Language"},
	["mzz"] = {"Maiadomu"},
	["naa"] = {"Namla"},
	["nab"] = {"Southern Nambikuára"},
	["nac"] = {"Narak"},
	["nae"] = {"Naka'ela"},
	["naf"] = {"Nabak"},
	["nag"] = {"Naga Pidgin"},
	["nah"] = {"Nahuatl languages"},
	["nai"] = {"North American Indian languages"},
	["naj"] = {"Nalu"},
	["nak"] = {"Nakanai"},
	["nal"] = {"Nalik"},
	["nam"] = {"Ngan'gityemerri"},
	["nan"] = {"Min Nan Chinese"},
	["nao"] = {"Naaba"},
	["nap"] = {"Neapolitan"},
	["naq"] = {"Khoekhoe", "Nama (Namibia)"},
	["nar"] = {"Iguta"},
	["nas"] = {"Naasioi"},
	["nat"] = {"Ca̱hungwa̱rya̱", "Hungworo"},
	["naw"] = {"Nawuri"},
	["nax"] = {"Nakwi"},
	["nay"] = {"Ngarrindjeri"},
	["naz"] = {"Coatepec Nahuatl"},
	["nba"] = {"Nyemba"},
	["nbb"] = {"Ndoe"},
	["nbc"] = {"Chang Naga"},
	["nbd"] = {"Ngbinda"},
	["nbe"] = {"Konyak Naga"},
	["nbg"] = {"Nagarchal"},
	["nbh"] = {"Ngamo"},
	["nbi"] = {"Mao Naga"},
	["nbj"] = {"Ngarinyman"},
	["nbk"] = {"Nake"},
	["nbm"] = {"Ngbaka Ma'bo"},
	["nbn"] = {"Kuri"},
	["nbo"] = {"Nkukoli"},
	["nbp"] = {"Nnam"},
	["nbq"] = {"Nggem"},
	["nbr"] = {"Numana"},
	["nbs"] = {"Namibian Sign Language"},
	["nbt"] = {"Na"},
	["nbu"] = {"Rongmei Naga"},
	["nbv"] = {"Ngamambo"},
	["nbw"] = {"Southern Ngbandi"},
	["nby"] = {"Ningera"},
	["nca"] = {"Iyo"},
	["ncb"] = {"Central Nicobarese"},
	["ncc"] = {"Ponam"},
	["ncd"] = {"Nachering"},
	["nce"] = {"Yale"},
	["ncf"] = {"Notsi"},
	["ncg"] = {"Nisga'a"},
	["nch"] = {"Central Huasteca Nahuatl"},
	["nci"] = {"Classical Nahuatl"},
	["ncj"] = {"Northern Puebla Nahuatl"},
	["nck"] = {"Na-kara"},
	["ncl"] = {"Michoacán Nahuatl"},
	["ncm"] = {"Nambo"},
	["ncn"] = {"Nauna"},
	["nco"] = {"Sibe"},
	["ncq"] = {"Northern Katang"},
	["ncr"] = {"Ncane"},
	["ncs"] = {"Nicaraguan Sign Language"},
	["nct"] = {"Chothe Naga"},
	["ncu"] = {"Chumburung"},
	["ncx"] = {"Central Puebla Nahuatl"},
	["ncz"] = {"Natchez"},
	["nda"] = {"Ndasa"},
	["ndb"] = {"Kenswei Nsei"},
	["ndc"] = {"Ndau"},
	["ndd"] = {"Nde-Nsele-Nta"},
	["ndf"] = {"Nadruvian"},
	["ndg"] = {"Ndengereko"},
	["ndh"] = {"Ndali"},
	["ndi"] = {"Samba Leko"},
	["ndj"] = {"Ndamba"},
	["ndk"] = {"Ndaka"},
	["ndl"] = {"Ndolo"},
	["ndm"] = {"Ndam"},
	["ndn"] = {"Ngundi"},
	["ndp"] = {"Ndo"},
	["ndq"] = {"Ndombe"},
	["ndr"] = {"Ndoola"},
	["nds"] = {"Low German", "Low Saxon"},
	["ndt"] = {"Ndunga"},
	["ndu"] = {"Dugun"},
	["ndv"] = {"Ndut"},
	["ndw"] = {"Ndobo"},
	["ndx"] = {"Nduga"},
	["ndy"] = {"Lutos"},
	["ndz"] = {"Ndogo"},
	["nea"] = {"Eastern Ngad'a"},
	["neb"] = {"Toura (Côte d'Ivoire)"},
	["nec"] = {"Nedebang"},
	["ned"] = {"Nde-Gbite"},
	["nee"] = {"Nêlêmwa-Nixumwak"},
	["nef"] = {"Nefamese"},
	["neg"] = {"Negidal"},
	["neh"] = {"Nyenkha"},
	["nei"] = {"Neo-Hittite"},
	["nej"] = {"Neko"},
	["nek"] = {"Neku"},
	["nem"] = {"Nemi"},
	["nen"] = {"Nengone"},
	["neo"] = {"Ná-Meo"},
	["neq"] = {"North Central Mixe"},
	["ner"] = {"Yahadian"},
	["nes"] = {"Bhoti Kinnauri"},
	["net"] = {"Nete"},
	["neu"] = {"Neo"},
	["nev"] = {"Nyaheun"},
	["new"] = {"Newari", "Nepal Bhasa"},
	["nex"] = {"Neme"},
	["ney"] = {"Neyo"},
	["nez"] = {"Nez Perce"},
	["nfa"] = {"Dhao"},
	["nfd"] = {"Ahwai"},
	["nfl"] = {"Ayiwo", "Äiwoo"},
	["nfr"] = {"Nafaanra"},
	["nfu"] = {"Mfumte"},
	["nga"] = {"Ngbaka"},
	["ngb"] = {"Northern Ngbandi"},
	["ngc"] = {"Ngombe (Democratic Republic of Congo)"},
	["ngd"] = {"Ngando (Central African Republic)"},
	["nge"] = {"Ngemba"},
	["ngf"] = {"Trans-New Guinea languages"},
	["ngg"] = {"Ngbaka Manza"},
	["ngh"] = {"Nǁng"},
	["ngi"] = {"Ngizim"},
	["ngj"] = {"Ngie"},
	["ngk"] = {"Dalabon"},
	["ngl"] = {"Lomwe"},
	["ngm"] = {"Ngatik Men's Creole"},
	["ngn"] = {"Ngwo"},
	["ngp"] = {"Ngulu"},
	["ngq"] = {"Ngurimi", "Ngoreme"},
	["ngr"] = {"Engdewu"},
	["ngs"] = {"Gvoko"},
	["ngt"] = {"Kriang", "Ngeq"},
	["ngu"] = {"Guerrero Nahuatl"},
	["ngv"] = {"Nagumi"},
	["ngw"] = {"Ngwaba"},
	["ngx"] = {"Nggwahyi"},
	["ngy"] = {"Tibea"},
	["ngz"] = {"Ngungwel"},
	["nha"] = {"Nhanda"},
	["nhb"] = {"Beng"},
	["nhc"] = {"Tabasco Nahuatl"},
	["nhd"] = {"Chiripá", "Ava Guaraní"},
	["nhe"] = {"Eastern Huasteca Nahuatl"},
	["nhf"] = {"Nhuwala"},
	["nhg"] = {"Tetelcingo Nahuatl"},
	["nhh"] = {"Nahari"},
	["nhi"] = {"Zacatlán-Ahuacatlán-Tepetzintla Nahuatl"},
	["nhk"] = {"Isthmus-Cosoleacaque Nahuatl"},
	["nhm"] = {"Morelos Nahuatl"},
	["nhn"] = {"Central Nahuatl"},
	["nho"] = {"Takuu"},
	["nhp"] = {"Isthmus-Pajapan Nahuatl"},
	["nhq"] = {"Huaxcaleca Nahuatl"},
	["nhr"] = {"Naro"},
	["nht"] = {"Ometepec Nahuatl"},
	["nhu"] = {"Noone"},
	["nhv"] = {"Temascaltepec Nahuatl"},
	["nhw"] = {"Western Huasteca Nahuatl"},
	["nhx"] = {"Isthmus-Mecayapan Nahuatl"},
	["nhy"] = {"Northern Oaxaca Nahuatl"},
	["nhz"] = {"Santa María La Alta Nahuatl"},
	["nia"] = {"Nias"},
	["nib"] = {"Nakame"},
	["nic"] = {"Niger-Kordofanian languages"},
	["nid"] = {"Ngandi"},
	["nie"] = {"Niellim"},
	["nif"] = {"Nek"},
	["nig"] = {"Ngalakgan"},
	["nih"] = {"Nyiha (Tanzania)"},
	["nii"] = {"Nii"},
	["nij"] = {"Ngaju"},
	["nik"] = {"Southern Nicobarese"},
	["nil"] = {"Nila"},
	["nim"] = {"Nilamba"},
	["nin"] = {"Ninzo"},
	["nio"] = {"Nganasan"},
	["niq"] = {"Nandi"},
	["nir"] = {"Nimboran"},
	["nis"] = {"Nimi"},
	["nit"] = {"Southeastern Kolami"},
	["niu"] = {"Niuean"},
	["niv"] = {"Gilyak"},
	["niw"] = {"Nimo"},
	["nix"] = {"Hema"},
	["niy"] = {"Ngiti"},
	["niz"] = {"Ningil"},
	["nja"] = {"Nzanyi"},
	["njb"] = {"Nocte Naga"},
	["njd"] = {"Ndonde Hamba"},
	["njh"] = {"Lotha Naga"},
	["nji"] = {"Gudanji"},
	["njj"] = {"Njen"},
	["njl"] = {"Njalgulgule"},
	["njm"] = {"Angami Naga"},
	["njn"] = {"Liangmai Naga"},
	["njo"] = {"Ao Naga"},
	["njr"] = {"Njerep"},
	["njs"] = {"Nisa"},
	["njt"] = {"Ndyuka-Trio Pidgin"},
	["nju"] = {"Ngadjunmaya"},
	["njx"] = {"Kunyi"},
	["njy"] = {"Njyem"},
	["njz"] = {"Nyishi"},
	["nka"] = {"Nkoya"},
	["nkb"] = {"Khoibu Naga"},
	["nkc"] = {"Nkongho"},
	["nkd"] = {"Koireng"},
	["nke"] = {"Duke"},
	["nkf"] = {"Inpui Naga"},
	["nkg"] = {"Nekgini"},
	["nkh"] = {"Khezha Naga"},
	["nki"] = {"Thangal Naga"},
	["nkj"] = {"Nakai"},
	["nkk"] = {"Nokuku"},
	["nkm"] = {"Namat"},
	["nkn"] = {"Nkangala"},
	["nko"] = {"Nkonya"},
	["nkp"] = {"Niuatoputapu"},
	["nkq"] = {"Nkami"},
	["nkr"] = {"Nukuoro"},
	["nks"] = {"North Asmat"},
	["nkt"] = {"Nyika (Tanzania)"},
	["nku"] = {"Bouna Kulango"},
	["nkv"] = {"Nyika (Malawi and Zambia)"},
	["nkw"] = {"Nkutu"},
	["nkx"] = {"Nkoroo"},
	["nkz"] = {"Nkari"},
	["nla"] = {"Ngombale"},
	["nlc"] = {"Nalca"},
	["nle"] = {"East Nyala"},
	["nlg"] = {"Gela"},
	["nli"] = {"Grangali"},
	["nlj"] = {"Nyali"},
	["nlk"] = {"Ninia Yali"},
	["nll"] = {"Nihali"},
	["nlm"] = {"Mankiyali"},
	["nlo"] = {"Ngul"},
	["nlq"] = {"Lao Naga"},
	["nlu"] = {"Nchumbulu"},
	["nlv"] = {"Orizaba Nahuatl"},
	["nlw"] = {"Walangama"},
	["nlx"] = {"Nahali"},
	["nly"] = {"Nyamal"},
	["nlz"] = {"Nalögo"},
	["nma"] = {"Maram Naga"},
	["nmb"] = {"Big Nambas", "V'ënen Taut"},
	["nmc"] = {"Ngam"},
	["nmd"] = {"Ndumu"},
	["nme"] = {"Mzieme Naga"},
	["nmf"] = {"Tangkhul Naga (India)"},
	["nmg"] = {"Kwasio"},
	["nmh"] = {"Monsang Naga"},
	["nmi"] = {"Nyam"},
	["nmj"] = {"Ngombe (Central African Republic)"},
	["nmk"] = {"Namakura"},
	["nml"] = {"Ndemli"},
	["nmm"] = {"Manangba"},
	["nmn"] = {"ǃXóõ"},
	["nmo"] = {"Moyon Naga"},
	["nmp"] = {"Nimanbur"},
	["nmq"] = {"Nambya"},
	["nmr"] = {"Nimbari"},
	["nms"] = {"Letemboi"},
	["nmt"] = {"Namonuito"},
	["nmu"] = {"Northeast Maidu"},
	["nmv"] = {"Ngamini"},
	["nmw"] = {"Nimoa", "Rifao"},
	["nmx"] = {"Nama (Papua New Guinea)"},
	["nmy"] = {"Namuyi"},
	["nmz"] = {"Nawdm"},
	["nna"] = {"Nyangumarta"},
	["nnb"] = {"Nande"},
	["nnc"] = {"Nancere"},
	["nnd"] = {"West Ambae"},
	["nne"] = {"Ngandyera"},
	["nnf"] = {"Ngaing"},
	["nng"] = {"Maring Naga"},
	["nnh"] = {"Ngiemboon"},
	["nni"] = {"North Nuaulu"},
	["nnj"] = {"Nyangatom"},
	["nnk"] = {"Nankina"},
	["nnl"] = {"Northern Rengma Naga"},
	["nnm"] = {"Namia"},
	["nnn"] = {"Ngete"},
	["nnp"] = {"Wancho Naga"},
	["nnq"] = {"Ngindo"},
	["nnr"] = {"Narungga"},
	["nnt"] = {"Nanticoke"},
	["nnu"] = {"Dwang"},
	["nnv"] = {"Nugunu (Australia)"},
	["nnw"] = {"Southern Nuni"},
	["nny"] = {"Nyangga"},
	["nnz"] = {"Nda'nda'"},
	["noa"] = {"Woun Meu"},
	["noc"] = {"Nuk"},
	["nod"] = {"Northern Thai"},
	["noe"] = {"Nimadi"},
	["nof"] = {"Nomane"},
	["nog"] = {"Nogai"},
	["noh"] = {"Nomu"},
	["noi"] = {"Noiri"},
	["noj"] = {"Nonuya"},
	["nok"] = {"Nooksack"},
	["nol"] = {"Nomlaki"},
	["non"] = {"Old Norse"},
	["nop"] = {"Numanggang"},
	["noq"] = {"Ngongo"},
	["nos"] = {"Eastern Nisu"},
	["not"] = {"Nomatsiguenga"},
	["nou"] = {"Ewage-Notu"},
	["nov"] = {"Novial"},
	["now"] = {"Nyambo"},
	["noy"] = {"Noy"},
	["noz"] = {"Nayi"},
	["npa"] = {"Nar Phu"},
	["npb"] = {"Nupbikha"},
	["npg"] = {"Ponyo-Gongwang Naga"},
	["nph"] = {"Phom Naga"},
	["npi"] = {"Nepali (individual language)"},
	["npl"] = {"Southeastern Puebla Nahuatl"},
	["npn"] = {"Mondropolon"},
	["npo"] = {"Pochuri Naga"},
	["nps"] = {"Nipsan"},
	["npu"] = {"Puimei Naga"},
	["npx"] = {"Noipx"},
	["npy"] = {"Napu"},
	["nqg"] = {"Southern Nago"},
	["nqk"] = {"Kura Ede Nago"},
	["nql"] = {"Ngendelengo"},
	["nqm"] = {"Ndom"},
	["nqn"] = {"Nen"},
	["nqo"] = {"N'Ko", "N’Ko"},
	["nqq"] = {"Kyan-Karyaw Naga"},
	["nqt"] = {"Nteng"},
	["nqy"] = {"Akyaung Ari Naga"},
	["nra"] = {"Ngom"},
	["nrb"] = {"Nara"},
	["nrc"] = {"Noric"},
	["nre"] = {"Southern Rengma Naga"},
	["nrf"] = {"Jèrriais", "Guernésiais", "Sercquiais"},
	["nrg"] = {"Narango"},
	["nri"] = {"Chokri Naga"},
	["nrk"] = {"Ngarla"},
	["nrl"] = {"Ngarluma"},
	["nrm"] = {"Narom"},
	["nrn"] = {"Norn"},
	["nrp"] = {"North Picene"},
	["nrr"] = {"Norra", "Nora"},
	["nrt"] = {"Northern Kalapuya"},
	["nru"] = {"Narua"},
	["nrx"] = {"Ngurmbur"},
	["nrz"] = {"Lala"},
	["nsa"] = {"Sangtam Naga"},
	["nsb"] = {"Lower Nossob"},
	["nsc"] = {"Nshi"},
	["nsd"] = {"Southern Nisu"},
	["nse"] = {"Nsenga"},
	["nsf"] = {"Northwestern Nisu"},
	["nsg"] = {"Ngasa"},
	["nsh"] = {"Ngoshie"},
	["nsi"] = {"Nigerian Sign Language"},
	["nsk"] = {"Naskapi"},
	["nsl"] = {"Norwegian Sign Language"},
	["nsm"] = {"Sumi Naga"},
	["nsn"] = {"Nehan"},
	["nso"] = {"Pedi", "Northern Sotho", "Sepedi"},
	["nsp"] = {"Nepalese Sign Language"},
	["nsq"] = {"Northern Sierra Miwok"},
	["nsr"] = {"Maritime Sign Language"},
	["nss"] = {"Nali"},
	["nst"] = {"Tase Naga"},
	["nsu"] = {"Sierra Negra Nahuatl"},
	["nsv"] = {"Southwestern Nisu"},
	["nsw"] = {"Navut"},
	["nsx"] = {"Nsongo"},
	["nsy"] = {"Nasal"},
	["nsz"] = {"Nisenan"},
	["ntd"] = {"Northern Tidung"},
	["nte"] = {"Nathembo"},
	["ntg"] = {"Ngantangarra"},
	["nti"] = {"Natioro"},
	["ntj"] = {"Ngaanyatjarra"},
	["ntk"] = {"Ikoma-Nata-Isenye"},
	["ntm"] = {"Nateni"},
	["nto"] = {"Ntomba"},
	["ntp"] = {"Northern Tepehuan"},
	["ntr"] = {"Delo"},
	["ntu"] = {"Natügu"},
	["ntw"] = {"Nottoway"},
	["ntx"] = {"Tangkhul Naga (Myanmar)"},
	["nty"] = {"Mantsi"},
	["ntz"] = {"Natanzi"},
	["nua"] = {"Yuanga"},
	["nub"] = {"Nubian languages"},
	["nuc"] = {"Nukuini"},
	["nud"] = {"Ngala"},
	["nue"] = {"Ngundu"},
	["nuf"] = {"Nusu"},
	["nug"] = {"Nungali"},
	["nuh"] = {"Ndunda"},
	["nui"] = {"Ngumbi"},
	["nuj"] = {"Nyole"},
	["nuk"] = {"Nuu-chah-nulth", "Nuuchahnulth"},
	["nul"] = {"Nusa Laut"},
	["num"] = {"Niuafo'ou"},
	["nun"] = {"Anong"},
	["nuo"] = {"Nguôn"},
	["nup"] = {"Nupe-Nupe-Tako"},
	["nuq"] = {"Nukumanu"},
	["nur"] = {"Nukuria"},
	["nus"] = {"Nuer"},
	["nut"] = {"Nung (Viet Nam)"},
	["nuu"] = {"Ngbundu"},
	["nuv"] = {"Northern Nuni"},
	["nuw"] = {"Nguluwan"},
	["nux"] = {"Mehek"},
	["nuy"] = {"Nunggubuyu"},
	["nuz"] = {"Tlamacazapa Nahuatl"},
	["nvh"] = {"Nasarian"},
	["nvm"] = {"Namiae"},
	["nvo"] = {"Nyokon"},
	["nwa"] = {"Nawathinehena"},
	["nwb"] = {"Nyabwa"},
	["nwc"] = {"Classical Newari", "Classical Nepal Bhasa", "Old Newari"},
	["nwe"] = {"Ngwe"},
	["nwg"] = {"Ngayawung"},
	["nwi"] = {"Southwest Tanna"},
	["nwm"] = {"Nyamusa-Molo"},
	["nwo"] = {"Nauo"},
	["nwr"] = {"Nawaru"},
	["nww"] = {"Ndwewe"},
	["nwx"] = {"Middle Newar"},
	["nwy"] = {"Nottoway-Meherrin"},
	["nxa"] = {"Nauete"},
	["nxd"] = {"Ngando (Democratic Republic of Congo)"},
	["nxe"] = {"Nage"},
	["nxg"] = {"Ngad'a"},
	["nxi"] = {"Nindi"},
	["nxk"] = {"Koki Naga"},
	["nxl"] = {"South Nuaulu"},
	["nxm"] = {"Numidian"},
	["nxn"] = {"Ngawun"},
	["nxo"] = {"Ndambomo"},
	["nxq"] = {"Naxi"},
	["nxr"] = {"Ninggerum"},
	["nxx"] = {"Nafri"},
	["nyb"] = {"Nyangbo"},
	["nyc"] = {"Nyanga-li"},
	["nyd"] = {"Nyore", "Olunyole"},
	["nye"] = {"Nyengo"},
	["nyf"] = {"Giryama", "Kigiryama"},
	["nyg"] = {"Nyindu"},
	["nyh"] = {"Nyikina"},
	["nyi"] = {"Ama (Sudan)"},
	["nyj"] = {"Nyanga"},
	["nyk"] = {"Nyaneka"},
	["nyl"] = {"Nyeu"},
	["nym"] = {"Nyamwezi"},
	["nyn"] = {"Nyankole"},
	["nyo"] = {"Nyoro"},
	["nyp"] = {"Nyang'i"},
	["nyq"] = {"Nayini"},
	["nyr"] = {"Nyiha (Malawi)"},
	["nys"] = {"Nyungar"},
	["nyt"] = {"Nyawaygi"},
	["nyu"] = {"Nyungwe"},
	["nyv"] = {"Nyulnyul"},
	["nyw"] = {"Nyaw"},
	["nyx"] = {"Nganyaywana"},
	["nyy"] = {"Nyakyusa-Ngonde"},
	["nza"] = {"Tigon Mbembe"},
	["nzb"] = {"Njebi"},
	["nzd"] = {"Nzadi"},
	["nzi"] = {"Nzima"},
	["nzk"] = {"Nzakara"},
	["nzm"] = {"Zeme Naga"},
	["nzr"] = {"Dir-Nyamzak-Mbarimi"},
	["nzs"] = {"New Zealand Sign Language"},
	["nzu"] = {"Teke-Nzikou"},
	["nzy"] = {"Nzakambay"},
	["nzz"] = {"Nanga Dama Dogon"},
	["oaa"] = {"Orok"},
	["oac"] = {"Oroch"},
	["oar"] = {"Old Aramaic (up to 700 BCE)", "Ancient Aramaic (up to 700 BCE)"},
	["oav"] = {"Old Avar"},
	["obi"] = {"Obispeño"},
	["obk"] = {"Southern Bontok"},
	["obl"] = {"Oblo"},
	["obm"] = {"Moabite"},
	["obo"] = {"Obo Manobo"},
	["obr"] = {"Old Burmese"},
	["obt"] = {"Old Breton"},
	["obu"] = {"Obulom"},
	["oca"] = {"Ocaina"},
	["och"] = {"Old Chinese"},
	["ocm"] = {"Old Cham"},
	["oco"] = {"Old Cornish"},
	["ocu"] = {"Atzingo Matlatzinca"},
	["oda"] = {"Odut"},
	["odk"] = {"Od"},
	["odt"] = {"Old Dutch"},
	["odu"] = {"Odual"},
	["ofo"] = {"Ofo"},
	["ofs"] = {"Old Frisian"},
	["ofu"] = {"Efutop"},
	["ogb"] = {"Ogbia"},
	["ogc"] = {"Ogbah"},
	["oge"] = {"Old Georgian"},
	["ogg"] = {"Ogbogolo"},
	["ogo"] = {"Khana"},
	["ogu"] = {"Ogbronuagum"},
	["oht"] = {"Old Hittite"},
	["ohu"] = {"Old Hungarian"},
	["oia"] = {"Oirata"},
	["oie"] = {"Okolie"},
	["oin"] = {"Inebu One"},
	["ojb"] = {"Northwestern Ojibwa"},
	["ojc"] = {"Central Ojibwa"},
	["ojg"] = {"Eastern Ojibwa"},
	["ojp"] = {"Old Japanese"},
	["ojs"] = {"Severn Ojibwa"},
	["ojv"] = {"Ontong Java"},
	["ojw"] = {"Western Ojibwa"},
	["oka"] = {"Okanagan"},
	["okb"] = {"Okobo"},
	["okc"] = {"Kobo"},
	["okd"] = {"Okodia"},
	["oke"] = {"Okpe (Southwestern Edo)"},
	["okg"] = {"Koko Babangk"},
	["okh"] = {"Koresh-e Rostam"},
	["oki"] = {"Okiek"},
	["okj"] = {"Oko-Juwoi"},
	["okk"] = {"Kwamtim One"},
	["okl"] = {"Old Kentish Sign Language"},
	["okm"] = {"Middle Korean (10th-16th cent.)"},
	["okn"] = {"Oki-No-Erabu"},
	["oko"] = {"Old Korean (3rd-9th cent.)"},
	["okr"] = {"Kirike"},
	["oks"] = {"Oko-Eni-Osayen"},
	["oku"] = {"Oku"},
	["okv"] = {"Orokaiva"},
	["okx"] = {"Okpe (Northwestern Edo)"},
	["okz"] = {"Old Khmer"},
	["ola"] = {"Walungge"},
	["old"] = {"Mochi"},
	["ole"] = {"Olekha"},
	["olk"] = {"Olkol"},
	["olm"] = {"Oloma"},
	["olo"] = {"Livvi"},
	["olr"] = {"Olrat"},
	["olt"] = {"Old Lithuanian"},
	["olu"] = {"Kuvale"},
	["oma"] = {"Omaha-Ponca"},
	["omb"] = {"East Ambae"},
	["omc"] = {"Mochica"},
	["omg"] = {"Omagua"},
	["omi"] = {"Omi"},
	["omk"] = {"Omok"},
	["oml"] = {"Ombo"},
	["omn"] = {"Minoan"},
	["omo"] = {"Utarmbung"},
	["omp"] = {"Old Manipuri"},
	["omq"] = {"Oto-Manguean languages"},
	["omr"] = {"Old Marathi"},
	["omt"] = {"Omotik"},
	["omu"] = {"Omurano"},
	["omv"] = {"Omotic languages"},
	["omw"] = {"South Tairora"},
	["omx"] = {"Old Mon"},
	["omy"] = {"Old Malay"},
	["ona"] = {"Ona"},
	["onb"] = {"Lingao"},
	["one"] = {"Oneida"},
	["ong"] = {"Olo"},
	["oni"] = {"Onin"},
	["onj"] = {"Onjob"},
	["onk"] = {"Kabore One"},
	["onn"] = {"Onobasulu"},
	["ono"] = {"Onondaga"},
	["onp"] = {"Sartang"},
	["onr"] = {"Northern One"},
	["ons"] = {"Ono"},
	["ont"] = {"Ontenu"},
	["onu"] = {"Unua"},
	["onw"] = {"Old Nubian"},
	["onx"] = {"Onin Based Pidgin"},
	["ood"] = {"Tohono O'odham"},
	["oog"] = {"Ong"},
	["oon"] = {"Önge"},
	["oor"] = {"Oorlams"},
	["oos"] = {"Old Ossetic"},
	["opa"] = {"Okpamheri"},
	["opk"] = {"Kopkaka"},
	["opm"] = {"Oksapmin"},
	["opo"] = {"Opao"},
	["opt"] = {"Opata"},
	["opy"] = {"Ofayé"},
	["ora"] = {"Oroha"},
	["orc"] = {"Orma"},
	["ore"] = {"Orejón"},
	["org"] = {"Oring"},
	["orh"] = {"Oroqen"},
	["orn"] = {"Orang Kanaq"},
	["oro"] = {"Orokolo"},
	["orr"] = {"Oruma"},
	["ors"] = {"Orang Seletar"},
	["ort"] = {"Adivasi Oriya"},
	["oru"] = {"Ormuri"},
	["orv"] = {"Old Russian"},
	["orw"] = {"Oro Win"},
	["orx"] = {"Oro"},
	["ory"] = {"Odia (individual language)", "Oriya (individual language)"},
	["orz"] = {"Ormu"},
	["osa"] = {"Osage"},
	["osc"] = {"Oscan"},
	["osi"] = {"Osing"},
	["osn"] = {"Old Sundanese"},
	["oso"] = {"Ososo"},
	["osp"] = {"Old Spanish"},
	["ost"] = {"Osatu"},
	["osu"] = {"Southern One"},
	["osx"] = {"Old Saxon"},
	["ota"] = {"Ottoman Turkish (1500-1928)"},
	["otb"] = {"Old Tibetan"},
	["otd"] = {"Ot Danum"},
	["ote"] = {"Mezquital Otomi"},
	["oti"] = {"Oti"},
	["otk"] = {"Old Turkish"},
	["otl"] = {"Tilapa Otomi"},
	["otm"] = {"Eastern Highland Otomi"},
	["otn"] = {"Tenango Otomi"},
	["oto"] = {"Otomian languages"},
	["otq"] = {"Querétaro Otomi"},
	["otr"] = {"Otoro"},
	["ots"] = {"Estado de México Otomi"},
	["ott"] = {"Temoaya Otomi"},
	["otu"] = {"Otuke"},
	["otw"] = {"Ottawa"},
	["otx"] = {"Texcatepec Otomi"},
	["oty"] = {"Old Tamil"},
	["otz"] = {"Ixtenco Otomi"},
	["oua"] = {"Tagargrent"},
	["oub"] = {"Glio-Oubi"},
	["oue"] = {"Oune"},
	["oui"] = {"Old Uighur"},
	["oum"] = {"Ouma"},
	["ovd"] = {"Elfdalian", "Övdalian"},
	["owi"] = {"Owiniga"},
	["owl"] = {"Old Welsh"},
	["oyb"] = {"Oy"},
	["oyd"] = {"Oyda"},
	["oym"] = {"Wayampi"},
	["oyy"] = {"Oya'oya"},
	["ozm"] = {"Koonzime"},
	["paa"] = {"Papuan languages"},
	["pab"] = {"Parecís"},
	["pac"] = {"Pacoh"},
	["pad"] = {"Paumarí"},
	["pae"] = {"Pagibete"},
	["paf"] = {"Paranawát"},
	["pag"] = {"Pangasinan"},
	["pah"] = {"Tenharim"},
	["pai"] = {"Pe"},
	["pak"] = {"Parakanã"},
	["pal"] = {"Pahlavi"},
	["pam"] = {"Pampanga", "Kapampangan"},
	["pao"] = {"Northern Paiute"},
	["pap"] = {"Papiamento"},
	["paq"] = {"Parya"},
	["par"] = {"Panamint", "Timbisha"},
	["pas"] = {"Papasena"},
	["pau"] = {"Palauan"},
	["pav"] = {"Pakaásnovos"},
	["paw"] = {"Pawnee"},
	["pax"] = {"Pankararé"},
	["pay"] = {"Pech"},
	["paz"] = {"Pankararú"},
	["pbb"] = {"Páez"},
	["pbc"] = {"Patamona"},
	["pbe"] = {"Mezontla Popoloca"},
	["pbf"] = {"Coyotepec Popoloca"},
	["pbg"] = {"Paraujano"},
	["pbh"] = {"E'ñapa Woromaipu"},
	["pbi"] = {"Parkwa"},
	["pbl"] = {"Mak (Nigeria)"},
	["pbm"] = {"Puebla Mazatec"},
	["pbn"] = {"Kpasam"},
	["pbo"] = {"Papel"},
	["pbp"] = {"Badyara"},
	["pbr"] = {"Pangwa"},
	["pbs"] = {"Central Pame"},
	["pbt"] = {"Southern Pashto"},
	["pbu"] = {"Northern Pashto"},
	["pbv"] = {"Pnar"},
	["pby"] = {"Pyu (Papua New Guinea)"},
	["pca"] = {"Santa Inés Ahuatempan Popoloca"},
	["pcb"] = {"Pear"},
	["pcc"] = {"Bouyei"},
	["pcd"] = {"Picard"},
	["pce"] = {"Ruching Palaung"},
	["pcf"] = {"Paliyan"},
	["pcg"] = {"Paniya"},
	["pch"] = {"Pardhan"},
	["pci"] = {"Duruwa"},
	["pcj"] = {"Parenga"},
	["pck"] = {"Paite Chin"},
	["pcl"] = {"Pardhi"},
	["pcm"] = {"Nigerian Pidgin"},
	["pcn"] = {"Piti"},
	["pcp"] = {"Pacahuara"},
	["pcw"] = {"Pyapun"},
	["pda"] = {"Anam"},
	["pdc"] = {"Pennsylvania German"},
	["pdi"] = {"Pa Di"},
	["pdn"] = {"Podena", "Fedan"},
	["pdo"] = {"Padoe"},
	["pdt"] = {"Plautdietsch"},
	["pdu"] = {"Kayan"},
	["pea"] = {"Peranakan Indonesian"},
	["peb"] = {"Eastern Pomo"},
	["ped"] = {"Mala (Papua New Guinea)"},
	["pee"] = {"Taje"},
	["pef"] = {"Northeastern Pomo"},
	["peg"] = {"Pengo"},
	["peh"] = {"Bonan"},
	["pei"] = {"Chichimeca-Jonaz"},
	["pej"] = {"Northern Pomo"},
	["pek"] = {"Penchal"},
	["pel"] = {"Pekal"},
	["pem"] = {"Phende"},
	["peo"] = {"Old Persian (ca. 600-400 B.C.)"},
	["pep"] = {"Kunja"},
	["peq"] = {"Southern Pomo"},
	["pes"] = {"Iranian Persian"},
	["pev"] = {"Pémono"},
	["pex"] = {"Petats"},
	["pey"] = {"Petjo"},
	["pez"] = {"Eastern Penan"},
	["pfa"] = {"Pááfang"},
	["pfe"] = {"Pere"},
	["pfl"] = {"Pfaelzisch"},
	["pga"] = {"Sudanese Creole Arabic"},
	["pgd"] = {"Gāndhārī"},
	["pgg"] = {"Pangwali"},
	["pgi"] = {"Pagi"},
	["pgk"] = {"Rerep"},
	["pgl"] = {"Primitive Irish"},
	["pgn"] = {"Paelignian"},
	["pgs"] = {"Pangseng"},
	["pgu"] = {"Pagu"},
	["pgz"] = {"Papua New Guinean Sign Language"},
	["pha"] = {"Pa-Hng"},
	["phd"] = {"Phudagi"},
	["phg"] = {"Phuong"},
	["phh"] = {"Phukha"},
	["phi"] = {"Philippine languages"},
	["phj"] = {"Pahari"},
	["phk"] = {"Phake"},
	["phl"] = {"Phalura", "Palula"},
	["phm"] = {"Phimbi"},
	["phn"] = {"Phoenician"},
	["pho"] = {"Phunoi"},
	["phq"] = {"Phana'"},
	["phr"] = {"Pahari-Potwari"},
	["pht"] = {"Phu Thai"},
	["phu"] = {"Phuan"},
	["phv"] = {"Pahlavani"},
	["phw"] = {"Phangduwali"},
	["pia"] = {"Pima Bajo"},
	["pib"] = {"Yine"},
	["pic"] = {"Pinji"},
	["pid"] = {"Piaroa"},
	["pie"] = {"Piro"},
	["pif"] = {"Pingelapese"},
	["pig"] = {"Pisabo"},
	["pih"] = {"Pitcairn-Norfolk"},
	["pij"] = {"Pijao"},
	["pil"] = {"Yom"},
	["pim"] = {"Powhatan"},
	["pin"] = {"Piame"},
	["pio"] = {"Piapoco"},
	["pip"] = {"Pero"},
	["pir"] = {"Piratapuyo"},
	["pis"] = {"Pijin"},
	["pit"] = {"Pitta Pitta"},
	["piu"] = {"Pintupi-Luritja"},
	["piv"] = {"Pileni", "Vaeakau-Taumako"},
	["piw"] = {"Pimbwe"},
	["pix"] = {"Piu"},
	["piy"] = {"Piya-Kwonci"},
	["piz"] = {"Pije"},
	["pjt"] = {"Pitjantjatjara"},
	["pka"] = {"Ardhamāgadhī Prākrit"},
	["pkb"] = {"Pokomo", "Kipfokomo"},
	["pkc"] = {"Paekche"},
	["pkg"] = {"Pak-Tong"},
	["pkh"] = {"Pankhu"},
	["pkn"] = {"Pakanha"},
	["pko"] = {"Pökoot"},
	["pkp"] = {"Pukapuka"},
	["pkr"] = {"Attapady Kurumba"},
	["pks"] = {"Pakistan Sign Language"},
	["pkt"] = {"Maleng"},
	["pku"] = {"Paku"},
	["pla"] = {"Miani"},
	["plb"] = {"Polonombauk"},
	["plc"] = {"Central Palawano"},
	["pld"] = {"Polari"},
	["ple"] = {"Palu'e"},
	["plf"] = {"Central Malayo-Polynesian languages"},
	["plg"] = {"Pilagá"},
	["plh"] = {"Paulohi"},
	["plk"] = {"Kohistani Shina"},
	["pll"] = {"Shwe Palaung"},
	["pln"] = {"Palenquero"},
	["plo"] = {"Oluta Popoluca"},
	["plq"] = {"Palaic"},
	["plr"] = {"Palaka Senoufo"},
	["pls"] = {"San Marcos Tlacoyalco Popoloca", "San Marcos Tlalcoyalco Popoloca"},
	["plt"] = {"Plateau Malagasy"},
	["plu"] = {"Palikúr"},
	["plv"] = {"Southwest Palawano"},
	["plw"] = {"Brooke's Point Palawano"},
	["ply"] = {"Bolyu"},
	["plz"] = {"Paluan"},
	["pma"] = {"Paama"},
	["pmb"] = {"Pambia"},
	["pmd"] = {"Pallanganmiddang"},
	["pme"] = {"Pwaamei"},
	["pmf"] = {"Pamona"},
	["pmh"] = {"Māhārāṣṭri Prākrit"},
	["pmi"] = {"Northern Pumi"},
	["pmj"] = {"Southern Pumi"},
	["pml"] = {"Lingua Franca"},
	["pmm"] = {"Pomo"},
	["pmn"] = {"Pam"},
	["pmo"] = {"Pom"},
	["pmq"] = {"Northern Pame"},
	["pmr"] = {"Paynamar"},
	["pms"] = {"Piemontese"},
	["pmt"] = {"Tuamotuan"},
	["pmw"] = {"Plains Miwok"},
	["pmx"] = {"Poumei Naga"},
	["pmy"] = {"Papuan Malay"},
	["pmz"] = {"Southern Pame"},
	["pna"] = {"Punan Bah-Biau"},
	["pnb"] = {"Western Panjabi"},
	["pnc"] = {"Pannei"},
	["pnd"] = {"Mpinda"},
	["pne"] = {"Western Penan"},
	["png"] = {"Pangu", "Pongu"},
	["pnh"] = {"Penrhyn"},
	["pni"] = {"Aoheng"},
	["pnj"] = {"Pinjarup"},
	["pnk"] = {"Paunaka"},
	["pnl"] = {"Paleni"},
	["pnm"] = {"Punan Batu 1"},
	["pnn"] = {"Pinai-Hagahai"},
	["pno"] = {"Panobo"},
	["pnp"] = {"Pancana"},
	["pnq"] = {"Pana (Burkina Faso)"},
	["pnr"] = {"Panim"},
	["pns"] = {"Ponosakan"},
	["pnt"] = {"Pontic"},
	["pnu"] = {"Jiongnai Bunu"},
	["pnv"] = {"Pinigura"},
	["pnw"] = {"Banyjima", "Panytyima"},
	["pnx"] = {"Phong-Kniang"},
	["pny"] = {"Pinyin"},
	["pnz"] = {"Pana (Central African Republic)"},
	["poc"] = {"Poqomam"},
	["poe"] = {"San Juan Atzingo Popoloca"},
	["pof"] = {"Poke"},
	["pog"] = {"Potiguára"},
	["poh"] = {"Poqomchi'"},
	["poi"] = {"Highland Popoluca"},
	["pok"] = {"Pokangá"},
	["pom"] = {"Southeastern Pomo"},
	["pon"] = {"Pohnpeian"},
	["poo"] = {"Central Pomo"},
	["pop"] = {"Pwapwâ"},
	["poq"] = {"Texistepec Popoluca"},
	["pos"] = {"Sayula Popoluca"},
	["pot"] = {"Potawatomi"},
	["pov"] = {"Upper Guinea Crioulo"},
	["pow"] = {"San Felipe Otlaltepec Popoloca"},
	["pox"] = {"Polabian"},
	["poy"] = {"Pogolo"},
	["poz"] = {"Malayo-Polynesian languages"},
	["ppe"] = {"Papi"},
	["ppi"] = {"Paipai"},
	["ppk"] = {"Uma"},
	["ppl"] = {"Pipil", "Nicarao"},
	["ppm"] = {"Papuma"},
	["ppn"] = {"Papapana"},
	["ppo"] = {"Folopa"},
	["ppp"] = {"Pelende"},
	["ppq"] = {"Pei"},
	["pps"] = {"San Luís Temalacayuca Popoloca"},
	["ppt"] = {"Pare"},
	["ppu"] = {"Papora"},
	["pqa"] = {"Pa'a"},
	["pqe"] = {"Eastern Malayo-Polynesian languages"},
	["pqm"] = {"Malecite-Passamaquoddy"},
	["pqw"] = {"Western Malayo-Polynesian languages"},
	["pra"] = {"Prakrit languages"},
	["prc"] = {"Parachi"},
	["prd"] = {"Parsi-Dari"},
	["pre"] = {"Principense"},
	["prf"] = {"Paranan"},
	["prg"] = {"Prussian"},
	["prh"] = {"Porohanon"},
	["pri"] = {"Paicî"},
	["prk"] = {"Parauk"},
	["prl"] = {"Peruvian Sign Language"},
	["prm"] = {"Kibiri"},
	["prn"] = {"Prasuni"},
	["pro"] = {"Old Provençal (to 1500)", "Old Occitan (to 1500)"},
	["prq"] = {"Ashéninka Perené"},
	["prr"] = {"Puri"},
	["prs"] = {"Dari", "Afghan Persian"},
	["prt"] = {"Phai"},
	["pru"] = {"Puragi"},
	["prw"] = {"Parawen"},
	["prx"] = {"Purik"},
	["prz"] = {"Providencia Sign Language"},
	["psa"] = {"Asue Awyu"},
	["psc"] = {"Iranian Sign Language", "Persian Sign Language"},
	["psd"] = {"Plains Indian Sign Language"},
	["pse"] = {"Central Malay"},
	["psg"] = {"Penang Sign Language"},
	["psh"] = {"Southwest Pashai", "Southwest Pashayi"},
	["psi"] = {"Southeast Pashai", "Southeast Pashayi"},
	["psl"] = {"Puerto Rican Sign Language"},
	["psm"] = {"Pauserna"},
	["psn"] = {"Panasuan"},
	["pso"] = {"Polish Sign Language"},
	["psp"] = {"Philippine Sign Language"},
	["psq"] = {"Pasi"},
	["psr"] = {"Portuguese Sign Language"},
	["pss"] = {"Kaulong"},
	["pst"] = {"Central Pashto"},
	["psu"] = {"Sauraseni Prākrit"},
	["psw"] = {"Port Sandwich"},
	["psy"] = {"Piscataway"},
	["pta"] = {"Pai Tavytera"},
	["pth"] = {"Pataxó Hã-Ha-Hãe"},
	["pti"] = {"Pindiini", "Wangkatha"},
	["ptn"] = {"Patani"},
	["pto"] = {"Zo'é"},
	["ptp"] = {"Patep"},
	["ptq"] = {"Pattapu"},
	["ptr"] = {"Piamatsina"},
	["ptt"] = {"Enrekang"},
	["ptu"] = {"Bambam"},
	["ptv"] = {"Port Vato"},
	["ptw"] = {"Pentlatch"},
	["pty"] = {"Pathiya"},
	["pua"] = {"Western Highland Purepecha"},
	["pub"] = {"Purum"},
	["puc"] = {"Punan Merap"},
	["pud"] = {"Punan Aput"},
	["pue"] = {"Puelche"},
	["puf"] = {"Punan Merah"},
	["pug"] = {"Phuie"},
	["pui"] = {"Puinave"},
	["puj"] = {"Punan Tubu"},
	["pum"] = {"Puma"},
	["puo"] = {"Puoc"},
	["pup"] = {"Pulabu"},
	["puq"] = {"Puquina"},
	["pur"] = {"Puruborá"},
	["put"] = {"Putoh"},
	["puu"] = {"Punu"},
	["puw"] = {"Puluwatese"},
	["pux"] = {"Puare"},
	["puy"] = {"Purisimeño"},
	["pwa"] = {"Pawaia"},
	["pwb"] = {"Panawa"},
	["pwg"] = {"Gapapaiwa"},
	["pwi"] = {"Patwin"},
	["pwm"] = {"Molbog"},
	["pwn"] = {"Paiwan"},
	["pwo"] = {"Pwo Western Karen"},
	["pwr"] = {"Powari"},
	["pww"] = {"Pwo Northern Karen"},
	["pxm"] = {"Quetzaltepec Mixe"},
	["pye"] = {"Pye Krumen"},
	["pym"] = {"Fyam"},
	["pyn"] = {"Poyanáwa"},
	["pys"] = {"Paraguayan Sign Language", "Lengua de Señas del Paraguay"},
	["pyu"] = {"Puyuma"},
	["pyx"] = {"Pyu (Myanmar)"},
	["pyy"] = {"Pyen"},
	["pze"] = {"Pesse"},
	["pzh"] = {"Pazeh"},
	["pzn"] = {"Jejara Naga", "Para Naga"},
	["qua"] = {"Quapaw"},
	["qub"] = {"Huallaga Huánuco Quechua"},
	["quc"] = {"K'iche'", "Quiché"},
	["qud"] = {"Calderón Highland Quichua"},
	["quf"] = {"Lambayeque Quechua"},
	["qug"] = {"Chimborazo Highland Quichua"},
	["quh"] = {"South Bolivian Quechua"},
	["qui"] = {"Quileute"},
	["quk"] = {"Chachapoyas Quechua"},
	["qul"] = {"North Bolivian Quechua"},
	["qum"] = {"Sipacapense"},
	["qun"] = {"Quinault"},
	["qup"] = {"Southern Pastaza Quechua"},
	["quq"] = {"Quinqui"},
	["qur"] = {"Yanahuanca Pasco Quechua"},
	["qus"] = {"Santiago del Estero Quichua"},
	["quv"] = {"Sacapulteco"},
	["quw"] = {"Tena Lowland Quichua"},
	["qux"] = {"Yauyos Quechua"},
	["quy"] = {"Ayacucho Quechua"},
	["quz"] = {"Cusco Quechua"},
	["qva"] = {"Ambo-Pasco Quechua"},
	["qvc"] = {"Cajamarca Quechua"},
	["qve"] = {"Eastern Apurímac Quechua"},
	["qvh"] = {"Huamalíes-Dos de Mayo Huánuco Quechua"},
	["qvi"] = {"Imbabura Highland Quichua"},
	["qvj"] = {"Loja Highland Quichua"},
	["qvl"] = {"Cajatambo North Lima Quechua"},
	["qvm"] = {"Margos-Yarowilca-Lauricocha Quechua"},
	["qvn"] = {"North Junín Quechua"},
	["qvo"] = {"Napo Lowland Quechua"},
	["qvp"] = {"Pacaraos Quechua"},
	["qvs"] = {"San Martín Quechua"},
	["qvw"] = {"Huaylla Wanca Quechua"},
	["qvy"] = {"Queyu"},
	["qvz"] = {"Northern Pastaza Quichua"},
	["qwa"] = {"Corongo Ancash Quechua"},
	["qwc"] = {"Classical Quechua"},
	["qwe"] = {"Quechuan (family)"},
	["qwh"] = {"Huaylas Ancash Quechua"},
	["qwm"] = {"Kuman (Russia)"},
	["qws"] = {"Sihuas Ancash Quechua"},
	["qwt"] = {"Kwalhioqua-Tlatskanai"},
	["qxa"] = {"Chiquián Ancash Quechua"},
	["qxc"] = {"Chincha Quechua"},
	["qxh"] = {"Panao Huánuco Quechua"},
	["qxl"] = {"Salasaca Highland Quichua"},
	["qxn"] = {"Northern Conchucos Ancash Quechua"},
	["qxo"] = {"Southern Conchucos Ancash Quechua"},
	["qxp"] = {"Puno Quechua"},
	["qxq"] = {"Qashqa'i"},
	["qxr"] = {"Cañar Highland Quichua"},
	["qxs"] = {"Southern Qiang"},
	["qxt"] = {"Santa Ana de Tusi Pasco Quechua"},
	["qxu"] = {"Arequipa-La Unión Quechua"},
	["qxw"] = {"Jauja Wanca Quechua"},
	["qya"] = {"Quenya"},
	["qyp"] = {"Quiripi"},
	["raa"] = {"Dungmali"},
	["rab"] = {"Camling"},
	["rac"] = {"Rasawa"},
	["rad"] = {"Rade"},
	["raf"] = {"Western Meohang"},
	["rag"] = {"Logooli", "Lulogooli"},
	["rah"] = {"Rabha"},
	["rai"] = {"Ramoaaina"},
	["raj"] = {"Rajasthani"},
	["rak"] = {"Tulu-Bohuai"},
	["ral"] = {"Ralte"},
	["ram"] = {"Canela"},
	["ran"] = {"Riantana"},
	["rao"] = {"Rao"},
	["rap"] = {"Rapanui"},
	["raq"] = {"Saam"},
	["rar"] = {"Rarotongan", "Cook Islands Maori"},
	["ras"] = {"Tegali"},
	["rat"] = {"Razajerdi"},
	["rau"] = {"Raute"},
	["rav"] = {"Sampang"},
	["raw"] = {"Rawang"},
	["rax"] = {"Rang"},
	["ray"] = {"Rapa"},
	["raz"] = {"Rahambuu"},
	["rbb"] = {"Rumai Palaung"},
	["rbk"] = {"Northern Bontok"},
	["rbl"] = {"Miraya Bikol"},
	["rbp"] = {"Barababaraba"},
	["rcf"] = {"Réunion Creole French"},
	["rdb"] = {"Rudbari"},
	["rea"] = {"Rerau"},
	["reb"] = {"Rembong"},
	["ree"] = {"Rejang Kayan"},
	["reg"] = {"Kara (Tanzania)"},
	["rei"] = {"Reli"},
	["rej"] = {"Rejang"},
	["rel"] = {"Rendille"},
	["rem"] = {"Remo"},
	["ren"] = {"Rengao"},
	["rer"] = {"Rer Bare"},
	["res"] = {"Reshe"},
	["ret"] = {"Retta"},
	["rey"] = {"Reyesano"},
	["rga"] = {"Roria"},
	["rge"] = {"Romano-Greek"},
	["rgk"] = {"Rangkas"},
	["rgn"] = {"Romagnol"},
	["rgr"] = {"Resígaro"},
	["rgs"] = {"Southern Roglai"},
	["rgu"] = {"Ringgou"},
	["rhg"] = {"Rohingya"},
	["rhp"] = {"Yahang"},
	["ria"] = {"Riang (India)"},
	["rib"] = {"Bribri Sign Language"},
	["rif"] = {"Tarifit"},
	["ril"] = {"Riang Lang", "Riang (Myanmar)"},
	["rim"] = {"Nyaturu"},
	["rin"] = {"Nungu"},
	["rir"] = {"Ribun"},
	["rit"] = {"Ritharrngu"},
	["riu"] = {"Riung"},
	["rjg"] = {"Rajong"},
	["rji"] = {"Raji"},
	["rjs"] = {"Rajbanshi"},
	["rka"] = {"Kraol"},
	["rkb"] = {"Rikbaktsa"},
	["rkh"] = {"Rakahanga-Manihiki"},
	["rki"] = {"Rakhine"},
	["rkm"] = {"Marka"},
	["rkt"] = {"Rangpuri", "Kamta"},
	["rkw"] = {"Arakwal"},
	["rma"] = {"Rama"},
	["rmb"] = {"Rembarrnga"},
	["rmc"] = {"Carpathian Romani"},
	["rmd"] = {"Traveller Danish"},
	["rme"] = {"Angloromani"},
	["rmf"] = {"Kalo Finnish Romani"},
	["rmg"] = {"Traveller Norwegian"},
	["rmh"] = {"Murkim"},
	["rmi"] = {"Lomavren"},
	["rmk"] = {"Romkun"},
	["rml"] = {"Baltic Romani"},
	["rmm"] = {"Roma"},
	["rmn"] = {"Balkan Romani"},
	["rmo"] = {"Sinte Romani"},
	["rmp"] = {"Rempi"},
	["rmq"] = {"Caló"},
	["rms"] = {"Romanian Sign Language"},
	["rmt"] = {"Domari"},
	["rmu"] = {"Tavringer Romani"},
	["rmv"] = {"Romanova"},
	["rmw"] = {"Welsh Romani"},
	["rmx"] = {"Romam"},
	["rmy"] = {"Vlax Romani"},
	["rmz"] = {"Marma"},
	["rnb"] = {"Brunca Sign Language"},
	["rnd"] = {"Ruund"},
	["rng"] = {"Ronga"},
	["rnl"] = {"Ranglong"},
	["rnn"] = {"Roon"},
	["rnp"] = {"Rongpo"},
	["rnr"] = {"Nari Nari"},
	["rnw"] = {"Rungwa"},
	["roa"] = {"Romance languages"},
	["rob"] = {"Tae'"},
	["roc"] = {"Cacgia Roglai"},
	["rod"] = {"Rogo"},
	["roe"] = {"Ronji"},
	["rof"] = {"Rombo"},
	["rog"] = {"Northern Roglai"},
	["rol"] = {"Romblomanon"},
	["rom"] = {"Romany"},
	["roo"] = {"Rotokas"},
	["rop"] = {"Kriol"},
	["ror"] = {"Rongga"},
	["rou"] = {"Runga"},
	["row"] = {"Dela-Oenale"},
	["rpn"] = {"Repanbitip"},
	["rpt"] = {"Rapting"},
	["rri"] = {"Ririo"},
	["rrm"] = {"Moriori"},
	["rro"] = {"Waima"},
	["rrt"] = {"Arritinngithigh"},
	["rsb"] = {"Romano-Serbian"},
	["rsk"] = {"Ruthenian", "Rusnak"},
	["rsl"] = {"Russian Sign Language"},
	["rsm"] = {"Miriwoong Sign Language"},
	["rsn"] = {"Rwandan Sign Language"},
	["rsw"] = {"Rishiwa"},
	["rtc"] = {"Rungtu Chin"},
	["rth"] = {"Ratahan"},
	["rtm"] = {"Rotuman"},
	["rts"] = {"Yurats"},
	["rtw"] = {"Rathawi"},
	["rub"] = {"Gungu"},
	["ruc"] = {"Ruuli"},
	["rue"] = {"Rusyn"},
	["ruf"] = {"Luguru"},
	["rug"] = {"Roviana"},
	["ruh"] = {"Ruga"},
	["rui"] = {"Rufiji"},
	["ruk"] = {"Che"},
	["ruo"] = {"Istro Romanian"},
	["rup"] = {"Macedo-Romanian", "Aromanian", "Arumanian"},
	["ruq"] = {"Megleno Romanian"},
	["rut"] = {"Rutul"},
	["ruu"] = {"Lanas Lobu"},
	["ruy"] = {"Mala (Nigeria)"},
	["ruz"] = {"Ruma"},
	["rwa"] = {"Rawo"},
	["rwk"] = {"Rwa"},
	["rwl"] = {"Ruwila"},
	["rwm"] = {"Amba (Uganda)"},
	["rwo"] = {"Rawa"},
	["rwr"] = {"Marwari (India)"},
	["rxd"] = {"Ngardi"},
	["rxw"] = {"Karuwali", "Garuwali"},
	["ryn"] = {"Northern Amami-Oshima"},
	["rys"] = {"Yaeyama"},
	["ryu"] = {"Central Okinawan"},
	["rzh"] = {"Rāziḥī"},
	["saa"] = {"Saba"},
	["sab"] = {"Buglere"},
	["sac"] = {"Meskwaki"},
	["sad"] = {"Sandawe"},
	["sae"] = {"Sabanê"},
	["saf"] = {"Safaliba"},
	["sah"] = {"Yakut"},
	["sai"] = {"South American Indian languages"},
	["saj"] = {"Sahu"},
	["sak"] = {"Sake"},
	["sal"] = {"Salishan languages"},
	["sam"] = {"Samaritan Aramaic"},
	["sao"] = {"Sause"},
	["saq"] = {"Samburu"},
	["sar"] = {"Saraveca"},
	["sas"] = {"Sasak"},
	["sat"] = {"Santali"},
	["sau"] = {"Saleman"},
	["sav"] = {"Saafi-Saafi"},
	["saw"] = {"Sawi"},
	["sax"] = {"Sa"},
	["say"] = {"Saya"},
	["saz"] = {"Saurashtra"},
	["sba"] = {"Ngambay"},
	["sbb"] = {"Simbo"},
	["sbc"] = {"Kele (Papua New Guinea)"},
	["sbd"] = {"Southern Samo"},
	["sbe"] = {"Saliba"},
	["sbf"] = {"Chabu", "Shabo"},
	["sbg"] = {"Seget"},
	["sbh"] = {"Sori-Harengan"},
	["sbi"] = {"Seti"},
	["sbj"] = {"Surbakhal"},
	["sbk"] = {"Safwa"},
	["sbl"] = {"Botolan Sambal"},
	["sbm"] = {"Sagala"},
	["sbn"] = {"Sindhi Bhil"},
	["sbo"] = {"Sabüm"},
	["sbp"] = {"Sangu (Tanzania)"},
	["sbq"] = {"Sileibi"},
	["sbr"] = {"Sembakung Murut"},
	["sbs"] = {"Subiya"},
	["sbt"] = {"Kimki"},
	["sbu"] = {"Stod Bhoti"},
	["sbv"] = {"Sabine"},
	["sbw"] = {"Simba"},
	["sbx"] = {"Seberuang"},
	["sby"] = {"Soli"},
	["sbz"] = {"Sara Kaba"},
	["scb"] = {"Chut"},
	["sce"] = {"Dongxiang"},
	["scf"] = {"San Miguel Creole French"},
	["scg"] = {"Sanggau"},
	["sch"] = {"Sakachep"},
	["sci"] = {"Sri Lankan Creole Malay"},
	["sck"] = {"Sadri"},
	["scl"] = {"Shina"},
	["scn"] = {"Sicilian"},
	["sco"] = {"Scots"},
	["scp"] = {"Hyolmo", "Helambu Sherpa"},
	["scq"] = {"Sa'och"},
	["scs"] = {"North Slavey"},
	["sct"] = {"Southern Katang"},
	["scu"] = {"Shumcho"},
	["scv"] = {"Sheni"},
	["scw"] = {"Sha"},
	["scx"] = {"Sicel"},
	["sda"] = {"Toraja-Sa'dan"},
	["sdb"] = {"Shabak"},
	["sdc"] = {"Sassarese Sardinian"},
	["sde"] = {"Surubu"},
	["sdf"] = {"Sarli"},
	["sdg"] = {"Savi"},
	["sdh"] = {"Southern Kurdish"},
	["sdj"] = {"Suundi"},
	["sdk"] = {"Sos Kundi"},
	["sdl"] = {"Saudi Arabian Sign Language"},
	["sdn"] = {"Gallurese Sardinian"},
	["sdo"] = {"Bukar-Sadung Bidayuh"},
	["sdp"] = {"Sherdukpen"},
	["sdq"] = {"Semandang"},
	["sdr"] = {"Oraon Sadri"},
	["sds"] = {"Sened"},
	["sdt"] = {"Shuadit"},
	["sdu"] = {"Sarudu"},
	["sdv"] = {"Eastern Sudanic languages"},
	["sdx"] = {"Sibu Melanau"},
	["sdz"] = {"Sallands"},
	["sea"] = {"Semai"},
	["seb"] = {"Shempire Senoufo"},
	["sec"] = {"Sechelt"},
	["sed"] = {"Sedang"},
	["see"] = {"Seneca"},
	["sef"] = {"Cebaara Senoufo"},
	["seg"] = {"Segeju"},
	["seh"] = {"Sena"},
	["sei"] = {"Seri"},
	["sej"] = {"Sene"},
	["sek"] = {"Sekani"},
	["sel"] = {"Selkup"},
	["sem"] = {"Semitic languages"},
	["sen"] = {"Nanerigé Sénoufo"},
	["seo"] = {"Suarmin"},
	["sep"] = {"Sìcìté Sénoufo"},
	["seq"] = {"Senara Sénoufo"},
	["ser"] = {"Serrano"},
	["ses"] = {"Koyraboro Senni Songhai"},
	["set"] = {"Sentani"},
	["seu"] = {"Serui-Laut"},
	["sev"] = {"Nyarafolo Senoufo"},
	["sew"] = {"Sewa Bay"},
	["sey"] = {"Secoya"},
	["sez"] = {"Senthang Chin"},
	["sfb"] = {"Langue des signes de Belgique Francophone", "French Belgian Sign Language"},
	["sfe"] = {"Eastern Subanen"},
	["sfm"] = {"Small Flowery Miao"},
	["sfs"] = {"South African Sign Language"},
	["sfw"] = {"Sehwi"},
	["sga"] = {"Old Irish (to 900)"},
	["sgb"] = {"Mag-antsi Ayta"},
	["sgc"] = {"Kipsigis"},
	["sgd"] = {"Surigaonon"},
	["sge"] = {"Segai"},
	["sgg"] = {"Swiss-German Sign Language"},
	["sgh"] = {"Shughni"},
	["sgi"] = {"Suga"},
	["sgj"] = {"Surgujia"},
	["sgk"] = {"Sangkong"},
	["sgm"] = {"Singa"},
	["sgn"] = {"Sign languages"},
	["sgp"] = {"Singpho"},
	["sgr"] = {"Sangisari"},
	["sgs"] = {"Samogitian"},
	["sgt"] = {"Brokpake"},
	["sgu"] = {"Salas"},
	["sgw"] = {"Sebat Bet Gurage"},
	["sgx"] = {"Sierra Leone Sign Language"},
	["sgy"] = {"Sanglechi"},
	["sgz"] = {"Sursurunga"},
	["sha"] = {"Shall-Zwall"},
	["shb"] = {"Ninam"},
	["shc"] = {"Sonde"},
	["shd"] = {"Kundal Shahi"},
	["she"] = {"Sheko"},
	["shg"] = {"Shua"},
	["shh"] = {"Shoshoni"},
	["shi"] = {"Tachelhit"},
	["shj"] = {"Shatt"},
	["shk"] = {"Shilluk"},
	["shl"] = {"Shendu"},
	["shm"] = {"Shahrudi"},
	["shn"] = {"Shan"},
	["sho"] = {"Shanga"},
	["shp"] = {"Shipibo-Conibo"},
	["shq"] = {"Sala"},
	["shr"] = {"Shi"},
	["shs"] = {"Shuswap"},
	["sht"] = {"Shasta"},
	["shu"] = {"Chadian Arabic"},
	["shv"] = {"Shehri"},
	["shw"] = {"Shwai"},
	["shx"] = {"She"},
	["shy"] = {"Tachawit"},
	["shz"] = {"Syenara Senoufo"},
	["sia"] = {"Akkala Sami"},
	["sib"] = {"Sebop"},
	["sid"] = {"Sidamo"},
	["sie"] = {"Simaa"},
	["sif"] = {"Siamou"},
	["sig"] = {"Paasaal"},
	["sih"] = {"Zire", "Sîshëë"},
	["sii"] = {"Shom Peng"},
	["sij"] = {"Numbami"},
	["sik"] = {"Sikiana"},
	["sil"] = {"Tumulung Sisaala"},
	["sim"] = {"Mende (Papua New Guinea)"},
	["sio"] = {"Siouan languages"},
	["sip"] = {"Sikkimese"},
	["siq"] = {"Sonia"},
	["sir"] = {"Siri"},
	["sis"] = {"Siuslaw"},
	["sit"] = {"Sino-Tibetan languages"},
	["siu"] = {"Sinagen"},
	["siv"] = {"Sumariup"},
	["siw"] = {"Siwai"},
	["six"] = {"Sumau"},
	["siy"] = {"Sivandi"},
	["siz"] = {"Siwi"},
	["sja"] = {"Epena"},
	["sjb"] = {"Sajau Basap"},
	["sjd"] = {"Kildin Sami"},
	["sje"] = {"Pite Sami"},
	["sjg"] = {"Assangori"},
	["sjk"] = {"Kemi Sami"},
	["sjl"] = {"Sajalong", "Miji"},
	["sjm"] = {"Mapun"},
	["sjn"] = {"Sindarin"},
	["sjo"] = {"Xibe"},
	["sjp"] = {"Surjapuri"},
	["sjr"] = {"Siar-Lak"},
	["sjs"] = {"Senhaja De Srair"},
	["sjt"] = {"Ter Sami"},
	["sju"] = {"Ume Sami"},
	["sjw"] = {"Shawnee"},
	["ska"] = {"Skagit"},
	["skb"] = {"Saek"},
	["skc"] = {"Ma Manda"},
	["skd"] = {"Southern Sierra Miwok"},
	["ske"] = {"Seke (Vanuatu)"},
	["skf"] = {"Sakirabiá"},
	["skg"] = {"Sakalava Malagasy"},
	["skh"] = {"Sikule"},
	["ski"] = {"Sika"},
	["skj"] = {"Seke (Nepal)"},
	["skm"] = {"Kutong"},
	["skn"] = {"Kolibugan Subanon"},
	["sko"] = {"Seko Tengah"},
	["skp"] = {"Sekapan"},
	["skq"] = {"Sininkere"},
	["skr"] = {"Saraiki", "Seraiki"},
	["sks"] = {"Maia"},
	["skt"] = {"Sakata"},
	["sku"] = {"Sakao"},
	["skv"] = {"Skou"},
	["skw"] = {"Skepi Creole Dutch"},
	["skx"] = {"Seko Padang"},
	["sky"] = {"Sikaiana"},
	["skz"] = {"Sekar"},
	["sla"] = {"Slavic languages"},
	["slc"] = {"Sáliba"},
	["sld"] = {"Sissala"},
	["sle"] = {"Sholaga"},
	["slf"] = {"Swiss-Italian Sign Language"},
	["slg"] = {"Selungai Murut"},
	["slh"] = {"Southern Puget Sound Salish"},
	["sli"] = {"Lower Silesian"},
	["slj"] = {"Salumá"},
	["sll"] = {"Salt-Yui"},
	["slm"] = {"Pangutaran Sama"},
	["sln"] = {"Salinan"},
	["slp"] = {"Lamaholot"},
	["slr"] = {"Salar"},
	["sls"] = {"Singapore Sign Language"},
	["slt"] = {"Sila"},
	["slu"] = {"Selaru"},
	["slw"] = {"Sialum"},
	["slx"] = {"Salampasu"},
	["sly"] = {"Selayar"},
	["slz"] = {"Ma'ya"},
	["sma"] = {"Southern Sami"},
	["smb"] = {"Simbari"},
	["smc"] = {"Som"},
	["smf"] = {"Auwe"},
	["smg"] = {"Simbali"},
	["smh"] = {"Samei"},
	["smi"] = {"Sami languages"},
	["smj"] = {"Lule Sami"},
	["smk"] = {"Bolinao"},
	["sml"] = {"Central Sama"},
	["smm"] = {"Musasa"},
	["smn"] = {"Inari Sami"},
	["smp"] = {"Samaritan"},
	["smq"] = {"Samo"},
	["smr"] = {"Simeulue"},
	["sms"] = {"Skolt Sami"},
	["smt"] = {"Simte"},
	["smu"] = {"Somray"},
	["smv"] = {"Samvedi"},
	["smw"] = {"Sumbawa"},
	["smx"] = {"Samba"},
	["smy"] = {"Semnani"},
	["smz"] = {"Simeku"},
	["snc"] = {"Sinaugoro"},
	["sne"] = {"Bau Bidayuh"},
	["snf"] = {"Noon"},
	["sng"] = {"Sanga (Democratic Republic of Congo)"},
	["sni"] = {"Sensi"},
	["snj"] = {"Riverain Sango"},
	["snk"] = {"Soninke"},
	["snl"] = {"Sangil"},
	["snm"] = {"Southern Ma'di"},
	["snn"] = {"Siona"},
	["sno"] = {"Snohomish"},
	["snp"] = {"Siane"},
	["snq"] = {"Sangu (Gabon)"},
	["snr"] = {"Sihan"},
	["sns"] = {"South West Bay", "Nahavaq"},
	["snu"] = {"Senggi", "Viid"},
	["snv"] = {"Sa'ban"},
	["snw"] = {"Selee"},
	["snx"] = {"Sam"},
	["sny"] = {"Saniyo-Hiyewe"},
	["snz"] = {"Kou"},
	["soa"] = {"Thai Song"},
	["sob"] = {"Sobei"},
	["soc"] = {"So (Democratic Republic of Congo)"},
	["sod"] = {"Songoora"},
	["soe"] = {"Songomeno"},
	["sog"] = {"Sogdian"},
	["soh"] = {"Aka"},
	["soi"] = {"Sonha"},
	["soj"] = {"Soi"},
	["sok"] = {"Sokoro"},
	["sol"] = {"Solos"},
	["son"] = {"Songhai languages"},
	["soo"] = {"Songo"},
	["sop"] = {"Songe"},
	["soq"] = {"Kanasi"},
	["sor"] = {"Somrai"},
	["sos"] = {"Seeku"},
	["sou"] = {"Southern Thai"},
	["sov"] = {"Sonsorol"},
	["sow"] = {"Sowanda"},
	["sox"] = {"Swo"},
	["soy"] = {"Miyobe"},
	["soz"] = {"Temi"},
	["spb"] = {"Sepa (Indonesia)"},
	["spc"] = {"Sapé"},
	["spd"] = {"Saep"},
	["spe"] = {"Sepa (Papua New Guinea)"},
	["spg"] = {"Sian"},
	["spi"] = {"Saponi"},
	["spk"] = {"Sengo"},
	["spl"] = {"Selepet"},
	["spm"] = {"Akukem"},
	["spn"] = {"Sanapaná"},
	["spo"] = {"Spokane"},
	["spp"] = {"Supyire Senoufo"},
	["spq"] = {"Loreto-Ucayali Spanish"},
	["spr"] = {"Saparua"},
	["sps"] = {"Saposa"},
	["spt"] = {"Spiti Bhoti"},
	["spu"] = {"Sapuan"},
	["spv"] = {"Sambalpuri", "Kosli"},
	["spx"] = {"South Picene"},
	["spy"] = {"Sabaot"},
	["sqa"] = {"Shama-Sambuga"},
	["sqh"] = {"Shau"},
	["sqj"] = {"Albanian languages"},
	["sqk"] = {"Albanian Sign Language"},
	["sqm"] = {"Suma"},
	["sqn"] = {"Susquehannock"},
	["sqo"] = {"Sorkhei"},
	["sqq"] = {"Sou"},
	["sqr"] = {"Siculo Arabic"},
	["sqs"] = {"Sri Lankan Sign Language"},
	["sqt"] = {"Soqotri"},
	["squ"] = {"Squamish"},
	["sqx"] = {"Kufr Qassem Sign Language (KQSL)"},
	["sra"] = {"Saruga"},
	["srb"] = {"Sora"},
	["src"] = {"Logudorese Sardinian"},
	["sre"] = {"Sara"},
	["srf"] = {"Nafi"},
	["srg"] = {"Sulod"},
	["srh"] = {"Sarikoli"},
	["sri"] = {"Siriano"},
	["srk"] = {"Serudung Murut"},
	["srl"] = {"Isirawa"},
	["srm"] = {"Saramaccan"},
	["srn"] = {"Sranan Tongo"},
	["sro"] = {"Campidanese Sardinian"},
	["srq"] = {"Sirionó"},
	["srr"] = {"Serer"},
	["srs"] = {"Sarsi"},
	["srt"] = {"Sauri"},
	["sru"] = {"Suruí"},
	["srv"] = {"Southern Sorsoganon"},
	["srw"] = {"Serua"},
	["srx"] = {"Sirmauri"},
	["sry"] = {"Sera"},
	["srz"] = {"Shahmirzadi"},
	["ssa"] = {"Nilo-Saharan languages"},
	["ssb"] = {"Southern Sama"},
	["ssc"] = {"Suba-Simbiti"},
	["ssd"] = {"Siroi"},
	["sse"] = {"Balangingi", "Bangingih Sama"},
	["ssf"] = {"Thao"},
	["ssg"] = {"Seimat"},
	["ssh"] = {"Shihhi Arabic"},
	["ssi"] = {"Sansi"},
	["ssj"] = {"Sausi"},
	["ssk"] = {"Sunam"},
	["ssl"] = {"Western Sisaala"},
	["ssm"] = {"Semnam"},
	["ssn"] = {"Waata"},
	["sso"] = {"Sissano"},
	["ssp"] = {"Spanish Sign Language"},
	["ssq"] = {"So'a"},
	["ssr"] = {"Swiss-French Sign Language"},
	["sss"] = {"Sô"},
	["sst"] = {"Sinasina"},
	["ssu"] = {"Susuami"},
	["ssv"] = {"Shark Bay"},
	["ssx"] = {"Samberigi"},
	["ssy"] = {"Saho"},
	["ssz"] = {"Sengseng"},
	["sta"] = {"Settla"},
	["stb"] = {"Northern Subanen"},
	["std"] = {"Sentinel"},
	["ste"] = {"Liana-Seti"},
	["stf"] = {"Seta"},
	["stg"] = {"Trieng"},
	["sth"] = {"Shelta"},
	["sti"] = {"Bulo Stieng"},
	["stj"] = {"Matya Samo"},
	["stk"] = {"Arammba"},
	["stl"] = {"Stellingwerfs"},
	["stm"] = {"Setaman"},
	["stn"] = {"Owa"},
	["sto"] = {"Stoney"},
	["stp"] = {"Southeastern Tepehuan"},
	["stq"] = {"Saterfriesisch"},
	["str"] = {"Straits Salish"},
	["sts"] = {"Shumashti"},
	["stt"] = {"Budeh Stieng"},
	["stu"] = {"Samtao"},
	["stv"] = {"Silt'e"},
	["stw"] = {"Satawalese"},
	["sty"] = {"Siberian Tatar"},
	["sua"] = {"Sulka"},
	["sub"] = {"Suku"},
	["suc"] = {"Western Subanon"},
	["sue"] = {"Suena"},
	["sug"] = {"Suganga"},
	["sui"] = {"Suki"},
	["suj"] = {"Shubi"},
	["suk"] = {"Sukuma"},
	["suo"] = {"Bouni"},
	["suq"] = {"Tirmaga-Chai Suri", "Suri"},
	["sur"] = {"Mwaghavul"},
	["sus"] = {"Susu"},
	["sut"] = {"Subtiaba"},
	["suv"] = {"Puroik"},
	["suw"] = {"Sumbwa"},
	["sux"] = {"Sumerian"},
	["suy"] = {"Suyá"},
	["suz"] = {"Sunwar"},
	["sva"] = {"Svan"},
	["svb"] = {"Ulau-Suain"},
	["svc"] = {"Vincentian Creole English"},
	["sve"] = {"Serili"},
	["svk"] = {"Slovakian Sign Language"},
	["svm"] = {"Slavomolisano"},
	["svs"] = {"Savosavo"},
	["svx"] = {"Skalvian"},
	["swb"] = {"Maore Comorian"},
	["swc"] = {"Congo Swahili"},
	["swf"] = {"Sere"},
	["swg"] = {"Swabian"},
	["swh"] = {"Swahili (individual language)", "Kiswahili"},
	["swi"] = {"Sui"},
	["swj"] = {"Sira"},
	["swk"] = {"Malawi Sena"},
	["swl"] = {"Swedish Sign Language"},
	["swm"] = {"Samosa"},
	["swn"] = {"Sawknah"},
	["swo"] = {"Shanenawa"},
	["swp"] = {"Suau"},
	["swq"] = {"Sharwa"},
	["swr"] = {"Saweru"},
	["sws"] = {"Seluwasan"},
	["swt"] = {"Sawila"},
	["swu"] = {"Suwawa"},
	["swv"] = {"Shekhawati"},
	["sww"] = {"Sowa"},
	["swx"] = {"Suruahá"},
	["swy"] = {"Sarua"},
	["sxb"] = {"Suba"},
	["sxc"] = {"Sicanian"},
	["sxe"] = {"Sighu"},
	["sxg"] = {"Shuhi", "Shixing"},
	["sxk"] = {"Southern Kalapuya"},
	["sxl"] = {"Selian"},
	["sxm"] = {"Samre"},
	["sxn"] = {"Sangir"},
	["sxo"] = {"Sorothaptic"},
	["sxr"] = {"Saaroa"},
	["sxs"] = {"Sasaru"},
	["sxu"] = {"Upper Saxon"},
	["sxw"] = {"Saxwe Gbe"},
	["sya"] = {"Siang"},
	["syb"] = {"Central Subanen"},
	["syc"] = {"Classical Syriac"},
	["syd"] = {"Samoyedic languages"},
	["syi"] = {"Seki"},
	["syk"] = {"Sukur"},
	["syl"] = {"Sylheti"},
	["sym"] = {"Maya Samo"},
	["syn"] = {"Senaya"},
	["syo"] = {"Suoy"},
	["syr"] = {"Syriac"},
	["sys"] = {"Sinyar"},
	["syw"] = {"Kagate"},
	["syx"] = {"Samay"},
	["syy"] = {"Al-Sayyid Bedouin Sign Language"},
	["sza"] = {"Semelai"},
	["szb"] = {"Ngalum"},
	["szc"] = {"Semaq Beri"},
	["sze"] = {"Seze"},
	["szg"] = {"Sengele"},
	["szl"] = {"Silesian"},
	["szn"] = {"Sula"},
	["szp"] = {"Suabo"},
	["szs"] = {"Solomon Islands Sign Language"},
	["szv"] = {"Isu (Fako Division)"},
	["szw"] = {"Sawai"},
	["szy"] = {"Sakizaya"},
	["taa"] = {"Lower Tanana"},
	["tab"] = {"Tabassaran"},
	["tac"] = {"Lowland Tarahumara"},
	["tad"] = {"Tause"},
	["tae"] = {"Tariana"},
	["taf"] = {"Tapirapé"},
	["tag"] = {"Tagoi"},
	["tai"] = {"Tai languages"},
	["taj"] = {"Eastern Tamang"},
	["tak"] = {"Tala"},
	["tal"] = {"Tal"},
	["tan"] = {"Tangale"},
	["tao"] = {"Yami"},
	["tap"] = {"Taabwa"},
	["taq"] = {"Tamasheq"},
	["tar"] = {"Central Tarahumara"},
	["tas"] = {"Tay Boi"},
	["tau"] = {"Upper Tanana"},
	["tav"] = {"Tatuyo"},
	["taw"] = {"Tai"},
	["tax"] = {"Tamki"},
	["tay"] = {"Atayal"},
	["taz"] = {"Tocho"},
	["tba"] = {"Aikanã"},
	["tbc"] = {"Takia"},
	["tbd"] = {"Kaki Ae"},
	["tbe"] = {"Tanimbili"},
	["tbf"] = {"Mandara"},
	["tbg"] = {"North Tairora"},
	["tbh"] = {"Dharawal", "Thurawal"},
	["tbi"] = {"Gaam"},
	["tbj"] = {"Tiang"},
	["tbk"] = {"Calamian Tagbanwa"},
	["tbl"] = {"Tboli"},
	["tbm"] = {"Tagbu"},
	["tbn"] = {"Barro Negro Tunebo"},
	["tbo"] = {"Tawala"},
	["tbp"] = {"Taworta", "Diebroud"},
	["tbq"] = {"Tibeto-Burman languages"},
	["tbr"] = {"Tumtum"},
	["tbs"] = {"Tanguat"},
	["tbt"] = {"Tembo (Kitembo)"},
	["tbu"] = {"Tubar"},
	["tbv"] = {"Tobo"},
	["tbw"] = {"Tagbanwa"},
	["tbx"] = {"Kapin"},
	["tby"] = {"Tabaru"},
	["tbz"] = {"Ditammari"},
	["tca"] = {"Ticuna"},
	["tcb"] = {"Tanacross"},
	["tcc"] = {"Datooga"},
	["tcd"] = {"Tafi"},
	["tce"] = {"Southern Tutchone"},
	["tcf"] = {"Malinaltepec Me'phaa", "Malinaltepec Tlapanec"},
	["tcg"] = {"Tamagario"},
	["tch"] = {"Turks And Caicos Creole English"},
	["tci"] = {"Wára"},
	["tck"] = {"Tchitchege"},
	["tcl"] = {"Taman (Myanmar)"},
	["tcm"] = {"Tanahmerah"},
	["tcn"] = {"Tichurong"},
	["tco"] = {"Taungyo"},
	["tcp"] = {"Tawr Chin"},
	["tcq"] = {"Kaiy"},
	["tcs"] = {"Torres Strait Creole", "Yumplatok"},
	["tct"] = {"T'en"},
	["tcu"] = {"Southeastern Tarahumara"},
	["tcw"] = {"Tecpatlán Totonac"},
	["tcx"] = {"Toda"},
	["tcy"] = {"Tulu"},
	["tcz"] = {"Thado Chin"},
	["tda"] = {"Tagdal"},
	["tdb"] = {"Panchpargania"},
	["tdc"] = {"Emberá-Tadó"},
	["tdd"] = {"Tai Nüa"},
	["tde"] = {"Tiranige Diga Dogon"},
	["tdf"] = {"Talieng"},
	["tdg"] = {"Western Tamang"},
	["tdh"] = {"Thulung"},
	["tdi"] = {"Tomadino"},
	["tdj"] = {"Tajio"},
	["tdk"] = {"Tambas"},
	["tdl"] = {"Sur"},
	["tdm"] = {"Taruma"},
	["tdn"] = {"Tondano"},
	["tdo"] = {"Teme"},
	["tdq"] = {"Tita"},
	["tdr"] = {"Todrah"},
	["tds"] = {"Doutai"},
	["tdt"] = {"Tetun Dili"},
	["tdv"] = {"Toro"},
	["tdx"] = {"Tandroy-Mahafaly Malagasy"},
	["tdy"] = {"Tadyawan"},
	["tea"] = {"Temiar"},
	["teb"] = {"Tetete"},
	["tec"] = {"Terik"},
	["ted"] = {"Tepo Krumen"},
	["tee"] = {"Huehuetla Tepehua"},
	["tef"] = {"Teressa"},
	["teg"] = {"Teke-Tege"},
	["teh"] = {"Tehuelche"},
	["tei"] = {"Torricelli"},
	["tek"] = {"Ibali Teke"},
	["tem"] = {"Timne"},
	["ten"] = {"Tama (Colombia)"},
	["teo"] = {"Teso"},
	["tep"] = {"Tepecano"},
	["teq"] = {"Temein"},
	["ter"] = {"Tereno"},
	["tes"] = {"Tengger"},
	["tet"] = {"Tetum"},
	["teu"] = {"Soo"},
	["tev"] = {"Teor"},
	["tew"] = {"Tewa (USA)"},
	["tex"] = {"Tennet"},
	["tey"] = {"Tulishi"},
	["tez"] = {"Tetserret"},
	["tfi"] = {"Tofin Gbe"},
	["tfn"] = {"Tanaina"},
	["tfo"] = {"Tefaro"},
	["tfr"] = {"Teribe"},
	["tft"] = {"Ternate"},
	["tga"] = {"Sagalla"},
	["tgb"] = {"Tobilung"},
	["tgc"] = {"Tigak"},
	["tgd"] = {"Ciwogai"},
	["tge"] = {"Eastern Gorkha Tamang"},
	["tgf"] = {"Chalikha"},
	["tgh"] = {"Tobagonian Creole English"},
	["tgi"] = {"Lawunuia"},
	["tgj"] = {"Tagin"},
	["tgn"] = {"Tandaganon"},
	["tgo"] = {"Sudest"},
	["tgp"] = {"Tangoa"},
	["tgq"] = {"Tring"},
	["tgr"] = {"Tareng"},
	["tgs"] = {"Nume"},
	["tgt"] = {"Central Tagbanwa"},
	["tgu"] = {"Tanggu"},
	["tgv"] = {"Tingui-Boto"},
	["tgw"] = {"Tagwana Senoufo"},
	["tgx"] = {"Tagish"},
	["tgy"] = {"Togoyo"},
	["tgz"] = {"Tagalaka"},
	["thd"] = {"Kuuk Thaayorre", "Thayore"},
	["the"] = {"Chitwania Tharu"},
	["thf"] = {"Thangmi"},
	["thh"] = {"Northern Tarahumara"},
	["thi"] = {"Tai Long"},
	["thk"] = {"Tharaka", "Kitharaka"},
	["thl"] = {"Dangaura Tharu"},
	["thm"] = {"Aheu"},
	["thn"] = {"Thachanadan"},
	["thp"] = {"Thompson"},
	["thq"] = {"Kochila Tharu"},
	["thr"] = {"Rana Tharu"},
	["ths"] = {"Thakali"},
	["tht"] = {"Tahltan"},
	["thu"] = {"Thuri"},
	["thv"] = {"Tahaggart Tamahaq"},
	["thy"] = {"Tha"},
	["thz"] = {"Tayart Tamajeq"},
	["tia"] = {"Tidikelt Tamazight"},
	["tic"] = {"Tira"},
	["tif"] = {"Tifal"},
	["tig"] = {"Tigre"},
	["tih"] = {"Timugon Murut"},
	["tii"] = {"Tiene"},
	["tij"] = {"Tilung"},
	["tik"] = {"Tikar"},
	["til"] = {"Tillamook"},
	["tim"] = {"Timbe"},
	["tin"] = {"Tindi"},
	["tio"] = {"Teop"},
	["tip"] = {"Trimuris"},
	["tiq"] = {"Tiéfo"},
	["tis"] = {"Masadiit Itneg"},
	["tit"] = {"Tinigua"},
	["tiu"] = {"Adasen"},
	["tiv"] = {"Tiv"},
	["tiw"] = {"Tiwi"},
	["tix"] = {"Southern Tiwa"},
	["tiy"] = {"Tiruray"},
	["tiz"] = {"Tai Hongjin"},
	["tja"] = {"Tajuasohn"},
	["tjg"] = {"Tunjung"},
	["tji"] = {"Northern Tujia"},
	["tjj"] = {"Tjungundji"},
	["tjl"] = {"Tai Laing"},
	["tjm"] = {"Timucua"},
	["tjn"] = {"Tonjon"},
	["tjo"] = {"Temacine Tamazight"},
	["tjp"] = {"Tjupany"},
	["tjs"] = {"Southern Tujia"},
	["tju"] = {"Tjurruru"},
	["tjw"] = {"Djabwurrung"},
	["tka"] = {"Truká"},
	["tkb"] = {"Buksa"},
	["tkd"] = {"Tukudede"},
	["tke"] = {"Takwane"},
	["tkf"] = {"Tukumanféd"},
	["tkg"] = {"Tesaka Malagasy"},
	["tkl"] = {"Tokelau"},
	["tkm"] = {"Takelma"},
	["tkn"] = {"Toku-No-Shima"},
	["tkp"] = {"Tikopia"},
	["tkq"] = {"Tee"},
	["tkr"] = {"Tsakhur"},
	["tks"] = {"Takestani"},
	["tkt"] = {"Kathoriya Tharu"},
	["tku"] = {"Upper Necaxa Totonac"},
	["tkv"] = {"Mur Pano"},
	["tkw"] = {"Teanu"},
	["tkx"] = {"Tangko"},
	["tkz"] = {"Takua"},
	["tla"] = {"Southwestern Tepehuan"},
	["tlb"] = {"Tobelo"},
	["tlc"] = {"Yecuatla Totonac"},
	["tld"] = {"Talaud"},
	["tlf"] = {"Telefol"},
	["tlg"] = {"Tofanma"},
	["tlh"] = {"Klingon", "tlhIngan Hol"},
	["tli"] = {"Tlingit"},
	["tlj"] = {"Talinga-Bwisi"},
	["tlk"] = {"Taloki"},
	["tll"] = {"Tetela"},
	["tlm"] = {"Tolomako"},
	["tln"] = {"Talondo'"},
	["tlo"] = {"Talodi"},
	["tlp"] = {"Filomena Mata-Coahuitlán Totonac"},
	["tlq"] = {"Tai Loi"},
	["tlr"] = {"Talise"},
	["tls"] = {"Tambotalo"},
	["tlt"] = {"Sou Nama", "Teluti"},
	["tlu"] = {"Tulehu"},
	["tlv"] = {"Taliabu"},
	["tlx"] = {"Khehek"},
	["tly"] = {"Talysh"},
	["tma"] = {"Tama (Chad)"},
	["tmb"] = {"Katbol", "Avava"},
	["tmc"] = {"Tumak"},
	["tmd"] = {"Haruai"},
	["tme"] = {"Tremembé"},
	["tmf"] = {"Toba-Maskoy"},
	["tmg"] = {"Ternateño"},
	["tmh"] = {"Tamashek"},
	["tmi"] = {"Tutuba"},
	["tmj"] = {"Samarokena"},
	["tml"] = {"Tamnim Citak"},
	["tmm"] = {"Tai Thanh"},
	["tmn"] = {"Taman (Indonesia)"},
	["tmo"] = {"Temoq"},
	["tmq"] = {"Tumleo"},
	["tmr"] = {"Jewish Babylonian Aramaic (ca. 200-1200 CE)"},
	["tms"] = {"Tima"},
	["tmt"] = {"Tasmate"},
	["tmu"] = {"Iau"},
	["tmv"] = {"Tembo (Motembo)"},
	["tmw"] = {"Temuan"},
	["tmy"] = {"Tami"},
	["tmz"] = {"Tamanaku"},
	["tna"] = {"Tacana"},
	["tnb"] = {"Western Tunebo"},
	["tnc"] = {"Tanimuca-Retuarã"},
	["tnd"] = {"Angosturas Tunebo"},
	["tng"] = {"Tobanga"},
	["tnh"] = {"Maiani"},
	["tni"] = {"Tandia"},
	["tnk"] = {"Kwamera"},
	["tnl"] = {"Lenakel"},
	["tnm"] = {"Tabla"},
	["tnn"] = {"North Tanna"},
	["tno"] = {"Toromono"},
	["tnp"] = {"Whitesands"},
	["tnq"] = {"Taino"},
	["tnr"] = {"Ménik"},
	["tns"] = {"Tenis"},
	["tnt"] = {"Tontemboan"},
	["tnu"] = {"Tay Khang"},
	["tnv"] = {"Tangchangya"},
	["tnw"] = {"Tonsawang"},
	["tnx"] = {"Tanema"},
	["tny"] = {"Tongwe"},
	["tnz"] = {"Ten'edn"},
	["tob"] = {"Toba"},
	["toc"] = {"Coyutla Totonac"},
	["tod"] = {"Toma"},
	["tof"] = {"Gizrra"},
	["tog"] = {"Tonga (Nyasa)"},
	["toh"] = {"Gitonga"},
	["toi"] = {"Tonga (Zambia)"},
	["toj"] = {"Tojolabal"},
	["tok"] = {"Toki Pona"},
	["tol"] = {"Tolowa"},
	["tom"] = {"Tombulu"},
	["too"] = {"Xicotepec De Juárez Totonac"},
	["top"] = {"Papantla Totonac"},
	["toq"] = {"Toposa"},
	["tor"] = {"Togbo-Vara Banda"},
	["tos"] = {"Highland Totonac"},
	["tou"] = {"Tho"},
	["tov"] = {"Upper Taromi"},
	["tow"] = {"Jemez"},
	["tox"] = {"Tobian"},
	["toy"] = {"Topoiyo"},
	["toz"] = {"To"},
	["tpa"] = {"Taupota"},
	["tpc"] = {"Azoyú Me'phaa", "Azoyú Tlapanec"},
	["tpe"] = {"Tippera"},
	["tpf"] = {"Tarpia"},
	["tpg"] = {"Kula"},
	["tpi"] = {"Tok Pisin"},
	["tpj"] = {"Tapieté"},
	["tpk"] = {"Tupinikin"},
	["tpl"] = {"Tlacoapa Me'phaa", "Tlacoapa Tlapanec"},
	["tpm"] = {"Tampulma"},
	["tpn"] = {"Tupinambá"},
	["tpo"] = {"Tai Pao"},
	["tpp"] = {"Pisaflores Tepehua"},
	["tpq"] = {"Tukpa"},
	["tpr"] = {"Tuparí"},
	["tpt"] = {"Tlachichilco Tepehua"},
	["tpu"] = {"Tampuan"},
	["tpv"] = {"Tanapag"},
	["tpx"] = {"Acatepec Me'phaa", "Acatepec Tlapanec"},
	["tpy"] = {"Trumai"},
	["tpz"] = {"Tinputz"},
	["tqb"] = {"Tembé"},
	["tql"] = {"Lehali"},
	["tqm"] = {"Turumsa"},
	["tqn"] = {"Tenino"},
	["tqo"] = {"Toaripi"},
	["tqp"] = {"Tomoip"},
	["tqq"] = {"Tunni"},
	["tqr"] = {"Torona"},
	["tqt"] = {"Western Totonac"},
	["tqu"] = {"Touo"},
	["tqw"] = {"Tonkawa"},
	["tra"] = {"Tirahi"},
	["trb"] = {"Terebu"},
	["trc"] = {"Copala Triqui"},
	["trd"] = {"Turi"},
	["tre"] = {"East Tarangan"},
	["trf"] = {"Trinidadian Creole English"},
	["trg"] = {"Lishán Didán"},
	["trh"] = {"Turaka"},
	["tri"] = {"Trió"},
	["trj"] = {"Toram"},
	["trk"] = {"Turkic languages"},
	["trl"] = {"Traveller Scottish"},
	["trm"] = {"Tregami"},
	["trn"] = {"Trinitario"},
	["tro"] = {"Tarao Naga"},
	["trp"] = {"Kok Borok"},
	["trq"] = {"San Martín Itunyoso Triqui"},
	["trr"] = {"Taushiro"},
	["trs"] = {"Chicahuaxtla Triqui"},
	["trt"] = {"Tunggare"},
	["tru"] = {"Turoyo", "Surayt"},
	["trv"] = {"Sediq", "Seediq", "Taroko"},
	["trw"] = {"Torwali"},
	["trx"] = {"Tringgus-Sembaan Bidayuh"},
	["try"] = {"Turung"},
	["trz"] = {"Torá"},
	["tsa"] = {"Tsaangi"},
	["tsb"] = {"Tsamai"},
	["tsc"] = {"Tswa"},
	["tsd"] = {"Tsakonian"},
	["tse"] = {"Tunisian Sign Language"},
	["tsg"] = {"Tausug"},
	["tsh"] = {"Tsuvan"},
	["tsi"] = {"Tsimshian"},
	["tsj"] = {"Tshangla"},
	["tsk"] = {"Tseku"},
	["tsl"] = {"Ts'ün-Lao"},
	["tsm"] = {"Turkish Sign Language", "Türk İşaret Dili"},
	["tsp"] = {"Northern Toussian"},
	["tsq"] = {"Thai Sign Language"},
	["tsr"] = {"Akei"},
	["tss"] = {"Taiwan Sign Language"},
	["tst"] = {"Tondi Songway Kiini"},
	["tsu"] = {"Tsou"},
	["tsv"] = {"Tsogo"},
	["tsw"] = {"Tsishingini"},
	["tsx"] = {"Mubami"},
	["tsy"] = {"Tebul Sign Language"},
	["tsz"] = {"Purepecha"},
	["tta"] = {"Tutelo"},
	["ttb"] = {"Gaa"},
	["ttc"] = {"Tektiteko"},
	["ttd"] = {"Tauade"},
	["tte"] = {"Bwanabwana"},
	["ttf"] = {"Tuotomb"},
	["ttg"] = {"Tutong"},
	["tth"] = {"Upper Ta'oih"},
	["tti"] = {"Tobati"},
	["ttj"] = {"Tooro"},
	["ttk"] = {"Totoro"},
	["ttl"] = {"Totela"},
	["ttm"] = {"Northern Tutchone"},
	["ttn"] = {"Towei"},
	["tto"] = {"Lower Ta'oih"},
	["ttp"] = {"Tombelala"},
	["ttq"] = {"Tawallammat Tamajaq"},
	["ttr"] = {"Tera"},
	["tts"] = {"Northeastern Thai"},
	["ttt"] = {"Muslim Tat"},
	["ttu"] = {"Torau"},
	["ttv"] = {"Titan"},
	["ttw"] = {"Long Wat"},
	["tty"] = {"Sikaritai"},
	["ttz"] = {"Tsum"},
	["tua"] = {"Wiarumus"},
	["tub"] = {"Tübatulabal"},
	["tuc"] = {"Mutu"},
	["tud"] = {"Tuxá"},
	["tue"] = {"Tuyuca"},
	["tuf"] = {"Central Tunebo"},
	["tug"] = {"Tunia"},
	["tuh"] = {"Taulil"},
	["tui"] = {"Tupuri"},
	["tuj"] = {"Tugutil"},
	["tul"] = {"Tula"},
	["tum"] = {"Tumbuka"},
	["tun"] = {"Tunica"},
	["tuo"] = {"Tucano"},
	["tup"] = {"Tupi languages"},
	["tuq"] = {"Tedaga"},
	["tus"] = {"Tuscarora"},
	["tut"] = {"Altaic languages"},
	["tuu"] = {"Tututni"},
	["tuv"] = {"Turkana"},
	["tuw"] = {"Tungus languages"},
	["tux"] = {"Tuxináwa"},
	["tuy"] = {"Tugen"},
	["tuz"] = {"Turka"},
	["tva"] = {"Vaghua"},
	["tvd"] = {"Tsuvadi"},
	["tve"] = {"Te'un"},
	["tvi"] = {"Tulai"},
	["tvk"] = {"Southeast Ambrym"},
	["tvl"] = {"Tuvalu"},
	["tvm"] = {"Tela-Masbuar"},
	["tvn"] = {"Tavoyan"},
	["tvo"] = {"Tidore"},
	["tvs"] = {"Taveta"},
	["tvt"] = {"Tutsa Naga"},
	["tvu"] = {"Tunen"},
	["tvw"] = {"Sedoa"},
	["tvx"] = {"Taivoan"},
	["tvy"] = {"Timor Pidgin"},
	["twa"] = {"Twana"},
	["twb"] = {"Western Tawbuid"},
	["twc"] = {"Teshenawa"},
	["twd"] = {"Twents"},
	["twe"] = {"Tewa (Indonesia)"},
	["twf"] = {"Northern Tiwa"},
	["twg"] = {"Tereweng"},
	["twh"] = {"Tai Dón"},
	["twl"] = {"Tawara"},
	["twm"] = {"Tawang Monpa"},
	["twn"] = {"Twendi"},
	["two"] = {"Tswapong"},
	["twp"] = {"Ere"},
	["twq"] = {"Tasawaq"},
	["twr"] = {"Southwestern Tarahumara"},
	["twt"] = {"Turiwára"},
	["twu"] = {"Termanu"},
	["tww"] = {"Tuwari"},
	["twx"] = {"Tewe"},
	["twy"] = {"Tawoyan"},
	["txa"] = {"Tombonuo"},
	["txb"] = {"Tokharian B"},
	["txc"] = {"Tsetsaut"},
	["txe"] = {"Totoli"},
	["txg"] = {"Tangut"},
	["txh"] = {"Thracian"},
	["txi"] = {"Ikpeng"},
	["txj"] = {"Tarjumo"},
	["txm"] = {"Tomini"},
	["txn"] = {"West Tarangan"},
	["txo"] = {"Toto"},
	["txq"] = {"Tii"},
	["txr"] = {"Tartessian"},
	["txs"] = {"Tonsea"},
	["txt"] = {"Citak"},
	["txu"] = {"Kayapó"},
	["txx"] = {"Tatana"},
	["txy"] = {"Tanosy Malagasy"},
	["tya"] = {"Tauya"},
	["tye"] = {"Kyanga"},
	["tyh"] = {"O'du"},
	["tyi"] = {"Teke-Tsaayi"},
	["tyj"] = {"Tai Do", "Tai Yo"},
	["tyl"] = {"Thu Lao"},
	["tyn"] = {"Kombai"},
	["typ"] = {"Thaypan"},
	["tyr"] = {"Tai Daeng"},
	["tys"] = {"Tày Sa Pa"},
	["tyt"] = {"Tày Tac"},
	["tyu"] = {"Kua"},
	["tyv"] = {"Tuvinian"},
	["tyx"] = {"Teke-Tyee"},
	["tyy"] = {"Tiyaa"},
	["tyz"] = {"Tày"},
	["tza"] = {"Tanzanian Sign Language"},
	["tzh"] = {"Tzeltal"},
	["tzj"] = {"Tz'utujil"},
	["tzl"] = {"Talossan"},
	["tzm"] = {"Central Atlas Tamazight"},
	["tzn"] = {"Tugun"},
	["tzo"] = {"Tzotzil"},
	["tzx"] = {"Tabriak"},
	["uam"] = {"Uamué"},
	["uan"] = {"Kuan"},
	["uar"] = {"Tairuma"},
	["uba"] = {"Ubang"},
	["ubi"] = {"Ubi"},
	["ubl"] = {"Buhi'non Bikol"},
	["ubr"] = {"Ubir"},
	["ubu"] = {"Umbu-Ungu"},
	["uby"] = {"Ubykh"},
	["uda"] = {"Uda"},
	["ude"] = {"Udihe"},
	["udg"] = {"Muduga"},
	["udi"] = {"Udi"},
	["udj"] = {"Ujir"},
	["udl"] = {"Wuzlam"},
	["udm"] = {"Udmurt"},
	["udu"] = {"Uduk"},
	["ues"] = {"Kioko"},
	["ufi"] = {"Ufim"},
	["uga"] = {"Ugaritic"},
	["ugb"] = {"Kuku-Ugbanh"},
	["uge"] = {"Ughele"},
	["ugh"] = {"Kubachi"},
	["ugn"] = {"Ugandan Sign Language"},
	["ugo"] = {"Ugong"},
	["ugy"] = {"Uruguayan Sign Language"},
	["uha"] = {"Uhami"},
	["uhn"] = {"Damal"},
	["uis"] = {"Uisai"},
	["uiv"] = {"Iyive"},
	["uji"] = {"Tanjijili"},
	["uka"] = {"Kaburi"},
	["ukg"] = {"Ukuriguma"},
	["ukh"] = {"Ukhwejo"},
	["uki"] = {"Kui (India)"},
	["ukk"] = {"Muak Sa-aak"},
	["ukl"] = {"Ukrainian Sign Language"},
	["ukp"] = {"Ukpe-Bayobiri"},
	["ukq"] = {"Ukwa"},
	["uks"] = {"Urubú-Kaapor Sign Language", "Kaapor Sign Language"},
	["uku"] = {"Ukue"},
	["ukv"] = {"Kuku"},
	["ukw"] = {"Ukwuani-Aboh-Ndoni"},
	["uky"] = {"Kuuk-Yak"},
	["ula"] = {"Fungwa"},
	["ulb"] = {"Ulukwumi"},
	["ulc"] = {"Ulch"},
	["ule"] = {"Lule"},
	["ulf"] = {"Usku", "Afra"},
	["uli"] = {"Ulithian"},
	["ulk"] = {"Meriam Mir"},
	["ull"] = {"Ullatan"},
	["ulm"] = {"Ulumanda'"},
	["uln"] = {"Unserdeutsch"},
	["ulu"] = {"Uma' Lung"},
	["ulw"] = {"Ulwa"},
	["uly"] = {"Buli"},
	["uma"] = {"Umatilla"},
	["umb"] = {"Umbundu"},
	["umc"] = {"Marrucinian"},
	["umd"] = {"Umbindhamu"},
	["umg"] = {"Morrobalama", "Umbuygamu"},
	["umi"] = {"Ukit"},
	["umm"] = {"Umon"},
	["umn"] = {"Makyan Naga"},
	["umo"] = {"Umotína"},
	["ump"] = {"Umpila"},
	["umr"] = {"Umbugarla"},
	["ums"] = {"Pendau"},
	["umu"] = {"Munsee"},
	["una"] = {"North Watut"},
	["und"] = {"Undetermined"},
	["une"] = {"Uneme"},
	["ung"] = {"Ngarinyin"},
	["uni"] = {"Uni"},
	["unk"] = {"Enawené-Nawé"},
	["unm"] = {"Unami"},
	["unn"] = {"Kurnai"},
	["unr"] = {"Mundari"},
	["unu"] = {"Unubahe"},
	["unx"] = {"Munda"},
	["unz"] = {"Unde Kaili"},
	["uon"] = {"Kulon"},
	["upi"] = {"Umeda"},
	["upv"] = {"Uripiv-Wala-Rano-Atchin"},
	["ura"] = {"Urarina"},
	["urb"] = {"Urubú-Kaapor", "Kaapor"},
	["urc"] = {"Urningangg"},
	["ure"] = {"Uru"},
	["urf"] = {"Uradhi"},
	["urg"] = {"Urigina"},
	["urh"] = {"Urhobo"},
	["uri"] = {"Urim"},
	["urj"] = {"Uralic languages"},
	["urk"] = {"Urak Lawoi'"},
	["url"] = {"Urali"},
	["urm"] = {"Urapmin"},
	["urn"] = {"Uruangnirin"},
	["uro"] = {"Ura (Papua New Guinea)"},
	["urp"] = {"Uru-Pa-In"},
	["urr"] = {"Lehalurup", "Löyöp"},
	["urt"] = {"Urat"},
	["uru"] = {"Urumi"},
	["urv"] = {"Uruava"},
	["urw"] = {"Sop"},
	["urx"] = {"Urimo"},
	["ury"] = {"Orya"},
	["urz"] = {"Uru-Eu-Wau-Wau"},
	["usa"] = {"Usarufa"},
	["ush"] = {"Ushojo"},
	["usi"] = {"Usui"},
	["usk"] = {"Usaghade"},
	["usp"] = {"Uspanteco"},
	["uss"] = {"us-Saare"},
	["usu"] = {"Uya"},
	["uta"] = {"Otank"},
	["ute"] = {"Ute-Southern Paiute"},
	["uth"] = {"ut-Hun"},
	["utp"] = {"Amba (Solomon Islands)"},
	["utr"] = {"Etulo"},
	["utu"] = {"Utu"},
	["uum"] = {"Urum"},
	["uur"] = {"Ura (Vanuatu)"},
	["uuu"] = {"U"},
	["uve"] = {"West Uvean", "Fagauvea"},
	["uvh"] = {"Uri"},
	["uvl"] = {"Lote"},
	["uwa"] = {"Kuku-Uwanh"},
	["uya"] = {"Doko-Uyanga"},
	["uzn"] = {"Northern Uzbek"},
	["uzs"] = {"Southern Uzbek"},
	["vaa"] = {"Vaagri Booli"},
	["vae"] = {"Vale"},
	["vaf"] = {"Vafsi"},
	["vag"] = {"Vagla"},
	["vah"] = {"Varhadi-Nagpuri"},
	["vai"] = {"Vai"},
	["vaj"] = {"Sekele", "Northwestern ǃKung", "Vasekele"},
	["val"] = {"Vehes"},
	["vam"] = {"Vanimo"},
	["van"] = {"Valman"},
	["vao"] = {"Vao"},
	["vap"] = {"Vaiphei"},
	["var"] = {"Huarijio"},
	["vas"] = {"Vasavi"},
	["vau"] = {"Vanuma"},
	["vav"] = {"Varli"},
	["vay"] = {"Wayu"},
	["vbb"] = {"Southeast Babar"},
	["vbk"] = {"Southwestern Bontok"},
	["vec"] = {"Venetian"},
	["ved"] = {"Veddah"},
	["vel"] = {"Veluws"},
	["vem"] = {"Vemgo-Mabas"},
	["veo"] = {"Ventureño"},
	["vep"] = {"Veps"},
	["ver"] = {"Mom Jango"},
	["vgr"] = {"Vaghri"},
	["vgt"] = {"Vlaamse Gebarentaal", "Flemish Sign Language"},
	["vic"] = {"Virgin Islands Creole English"},
	["vid"] = {"Vidunda"},
	["vif"] = {"Vili"},
	["vig"] = {"Viemo"},
	["vil"] = {"Vilela"},
	["vin"] = {"Vinza"},
	["vis"] = {"Vishavan"},
	["vit"] = {"Viti"},
	["viv"] = {"Iduna"},
	["vjk"] = {"Bajjika"},
	["vka"] = {"Kariyarra"},
	["vkj"] = {"Kujarge"},
	["vkk"] = {"Kaur"},
	["vkl"] = {"Kulisusu"},
	["vkm"] = {"Kamakan"},
	["vkn"] = {"Koro Nulu"},
	["vko"] = {"Kodeoha"},
	["vkp"] = {"Korlai Creole Portuguese"},
	["vkt"] = {"Tenggarong Kutai Malay"},
	["vku"] = {"Kurrama"},
	["vkz"] = {"Koro Zuba"},
	["vlp"] = {"Valpei"},
	["vls"] = {"Vlaams"},
	["vma"] = {"Martuyhunira"},
	["vmb"] = {"Barbaram"},
	["vmc"] = {"Juxtlahuaca Mixtec"},
	["vmd"] = {"Mudu Koraga"},
	["vme"] = {"East Masela"},
	["vmf"] = {"Mainfränkisch"},
	["vmg"] = {"Lungalunga"},
	["vmh"] = {"Maraghei"},
	["vmi"] = {"Miwa"},
	["vmj"] = {"Ixtayutla Mixtec"},
	["vmk"] = {"Makhuwa-Shirima"},
	["vml"] = {"Malgana"},
	["vmm"] = {"Mitlatongo Mixtec"},
	["vmp"] = {"Soyaltepec Mazatec"},
	["vmq"] = {"Soyaltepec Mixtec"},
	["vmr"] = {"Marenje"},
	["vms"] = {"Moksela"},
	["vmu"] = {"Muluridyi"},
	["vmv"] = {"Valley Maidu"},
	["vmw"] = {"Makhuwa"},
	["vmx"] = {"Tamazola Mixtec"},
	["vmy"] = {"Ayautla Mazatec"},
	["vmz"] = {"Mazatlán Mazatec"},
	["vnk"] = {"Vano", "Lovono"},
	["vnm"] = {"Vinmavis", "Neve'ei"},
	["vnp"] = {"Vunapu"},
	["vor"] = {"Voro"},
	["vot"] = {"Votic"},
	["vra"] = {"Vera'a"},
	["vro"] = {"Võro"},
	["vrs"] = {"Varisi"},
	["vrt"] = {"Burmbar", "Banam Bay"},
	["vsi"] = {"Moldova Sign Language"},
	["vsl"] = {"Venezuelan Sign Language"},
	["vsn"] = {"Vedic Sanskrit"},
	["vsv"] = {"Valencian Sign Language", "Llengua de signes valenciana"},
	["vto"] = {"Vitou"},
	["vum"] = {"Vumbu"},
	["vun"] = {"Vunjo"},
	["vut"] = {"Vute"},
	["vwa"] = {"Awa (China)"},
	["waa"] = {"Walla Walla"},
	["wab"] = {"Wab"},
	["wac"] = {"Wasco-Wishram"},
	["wad"] = {"Wamesa", "Wondama"},
	["wae"] = {"Walser"},
	["waf"] = {"Wakoná"},
	["wag"] = {"Wa'ema"},
	["wah"] = {"Watubela"},
	["wai"] = {"Wares"},
	["waj"] = {"Waffa"},
	["wak"] = {"Wakashan languages"},
	["wal"] = {"Wolaytta", "Wolaitta"},
	["wam"] = {"Wampanoag"},
	["wan"] = {"Wan"},
	["wao"] = {"Wappo"},
	["wap"] = {"Wapishana"},
	["waq"] = {"Wagiman"},
	["war"] = {"Waray (Philippines)"},
	["was"] = {"Washo"},
	["wat"] = {"Kaninuwa"},
	["wau"] = {"Waurá"},
	["wav"] = {"Waka"},
	["waw"] = {"Waiwai"},
	["wax"] = {"Watam", "Marangis"},
	["way"] = {"Wayana"},
	["waz"] = {"Wampur"},
	["wba"] = {"Warao"},
	["wbb"] = {"Wabo"},
	["wbe"] = {"Waritai"},
	["wbf"] = {"Wara"},
	["wbh"] = {"Wanda"},
	["wbi"] = {"Vwanji"},
	["wbj"] = {"Alagwa"},
	["wbk"] = {"Waigali"},
	["wbl"] = {"Wakhi"},
	["wbm"] = {"Wa"},
	["wbp"] = {"Warlpiri"},
	["wbq"] = {"Waddar"},
	["wbr"] = {"Wagdi"},
	["wbs"] = {"West Bengal Sign Language"},
	["wbt"] = {"Warnman"},
	["wbv"] = {"Wajarri"},
	["wbw"] = {"Woi"},
	["wca"] = {"Yanomámi"},
	["wci"] = {"Waci Gbe"},
	["wdd"] = {"Wandji"},
	["wdg"] = {"Wadaginam"},
	["wdj"] = {"Wadjiginy"},
	["wdk"] = {"Wadikali"},
	["wdt"] = {"Wendat"},
	["wdu"] = {"Wadjigu"},
	["wdy"] = {"Wadjabangayi"},
	["wea"] = {"Wewaw"},
	["wec"] = {"Wè Western"},
	["wed"] = {"Wedau"},
	["weg"] = {"Wergaia"},
	["weh"] = {"Weh"},
	["wei"] = {"Kiunum"},
	["wem"] = {"Weme Gbe"},
	["wen"] = {"Sorbian languages"},
	["weo"] = {"Wemale"},
	["wep"] = {"Westphalien"},
	["wer"] = {"Weri"},
	["wes"] = {"Cameroon Pidgin"},
	["wet"] = {"Perai"},
	["weu"] = {"Rawngtu Chin"},
	["wew"] = {"Wejewa"},
	["wfg"] = {"Yafi", "Zorop"},
	["wga"] = {"Wagaya"},
	["wgb"] = {"Wagawaga"},
	["wgg"] = {"Wangkangurru", "Wangganguru"},
	["wgi"] = {"Wahgi"},
	["wgo"] = {"Waigeo"},
	["wgu"] = {"Wirangu"},
	["wgy"] = {"Warrgamay"},
	["wha"] = {"Sou Upaa", "Manusela"},
	["whg"] = {"North Wahgi"},
	["whk"] = {"Wahau Kenyah"},
	["whu"] = {"Wahau Kayan"},
	["wib"] = {"Southern Toussian"},
	["wic"] = {"Wichita"},
	["wie"] = {"Wik-Epa"},
	["wif"] = {"Wik-Keyangan"},
	["wig"] = {"Wik Ngathan"},
	["wih"] = {"Wik-Me'anha"},
	["wii"] = {"Minidien"},
	["wij"] = {"Wik-Iiyanh"},
	["wik"] = {"Wikalkan"},
	["wil"] = {"Wilawila"},
	["wim"] = {"Wik-Mungkan"},
	["win"] = {"Ho-Chunk"},
	["wir"] = {"Wiraféd"},
	["wiu"] = {"Wiru"},
	["wiv"] = {"Vitu"},
	["wiy"] = {"Wiyot"},
	["wja"] = {"Waja"},
	["wji"] = {"Warji"},
	["wka"] = {"Kw'adza"},
	["wkb"] = {"Kumbaran"},
	["wkd"] = {"Wakde", "Mo"},
	["wkl"] = {"Kalanadi"},
	["wkr"] = {"Keerray-Woorroong"},
	["wku"] = {"Kunduvadi"},
	["wkw"] = {"Wakawaka"},
	["wky"] = {"Wangkayutyuru"},
	["wla"] = {"Walio"},
	["wlc"] = {"Mwali Comorian"},
	["wle"] = {"Wolane"},
	["wlg"] = {"Kunbarlang"},
	["wlh"] = {"Welaun"},
	["wli"] = {"Waioli"},
	["wlk"] = {"Wailaki"},
	["wll"] = {"Wali (Sudan)"},
	["wlm"] = {"Middle Welsh"},
	["wlo"] = {"Wolio"},
	["wlr"] = {"Wailapa"},
	["wls"] = {"Wallisian"},
	["wlu"] = {"Wuliwuli"},
	["wlv"] = {"Wichí Lhamtés Vejoz"},
	["wlw"] = {"Walak"},
	["wlx"] = {"Wali (Ghana)"},
	["wly"] = {"Waling"},
	["wma"] = {"Mawa (Nigeria)"},
	["wmb"] = {"Wambaya"},
	["wmc"] = {"Wamas"},
	["wmd"] = {"Mamaindé"},
	["wme"] = {"Wambule"},
	["wmg"] = {"Western Minyag"},
	["wmh"] = {"Waima'a"},
	["wmi"] = {"Wamin"},
	["wmm"] = {"Maiwa (Indonesia)"},
	["wmn"] = {"Waamwang"},
	["wmo"] = {"Wom (Papua New Guinea)"},
	["wms"] = {"Wambon"},
	["wmt"] = {"Walmajarri"},
	["wmw"] = {"Mwani"},
	["wmx"] = {"Womo"},
	["wnb"] = {"Mokati"},
	["wnc"] = {"Wantoat"},
	["wnd"] = {"Wandarang"},
	["wne"] = {"Waneci"},
	["wng"] = {"Wanggom"},
	["wni"] = {"Ndzwani Comorian"},
	["wnk"] = {"Wanukaka"},
	["wnm"] = {"Wanggamala"},
	["wnn"] = {"Wunumara"},
	["wno"] = {"Wano"},
	["wnp"] = {"Wanap"},
	["wnu"] = {"Usan"},
	["wnw"] = {"Wintu"},
	["wny"] = {"Wanyi", "Waanyi"},
	["woa"] = {"Kuwema", "Tyaraity"},
	["wob"] = {"Wè Northern"},
	["woc"] = {"Wogeo"},
	["wod"] = {"Wolani"},
	["woe"] = {"Woleaian"},
	["wof"] = {"Gambian Wolof"},
	["wog"] = {"Wogamusin"},
	["woi"] = {"Kamang"},
	["wok"] = {"Longto"},
	["wom"] = {"Wom (Nigeria)"},
	["won"] = {"Wongo"},
	["woo"] = {"Manombai"},
	["wor"] = {"Woria"},
	["wos"] = {"Hanga Hundi"},
	["wow"] = {"Wawonii"},
	["woy"] = {"Weyto"},
	["wpc"] = {"Maco"},
	["wrb"] = {"Waluwarra", "Warluwara"},
	["wrg"] = {"Warungu", "Gudjal"},
	["wrh"] = {"Wiradjuri"},
	["wri"] = {"Wariyangga"},
	["wrk"] = {"Garrwa"},
	["wrl"] = {"Warlmanpa"},
	["wrm"] = {"Warumungu"},
	["wrn"] = {"Warnang"},
	["wro"] = {"Worrorra"},
	["wrp"] = {"Waropen"},
	["wrr"] = {"Wardaman"},
	["wrs"] = {"Waris"},
	["wru"] = {"Waru"},
	["wrv"] = {"Waruna"},
	["wrw"] = {"Gugu Warra"},
	["wrx"] = {"Wae Rana"},
	["wry"] = {"Merwari"},
	["wrz"] = {"Waray (Australia)"},
	["wsa"] = {"Warembori"},
	["wsg"] = {"Adilabad Gondi"},
	["wsi"] = {"Wusi"},
	["wsk"] = {"Waskia"},
	["wsr"] = {"Owenia"},
	["wss"] = {"Wasa"},
	["wsu"] = {"Wasu"},
	["wsv"] = {"Wotapuri-Katarqalai"},
	["wtb"] = {"Matambwe"},
	["wtf"] = {"Watiwa"},
	["wth"] = {"Wathawurrung"},
	["wti"] = {"Berta"},
	["wtk"] = {"Watakataui"},
	["wtm"] = {"Mewati"},
	["wtw"] = {"Wotu"},
	["wua"] = {"Wikngenchera"},
	["wub"] = {"Wunambal"},
	["wud"] = {"Wudu"},
	["wuh"] = {"Wutunhua"},
	["wul"] = {"Silimo"},
	["wum"] = {"Wumbvu"},
	["wun"] = {"Bungu"},
	["wur"] = {"Wurrugu"},
	["wut"] = {"Wutung"},
	["wuu"] = {"Wu Chinese"},
	["wuv"] = {"Wuvulu-Aua"},
	["wux"] = {"Wulna"},
	["wuy"] = {"Wauyai"},
	["wwa"] = {"Waama"},
	["wwb"] = {"Wakabunga"},
	["wwo"] = {"Wetamut", "Dorig"},
	["wwr"] = {"Warrwa"},
	["www"] = {"Wawa"},
	["wxa"] = {"Waxianghua"},
	["wxw"] = {"Wardandi"},
	["wyb"] = {"Wangaaybuwan-Ngiyambaa"},
	["wyi"] = {"Woiwurrung"},
	["wym"] = {"Wymysorys"},
	["wyn"] = {"Wyandot"},
	["wyr"] = {"Wayoró"},
	["wyy"] = {"Western Fijian"},
	["xaa"] = {"Andalusian Arabic"},
	["xab"] = {"Sambe"},
	["xac"] = {"Kachari"},
	["xad"] = {"Adai"},
	["xae"] = {"Aequian"},
	["xag"] = {"Aghwan"},
	["xai"] = {"Kaimbé"},
	["xaj"] = {"Ararandewára"},
	["xak"] = {"Máku"},
	["xal"] = {"Kalmyk", "Oirat"},
	["xam"] = {"ǀXam"},
	["xan"] = {"Xamtanga"},
	["xao"] = {"Khao"},
	["xap"] = {"Apalachee"},
	["xaq"] = {"Aquitanian"},
	["xar"] = {"Karami"},
	["xas"] = {"Kamas"},
	["xat"] = {"Katawixi"},
	["xau"] = {"Kauwera"},
	["xav"] = {"Xavánte"},
	["xaw"] = {"Kawaiisu"},
	["xay"] = {"Kayan Mahakam"},
	["xbb"] = {"Lower Burdekin"},
	["xbc"] = {"Bactrian"},
	["xbd"] = {"Bindal"},
	["xbe"] = {"Bigambal"},
	["xbg"] = {"Bunganditj"},
	["xbi"] = {"Kombio"},
	["xbj"] = {"Birrpayi"},
	["xbm"] = {"Middle Breton"},
	["xbn"] = {"Kenaboi"},
	["xbo"] = {"Bolgarian"},
	["xbp"] = {"Bibbulman"},
	["xbr"] = {"Kambera"},
	["xbw"] = {"Kambiwá"},
	["xby"] = {"Batjala", "Batyala"},
	["xcb"] = {"Cumbric"},
	["xcc"] = {"Camunic"},
	["xce"] = {"Celtiberian"},
	["xcg"] = {"Cisalpine Gaulish"},
	["xch"] = {"Chemakum", "Chimakum"},
	["xcl"] = {"Classical Armenian"},
	["xcm"] = {"Comecrudo"},
	["xcn"] = {"Cotoname"},
	["xco"] = {"Chorasmian"},
	["xcr"] = {"Carian"},
	["xct"] = {"Classical Tibetan"},
	["xcu"] = {"Curonian"},
	["xcv"] = {"Chuvantsy"},
	["xcw"] = {"Coahuilteco"},
	["xcy"] = {"Cayuse"},
	["xda"] = {"Darkinyung"},
	["xdc"] = {"Dacian"},
	["xdk"] = {"Dharuk"},
	["xdm"] = {"Edomite"},
	["xdo"] = {"Kwandu"},
	["xdq"] = {"Kaitag"},
	["xdy"] = {"Malayic Dayak"},
	["xeb"] = {"Eblan"},
	["xed"] = {"Hdi"},
	["xeg"] = {"ǁXegwi"},
	["xel"] = {"Kelo"},
	["xem"] = {"Kembayan"},
	["xep"] = {"Epi-Olmec"},
	["xer"] = {"Xerénte"},
	["xes"] = {"Kesawai"},
	["xet"] = {"Xetá"},
	["xeu"] = {"Keoru-Ahia"},
	["xfa"] = {"Faliscan"},
	["xga"] = {"Galatian"},
	["xgb"] = {"Gbin"},
	["xgd"] = {"Gudang"},
	["xgf"] = {"Gabrielino-Fernandeño"},
	["xgg"] = {"Goreng"},
	["xgi"] = {"Garingbal"},
	["xgl"] = {"Galindan"},
	["xgm"] = {"Dharumbal", "Guwinmal"},
	["xgn"] = {"Mongolian languages"},
	["xgr"] = {"Garza"},
	["xgu"] = {"Unggumi"},
	["xgw"] = {"Guwa"},
	["xha"] = {"Harami"},
	["xhc"] = {"Hunnic"},
	["xhd"] = {"Hadrami"},
	["xhe"] = {"Khetrani"},
	["xhm"] = {"Middle Khmer (1400 to 1850 CE)"},
	["xhr"] = {"Hernican"},
	["xht"] = {"Hattic"},
	["xhu"] = {"Hurrian"},
	["xhv"] = {"Khua"},
	["xib"] = {"Iberian"},
	["xii"] = {"Xiri"},
	["xil"] = {"Illyrian"},
	["xin"] = {"Xinca"},
	["xir"] = {"Xiriâna"},
	["xis"] = {"Kisan"},
	["xiv"] = {"Indus Valley Language"},
	["xiy"] = {"Xipaya"},
	["xjb"] = {"Minjungbal"},
	["xjt"] = {"Jaitmatang"},
	["xka"] = {"Kalkoti"},
	["xkb"] = {"Northern Nago"},
	["xkc"] = {"Kho'ini"},
	["xkd"] = {"Mendalam Kayan"},
	["xke"] = {"Kereho"},
	["xkf"] = {"Khengkha"},
	["xkg"] = {"Kagoro"},
	["xki"] = {"Kenyan Sign Language"},
	["xkj"] = {"Kajali"},
	["xkk"] = {"Kachok", "Kaco'"},
	["xkl"] = {"Mainstream Kenyah"},
	["xkn"] = {"Kayan River Kayan"},
	["xko"] = {"Kiorr"},
	["xkp"] = {"Kabatei"},
	["xkq"] = {"Koroni"},
	["xkr"] = {"Xakriabá"},
	["xks"] = {"Kumbewaha"},
	["xkt"] = {"Kantosi"},
	["xku"] = {"Kaamba"},
	["xkv"] = {"Kgalagadi"},
	["xkw"] = {"Kembra"},
	["xkx"] = {"Karore"},
	["xky"] = {"Uma' Lasan"},
	["xkz"] = {"Kurtokha"},
	["xla"] = {"Kamula"},
	["xlb"] = {"Loup B"},
	["xlc"] = {"Lycian"},
	["xld"] = {"Lydian"},
	["xle"] = {"Lemnian"},
	["xlg"] = {"Ligurian (Ancient)"},
	["xli"] = {"Liburnian"},
	["xln"] = {"Alanic"},
	["xlo"] = {"Loup A"},
	["xlp"] = {"Lepontic"},
	["xls"] = {"Lusitanian"},
	["xlu"] = {"Cuneiform Luwian"},
	["xly"] = {"Elymian"},
	["xma"] = {"Mushungulu"},
	["xmb"] = {"Mbonga"},
	["xmc"] = {"Makhuwa-Marrevone"},
	["xmd"] = {"Mbudum"},
	["xme"] = {"Median"},
	["xmf"] = {"Mingrelian"},
	["xmg"] = {"Mengaka"},
	["xmh"] = {"Kugu-Muminh"},
	["xmj"] = {"Majera"},
	["xmk"] = {"Ancient Macedonian"},
	["xml"] = {"Malaysian Sign Language"},
	["xmm"] = {"Manado Malay"},
	["xmn"] = {"Manichaean Middle Persian"},
	["xmo"] = {"Morerebi"},
	["xmp"] = {"Kuku-Mu'inh"},
	["xmq"] = {"Kuku-Mangk"},
	["xmr"] = {"Meroitic"},
	["xms"] = {"Moroccan Sign Language"},
	["xmt"] = {"Matbat"},
	["xmu"] = {"Kamu"},
	["xmv"] = {"Antankarana Malagasy", "Tankarana Malagasy"},
	["xmw"] = {"Tsimihety Malagasy"},
	["xmx"] = {"Salawati", "Maden"},
	["xmy"] = {"Mayaguduna"},
	["xmz"] = {"Mori Bawah"},
	["xna"] = {"Ancient North Arabian"},
	["xnb"] = {"Kanakanabu"},
	["xnd"] = {"Na-Dene languages"},
	["xng"] = {"Middle Mongolian"},
	["xnh"] = {"Kuanhua"},
	["xni"] = {"Ngarigu"},
	["xnj"] = {"Ngoni (Tanzania)"},
	["xnk"] = {"Nganakarti"},
	["xnm"] = {"Ngumbarl"},
	["xnn"] = {"Northern Kankanay"},
	["xno"] = {"Anglo-Norman"},
	["xnq"] = {"Ngoni (Mozambique)"},
	["xnr"] = {"Kangri"},
	["xns"] = {"Kanashi"},
	["xnt"] = {"Narragansett"},
	["xnu"] = {"Nukunul"},
	["xny"] = {"Nyiyaparli"},
	["xnz"] = {"Kenzi", "Mattoki"},
	["xoc"] = {"O'chi'chi'"},
	["xod"] = {"Kokoda"},
	["xog"] = {"Soga"},
	["xoi"] = {"Kominimung"},
	["xok"] = {"Xokleng"},
	["xom"] = {"Komo (Sudan)"},
	["xon"] = {"Konkomba"},
	["xoo"] = {"Xukurú"},
	["xop"] = {"Kopar"},
	["xor"] = {"Korubo"},
	["xow"] = {"Kowaki"},
	["xpa"] = {"Pirriya"},
	["xpb"] = {"Northeastern Tasmanian", "Pyemmairrener"},
	["xpc"] = {"Pecheneg"},
	["xpd"] = {"Oyster Bay Tasmanian"},
	["xpe"] = {"Liberia Kpelle"},
	["xpf"] = {"Southeast Tasmanian", "Nuenonne"},
	["xpg"] = {"Phrygian"},
	["xph"] = {"North Midlands Tasmanian", "Tyerrenoterpanner"},
	["xpi"] = {"Pictish"},
	["xpj"] = {"Mpalitjanh"},
	["xpk"] = {"Kulina Pano"},
	["xpl"] = {"Port Sorell Tasmanian"},
	["xpm"] = {"Pumpokol"},
	["xpn"] = {"Kapinawá"},
	["xpo"] = {"Pochutec"},
	["xpp"] = {"Puyo-Paekche"},
	["xpq"] = {"Mohegan-Pequot"},
	["xpr"] = {"Parthian"},
	["xps"] = {"Pisidian"},
	["xpt"] = {"Punthamara"},
	["xpu"] = {"Punic"},
	["xpv"] = {"Northern Tasmanian", "Tommeginne"},
	["xpw"] = {"Northwestern Tasmanian", "Peerapper"},
	["xpx"] = {"Southwestern Tasmanian", "Toogee"},
	["xpy"] = {"Puyo"},
	["xpz"] = {"Bruny Island Tasmanian"},
	["xqa"] = {"Karakhanid"},
	["xqt"] = {"Qatabanian"},
	["xra"] = {"Krahô"},
	["xrb"] = {"Eastern Karaboro"},
	["xrd"] = {"Gundungurra"},
	["xre"] = {"Kreye"},
	["xrg"] = {"Minang"},
	["xri"] = {"Krikati-Timbira"},
	["xrm"] = {"Armazic"},
	["xrn"] = {"Arin"},
	["xrr"] = {"Raetic"},
	["xrt"] = {"Aranama-Tamique"},
	["xru"] = {"Marriammu"},
	["xrw"] = {"Karawa"},
	["xsa"] = {"Sabaean"},
	["xsb"] = {"Sambal"},
	["xsc"] = {"Scythian"},
	["xsd"] = {"Sidetic"},
	["xse"] = {"Sempan"},
	["xsh"] = {"Shamang"},
	["xsi"] = {"Sio"},
	["xsj"] = {"Subi"},
	["xsl"] = {"South Slavey"},
	["xsm"] = {"Kasem"},
	["xsn"] = {"Sanga (Nigeria)"},
	["xso"] = {"Solano"},
	["xsp"] = {"Silopi"},
	["xsq"] = {"Makhuwa-Saka"},
	["xsr"] = {"Sherpa"},
	["xsu"] = {"Sanumá"},
	["xsv"] = {"Sudovian"},
	["xsy"] = {"Saisiyat"},
	["xta"] = {"Alcozauca Mixtec"},
	["xtb"] = {"Chazumba Mixtec"},
	["xtc"] = {"Katcha-Kadugli-Miri"},
	["xtd"] = {"Diuxi-Tilantongo Mixtec"},
	["xte"] = {"Ketengban"},
	["xtg"] = {"Transalpine Gaulish"},
	["xth"] = {"Yitha Yitha"},
	["xti"] = {"Sinicahua Mixtec"},
	["xtj"] = {"San Juan Teita Mixtec"},
	["xtl"] = {"Tijaltepec Mixtec"},
	["xtm"] = {"Magdalena Peñasco Mixtec"},
	["xtn"] = {"Northern Tlaxiaco Mixtec"},
	["xto"] = {"Tokharian A"},
	["xtp"] = {"San Miguel Piedras Mixtec"},
	["xtq"] = {"Tumshuqese"},
	["xtr"] = {"Early Tripuri"},
	["xts"] = {"Sindihui Mixtec"},
	["xtt"] = {"Tacahua Mixtec"},
	["xtu"] = {"Cuyamecalco Mixtec"},
	["xtv"] = {"Thawa"},
	["xtw"] = {"Tawandê"},
	["xty"] = {"Yoloxochitl Mixtec"},
	["xua"] = {"Alu Kurumba"},
	["xub"] = {"Betta Kurumba"},
	["xud"] = {"Umiida"},
	["xug"] = {"Kunigami"},
	["xuj"] = {"Jennu Kurumba"},
	["xul"] = {"Ngunawal", "Nunukul"},
	["xum"] = {"Umbrian"},
	["xun"] = {"Unggaranggu"},
	["xuo"] = {"Kuo"},
	["xup"] = {"Upper Umpqua"},
	["xur"] = {"Urartian"},
	["xut"] = {"Kuthant"},
	["xuu"] = {"Kxoe", "Khwedam"},
	["xve"] = {"Venetic"},
	["xvi"] = {"Kamviri"},
	["xvn"] = {"Vandalic"},
	["xvo"] = {"Volscian"},
	["xvs"] = {"Vestinian"},
	["xwa"] = {"Kwaza"},
	["xwc"] = {"Woccon"},
	["xwd"] = {"Wadi Wadi"},
	["xwe"] = {"Xwela Gbe"},
	["xwg"] = {"Kwegu"},
	["xwj"] = {"Wajuk"},
	["xwk"] = {"Wangkumara"},
	["xwl"] = {"Western Xwla Gbe"},
	["xwo"] = {"Written Oirat"},
	["xwr"] = {"Kwerba Mamberamo"},
	["xwt"] = {"Wotjobaluk"},
	["xww"] = {"Wemba Wemba"},
	["xxb"] = {"Boro (Ghana)"},
	["xxk"] = {"Ke'o"},
	["xxm"] = {"Minkin"},
	["xxr"] = {"Koropó"},
	["xxt"] = {"Tambora"},
	["xya"] = {"Yaygir"},
	["xyb"] = {"Yandjibara"},
	["xyj"] = {"Mayi-Yapi"},
	["xyk"] = {"Mayi-Kulan"},
	["xyl"] = {"Yalakalore"},
	["xyt"] = {"Mayi-Thakurti"},
	["xyy"] = {"Yorta Yorta"},
	["xzh"] = {"Zhang-Zhung"},
	["xzm"] = {"Zemgalian"},
	["xzp"] = {"Ancient Zapotec"},
	["yaa"] = {"Yaminahua"},
	["yab"] = {"Yuhup"},
	["yac"] = {"Pass Valley Yali"},
	["yad"] = {"Yagua"},
	["yae"] = {"Pumé"},
	["yaf"] = {"Yaka (Democratic Republic of Congo)"},
	["yag"] = {"Yámana"},
	["yah"] = {"Yazgulyam"},
	["yai"] = {"Yagnobi"},
	["yaj"] = {"Banda-Yangere"},
	["yak"] = {"Yakama"},
	["yal"] = {"Yalunka"},
	["yam"] = {"Yamba"},
	["yan"] = {"Mayangna"},
	["yao"] = {"Yao"},
	["yap"] = {"Yapese"},
	["yaq"] = {"Yaqui"},
	["yar"] = {"Yabarana"},
	["yas"] = {"Nugunu (Cameroon)"},
	["yat"] = {"Yambeta"},
	["yau"] = {"Yuwana"},
	["yav"] = {"Yangben"},
	["yaw"] = {"Yawalapití"},
	["yax"] = {"Yauma"},
	["yay"] = {"Agwagwune"},
	["yaz"] = {"Lokaa"},
	["yba"] = {"Yala"},
	["ybb"] = {"Yemba"},
	["ybe"] = {"West Yugur"},
	["ybh"] = {"Yakha"},
	["ybi"] = {"Yamphu"},
	["ybj"] = {"Hasha"},
	["ybk"] = {"Bokha"},
	["ybl"] = {"Yukuben"},
	["ybm"] = {"Yaben"},
	["ybn"] = {"Yabaâna"},
	["ybo"] = {"Yabong"},
	["ybx"] = {"Yawiyo"},
	["yby"] = {"Yaweyuha"},
	["ych"] = {"Chesu"},
	["ycl"] = {"Lolopo"},
	["ycn"] = {"Yucuna"},
	["ycp"] = {"Chepya"},
	["ycr"] = {"Yilan Creole"},
	["yda"] = {"Yanda"},
	["ydd"] = {"Eastern Yiddish"},
	["yde"] = {"Yangum Dey"},
	["ydg"] = {"Yidgha"},
	["ydk"] = {"Yoidik"},
	["yea"] = {"Ravula"},
	["yec"] = {"Yeniche"},
	["yee"] = {"Yimas"},
	["yei"] = {"Yeni"},
	["yej"] = {"Yevanic"},
	["yel"] = {"Yela"},
	["yer"] = {"Tarok"},
	["yes"] = {"Nyankpa"},
	["yet"] = {"Yetfa"},
	["yeu"] = {"Yerukula"},
	["yev"] = {"Yapunda"},
	["yey"] = {"Yeyi"},
	["yga"] = {"Malyangapa"},
	["ygi"] = {"Yiningayi"},
	["ygl"] = {"Yangum Gel"},
	["ygm"] = {"Yagomi"},
	["ygp"] = {"Gepo"},
	["ygr"] = {"Yagaria"},
	["ygs"] = {"Yolŋu Sign Language"},
	["ygu"] = {"Yugul"},
	["ygw"] = {"Yagwoia"},
	["yha"] = {"Baha Buyang"},
	["yhd"] = {"Judeo-Iraqi Arabic"},
	["yhl"] = {"Hlepho Phowa"},
	["yhs"] = {"Yan-nhaŋu Sign Language"},
	["yia"] = {"Yinggarda"},
	["yif"] = {"Ache"},
	["yig"] = {"Wusa Nasu"},
	["yih"] = {"Western Yiddish"},
	["yii"] = {"Yidiny"},
	["yij"] = {"Yindjibarndi"},
	["yik"] = {"Dongshanba Lalo"},
	["yil"] = {"Yindjilandji"},
	["yim"] = {"Yimchungru Naga"},
	["yin"] = {"Riang Lai", "Yinchia"},
	["yip"] = {"Pholo"},
	["yiq"] = {"Miqie"},
	["yir"] = {"North Awyu"},
	["yis"] = {"Yis"},
	["yit"] = {"Eastern Lalu"},
	["yiu"] = {"Awu"},
	["yiv"] = {"Northern Nisu"},
	["yix"] = {"Axi Yi"},
	["yiz"] = {"Azhe"},
	["yka"] = {"Yakan"},
	["ykg"] = {"Northern Yukaghir"},
	["ykh"] = {"Khamnigan Mongol"},
	["yki"] = {"Yoke"},
	["ykk"] = {"Yakaikeke"},
	["ykl"] = {"Khlula"},
	["ykm"] = {"Kap"},
	["ykn"] = {"Kua-nsi"},
	["yko"] = {"Yasa"},
	["ykr"] = {"Yekora"},
	["ykt"] = {"Kathu"},
	["yku"] = {"Kuamasi"},
	["yky"] = {"Yakoma"},
	["yla"] = {"Yaul"},
	["ylb"] = {"Yaleba"},
	["yle"] = {"Yele"},
	["ylg"] = {"Yelogu"},
	["yli"] = {"Angguruk Yali"},
	["yll"] = {"Yil"},
	["ylm"] = {"Limi"},
	["yln"] = {"Langnian Buyang"},
	["ylo"] = {"Naluo Yi"},
	["ylr"] = {"Yalarnnga"},
	["ylu"] = {"Aribwaung"},
	["yly"] = {"Nyâlayu", "Nyelâyu"},
	["ymb"] = {"Yambes"},
	["ymc"] = {"Southern Muji"},
	["ymd"] = {"Muda"},
	["yme"] = {"Yameo"},
	["ymg"] = {"Yamongeri"},
	["ymh"] = {"Mili"},
	["ymi"] = {"Moji"},
	["ymk"] = {"Makwe"},
	["yml"] = {"Iamalele"},
	["ymm"] = {"Maay"},
	["ymn"] = {"Yamna", "Sunum"},
	["ymo"] = {"Yangum Mon"},
	["ymp"] = {"Yamap"},
	["ymq"] = {"Qila Muji"},
	["ymr"] = {"Malasar"},
	["yms"] = {"Mysian"},
	["ymx"] = {"Northern Muji"},
	["ymz"] = {"Muzi"},
	["yna"] = {"Aluo"},
	["ynd"] = {"Yandruwandha"},
	["yne"] = {"Lang'e"},
	["yng"] = {"Yango"},
	["ynk"] = {"Naukan Yupik"},
	["ynl"] = {"Yangulam"},
	["ynn"] = {"Yana"},
	["yno"] = {"Yong"},
	["ynq"] = {"Yendang"},
	["yns"] = {"Yansi"},
	["ynu"] = {"Yahuna"},
	["yob"] = {"Yoba"},
	["yog"] = {"Yogad"},
	["yoi"] = {"Yonaguni"},
	["yok"] = {"Yokuts"},
	["yol"] = {"Yola"},
	["yom"] = {"Yombe"},
	["yon"] = {"Yongkom"},
	["yot"] = {"Yotti"},
	["yox"] = {"Yoron"},
	["yoy"] = {"Yoy"},
	["ypa"] = {"Phala"},
	["ypb"] = {"Labo Phowa"},
	["ypg"] = {"Phola"},
	["yph"] = {"Phupha"},
	["ypk"] = {"Yupik languages"},
	["ypm"] = {"Phuma"},
	["ypn"] = {"Ani Phowa"},
	["ypo"] = {"Alo Phola"},
	["ypp"] = {"Phupa"},
	["ypz"] = {"Phuza"},
	["yra"] = {"Yerakai"},
	["yrb"] = {"Yareba"},
	["yre"] = {"Yaouré"},
	["yrk"] = {"Nenets"},
	["yrl"] = {"Nhengatu"},
	["yrm"] = {"Yirrk-Mel"},
	["yrn"] = {"Yerong"},
	["yro"] = {"Yaroamë"},
	["yrs"] = {"Yarsun"},
	["yrw"] = {"Yarawata"},
	["yry"] = {"Yarluyandi"},
	["ysc"] = {"Yassic"},
	["ysd"] = {"Samatao"},
	["ysg"] = {"Sonaga"},
	["ysl"] = {"Yugoslavian Sign Language"},
	["ysm"] = {"Myanmar Sign Language"},
	["ysn"] = {"Sani"},
	["yso"] = {"Nisi (China)"},
	["ysp"] = {"Southern Lolopo"},
	["ysr"] = {"Sirenik Yupik"},
	["yss"] = {"Yessan-Mayo"},
	["ysy"] = {"Sanie"},
	["yta"] = {"Talu"},
	["ytl"] = {"Tanglang"},
	["ytp"] = {"Thopho"},
	["ytw"] = {"Yout Wam"},
	["yty"] = {"Yatay"},
	["yua"] = {"Yucateco", "Yucatec Maya"},
	["yub"] = {"Yugambal"},
	["yuc"] = {"Yuchi"},
	["yud"] = {"Judeo-Tripolitanian Arabic"},
	["yue"] = {"Yue Chinese", "Cantonese"},
	["yuf"] = {"Havasupai-Walapai-Yavapai"},
	["yug"] = {"Yug"},
	["yui"] = {"Yurutí"},
	["yuj"] = {"Karkar-Yuri"},
	["yuk"] = {"Yuki"},
	["yul"] = {"Yulu"},
	["yum"] = {"Quechan"},
	["yun"] = {"Bena (Nigeria)"},
	["yup"] = {"Yukpa"},
	["yuq"] = {"Yuqui"},
	["yur"] = {"Yurok"},
	["yut"] = {"Yopno"},
	["yuw"] = {"Yau (Morobe Province)"},
	["yux"] = {"Southern Yukaghir"},
	["yuy"] = {"East Yugur"},
	["yuz"] = {"Yuracare"},
	["yva"] = {"Yawa"},
	["yvt"] = {"Yavitero"},
	["ywa"] = {"Kalou"},
	["ywg"] = {"Yinhawangka"},
	["ywl"] = {"Western Lalu"},
	["ywn"] = {"Yawanawa"},
	["ywq"] = {"Wuding-Luquan Yi"},
	["ywr"] = {"Yawuru"},
	["ywt"] = {"Xishanba Lalo", "Central Lalo"},
	["ywu"] = {"Wumeng Nasu"},
	["yww"] = {"Yawarawarga"},
	["yxa"] = {"Mayawali"},
	["yxg"] = {"Yagara"},
	["yxl"] = {"Yardliyawarra"},
	["yxm"] = {"Yinwum"},
	["yxu"] = {"Yuyu"},
	["yxy"] = {"Yabula Yabula"},
	["yyr"] = {"Yir Yoront"},
	["yyu"] = {"Yau (Sandaun Province)"},
	["yyz"] = {"Ayizi"},
	["yzg"] = {"E'ma Buyang"},
	["yzk"] = {"Zokhuo"},
	["zaa"] = {"Sierra de Juárez Zapotec"},
	["zab"] = {"Western Tlacolula Valley Zapotec", "San Juan Guelavía Zapotec"},
	["zac"] = {"Ocotlán Zapotec"},
	["zad"] = {"Cajonos Zapotec"},
	["zae"] = {"Yareni Zapotec"},
	["zaf"] = {"Ayoquesco Zapotec"},
	["zag"] = {"Zaghawa"},
	["zah"] = {"Zangwal"},
	["zai"] = {"Isthmus Zapotec"},
	["zaj"] = {"Zaramo"},
	["zak"] = {"Zanaki"},
	["zal"] = {"Zauzou"},
	["zam"] = {"Miahuatlán Zapotec"},
	["zao"] = {"Ozolotepec Zapotec"},
	["zap"] = {"Zapotec"},
	["zaq"] = {"Aloápam Zapotec"},
	["zar"] = {"Rincón Zapotec"},
	["zas"] = {"Santo Domingo Albarradas Zapotec"},
	["zat"] = {"Tabaa Zapotec"},
	["zau"] = {"Zangskari"},
	["zav"] = {"Yatzachi Zapotec"},
	["zaw"] = {"Mitla Zapotec"},
	["zax"] = {"Xadani Zapotec"},
	["zay"] = {"Zayse-Zergulla", "Zaysete"},
	["zaz"] = {"Zari"},
	["zba"] = {"Balaibalan"},
	["zbc"] = {"Central Berawan"},
	["zbe"] = {"East Berawan"},
	["zbl"] = {"Blissymbols", "Bliss", "Blissymbolics"},
	["zbt"] = {"Batui"},
	["zbu"] = {"Bu (Bauchi State)"},
	["zbw"] = {"West Berawan"},
	["zca"] = {"Coatecas Altas Zapotec"},
	["zcd"] = {"Las Delicias Zapotec"},
	["zch"] = {"Central Hongshuihe Zhuang"},
	["zdj"] = {"Ngazidja Comorian"},
	["zea"] = {"Zeeuws"},
	["zeg"] = {"Zenag"},
	["zeh"] = {"Eastern Hongshuihe Zhuang"},
	["zem"] = {"Zeem"},
	["zen"] = {"Zenaga"},
	["zga"] = {"Kinga"},
	["zgb"] = {"Guibei Zhuang"},
	["zgh"] = {"Standard Moroccan Tamazight"},
	["zgm"] = {"Minz Zhuang"},
	["zgn"] = {"Guibian Zhuang"},
	["zgr"] = {"Magori"},
	["zhb"] = {"Zhaba"},
	["zhd"] = {"Dai Zhuang"},
	["zhi"] = {"Zhire"},
	["zhn"] = {"Nong Zhuang"},
	["zhw"] = {"Zhoa"},
	["zhx"] = {"Chinese (family)"},
	["zia"] = {"Zia"},
	["zib"] = {"Zimbabwe Sign Language"},
	["zik"] = {"Zimakani"},
	["zil"] = {"Zialo"},
	["zim"] = {"Mesme"},
	["zin"] = {"Zinza"},
	["ziw"] = {"Zigula"},
	["ziz"] = {"Zizilivakan"},
	["zka"] = {"Kaimbulawa"},
	["zkd"] = {"Kadu"},
	["zkg"] = {"Koguryo"},
	["zkh"] = {"Khorezmian"},
	["zkk"] = {"Karankawa"},
	["zkn"] = {"Kanan"},
	["zko"] = {"Kott"},
	["zkp"] = {"São Paulo Kaingáng"},
	["zkr"] = {"Zakhring"},
	["zkt"] = {"Kitan"},
	["zku"] = {"Kaurna"},
	["zkv"] = {"Krevinian"},
	["zkz"] = {"Khazar"},
	["zla"] = {"Zula"},
	["zle"] = {"East Slavic languages"},
	["zlj"] = {"Liujiang Zhuang"},
	["zlm"] = {"Malay (individual language)"},
	["zln"] = {"Lianshan Zhuang"},
	["zlq"] = {"Liuqian Zhuang"},
	["zls"] = {"South Slavic languages"},
	["zlu"] = {"Zul"},
	["zlw"] = {"West Slavic languages"},
	["zma"] = {"Manda (Australia)"},
	["zmb"] = {"Zimba"},
	["zmc"] = {"Margany"},
	["zmd"] = {"Maridan"},
	["zme"] = {"Mangerr"},
	["zmf"] = {"Mfinu"},
	["zmg"] = {"Marti Ke"},
	["zmh"] = {"Makolkol"},
	["zmi"] = {"Negeri Sembilan Malay"},
	["zmj"] = {"Maridjabin"},
	["zmk"] = {"Mandandanyi"},
	["zml"] = {"Matngala"},
	["zmm"] = {"Marimanindji", "Marramaninyshi"},
	["zmn"] = {"Mbangwe"},
	["zmo"] = {"Molo"},
	["zmp"] = {"Mpuono"},
	["zmq"] = {"Mituku"},
	["zmr"] = {"Maranunggu"},
	["zms"] = {"Mbesa"},
	["zmt"] = {"Maringarr"},
	["zmu"] = {"Muruwari"},
	["zmv"] = {"Mbariman-Gudhinma"},
	["zmw"] = {"Mbo (Democratic Republic of Congo)"},
	["zmx"] = {"Bomitaba"},
	["zmy"] = {"Mariyedi"},
	["zmz"] = {"Mbandja"},
	["zna"] = {"Zan Gula"},
	["znd"] = {"Zande languages"},
	["zne"] = {"Zande (individual language)"},
	["zng"] = {"Mang"},
	["znk"] = {"Manangkari"},
	["zns"] = {"Mangas"},
	["zoc"] = {"Copainalá Zoque"},
	["zoh"] = {"Chimalapa Zoque"},
	["zom"] = {"Zou"},
	["zoo"] = {"Asunción Mixtepec Zapotec"},
	["zoq"] = {"Tabasco Zoque"},
	["zor"] = {"Rayón Zoque"},
	["zos"] = {"Francisco León Zoque"},
	["zpa"] = {"Lachiguiri Zapotec"},
	["zpb"] = {"Yautepec Zapotec"},
	["zpc"] = {"Choapan Zapotec"},
	["zpd"] = {"Southeastern Ixtlán Zapotec"},
	["zpe"] = {"Petapa Zapotec"},
	["zpf"] = {"San Pedro Quiatoni Zapotec"},
	["zpg"] = {"Guevea De Humboldt Zapotec"},
	["zph"] = {"Totomachapan Zapotec"},
	["zpi"] = {"Santa María Quiegolani Zapotec"},
	["zpj"] = {"Quiavicuzas Zapotec"},
	["zpk"] = {"Tlacolulita Zapotec"},
	["zpl"] = {"Lachixío Zapotec"},
	["zpm"] = {"Mixtepec Zapotec"},
	["zpn"] = {"Santa Inés Yatzechi Zapotec"},
	["zpo"] = {"Amatlán Zapotec"},
	["zpp"] = {"El Alto Zapotec"},
	["zpq"] = {"Zoogocho Zapotec"},
	["zpr"] = {"Santiago Xanica Zapotec"},
	["zps"] = {"Coatlán Zapotec"},
	["zpt"] = {"San Vicente Coatlán Zapotec"},
	["zpu"] = {"Yalálag Zapotec"},
	["zpv"] = {"Chichicapan Zapotec"},
	["zpw"] = {"Zaniza Zapotec"},
	["zpx"] = {"San Baltazar Loxicha Zapotec"},
	["zpy"] = {"Mazaltepec Zapotec"},
	["zpz"] = {"Texmelucan Zapotec"},
	["zqe"] = {"Qiubei Zhuang"},
	["zra"] = {"Kara (Korea)"},
	["zrg"] = {"Mirgan"},
	["zrn"] = {"Zerenkel"},
	["zro"] = {"Záparo"},
	["zrp"] = {"Zarphatic"},
	["zrs"] = {"Mairasi"},
	["zsa"] = {"Sarasira"},
	["zsk"] = {"Kaskean"},
	["zsl"] = {"Zambian Sign Language"},
	["zsm"] = {"Standard Malay"},
	["zsr"] = {"Southern Rincon Zapotec"},
	["zsu"] = {"Sukurum"},
	["zte"] = {"Elotepec Zapotec"},
	["ztg"] = {"Xanaguía Zapotec"},
	["ztl"] = {"Lapaguía-Guivini Zapotec"},
	["ztm"] = {"San Agustín Mixtepec Zapotec"},
	["ztn"] = {"Santa Catarina Albarradas Zapotec"},
	["ztp"] = {"Loxicha Zapotec"},
	["ztq"] = {"Quioquitani-Quierí Zapotec"},
	["zts"] = {"Tilquiapan Zapotec"},
	["ztt"] = {"Tejalapan Zapotec"},
	["ztu"] = {"Güilá Zapotec"},
	["ztx"] = {"Zaachila Zapotec"},
	["zty"] = {"Yatee Zapotec"},
	["zuh"] = {"Tokano"},
	["zum"] = {"Kumzari"},
	["zun"] = {"Zuni"},
	["zuy"] = {"Zumaya"},
	["zwa"] = {"Zay"},
	["zxx"] = {"No linguistic content", "Not applicable"},
	["zyb"] = {"Yongbei Zhuang"},
	["zyg"] = {"Yang Zhuang"},
	["zyj"] = {"Youjiang Zhuang"},
	["zyn"] = {"Yongnan Zhuang"},
	["zyp"] = {"Zyphe Chin"},
	["zza"] = {"Zaza", "Dimili", "Dimli (macrolanguage)", "Kirdki", "Kirmanjki (macrolanguage)", "Zazaki"},
	["zzj"] = {"Zuojiang Zhuang"}
	}

local deprecated = {
	["in"] = {"Indonesian"},
	["iw"] = {"Hebrew"},
	["ji"] = {"Yiddish"},
	["jw"] = {"Javanese"},
	["mo"] = {"Moldavian", "Moldovan"},
	["aam"] = {"Aramanik"},
	["adp"] = {"Adap"},
	["agp"] = {"Paranan"},
	["ais"] = {"Nataoran Amis"},
	["ajp"] = {"South Levantine Arabic"},
	["ajt"] = {"Judeo-Tunisian Arabic"},
	["aoh"] = {"Arma"},
	["asd"] = {"Asas"},
	["aue"] = {"ǂKxʼauǁʼein"},
	["ayx"] = {"Ayi (China)"},
	["ayy"] = {"Tayabas Ayta"},
	["baz"] = {"Tunen"},
	["bbz"] = {"Babalia Creole Arabic"},
	["bgm"] = {"Baga Mboteni"},
	["bhk"] = {"Albay Bicolano"},
	["bic"] = {"Bikaru"},
	["bij"] = {"Vaghat-Ya-Bijim-Legeri"},
	["bjd"] = {"Bandjigali"},
	["bjq"] = {"Southern Betsimisaraka Malagasy"},
	["bkb"] = {"Finallig"},
	["blg"] = {"Balau"},
	["bmy"] = {"Bemba (Democratic Republic of Congo)"},
	["bpb"] = {"Barbacoas"},
	["btb"] = {"Beti (Cameroon)"},
	["btl"] = {"Bhatola"},
	["bxx"] = {"Borna (Democratic Republic of Congo)"},
	["byy"] = {"Buya"},
	["cbe"] = {"Chipiajes"},
	["cbh"] = {"Cagua"},
	["cca"] = {"Cauca"},
	["ccq"] = {"Chaungtha"},
	["cdg"] = {"Chamari"},
	["cjr"] = {"Chorotega"},
	["cka"] = {"Khumi Awa Chin"},
	["cmk"] = {"Chimakum"},
	["coy"] = {"Coyaima"},
	["cqu"] = {"Chilean Quechua"},
	["cug"] = {"Chungmboko", "Cung"},
	["cum"] = {"Cumeral"},
	["daf"] = {"Dan"},
	["dap"] = {"Nisi (India)"},
	["dgu"] = {"Degaru"},
	["dha"] = {"Dhanwar (India)"},
	["dit"] = {"Dirari"},
	["djl"] = {"Djiwarli"},
	["dkl"] = {"Kolum So Dogon"},
	["drh"] = {"Darkhat"},
	["drr"] = {"Dororo"},
	["drw"] = {"Darwazi"},
	["dud"] = {"Hun-Saare"},
	["duj"] = {"Dhuwal"},
	["dwl"] = {"Walo Kumbe Dogon"},
	["ekc"] = {"Eastern Karnic"},
	["elp"] = {"Elpaputih"},
	["emo"] = {"Emok"},
	["gav"] = {"Gabutamon"},
	["gbc"] = {"Garawa"},
	["gfx"] = {"Mangetti Dune ǃXung"},
	["ggn"] = {"Eastern Gurung"},
	["ggo"] = {"Southern Gondi"},
	["ggr"] = {"Aghu Tharnggalu"},
	["gio"] = {"Gelao"},
	["gji"] = {"Geji"},
	["gli"] = {"Guliguli"},
	["gti"] = {"Gbati-ri"},
	["guv"] = {"Gey"},
	["hrr"] = {"Horuru"},
	["iap"] = {"Iapama"},
	["ibi"] = {"Ibilo"},
	["ill"] = {"Iranun"},
	["ilw"] = {"Talur"},
	["ime"] = {"Imeraguen"},
	["izi"] = {"Izi-Ezaa-Ikwo-Mgbo"},
	["jar"] = {"Jarawa (Nigeria)"},
	["jeg"] = {"Jeng"},
	["kbf"] = {"Kakauhua"},
	["kdv"] = {"Kado"},
	["kgc"] = {"Kasseng"},
	["kgd"] = {"Kataang"},
	["kgh"] = {"Upper Tanudan Kalinga"},
	["kgm"] = {"Karipúna"},
	["kjf"] = {"Khalaj [Indo-Iranian]"},
	["koj"] = {"Sara Dunjo"},
	["kox"] = {"Coxima"},
	["kpp"] = {"Paku Karen"},
	["krm"] = {"Krim"},
	["ksa"] = {"Shuwa-Zamani"},
	["ktr"] = {"Kota Marudu Tinagas"},
	["kvs"] = {"Kunggara"},
	["kwq"] = {"Kwak"},
	["kxe"] = {"Kakihum"},
	["kxl"] = {"Nepali Kurux"},
	["kxu"] = {"Kui (India)"},
	["kzh"] = {"Kenuzi-Dongola"},
	["kzj"] = {"Coastal Kadazan"},
	["kzt"] = {"Tambunan Dusun"},
	["lak"] = {"Laka (Nigeria)"},
	["lba"] = {"Lui"},
	["leg"] = {"Lengua"},
	["lii"] = {"Lingkhim"},
	["llo"] = {"Khlor"},
	["lmm"] = {"Lamam"},
	["lmz"] = {"Lumbee"},
	["lno"] = {"Lango (South Sudan)"},
	["lsg"] = {"Lyons Sign Language"},
	["meg"] = {"Mea"},
	["mgx"] = {"Omati"},
	["mhh"] = {"Maskoy Pidgin"},
	["mja"] = {"Mahei"},
	["mld"] = {"Malakhel"},
	["mnt"] = {"Maykulan"},
	["mof"] = {"Mohegan-Montauk-Narragansett"},
	["mst"] = {"Cataelano Mandaya"},
	["mvm"] = {"Muya"},
	["mwd"] = {"Mudbura"},
	["mwj"] = {"Maligo"},
	["mwx"] = {"Mediak"},
	["mwy"] = {"Mosiro"},
	["myd"] = {"Maramba"},
	["myi"] = {"Mina (India)"},
	["myq"] = {"Forest Maninka"},
	["myt"] = {"Sangab Mandaya"},
	["nad"] = {"Nijadali"},
	["nbf"] = {"Naxi"},
	["nbx"] = {"Ngura"},
	["ncp"] = {"Ndaktup"},
	["ngo"] = {"Ngoni"},
	["nln"] = {"Durango Nahuatl"},
	["nlr"] = {"Ngarla"},
	["nns"] = {"Ningye"},
	["nnx"] = {"Ngong"},
	["nom"] = {"Nocamán"},
	["noo"] = {"Nootka"},
	["nts"] = {"Natagaimas"},
	["nxu"] = {"Narau"},
	["ome"] = {"Omejes"},
	["oun"] = {"ǃOǃung"},
	["pat"] = {"Papitalai"},
	["pbz"] = {"Palu"},
	["pcr"] = {"Panang"},
	["pgy"] = {"Pongyong"},
	["pii"] = {"Pini"},
	["plj"] = {"Polci"},
	["plp"] = {"Palpa"},
	["pmc"] = {"Palumata"},
	["pmk"] = {"Pamlico"},
	["pmu"] = {"Mirpur Panjabi"},
	["pod"] = {"Ponares"},
	["ppa"] = {"Pao"},
	["ppr"] = {"Piru"},
	["prb"] = {"Lua'"},
	["prp"] = {"Parsi"},
	["pry"] = {"Pray 3"},
	["puk"] = {"Pu Ko"},
	["puz"] = {"Purum Naga"},
	["rie"] = {"Rien"},
	["rmr"] = {"Caló"},
	["rna"] = {"Runa"},
	["rsi"] = {"Rennellese Sign Language"},
	["sap"] = {"Sanapaná"},
	["sca"] = {"Sansu"},
	["sdm"] = {"Semandang"},
	["sgl"] = {"Sanglechi-Ishkashimi"},
	["sgo"] = {"Songa"},
	["skk"] = {"Sok"},
	["slq"] = {"Salchuq"},
	["smd"] = {"Sama"},
	["snb"] = {"Sebuyau"},
	["snh"] = {"Shinabo"},
	["sul"] = {"Surigaonon"},
	["sum"] = {"Sumo-Mayangna"},
	["svr"] = {"Savara"},
	["szd"] = {"Seru"},
	["tbb"] = {"Tapeba"},
	["tdu"] = {"Tempasuk Dusun"},
	["tgg"] = {"Tangga"},
	["thc"] = {"Tai Hang Tong"},
	["thw"] = {"Thudam"},
	["thx"] = {"The"},
	["tid"] = {"Tidong"},
	["tie"] = {"Tingal"},
	["tkk"] = {"Takpa"},
	["tlw"] = {"South Wemale"},
	["tmk"] = {"Northwestern Tamang"},
	["tmp"] = {"Tai Mène"},
	["tne"] = {"Tinoc Kallahan"},
	["tnf"] = {"Tangshewi"},
	["toe"] = {"Tomedes"},
	["tpw"] = {"Tupí"},
	["tsf"] = {"Southwestern Tamang"},
	["unp"] = {"Worora"},
	["uok"] = {"Uokha"},
	["uun"] = {"Kulon-Pazeh"},
	["vki"] = {"Ija-Zuba"},
	["wgw"] = {"Wagawaga"},
	["wit"] = {"Wintu"},
	["wiw"] = {"Wirangu"},
	["wra"] = {"Warapu"},
	["wrd"] = {"Warduji"},
	["wya"] = {"Wyandot"},
	["xba"] = {"Kamba (Brazil)"},
	["xbx"] = {"Kabixí"},
	["xia"] = {"Xiandao"},
	["xip"] = {"Xipináwa"},
	["xkh"] = {"Karahawyana"},
	["xrq"] = {"Karranga"},
	["xss"] = {"Assan"},
	["xtz"] = {"Tasmanian"},
	["ybd"] = {"Yangbye"},
	["yds"] = {"Yiddish Sign Language"},
	["yen"] = {"Yendang"},
	["yiy"] = {"Yir Yoront"},
	["yma"] = {"Yamphe"},
	["ymt"] = {"Mator-Taygi-Karagas"},
	["ynh"] = {"Yangho"},
	["yos"] = {"Yos"},
	["yri"] = {"Yarí"},
	["yuu"] = {"Yugh"},
	["zir"] = {"Ziriya"},
	["zkb"] = {"Koibal"},
	["zua"] = {"Zeem"}
	}

return {
	active = active,
	deprecated = deprecated,
	}</text>
      <sha1>qi7o3rfc07n9xv2mggy8g3912gvvvqe</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Language/data/iana scripts</title>
    <ns>828</ns>
    <id>1085</id>
    <revision>
      <id>155578</id>
      <parentid>154471</parentid>
      <timestamp>2024-05-06T02:00:43Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Module:Language/data/iana_scripts]]</comment>
      <origin>154470</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="7370" sha1="k2nl5d2ztvvxgtevf5w8210zdm181g6" xml:space="preserve">-- File-Date: 2024-03-07
return {
	["Adlm"] = {"Adlam"},
	["Afak"] = {"Afaka"},
	["Aghb"] = {"Caucasian Albanian"},
	["Ahom"] = {"Ahom", "Tai Ahom"},
	["Arab"] = {"Arabic"},
	["Aran"] = {"Arabic (Nastaliq variant)"},
	["Armi"] = {"Imperial Aramaic"},
	["Armn"] = {"Armenian"},
	["Avst"] = {"Avestan"},
	["Bali"] = {"Balinese"},
	["Bamu"] = {"Bamum"},
	["Bass"] = {"Bassa Vah"},
	["Batk"] = {"Batak"},
	["Beng"] = {"Bengali", "Bangla"},
	["Bhks"] = {"Bhaiksuki"},
	["Blis"] = {"Blissymbols"},
	["Bopo"] = {"Bopomofo"},
	["Brah"] = {"Brahmi"},
	["Brai"] = {"Braille"},
	["Bugi"] = {"Buginese"},
	["Buhd"] = {"Buhid"},
	["Cakm"] = {"Chakma"},
	["Cans"] = {"Unified Canadian Aboriginal Syllabics"},
	["Cari"] = {"Carian"},
	["Cham"] = {"Cham"},
	["Cher"] = {"Cherokee"},
	["Chis"] = {"Chisoi"},
	["Chrs"] = {"Chorasmian"},
	["Cirt"] = {"Cirth"},
	["Copt"] = {"Coptic"},
	["Cpmn"] = {"Cypro-Minoan"},
	["Cprt"] = {"Cypriot syllabary"},
	["Cyrl"] = {"Cyrillic"},
	["Cyrs"] = {"Cyrillic (Old Church Slavonic variant)"},
	["Deva"] = {"Devanagari", "Nagari"},
	["Diak"] = {"Dives Akuru"},
	["Dogr"] = {"Dogra"},
	["Dsrt"] = {"Deseret", "Mormon"},
	["Dupl"] = {"Duployan shorthand", "Duployan stenography"},
	["Egyd"] = {"Egyptian demotic"},
	["Egyh"] = {"Egyptian hieratic"},
	["Egyp"] = {"Egyptian hieroglyphs"},
	["Elba"] = {"Elbasan"},
	["Elym"] = {"Elymaic"},
	["Ethi"] = {"Ethiopic", "Geʻez", "Ge'ez"},
	["Gara"] = {"Garay"},
	["Geok"] = {"Khutsuri (Asomtavruli and Nuskhuri)"},
	["Geor"] = {"Georgian (Mkhedruli and Mtavruli)"},
	["Glag"] = {"Glagolitic"},
	["Gong"] = {"Gunjala Gondi"},
	["Gonm"] = {"Masaram Gondi"},
	["Goth"] = {"Gothic"},
	["Gran"] = {"Grantha"},
	["Grek"] = {"Greek"},
	["Gujr"] = {"Gujarati"},
	["Gukh"] = {"Gurung Khema"},
	["Guru"] = {"Gurmukhi"},
	["Hanb"] = {"Han with Bopomofo (alias for Han + Bopomofo)"},
	["Hang"] = {"Hangul", "Hangŭl", "Hangeul"},
	["Hani"] = {"Han", "Hanzi", "Kanji", "Hanja"},
	["Hano"] = {"Hanunoo", "Hanunóo"},
	["Hans"] = {"Han (Simplified variant)"},
	["Hant"] = {"Han (Traditional variant)"},
	["Hatr"] = {"Hatran"},
	["Hebr"] = {"Hebrew"},
	["Hira"] = {"Hiragana"},
	["Hluw"] = {"Anatolian Hieroglyphs", "Luwian Hieroglyphs", "Hittite Hieroglyphs"},
	["Hmng"] = {"Pahawh Hmong"},
	["Hmnp"] = {"Nyiakeng Puachue Hmong"},
	["Hrkt"] = {"Japanese syllabaries (alias for Hiragana + Katakana)"},
	["Hung"] = {"Old Hungarian", "Hungarian Runic"},
	["Inds"] = {"Indus", "Harappan"},
	["Ital"] = {"Old Italic (Etruscan, Oscan, etc.)"},
	["Jamo"] = {"Jamo (alias for Jamo subset of Hangul)"},
	["Java"] = {"Javanese"},
	["Jpan"] = {"Japanese (alias for Han + Hiragana + Katakana)"},
	["Jurc"] = {"Jurchen"},
	["Kali"] = {"Kayah Li"},
	["Kana"] = {"Katakana"},
	["Kawi"] = {"Kawi"},
	["Khar"] = {"Kharoshthi"},
	["Khmr"] = {"Khmer"},
	["Khoj"] = {"Khojki"},
	["Kitl"] = {"Khitan large script"},
	["Kits"] = {"Khitan small script"},
	["Knda"] = {"Kannada"},
	["Kore"] = {"Korean (alias for Hangul + Han)"},
	["Kpel"] = {"Kpelle"},
	["Krai"] = {"Kirat Rai"},
	["Kthi"] = {"Kaithi"},
	["Lana"] = {"Tai Tham", "Lanna"},
	["Laoo"] = {"Lao"},
	["Latf"] = {"Latin (Fraktur variant)"},
	["Latg"] = {"Latin (Gaelic variant)"},
	["Latn"] = {"Latin"},
	["Leke"] = {"Leke"},
	["Lepc"] = {"Lepcha", "Róng"},
	["Limb"] = {"Limbu"},
	["Lina"] = {"Linear A"},
	["Linb"] = {"Linear B"},
	["Lisu"] = {"Lisu", "Fraser"},
	["Loma"] = {"Loma"},
	["Lyci"] = {"Lycian"},
	["Lydi"] = {"Lydian"},
	["Mahj"] = {"Mahajani"},
	["Maka"] = {"Makasar"},
	["Mand"] = {"Mandaic", "Mandaean"},
	["Mani"] = {"Manichaean"},
	["Marc"] = {"Marchen"},
	["Maya"] = {"Mayan hieroglyphs"},
	["Medf"] = {"Medefaidrin", "Oberi Okaime", "Oberi Ɔkaimɛ"},
	["Mend"] = {"Mende Kikakui"},
	["Merc"] = {"Meroitic Cursive"},
	["Mero"] = {"Meroitic Hieroglyphs"},
	["Mlym"] = {"Malayalam"},
	["Modi"] = {"Modi", "Moḍī"},
	["Mong"] = {"Mongolian"},
	["Moon"] = {"Moon", "Moon code", "Moon script", "Moon type"},
	["Mroo"] = {"Mro", "Mru"},
	["Mtei"] = {"Meitei Mayek", "Meithei", "Meetei"},
	["Mult"] = {"Multani"},
	["Mymr"] = {"Myanmar", "Burmese"},
	["Nagm"] = {"Nag Mundari"},
	["Nand"] = {"Nandinagari"},
	["Narb"] = {"Old North Arabian", "Ancient North Arabian"},
	["Nbat"] = {"Nabataean"},
	["Newa"] = {"Newa", "Newar", "Newari", "Nepāla lipi"},
	["Nkdb"] = {"Naxi Dongba", "na²¹ɕi³³ to³³ba²¹", "Nakhi Tomba"},
	["Nkgb"] = {"Naxi Geba", "na²¹ɕi³³ gʌ²¹ba²¹", "'Na-'Khi ²Ggŏ-¹baw", "Nakhi Geba"},
	["Nkoo"] = {"N’Ko", "N'Ko"},
	["Nshu"] = {"Nüshu"},
	["Ogam"] = {"Ogham"},
	["Olck"] = {"Ol Chiki", "Ol Cemet'", "Ol", "Santali"},
	["Onao"] = {"Ol Onal"},
	["Orkh"] = {"Old Turkic", "Orkhon Runic"},
	["Orya"] = {"Oriya", "Odia"},
	["Osge"] = {"Osage"},
	["Osma"] = {"Osmanya"},
	["Ougr"] = {"Old Uyghur"},
	["Palm"] = {"Palmyrene"},
	["Pauc"] = {"Pau Cin Hau"},
	["Pcun"] = {"Proto-Cuneiform"},
	["Pelm"] = {"Proto-Elamite"},
	["Perm"] = {"Old Permic"},
	["Phag"] = {"Phags-pa"},
	["Phli"] = {"Inscriptional Pahlavi"},
	["Phlp"] = {"Psalter Pahlavi"},
	["Phlv"] = {"Book Pahlavi"},
	["Phnx"] = {"Phoenician"},
	["Piqd"] = {"Klingon (KLI pIqaD)"},
	["Plrd"] = {"Miao", "Pollard"},
	["Prti"] = {"Inscriptional Parthian"},
	["Psin"] = {"Proto-Sinaitic"},
	["Ranj"] = {"Ranjana"},
	["Rjng"] = {"Rejang", "Redjang", "Kaganga"},
	["Rohg"] = {"Hanifi Rohingya"},
	["Roro"] = {"Rongorongo"},
	["Runr"] = {"Runic"},
	["Samr"] = {"Samaritan"},
	["Sara"] = {"Sarati"},
	["Sarb"] = {"Old South Arabian"},
	["Saur"] = {"Saurashtra"},
	["Sgnw"] = {"SignWriting"},
	["Shaw"] = {"Shavian", "Shaw"},
	["Shrd"] = {"Sharada", "Śāradā"},
	["Shui"] = {"Shuishu"},
	["Sidd"] = {"Siddham", "Siddhaṃ", "Siddhamātṛkā"},
	["Sidt"] = {"Sidetic"},
	["Sind"] = {"Khudawadi", "Sindhi"},
	["Sinh"] = {"Sinhala"},
	["Sogd"] = {"Sogdian"},
	["Sogo"] = {"Old Sogdian"},
	["Sora"] = {"Sora Sompeng"},
	["Soyo"] = {"Soyombo"},
	["Sund"] = {"Sundanese"},
	["Sunu"] = {"Sunuwar"},
	["Sylo"] = {"Syloti Nagri"},
	["Syrc"] = {"Syriac"},
	["Syre"] = {"Syriac (Estrangelo variant)"},
	["Syrj"] = {"Syriac (Western variant)"},
	["Syrn"] = {"Syriac (Eastern variant)"},
	["Tagb"] = {"Tagbanwa"},
	["Takr"] = {"Takri", "Ṭākrī", "Ṭāṅkrī"},
	["Tale"] = {"Tai Le"},
	["Talu"] = {"New Tai Lue"},
	["Taml"] = {"Tamil"},
	["Tang"] = {"Tangut"},
	["Tavt"] = {"Tai Viet"},
	["Tayo"] = {"Tai Yo"},
	["Telu"] = {"Telugu"},
	["Teng"] = {"Tengwar"},
	["Tfng"] = {"Tifinagh", "Berber"},
	["Tglg"] = {"Tagalog", "Baybayin", "Alibata"},
	["Thaa"] = {"Thaana"},
	["Thai"] = {"Thai"},
	["Tibt"] = {"Tibetan"},
	["Tirh"] = {"Tirhuta"},
	["Tnsa"] = {"Tangsa"},
	["Todr"] = {"Todhri"},
	["Tols"] = {"Tolong Siki"},
	["Toto"] = {"Toto"},
	["Tutg"] = {"Tulu-Tigalari"},
	["Ugar"] = {"Ugaritic"},
	["Vaii"] = {"Vai"},
	["Visp"] = {"Visible Speech"},
	["Vith"] = {"Vithkuqi"},
	["Wara"] = {"Warang Citi", "Varang Kshiti"},
	["Wcho"] = {"Wancho"},
	["Wole"] = {"Woleai"},
	["Xpeo"] = {"Old Persian"},
	["Xsux"] = {"Sumero-Akkadian cuneiform"},
	["Yezi"] = {"Yezidi"},
	["Yiii"] = {"Yi"},
	["Zanb"] = {"Zanabazar Square", "Zanabazarin Dörböljin Useg", "Xewtee Dörböljin Bicig", "Horizontal Square Script"},
	["Zinh"] = {"Code for inherited script"},
	["Zmth"] = {"Mathematical notation"},
	["Zsye"] = {"Symbols (Emoji variant)"},
	["Zsym"] = {"Symbols"},
	["Zxxx"] = {"Code for unwritten documents"},
	["Zyyy"] = {"Code for undetermined script"},
	["Zzzz"] = {"Code for uncoded script"}
	}</text>
      <sha1>k2nl5d2ztvvxgtevf5w8210zdm181g6</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Language/data/iana regions</title>
    <ns>828</ns>
    <id>1086</id>
    <revision>
      <id>155580</id>
      <parentid>154473</parentid>
      <timestamp>2024-05-06T02:00:43Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Module:Language/data/iana_regions]]</comment>
      <origin>154472</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="8031" sha1="fj5tcfdsa12bd0jqzzofwqp0n4tuo6l" xml:space="preserve">-- File-Date: 2024-03-07
return {
	["AC"] = {"Ascension Island"},
	["AD"] = {"Andorra"},
	["AE"] = {"United Arab Emirates"},
	["AF"] = {"Afghanistan"},
	["AG"] = {"Antigua and Barbuda"},
	["AI"] = {"Anguilla"},
	["AL"] = {"Albania"},
	["AM"] = {"Armenia"},
	["AO"] = {"Angola"},
	["AQ"] = {"Antarctica"},
	["AR"] = {"Argentina"},
	["AS"] = {"American Samoa"},
	["AT"] = {"Austria"},
	["AU"] = {"Australia"},
	["AW"] = {"Aruba"},
	["AX"] = {"Åland Islands"},
	["AZ"] = {"Azerbaijan"},
	["BA"] = {"Bosnia and Herzegovina"},
	["BB"] = {"Barbados"},
	["BD"] = {"Bangladesh"},
	["BE"] = {"Belgium"},
	["BF"] = {"Burkina Faso"},
	["BG"] = {"Bulgaria"},
	["BH"] = {"Bahrain"},
	["BI"] = {"Burundi"},
	["BJ"] = {"Benin"},
	["BL"] = {"Saint Barthélemy"},
	["BM"] = {"Bermuda"},
	["BN"] = {"Brunei Darussalam"},
	["BO"] = {"Bolivia"},
	["BQ"] = {"Bonaire, Sint Eustatius and Saba"},
	["BR"] = {"Brazil"},
	["BS"] = {"Bahamas"},
	["BT"] = {"Bhutan"},
	["BV"] = {"Bouvet Island"},
	["BW"] = {"Botswana"},
	["BY"] = {"Belarus"},
	["BZ"] = {"Belize"},
	["CA"] = {"Canada"},
	["CC"] = {"Cocos (Keeling) Islands"},
	["CD"] = {"The Democratic Republic of the Congo"},
	["CF"] = {"Central African Republic"},
	["CG"] = {"Congo"},
	["CH"] = {"Switzerland"},
	["CI"] = {"Côte d'Ivoire"},
	["CK"] = {"Cook Islands"},
	["CL"] = {"Chile"},
	["CM"] = {"Cameroon"},
	["CN"] = {"China"},
	["CO"] = {"Colombia"},
	["CP"] = {"Clipperton Island"},
	["CQ"] = {"Sark"},
	["CR"] = {"Costa Rica"},
	["CU"] = {"Cuba"},
	["CV"] = {"Cabo Verde", "Cape Verde"},
	["CW"] = {"Curaçao"},
	["CX"] = {"Christmas Island"},
	["CY"] = {"Cyprus"},
	["CZ"] = {"Czechia", "Czech Republic"},
	["DE"] = {"Germany"},
	["DG"] = {"Diego Garcia"},
	["DJ"] = {"Djibouti"},
	["DK"] = {"Denmark"},
	["DM"] = {"Dominica"},
	["DO"] = {"Dominican Republic"},
	["DZ"] = {"Algeria"},
	["EA"] = {"Ceuta, Melilla"},
	["EC"] = {"Ecuador"},
	["EE"] = {"Estonia"},
	["EG"] = {"Egypt"},
	["EH"] = {"Western Sahara"},
	["ER"] = {"Eritrea"},
	["ES"] = {"Spain"},
	["ET"] = {"Ethiopia"},
	["EU"] = {"European Union"},
	["EZ"] = {"Eurozone"},
	["FI"] = {"Finland"},
	["FJ"] = {"Fiji"},
	["FK"] = {"Falkland Islands (Malvinas)"},
	["FM"] = {"Federated States of Micronesia"},
	["FO"] = {"Faroe Islands"},
	["FR"] = {"France"},
	["GA"] = {"Gabon"},
	["GB"] = {"United Kingdom"},
	["GD"] = {"Grenada"},
	["GE"] = {"Georgia"},
	["GF"] = {"French Guiana"},
	["GG"] = {"Guernsey"},
	["GH"] = {"Ghana"},
	["GI"] = {"Gibraltar"},
	["GL"] = {"Greenland"},
	["GM"] = {"Gambia"},
	["GN"] = {"Guinea"},
	["GP"] = {"Guadeloupe"},
	["GQ"] = {"Equatorial Guinea"},
	["GR"] = {"Greece"},
	["GS"] = {"South Georgia and the South Sandwich Islands"},
	["GT"] = {"Guatemala"},
	["GU"] = {"Guam"},
	["GW"] = {"Guinea-Bissau"},
	["GY"] = {"Guyana"},
	["HK"] = {"Hong Kong"},
	["HM"] = {"Heard Island and McDonald Islands"},
	["HN"] = {"Honduras"},
	["HR"] = {"Croatia"},
	["HT"] = {"Haiti"},
	["HU"] = {"Hungary"},
	["IC"] = {"Canary Islands"},
	["ID"] = {"Indonesia"},
	["IE"] = {"Ireland"},
	["IL"] = {"Israel"},
	["IM"] = {"Isle of Man"},
	["IN"] = {"India"},
	["IO"] = {"British Indian Ocean Territory"},
	["IQ"] = {"Iraq"},
	["IR"] = {"Islamic Republic of Iran"},
	["IS"] = {"Iceland"},
	["IT"] = {"Italy"},
	["JE"] = {"Jersey"},
	["JM"] = {"Jamaica"},
	["JO"] = {"Jordan"},
	["JP"] = {"Japan"},
	["KE"] = {"Kenya"},
	["KG"] = {"Kyrgyzstan"},
	["KH"] = {"Cambodia"},
	["KI"] = {"Kiribati"},
	["KM"] = {"Comoros"},
	["KN"] = {"Saint Kitts and Nevis"},
	["KP"] = {"Democratic People's Republic of Korea"},
	["KR"] = {"Republic of Korea"},
	["KW"] = {"Kuwait"},
	["KY"] = {"Cayman Islands"},
	["KZ"] = {"Kazakhstan"},
	["LA"] = {"Lao People's Democratic Republic"},
	["LB"] = {"Lebanon"},
	["LC"] = {"Saint Lucia"},
	["LI"] = {"Liechtenstein"},
	["LK"] = {"Sri Lanka"},
	["LR"] = {"Liberia"},
	["LS"] = {"Lesotho"},
	["LT"] = {"Lithuania"},
	["LU"] = {"Luxembourg"},
	["LV"] = {"Latvia"},
	["LY"] = {"Libya"},
	["MA"] = {"Morocco"},
	["MC"] = {"Monaco"},
	["MD"] = {"Moldova"},
	["ME"] = {"Montenegro"},
	["MF"] = {"Saint Martin (French part)"},
	["MG"] = {"Madagascar"},
	["MH"] = {"Marshall Islands"},
	["MK"] = {"North Macedonia"},
	["ML"] = {"Mali"},
	["MM"] = {"Myanmar"},
	["MN"] = {"Mongolia"},
	["MO"] = {"Macao"},
	["MP"] = {"Northern Mariana Islands"},
	["MQ"] = {"Martinique"},
	["MR"] = {"Mauritania"},
	["MS"] = {"Montserrat"},
	["MT"] = {"Malta"},
	["MU"] = {"Mauritius"},
	["MV"] = {"Maldives"},
	["MW"] = {"Malawi"},
	["MX"] = {"Mexico"},
	["MY"] = {"Malaysia"},
	["MZ"] = {"Mozambique"},
	["NA"] = {"Namibia"},
	["NC"] = {"New Caledonia"},
	["NE"] = {"Niger"},
	["NF"] = {"Norfolk Island"},
	["NG"] = {"Nigeria"},
	["NI"] = {"Nicaragua"},
	["NL"] = {"Netherlands"},
	["NO"] = {"Norway"},
	["NP"] = {"Nepal"},
	["NR"] = {"Nauru"},
	["NU"] = {"Niue"},
	["NZ"] = {"New Zealand"},
	["OM"] = {"Oman"},
	["PA"] = {"Panama"},
	["PE"] = {"Peru"},
	["PF"] = {"French Polynesia"},
	["PG"] = {"Papua New Guinea"},
	["PH"] = {"Philippines"},
	["PK"] = {"Pakistan"},
	["PL"] = {"Poland"},
	["PM"] = {"Saint Pierre and Miquelon"},
	["PN"] = {"Pitcairn"},
	["PR"] = {"Puerto Rico"},
	["PS"] = {"State of Palestine"},
	["PT"] = {"Portugal"},
	["PW"] = {"Palau"},
	["PY"] = {"Paraguay"},
	["QA"] = {"Qatar"},
	["RE"] = {"Réunion"},
	["RO"] = {"Romania"},
	["RS"] = {"Serbia"},
	["RU"] = {"Russian Federation"},
	["RW"] = {"Rwanda"},
	["SA"] = {"Saudi Arabia"},
	["SB"] = {"Solomon Islands"},
	["SC"] = {"Seychelles"},
	["SD"] = {"Sudan"},
	["SE"] = {"Sweden"},
	["SG"] = {"Singapore"},
	["SH"] = {"Saint Helena, Ascension and Tristan da Cunha"},
	["SI"] = {"Slovenia"},
	["SJ"] = {"Svalbard and Jan Mayen"},
	["SK"] = {"Slovakia"},
	["SL"] = {"Sierra Leone"},
	["SM"] = {"San Marino"},
	["SN"] = {"Senegal"},
	["SO"] = {"Somalia"},
	["SR"] = {"Suriname"},
	["SS"] = {"South Sudan"},
	["ST"] = {"Sao Tome and Principe"},
	["SV"] = {"El Salvador"},
	["SX"] = {"Sint Maarten (Dutch part)"},
	["SY"] = {"Syrian Arab Republic"},
	["SZ"] = {"Eswatini", "eSwatini", "Swaziland"},
	["TA"] = {"Tristan da Cunha"},
	["TC"] = {"Turks and Caicos Islands"},
	["TD"] = {"Chad"},
	["TF"] = {"French Southern Territories"},
	["TG"] = {"Togo"},
	["TH"] = {"Thailand"},
	["TJ"] = {"Tajikistan"},
	["TK"] = {"Tokelau"},
	["TL"] = {"Timor-Leste"},
	["TM"] = {"Turkmenistan"},
	["TN"] = {"Tunisia"},
	["TO"] = {"Tonga"},
	["TR"] = {"Türkiye", "Turkey"},
	["TT"] = {"Trinidad and Tobago"},
	["TV"] = {"Tuvalu"},
	["TW"] = {"Taiwan, Province of China"},
	["TZ"] = {"United Republic of Tanzania"},
	["UA"] = {"Ukraine"},
	["UG"] = {"Uganda"},
	["UM"] = {"United States Minor Outlying Islands"},
	["UN"] = {"United Nations"},
	["US"] = {"United States"},
	["UY"] = {"Uruguay"},
	["UZ"] = {"Uzbekistan"},
	["VA"] = {"Holy See (Vatican City State)"},
	["VC"] = {"Saint Vincent and the Grenadines"},
	["VE"] = {"Venezuela"},
	["VG"] = {"British Virgin Islands"},
	["VI"] = {"U.S. Virgin Islands"},
	["VN"] = {"Viet Nam"},
	["VU"] = {"Vanuatu"},
	["WF"] = {"Wallis and Futuna"},
	["WS"] = {"Samoa"},
	["YE"] = {"Yemen"},
	["YT"] = {"Mayotte"},
	["ZA"] = {"South Africa"},
	["ZM"] = {"Zambia"},
	["ZW"] = {"Zimbabwe"},
	["001"] = {"World"},
	["002"] = {"Africa"},
	["003"] = {"North America"},
	["005"] = {"South America"},
	["009"] = {"Oceania"},
	["011"] = {"Western Africa"},
	["013"] = {"Central America"},
	["014"] = {"Eastern Africa"},
	["015"] = {"Northern Africa"},
	["017"] = {"Middle Africa"},
	["018"] = {"Southern Africa"},
	["019"] = {"Americas"},
	["021"] = {"Northern America"},
	["029"] = {"Caribbean"},
	["030"] = {"Eastern Asia"},
	["034"] = {"Southern Asia"},
	["035"] = {"South-Eastern Asia"},
	["039"] = {"Southern Europe"},
	["053"] = {"Australia and New Zealand"},
	["054"] = {"Melanesia"},
	["057"] = {"Micronesia"},
	["061"] = {"Polynesia"},
	["142"] = {"Asia"},
	["143"] = {"Central Asia"},
	["145"] = {"Western Asia"},
	["150"] = {"Europe"},
	["151"] = {"Eastern Europe"},
	["154"] = {"Northern Europe"},
	["155"] = {"Western Europe"},
	["202"] = {"Sub-Saharan Africa"},
	["419"] = {"Latin America and the Caribbean"}
	}</text>
      <sha1>fj5tcfdsa12bd0jqzzofwqp0n4tuo6l</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Language/data/iana variants</title>
    <ns>828</ns>
    <id>1087</id>
    <revision>
      <id>155582</id>
      <parentid>154475</parentid>
      <timestamp>2024-05-06T02:00:44Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Module:Language/data/iana_variants]]</comment>
      <origin>154474</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="13325" sha1="hc0pn4baqi4cpa9qyuoejytlt3nklb0" xml:space="preserve">-- File-Date: 2024-03-07
return {
	["1606nict"] = {
		["descriptions"] = {"Late Middle French (to 1606)"},
		["prefixes"] = {"frm"},
		},
	["1694acad"] = {
		["descriptions"] = {"Early Modern French"},
		["prefixes"] = {"fr"},
		},
	["1901"] = {
		["descriptions"] = {"Traditional German orthography"},
		["prefixes"] = {"de"},
		},
	["1959acad"] = {
		["descriptions"] = {"\"Academic\" (\"governmental\") variant of Belarusian as codified in 1959"},
		["prefixes"] = {"be"},
		},
	["1994"] = {
		["descriptions"] = {"Standardized Resian orthography"},
		["prefixes"] = {"sl-rozaj", "sl-rozaj-biske", "sl-rozaj-njiva", "sl-rozaj-osojs", "sl-rozaj-solba"},
		},
	["1996"] = {
		["descriptions"] = {"German orthography of 1996"},
		["prefixes"] = {"de"},
		},
	["abl1943"] = {
		["descriptions"] = {"Orthographic formulation of 1943 - Official in Brazil (Formulário Ortográfico de 1943 - Oficial no Brasil)"},
		["prefixes"] = {"pt-br"},
		},
	["akuapem"] = {
		["descriptions"] = {"Akuapem Twi"},
		["prefixes"] = {"tw"},
		},
	["alalc97"] = {
		["descriptions"] = {"ALA-LC Romanization, 1997 edition"},
		["prefixes"] = {},
		},
	["aluku"] = {
		["descriptions"] = {"Aluku dialect", "Boni dialect"},
		["prefixes"] = {"djk"},
		},
	["anpezo"] = {
		["descriptions"] = {"Anpezo standard of Ladin"},
		["prefixes"] = {"lld"},
		},
	["ao1990"] = {
		["descriptions"] = {"Portuguese Language Orthographic Agreement of 1990 (Acordo Ortográfico da Língua Portuguesa de 1990)"},
		["prefixes"] = {"pt", "gl"},
		},
	["aranes"] = {
		["descriptions"] = {"Aranese"},
		["prefixes"] = {"oc"},
		},
	["arkaika"] = {
		["descriptions"] = {"Arcaicam Esperantom", "Arkaika Esperanto"},
		["prefixes"] = {"eo"},
		},
	["asante"] = {
		["descriptions"] = {"Asante Twi", "Ashanti Twi"},
		["prefixes"] = {"tw"},
		},
	["auvern"] = {
		["descriptions"] = {"Auvergnat"},
		["prefixes"] = {"oc"},
		},
	["baku1926"] = {
		["descriptions"] = {"Unified Turkic Latin Alphabet (Historical)"},
		["prefixes"] = {"az", "ba", "crh", "kk", "krc", "ky", "sah", "tk", "tt", "uz"},
		},
	["balanka"] = {
		["descriptions"] = {"The Balanka dialect of Anii"},
		["prefixes"] = {"blo"},
		},
	["barla"] = {
		["descriptions"] = {"The Barlavento dialect group of Kabuverdianu"},
		["prefixes"] = {"kea"},
		},
	["basiceng"] = {
		["descriptions"] = {"Basic English"},
		["prefixes"] = {"en"},
		},
	["bauddha"] = {
		["descriptions"] = {"Buddhist Hybrid Sanskrit"},
		["prefixes"] = {"sa"},
		},
	["bciav"] = {
		["descriptions"] = {"BCI Blissymbolics AV"},
		["prefixes"] = {"zbl"},
		},
	["bcizbl"] = {
		["descriptions"] = {"BCI Blissymbolics"},
		["prefixes"] = {"zbl"},
		},
	["biscayan"] = {
		["descriptions"] = {"Biscayan dialect of Basque"},
		["prefixes"] = {"eu"},
		},
	["biske"] = {
		["descriptions"] = {"The San Giorgio dialect of Resian", "The Bila dialect of Resian"},
		["prefixes"] = {"sl-rozaj"},
		},
	["blasl"] = {
		["descriptions"] = {"Black American Sign Language dialect"},
		["prefixes"] = {"ase", "sgn-ase"},
		},
	["bohoric"] = {
		["descriptions"] = {"Slovene in Bohorič alphabet"},
		["prefixes"] = {"sl"},
		},
	["boont"] = {
		["descriptions"] = {"Boontling"},
		["prefixes"] = {"en"},
		},
	["bornholm"] = {
		["descriptions"] = {"Bornholmsk"},
		["prefixes"] = {"da"},
		},
	["cisaup"] = {
		["descriptions"] = {"Cisalpine"},
		["prefixes"] = {"oc"},
		},
	["colb1945"] = {
		["descriptions"] = {"Portuguese-Brazilian Orthographic Convention of 1945 (Convenção Ortográfica Luso-Brasileira de 1945)"},
		["prefixes"] = {"pt"},
		},
	["cornu"] = {
		["descriptions"] = {"Cornu-English", "Cornish English", "Anglo-Cornish"},
		["prefixes"] = {"en"},
		},
	["creiss"] = {
		["descriptions"] = {"Occitan variants of the Croissant area"},
		["prefixes"] = {"oc"},
		},
	["dajnko"] = {
		["descriptions"] = {"Slovene in Dajnko alphabet"},
		["prefixes"] = {"sl"},
		},
	["ekavsk"] = {
		["descriptions"] = {"Serbian with Ekavian pronunciation"},
		["prefixes"] = {"sr", "sr-latn", "sr-cyrl"},
		},
	["emodeng"] = {
		["descriptions"] = {"Early Modern English (1500-1700)"},
		["prefixes"] = {"en"},
		},
	["fascia"] = {
		["descriptions"] = {"Fascia standard of Ladin"},
		["prefixes"] = {"lld"},
		},
	["fodom"] = {
		["descriptions"] = {"Fodom standard of Ladin"},
		["prefixes"] = {"lld"},
		},
	["fonipa"] = {
		["descriptions"] = {"International Phonetic Alphabet"},
		["prefixes"] = {},
		},
	["fonkirsh"] = {
		["descriptions"] = {"Kirshenbaum Phonetic Alphabet"},
		["prefixes"] = {},
		},
	["fonnapa"] = {
		["descriptions"] = {"North American Phonetic Alphabet", "Americanist Phonetic Notation"},
		["prefixes"] = {},
		},
	["fonupa"] = {
		["descriptions"] = {"Uralic Phonetic Alphabet"},
		["prefixes"] = {},
		},
	["fonxsamp"] = {
		["descriptions"] = {"X-SAMPA transcription"},
		["prefixes"] = {},
		},
	["gallo"] = {
		["descriptions"] = {"Gallo"},
		["prefixes"] = {"fr"},
		},
	["gascon"] = {
		["descriptions"] = {"Gascon"},
		["prefixes"] = {"oc"},
		},
	["gherd"] = {
		["descriptions"] = {"Gherdëina standard of Ladin"},
		["prefixes"] = {"lld"},
		},
	["grclass"] = {
		["descriptions"] = {"Classical Occitan orthography"},
		["prefixes"] = {"oc", "oc-aranes", "oc-auvern", "oc-cisaup", "oc-creiss", "oc-gascon", "oc-lemosin", "oc-lengadoc", "oc-nicard", "oc-provenc", "oc-vivaraup"},
		},
	["grital"] = {
		["descriptions"] = {"Italian-inspired Occitan orthography"},
		["prefixes"] = {"oc", "oc-cisaup", "oc-nicard", "oc-provenc"},
		},
	["grmistr"] = {
		["descriptions"] = {"Mistralian or Mistralian-inspired Occitan orthography"},
		["prefixes"] = {"oc", "oc-aranes", "oc-auvern", "oc-cisaup", "oc-creiss", "oc-gascon", "oc-lemosin", "oc-lengadoc", "oc-nicard", "oc-provenc", "oc-vivaraup"},
		},
	["hepburn"] = {
		["descriptions"] = {"Hepburn romanization"},
		["prefixes"] = {"ja-latn"},
		},
	["hognorsk"] = {
		["descriptions"] = {"Norwegian in Høgnorsk (High Norwegian) orthography"},
		["prefixes"] = {"nn"},
		},
	["hsistemo"] = {
		["descriptions"] = {"Standard H-system orthographic fallback for spelling Esperanto"},
		["prefixes"] = {"eo"},
		},
	["ijekavsk"] = {
		["descriptions"] = {"Serbian with Ijekavian pronunciation"},
		["prefixes"] = {"sr", "sr-latn", "sr-cyrl"},
		},
	["itihasa"] = {
		["descriptions"] = {"Epic Sanskrit"},
		["prefixes"] = {"sa"},
		},
	["ivanchov"] = {
		["descriptions"] = {"Bulgarian in 1899 orthography"},
		["prefixes"] = {"bg"},
		},
	["jauer"] = {
		["descriptions"] = {"Jauer dialect of Romansh"},
		["prefixes"] = {"rm"},
		},
	["jyutping"] = {
		["descriptions"] = {"Jyutping Cantonese Romanization"},
		["prefixes"] = {"yue"},
		},
	["kkcor"] = {
		["descriptions"] = {"Common Cornish orthography of Revived Cornish"},
		["prefixes"] = {"kw"},
		},
	["kociewie"] = {
		["descriptions"] = {"The Kociewie dialect of Polish"},
		["prefixes"] = {"pl"},
		},
	["kscor"] = {
		["descriptions"] = {"Standard Cornish orthography of Revived Cornish", "Kernowek Standard"},
		["prefixes"] = {"kw"},
		},
	["laukika"] = {
		["descriptions"] = {"Classical Sanskrit"},
		["prefixes"] = {"sa"},
		},
	["lemosin"] = {
		["descriptions"] = {"Limousin"},
		["prefixes"] = {"oc"},
		},
	["lengadoc"] = {
		["descriptions"] = {"Languedocien"},
		["prefixes"] = {"oc"},
		},
	["lipaw"] = {
		["descriptions"] = {"The Lipovaz dialect of Resian", "The Lipovec dialect of Resian"},
		["prefixes"] = {"sl-rozaj"},
		},
	["ltg1929"] = {
		["descriptions"] = {"The Latgalian language orthography codified in 1929"},
		["prefixes"] = {"ltg"},
		},
	["ltg2007"] = {
		["descriptions"] = {"The Latgalian language orthography codified in the language law in 2007"},
		["prefixes"] = {"ltg"},
		},
	["luna1918"] = {
		["descriptions"] = {"Post-1917 Russian orthography"},
		["prefixes"] = {"ru"},
		},
	["metelko"] = {
		["descriptions"] = {"Slovene in Metelko alphabet"},
		["prefixes"] = {"sl"},
		},
	["monoton"] = {
		["descriptions"] = {"Monotonic Greek"},
		["prefixes"] = {"el"},
		},
	["ndyuka"] = {
		["descriptions"] = {"Ndyuka dialect", "Aukan dialect"},
		["prefixes"] = {"djk"},
		},
	["nedis"] = {
		["descriptions"] = {"Natisone dialect", "Nadiza dialect"},
		["prefixes"] = {"sl"},
		},
	["newfound"] = {
		["descriptions"] = {"Newfoundland English"},
		["prefixes"] = {"en-ca"},
		},
	["nicard"] = {
		["descriptions"] = {"Niçard"},
		["prefixes"] = {"oc"},
		},
	["njiva"] = {
		["descriptions"] = {"The Gniva dialect of Resian", "The Njiva dialect of Resian"},
		["prefixes"] = {"sl-rozaj"},
		},
	["nulik"] = {
		["descriptions"] = {"Volapük nulik", "Volapük perevidöl", "Volapük nulädik", "de Jong's Volapük", "New Volapük", "Revised Volapük", "Modern Volapük"},
		["prefixes"] = {"vo"},
		},
	["osojs"] = {
		["descriptions"] = {"The Oseacco dialect of Resian", "The Osojane dialect of Resian"},
		["prefixes"] = {"sl-rozaj"},
		},
	["oxendict"] = {
		["descriptions"] = {"Oxford English Dictionary spelling"},
		["prefixes"] = {"en"},
		},
	["pahawh2"] = {
		["descriptions"] = {"Pahawh Hmong Second Stage Reduced orthography"},
		["prefixes"] = {"mww", "hnj"},
		},
	["pahawh3"] = {
		["descriptions"] = {"Pahawh Hmong Third Stage Reduced orthography"},
		["prefixes"] = {"mww", "hnj"},
		},
	["pahawh4"] = {
		["descriptions"] = {"Pahawh Hmong Final Version orthography"},
		["prefixes"] = {"mww", "hnj"},
		},
	["pamaka"] = {
		["descriptions"] = {"Pamaka dialect"},
		["prefixes"] = {"djk"},
		},
	["peano"] = {
		["descriptions"] = {"Latino Sine Flexione", "Interlingua de API", "Interlingua de Peano"},
		["prefixes"] = {"la"},
		},
	["pehoeji"] = {
		["descriptions"] = {"Hokkien Vernacular Romanization System", "Pe̍h-ōe-jī orthography/romanization"},
		["prefixes"] = {"nan-latn"},
		},
	["petr1708"] = {
		["descriptions"] = {"Petrine orthography"},
		["prefixes"] = {"ru"},
		},
	["pinyin"] = {
		["descriptions"] = {"Pinyin romanization"},
		["prefixes"] = {"zh-latn", "bo-latn"},
		},
	["polyton"] = {
		["descriptions"] = {"Polytonic Greek"},
		["prefixes"] = {"el"},
		},
	["provenc"] = {
		["descriptions"] = {"Provençal"},
		["prefixes"] = {"oc"},
		},
	["puter"] = {
		["descriptions"] = {"Puter idiom of Romansh"},
		["prefixes"] = {"rm"},
		},
	["rigik"] = {
		["descriptions"] = {"Volapük rigik", "Schleyer's Volapük", "Original Volapük", "Classic Volapük"},
		["prefixes"] = {"vo"},
		},
	["rozaj"] = {
		["descriptions"] = {"Resian", "Resianic", "Rezijan"},
		["prefixes"] = {"sl"},
		},
	["rumgr"] = {
		["descriptions"] = {"Rumantsch Grischun"},
		["prefixes"] = {"rm"},
		},
	["scotland"] = {
		["descriptions"] = {"Scottish Standard English"},
		["prefixes"] = {"en"},
		},
	["scouse"] = {
		["descriptions"] = {"Scouse"},
		["prefixes"] = {"en"},
		},
	["simple"] = {
		["descriptions"] = {"Simplified form"},
		["prefixes"] = {},
		},
	["solba"] = {
		["descriptions"] = {"The Stolvizza dialect of Resian", "The Solbica dialect of Resian"},
		["prefixes"] = {"sl-rozaj"},
		},
	["sotav"] = {
		["descriptions"] = {"The Sotavento dialect group of Kabuverdianu"},
		["prefixes"] = {"kea"},
		},
	["spanglis"] = {
		["descriptions"] = {"Spanglish"},
		["prefixes"] = {"en", "es"},
		},
	["surmiran"] = {
		["descriptions"] = {"Surmiran idiom of Romansh"},
		["prefixes"] = {"rm"},
		},
	["sursilv"] = {
		["descriptions"] = {"Sursilvan idiom of Romansh"},
		["prefixes"] = {"rm"},
		},
	["sutsilv"] = {
		["descriptions"] = {"Sutsilvan idiom of Romansh"},
		["prefixes"] = {"rm"},
		},
	["synnejyl"] = {
		["descriptions"] = {"Synnejysk", "South Jutish"},
		["prefixes"] = {"da"},
		},
	["tailo"] = {
		["descriptions"] = {"Taiwanese Hokkien Romanization System for Hokkien languages", "Tâi-lô orthography/romanization"},
		["prefixes"] = {"nan-latn"},
		},
	["tarask"] = {
		["descriptions"] = {"Belarusian in Taraskievica orthography"},
		["prefixes"] = {"be"},
		},
	["tongyong"] = {
		["descriptions"] = {"Tongyong Pinyin romanization"},
		["prefixes"] = {"zh-latn"},
		},
	["tunumiit"] = {
		["descriptions"] = {"Tunumiisiut", "East Greenlandic", "Østgrønlandsk"},
		["prefixes"] = {"kl"},
		},
	["uccor"] = {
		["descriptions"] = {"Unified Cornish orthography of Revived Cornish"},
		["prefixes"] = {"kw"},
		},
	["ucrcor"] = {
		["descriptions"] = {"Unified Cornish Revised orthography of Revived Cornish"},
		["prefixes"] = {"kw"},
		},
	["ulster"] = {
		["descriptions"] = {"Ulster dialect of Scots"},
		["prefixes"] = {"sco"},
		},
	["unifon"] = {
		["descriptions"] = {"Unifon phonetic alphabet"},
		["prefixes"] = {"en", "hup", "kyh", "tol", "yur"},
		},
	["vaidika"] = {
		["descriptions"] = {"Vedic Sanskrit"},
		["prefixes"] = {"sa"},
		},
	["valbadia"] = {
		["descriptions"] = {"Val Badia standard of Ladin"},
		["prefixes"] = {"lld"},
		},
	["valencia"] = {
		["descriptions"] = {"Valencian"},
		["prefixes"] = {"ca"},
		},
	["vallader"] = {
		["descriptions"] = {"Vallader idiom of Romansh"},
		["prefixes"] = {"rm"},
		},
	["vecdruka"] = {
		["descriptions"] = {"Latvian orthography used before 1920s (\"vecā druka\")"},
		["prefixes"] = {"lv"},
		},
	["vivaraup"] = {
		["descriptions"] = {"Vivaro-Alpine"},
		["prefixes"] = {"oc"},
		},
	["wadegile"] = {
		["descriptions"] = {"Wade-Giles romanization"},
		["prefixes"] = {"zh-latn"},
		},
	["xsistemo"] = {
		["descriptions"] = {"Standard X-system orthographic fallback for spelling Esperanto"},
		["prefixes"] = {"eo"},
		}
	}</text>
      <sha1>hc0pn4baqi4cpa9qyuoejytlt3nklb0</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Language/data/iana suppressed scripts</title>
    <ns>828</ns>
    <id>1088</id>
    <revision>
      <id>155584</id>
      <parentid>154477</parentid>
      <timestamp>2024-05-06T02:00:44Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Module:Language/data/iana_suppressed_scripts]]</comment>
      <origin>154476</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="1281" sha1="n8dn3vd4piec0335d4qiz3359erapu7" xml:space="preserve">-- File-Date: 2024-03-07
return {
	["Arab"] = {"ar", "fa", "ps", "ur"},
	["Armn"] = {"hy"},
	["Beng"] = {"as", "bn"},
	["Blis"] = {"zbl"},
	["Cyrl"] = {"ab", "be", "bg", "kk", "mk", "ru", "uk"},
	["Deva"] = {"hi", "mr", "ne", "kok", "mai"},
	["Ethi"] = {"am", "ti"},
	["Geor"] = {"ka"},
	["Grek"] = {"el"},
	["Gujr"] = {"gu"},
	["Guru"] = {"pa"},
	["Hebr"] = {"he", "iw", "yi"},
	["Jpan"] = {"ja"},
	["Khmr"] = {"km"},
	["Knda"] = {"kn"},
	["Kore"] = {"ko"},
	["Laoo"] = {"lo"},
	["Latn"] = {"af", "ay", "bs", "ca", "ch", "cs", "cy", "da", "de", "en", "eo",
				"es", "et", "eu", "fi", "fj", "fo", "fr", "fy", "ga", "gl", "gn",
				"gv", "hr", "ht", "hu", "id", "in", "is", "it", "kl", "la", "lb",
				"ln", "lt", "lv", "mg", "mh", "mo", "ms", "mt", "na", "nb", "nd",
				"nl", "nn", "no", "nr", "ny", "om", "pl", "pt", "qu", "rm", "rn",
				"ro", "rw", "sg", "sk", "sl", "sm", "so", "sq", "ss", "st", "sv",
				"sw", "tl", "tn", "to", "tr", "ts", "ve", "vi", "xh", "zu", "dsb",
				"frr", "frs", "gsw", "hsb", "men", "nds", "niu", "nso", "tem", "tkl", "tmh",
				"tpi", "tvl"},
	["Mlym"] = {"ml"},
	["Mymr"] = {"my"},
	["Nkoo"] = {"nqo"},
	["Orya"] = {"or"},
	["Sinh"] = {"si"},
	["Taml"] = {"ta"},
	["Telu"] = {"te"},
	["Thaa"] = {"dv"},
	["Thai"] = {"th"},
	["Tibt"] = {"dz"}
	}</text>
      <sha1>n8dn3vd4piec0335d4qiz3359erapu7</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Lang/ISO 639 synonyms</title>
    <ns>828</ns>
    <id>1089</id>
    <revision>
      <id>43699</id>
      <parentid>43696</parentid>
      <timestamp>2022-12-03T06:36:05Z</timestamp>
      <contributor>
        <username>imported&gt;Immanuelle</username>
        <id>0</id>
      </contributor>
      <minor/>
      <comment>2 revisions imported from [[:wikipedia:Module:Lang/ISO_639_synonyms]]</comment>
      <origin>19975</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="3163" sha1="shzq5qyzo42nqfska6amwdq4g8lois9" xml:space="preserve">-- File-Date: 2013-01-11
return {
	["aar"] = "aa",
	["abk"] = "ab",
	["afr"] = "af",
	["aka"] = "ak",
	["amh"] = "am",
	["ara"] = "ar",
	["arg"] = "an",
	["asm"] = "as",
	["ava"] = "av",
	["ave"] = "ae",
	["aym"] = "ay",
	["aze"] = "az",
	["bak"] = "ba",
	["bam"] = "bm",
	["bel"] = "be",
	["ben"] = "bn",
	["bih"] = "bh",
	["bis"] = "bi",
	["bod"] = "bo",
	["bos"] = "bs",
	["bre"] = "br",
	["bul"] = "bg",
	["cat"] = "ca",
	["ces"] = "cs",
	["cha"] = "ch",
	["che"] = "ce",
	["chu"] = "cu",
	["chv"] = "cv",
	["cor"] = "kw",
	["cos"] = "co",
	["cre"] = "cr",
	["cym"] = "cy",
	["dan"] = "da",
	["deu"] = "de",
	["div"] = "dv",
	["dzo"] = "dz",
	["ell"] = "el",
	["eng"] = "en",
	["epo"] = "eo",
	["est"] = "et",
	["eus"] = "eu",
	["ewe"] = "ee",
	["fao"] = "fo",
	["fas"] = "fa",
	["fij"] = "fj",
	["fin"] = "fi",
	["fra"] = "fr",
	["fry"] = "fy",
	["ful"] = "ff",
	["gla"] = "gd",
	["gle"] = "ga",
	["glg"] = "gl",
	["glv"] = "gv",
	["grn"] = "gn",
	["guj"] = "gu",
	["hat"] = "ht",
	["hau"] = "ha",
	["heb"] = "he",
	["her"] = "hz",
	["hin"] = "hi",
	["hmo"] = "ho",
	["hrv"] = "hr",
	["hun"] = "hu",
	["hye"] = "hy",
	["ibo"] = "ig",
	["ido"] = "io",
	["iii"] = "ii",
	["iku"] = "iu",
	["ile"] = "ie",
	["ina"] = "ia",
	["ind"] = "id",
	["ipk"] = "ik",
	["isl"] = "is",
	["ita"] = "it",
	["jav"] = "jv",
	["jpn"] = "ja",
	["kal"] = "kl",
	["kan"] = "kn",
	["kas"] = "ks",
	["kat"] = "ka",
	["kau"] = "kr",
	["kaz"] = "kk",
	["khm"] = "km",
	["kik"] = "ki",
	["kin"] = "rw",
	["kir"] = "ky",
	["kom"] = "kv",
	["kon"] = "kg",
	["kor"] = "ko",
	["kua"] = "kj",
	["kur"] = "ku",
	["lao"] = "lo",
	["lat"] = "la",
	["lav"] = "lv",
	["lim"] = "li",
	["lin"] = "ln",
	["lit"] = "lt",
	["ltz"] = "lb",
	["lub"] = "lu",
	["lug"] = "lg",
	["mah"] = "mh",
	["mal"] = "ml",
	["mar"] = "mr",
	["mkd"] = "mk",
	["mlg"] = "mg",
	["mlt"] = "mt",
	["mon"] = "mn",
	["mri"] = "mi",
	["msa"] = "ms",
	["mya"] = "my",
	["nau"] = "na",
	["nav"] = "nv",
	["nbl"] = "nr",
	["nde"] = "nd",
	["ndo"] = "ng",
	["nep"] = "ne",
	["nld"] = "nl",
	["nno"] = "nn",
	["nob"] = "nb",
	["nor"] = "no",
	["nya"] = "ny",
	["oci"] = "oc",
	["oji"] = "oj",
	["ori"] = "or",
	["orm"] = "om",
	["oss"] = "os",
	["pan"] = "pa",
	["pli"] = "pi",
	["pol"] = "pl",
	["por"] = "pt",
	["pus"] = "ps",
	["que"] = "qu",
	["roh"] = "rm",
	["ron"] = "ro",
	["run"] = "rn",
	["rus"] = "ru",
	["sag"] = "sg",
	["san"] = "sa",
	["sin"] = "si",
	["slk"] = "sk",
	["slv"] = "sl",
	["sme"] = "se",
	["smo"] = "sm",
	["sna"] = "sn",
	["snd"] = "sd",
	["som"] = "so",
	["sot"] = "st",
	["spa"] = "es",
	["sqi"] = "sq",
	["srd"] = "sc",
	["srp"] = "sr",
	["ssw"] = "ss",
	["sun"] = "su",
	["swa"] = "sw",
	["swe"] = "sv",
	["tah"] = "ty",
	["tam"] = "ta",
	["tat"] = "tt",
	["tel"] = "te",
	["tgk"] = "tg",
	["tgl"] = "tl",
	["tha"] = "th",
	["tir"] = "ti",
	["ton"] = "to",
	["tsn"] = "tn",
	["tso"] = "ts",
	["tuk"] = "tk",
	["tur"] = "tr",
	["twi"] = "tw",
	["uig"] = "ug",
	["ukr"] = "uk",
	["urd"] = "ur",
	["uzb"] = "uz",
	["ven"] = "ve",
	["vie"] = "vi",
	["vol"] = "vo",
	["wln"] = "wa",
	["wol"] = "wo",
	["xho"] = "xh",
	["yid"] = "yi",
	["yor"] = "yo",
	["zha"] = "za",
	["zho"] = "zh",
	["zul"] = "zu"
	}</text>
      <sha1>shzq5qyzo42nqfska6amwdq4g8lois9</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Unicode data/scripts</title>
    <ns>828</ns>
    <id>1102</id>
    <revision>
      <id>154479</id>
      <parentid>154478</parentid>
      <timestamp>2024-03-16T21:04:14Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Module:Unicode_data/scripts]]</comment>
      <origin>154478</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="33636" sha1="chvvggwtyt9uanecd8s4kjbmbqhq800" xml:space="preserve">--[=[
-- Official Unicode script values for individual codepoints and ranges of
-- codepoints.

-- https://www.unicode.org/Public/UNIDATA/Scripts.txt provided
-- the script names, and https://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt
-- provided script codes corresponding to the names (see [[Script (Unicode)]]).
--]=]

local data = {
	singles = {
		[0x000AA] = "Latn",
		[0x000BA] = "Latn",
		[0x000D7] = "Zyyy",
		[0x000F7] = "Zyyy",
		[0x00374] = "Zyyy",
		[0x0037E] = "Zyyy",
		[0x0037F] = "Grek",
		[0x00384] = "Grek",
		[0x00385] = "Zyyy",
		[0x00386] = "Grek",
		[0x00387] = "Zyyy",
		[0x0038C] = "Grek",
		[0x00605] = "Zyyy",
		[0x0060C] = "Zyyy",
		[0x0061B] = "Zyyy",
		[0x0061F] = "Zyyy",
		[0x00640] = "Zyyy",
		[0x00670] = "Zinh",
		[0x006DD] = "Zyyy",
		[0x0085E] = "Mand",
		[0x008E2] = "Zyyy",
		[0x009B2] = "Beng",
		[0x009D7] = "Beng",
		[0x00A3C] = "Guru",
		[0x00A51] = "Guru",
		[0x00A5E] = "Guru",
		[0x00AD0] = "Gujr",
		[0x00B9C] = "Taml",
		[0x00BD0] = "Taml",
		[0x00BD7] = "Taml",
		[0x00C5D] = "Telu",
		[0x00DBD] = "Sinh",
		[0x00DCA] = "Sinh",
		[0x00DD6] = "Sinh",
		[0x00E3F] = "Zyyy",
		[0x00E84] = "Laoo",
		[0x00EA5] = "Laoo",
		[0x00EC6] = "Laoo",
		[0x010C7] = "Geor",
		[0x010CD] = "Geor",
		[0x010FB] = "Zyyy",
		[0x01258] = "Ethi",
		[0x012C0] = "Ethi",
		[0x0171F] = "Tglg",
		[0x01804] = "Mong",
		[0x01805] = "Zyyy",
		[0x01940] = "Limb",
		[0x01CD3] = "Zyyy",
		[0x01CE1] = "Zyyy",
		[0x01CED] = "Zinh",
		[0x01CF4] = "Zinh",
		[0x01CFA] = "Zyyy",
		[0x01D2B] = "Cyrl",
		[0x01D78] = "Cyrl",
		[0x01DBF] = "Grek",
		[0x01F59] = "Grek",
		[0x01F5B] = "Grek",
		[0x01F5D] = "Grek",
		[0x02071] = "Latn",
		[0x0207F] = "Latn",
		[0x02126] = "Grek",
		[0x02132] = "Latn",
		[0x0214E] = "Latn",
		[0x02D27] = "Geor",
		[0x02D2D] = "Geor",
		[0x02D7F] = "Tfng",
		[0x03005] = "Hani",
		[0x03006] = "Zyyy",
		[0x03007] = "Hani",
		[0x030A0] = "Zyyy",
		[0x031EF] = "Zyyy",
		[0x032FF] = "Zyyy",
		[0x0A7D3] = "Latn",
		[0x0A92E] = "Zyyy",
		[0x0A92F] = "Kali",
		[0x0A95F] = "Rjng",
		[0x0A9CF] = "Zyyy",
		[0x0AB5B] = "Zyyy",
		[0x0AB65] = "Grek",
		[0x0FB3E] = "Hebr",
		[0x0FDCF] = "Arab",
		[0x0FEFF] = "Zyyy",
		[0x0FF70] = "Zyyy",
		[0x101A0] = "Grek",
		[0x101FD] = "Zinh",
		[0x102E0] = "Zinh",
		[0x1039F] = "Ugar",
		[0x1056F] = "Aghb",
		[0x10808] = "Cprt",
		[0x1083C] = "Cprt",
		[0x1083F] = "Cprt",
		[0x1091F] = "Phnx",
		[0x1093F] = "Lydi",
		[0x1107F] = "Brah",
		[0x110CD] = "Kthi",
		[0x11288] = "Mult",
		[0x1133B] = "Zinh",
		[0x11350] = "Gran",
		[0x11357] = "Gran",
		[0x118FF] = "Wara",
		[0x11909] = "Diak",
		[0x11D3A] = "Gonm",
		[0x11FB0] = "Lisu",
		[0x11FFF] = "Taml",
		[0x16FE0] = "Tang",
		[0x16FE1] = "Nshu",
		[0x16FE4] = "Kits",
		[0x1B000] = "Kana",
		[0x1B132] = "Hira",
		[0x1B155] = "Kana",
		[0x1D4A2] = "Zyyy",
		[0x1D4BB] = "Zyyy",
		[0x1D546] = "Zyyy",
		[0x1E08F] = "Cyrl",
		[0x1E2FF] = "Wcho",
		[0x1EE24] = "Arab",
		[0x1EE27] = "Arab",
		[0x1EE39] = "Arab",
		[0x1EE3B] = "Arab",
		[0x1EE42] = "Arab",
		[0x1EE47] = "Arab",
		[0x1EE49] = "Arab",
		[0x1EE4B] = "Arab",
		[0x1EE54] = "Arab",
		[0x1EE57] = "Arab",
		[0x1EE59] = "Arab",
		[0x1EE5B] = "Arab",
		[0x1EE5D] = "Arab",
		[0x1EE5F] = "Arab",
		[0x1EE64] = "Arab",
		[0x1EE7E] = "Arab",
		[0x1F200] = "Hira",
		[0x1F7F0] = "Zyyy",
		[0xE0001] = "Zyyy",
	},
	
	ranges = {
		{ 0x00000, 0x00040, "Zyyy" },
		{ 0x00041, 0x0005A, "Latn" },
		{ 0x0005B, 0x00060, "Zyyy" },
		{ 0x00061, 0x0007A, "Latn" },
		{ 0x0007B, 0x000A9, "Zyyy" },
		{ 0x000AB, 0x000B9, "Zyyy" },
		{ 0x000BB, 0x000BF, "Zyyy" },
		{ 0x000C0, 0x000D6, "Latn" },
		{ 0x000D8, 0x000F6, "Latn" },
		{ 0x000F8, 0x002B8, "Latn" },
		{ 0x002B9, 0x002DF, "Zyyy" },
		{ 0x002E0, 0x002E4, "Latn" },
		{ 0x002E5, 0x002E9, "Zyyy" },
		{ 0x002EA, 0x002EB, "Bopo" },
		{ 0x002EC, 0x002FF, "Zyyy" },
		{ 0x00300, 0x0036F, "Zinh" },
		{ 0x00370, 0x00373, "Grek" },
		{ 0x00375, 0x00377, "Grek" },
		{ 0x0037A, 0x0037D, "Grek" },
		{ 0x00388, 0x0038A, "Grek" },
		{ 0x0038E, 0x003A1, "Grek" },
		{ 0x003A3, 0x003E1, "Grek" },
		{ 0x003E2, 0x003EF, "Copt" },
		{ 0x003F0, 0x003FF, "Grek" },
		{ 0x00400, 0x00484, "Cyrl" },
		{ 0x00485, 0x00486, "Zinh" },
		{ 0x00487, 0x0052F, "Cyrl" },
		{ 0x00531, 0x00556, "Armn" },
		{ 0x00559, 0x0058A, "Armn" },
		{ 0x0058D, 0x0058F, "Armn" },
		{ 0x00591, 0x005C7, "Hebr" },
		{ 0x005D0, 0x005EA, "Hebr" },
		{ 0x005EF, 0x005F4, "Hebr" },
		{ 0x00600, 0x00604, "Arab" },
		{ 0x00606, 0x0060B, "Arab" },
		{ 0x0060D, 0x0061A, "Arab" },
		{ 0x0061C, 0x0061E, "Arab" },
		{ 0x00620, 0x0063F, "Arab" },
		{ 0x00641, 0x0064A, "Arab" },
		{ 0x0064B, 0x00655, "Zinh" },
		{ 0x00656, 0x0066F, "Arab" },
		{ 0x00671, 0x006DC, "Arab" },
		{ 0x006DE, 0x006FF, "Arab" },
		{ 0x00700, 0x0070D, "Syrc" },
		{ 0x0070F, 0x0074A, "Syrc" },
		{ 0x0074D, 0x0074F, "Syrc" },
		{ 0x00750, 0x0077F, "Arab" },
		{ 0x00780, 0x007B1, "Thaa" },
		{ 0x007C0, 0x007FA, "Nkoo" },
		{ 0x007FD, 0x007FF, "Nkoo" },
		{ 0x00800, 0x0082D, "Samr" },
		{ 0x00830, 0x0083E, "Samr" },
		{ 0x00840, 0x0085B, "Mand" },
		{ 0x00860, 0x0086A, "Syrc" },
		{ 0x00870, 0x0088E, "Arab" },
		{ 0x00890, 0x00891, "Arab" },
		{ 0x00898, 0x008E1, "Arab" },
		{ 0x008E3, 0x008FF, "Arab" },
		{ 0x00900, 0x00950, "Deva" },
		{ 0x00951, 0x00954, "Zinh" },
		{ 0x00955, 0x00963, "Deva" },
		{ 0x00964, 0x00965, "Zyyy" },
		{ 0x00966, 0x0097F, "Deva" },
		{ 0x00980, 0x00983, "Beng" },
		{ 0x00985, 0x0098C, "Beng" },
		{ 0x0098F, 0x00990, "Beng" },
		{ 0x00993, 0x009A8, "Beng" },
		{ 0x009AA, 0x009B0, "Beng" },
		{ 0x009B6, 0x009B9, "Beng" },
		{ 0x009BC, 0x009C4, "Beng" },
		{ 0x009C7, 0x009C8, "Beng" },
		{ 0x009CB, 0x009CE, "Beng" },
		{ 0x009DC, 0x009DD, "Beng" },
		{ 0x009DF, 0x009E3, "Beng" },
		{ 0x009E6, 0x009FE, "Beng" },
		{ 0x00A01, 0x00A03, "Guru" },
		{ 0x00A05, 0x00A0A, "Guru" },
		{ 0x00A0F, 0x00A10, "Guru" },
		{ 0x00A13, 0x00A28, "Guru" },
		{ 0x00A2A, 0x00A30, "Guru" },
		{ 0x00A32, 0x00A33, "Guru" },
		{ 0x00A35, 0x00A36, "Guru" },
		{ 0x00A38, 0x00A39, "Guru" },
		{ 0x00A3E, 0x00A42, "Guru" },
		{ 0x00A47, 0x00A48, "Guru" },
		{ 0x00A4B, 0x00A4D, "Guru" },
		{ 0x00A59, 0x00A5C, "Guru" },
		{ 0x00A66, 0x00A76, "Guru" },
		{ 0x00A81, 0x00A83, "Gujr" },
		{ 0x00A85, 0x00A8D, "Gujr" },
		{ 0x00A8F, 0x00A91, "Gujr" },
		{ 0x00A93, 0x00AA8, "Gujr" },
		{ 0x00AAA, 0x00AB0, "Gujr" },
		{ 0x00AB2, 0x00AB3, "Gujr" },
		{ 0x00AB5, 0x00AB9, "Gujr" },
		{ 0x00ABC, 0x00AC5, "Gujr" },
		{ 0x00AC7, 0x00AC9, "Gujr" },
		{ 0x00ACB, 0x00ACD, "Gujr" },
		{ 0x00AE0, 0x00AE3, "Gujr" },
		{ 0x00AE6, 0x00AF1, "Gujr" },
		{ 0x00AF9, 0x00AFF, "Gujr" },
		{ 0x00B01, 0x00B03, "Orya" },
		{ 0x00B05, 0x00B0C, "Orya" },
		{ 0x00B0F, 0x00B10, "Orya" },
		{ 0x00B13, 0x00B28, "Orya" },
		{ 0x00B2A, 0x00B30, "Orya" },
		{ 0x00B32, 0x00B33, "Orya" },
		{ 0x00B35, 0x00B39, "Orya" },
		{ 0x00B3C, 0x00B44, "Orya" },
		{ 0x00B47, 0x00B48, "Orya" },
		{ 0x00B4B, 0x00B4D, "Orya" },
		{ 0x00B55, 0x00B57, "Orya" },
		{ 0x00B5C, 0x00B5D, "Orya" },
		{ 0x00B5F, 0x00B63, "Orya" },
		{ 0x00B66, 0x00B77, "Orya" },
		{ 0x00B82, 0x00B83, "Taml" },
		{ 0x00B85, 0x00B8A, "Taml" },
		{ 0x00B8E, 0x00B90, "Taml" },
		{ 0x00B92, 0x00B95, "Taml" },
		{ 0x00B99, 0x00B9A, "Taml" },
		{ 0x00B9E, 0x00B9F, "Taml" },
		{ 0x00BA3, 0x00BA4, "Taml" },
		{ 0x00BA8, 0x00BAA, "Taml" },
		{ 0x00BAE, 0x00BB9, "Taml" },
		{ 0x00BBE, 0x00BC2, "Taml" },
		{ 0x00BC6, 0x00BC8, "Taml" },
		{ 0x00BCA, 0x00BCD, "Taml" },
		{ 0x00BE6, 0x00BFA, "Taml" },
		{ 0x00C00, 0x00C0C, "Telu" },
		{ 0x00C0E, 0x00C10, "Telu" },
		{ 0x00C12, 0x00C28, "Telu" },
		{ 0x00C2A, 0x00C39, "Telu" },
		{ 0x00C3C, 0x00C44, "Telu" },
		{ 0x00C46, 0x00C48, "Telu" },
		{ 0x00C4A, 0x00C4D, "Telu" },
		{ 0x00C55, 0x00C56, "Telu" },
		{ 0x00C58, 0x00C5A, "Telu" },
		{ 0x00C60, 0x00C63, "Telu" },
		{ 0x00C66, 0x00C6F, "Telu" },
		{ 0x00C77, 0x00C7F, "Telu" },
		{ 0x00C80, 0x00C8C, "Knda" },
		{ 0x00C8E, 0x00C90, "Knda" },
		{ 0x00C92, 0x00CA8, "Knda" },
		{ 0x00CAA, 0x00CB3, "Knda" },
		{ 0x00CB5, 0x00CB9, "Knda" },
		{ 0x00CBC, 0x00CC4, "Knda" },
		{ 0x00CC6, 0x00CC8, "Knda" },
		{ 0x00CCA, 0x00CCD, "Knda" },
		{ 0x00CD5, 0x00CD6, "Knda" },
		{ 0x00CDD, 0x00CDE, "Knda" },
		{ 0x00CE0, 0x00CE3, "Knda" },
		{ 0x00CE6, 0x00CEF, "Knda" },
		{ 0x00CF1, 0x00CF3, "Knda" },
		{ 0x00D00, 0x00D0C, "Mlym" },
		{ 0x00D0E, 0x00D10, "Mlym" },
		{ 0x00D12, 0x00D44, "Mlym" },
		{ 0x00D46, 0x00D48, "Mlym" },
		{ 0x00D4A, 0x00D4F, "Mlym" },
		{ 0x00D54, 0x00D63, "Mlym" },
		{ 0x00D66, 0x00D7F, "Mlym" },
		{ 0x00D81, 0x00D83, "Sinh" },
		{ 0x00D85, 0x00D96, "Sinh" },
		{ 0x00D9A, 0x00DB1, "Sinh" },
		{ 0x00DB3, 0x00DBB, "Sinh" },
		{ 0x00DC0, 0x00DC6, "Sinh" },
		{ 0x00DCF, 0x00DD4, "Sinh" },
		{ 0x00DD8, 0x00DDF, "Sinh" },
		{ 0x00DE6, 0x00DEF, "Sinh" },
		{ 0x00DF2, 0x00DF4, "Sinh" },
		{ 0x00E01, 0x00E3A, "Thai" },
		{ 0x00E40, 0x00E5B, "Thai" },
		{ 0x00E81, 0x00E82, "Laoo" },
		{ 0x00E86, 0x00E8A, "Laoo" },
		{ 0x00E8C, 0x00EA3, "Laoo" },
		{ 0x00EA7, 0x00EBD, "Laoo" },
		{ 0x00EC0, 0x00EC4, "Laoo" },
		{ 0x00EC8, 0x00ECE, "Laoo" },
		{ 0x00ED0, 0x00ED9, "Laoo" },
		{ 0x00EDC, 0x00EDF, "Laoo" },
		{ 0x00F00, 0x00F47, "Tibt" },
		{ 0x00F49, 0x00F6C, "Tibt" },
		{ 0x00F71, 0x00F97, "Tibt" },
		{ 0x00F99, 0x00FBC, "Tibt" },
		{ 0x00FBE, 0x00FCC, "Tibt" },
		{ 0x00FCE, 0x00FD4, "Tibt" },
		{ 0x00FD5, 0x00FD8, "Zyyy" },
		{ 0x00FD9, 0x00FDA, "Tibt" },
		{ 0x01000, 0x0109F, "Mymr" },
		{ 0x010A0, 0x010C5, "Geor" },
		{ 0x010D0, 0x010FA, "Geor" },
		{ 0x010FC, 0x010FF, "Geor" },
		{ 0x01100, 0x011FF, "Hang" },
		{ 0x01200, 0x01248, "Ethi" },
		{ 0x0124A, 0x0124D, "Ethi" },
		{ 0x01250, 0x01256, "Ethi" },
		{ 0x0125A, 0x0125D, "Ethi" },
		{ 0x01260, 0x01288, "Ethi" },
		{ 0x0128A, 0x0128D, "Ethi" },
		{ 0x01290, 0x012B0, "Ethi" },
		{ 0x012B2, 0x012B5, "Ethi" },
		{ 0x012B8, 0x012BE, "Ethi" },
		{ 0x012C2, 0x012C5, "Ethi" },
		{ 0x012C8, 0x012D6, "Ethi" },
		{ 0x012D8, 0x01310, "Ethi" },
		{ 0x01312, 0x01315, "Ethi" },
		{ 0x01318, 0x0135A, "Ethi" },
		{ 0x0135D, 0x0137C, "Ethi" },
		{ 0x01380, 0x01399, "Ethi" },
		{ 0x013A0, 0x013F5, "Cher" },
		{ 0x013F8, 0x013FD, "Cher" },
		{ 0x01400, 0x0167F, "Cans" },
		{ 0x01680, 0x0169C, "Ogam" },
		{ 0x016A0, 0x016EA, "Runr" },
		{ 0x016EB, 0x016ED, "Zyyy" },
		{ 0x016EE, 0x016F8, "Runr" },
		{ 0x01700, 0x01715, "Tglg" },
		{ 0x01720, 0x01734, "Hano" },
		{ 0x01735, 0x01736, "Zyyy" },
		{ 0x01740, 0x01753, "Buhd" },
		{ 0x01760, 0x0176C, "Tagb" },
		{ 0x0176E, 0x01770, "Tagb" },
		{ 0x01772, 0x01773, "Tagb" },
		{ 0x01780, 0x017DD, "Khmr" },
		{ 0x017E0, 0x017E9, "Khmr" },
		{ 0x017F0, 0x017F9, "Khmr" },
		{ 0x01800, 0x01801, "Mong" },
		{ 0x01802, 0x01803, "Zyyy" },
		{ 0x01806, 0x01819, "Mong" },
		{ 0x01820, 0x01878, "Mong" },
		{ 0x01880, 0x018AA, "Mong" },
		{ 0x018B0, 0x018F5, "Cans" },
		{ 0x01900, 0x0191E, "Limb" },
		{ 0x01920, 0x0192B, "Limb" },
		{ 0x01930, 0x0193B, "Limb" },
		{ 0x01944, 0x0194F, "Limb" },
		{ 0x01950, 0x0196D, "Tale" },
		{ 0x01970, 0x01974, "Tale" },
		{ 0x01980, 0x019AB, "Talu" },
		{ 0x019B0, 0x019C9, "Talu" },
		{ 0x019D0, 0x019DA, "Talu" },
		{ 0x019DE, 0x019DF, "Talu" },
		{ 0x019E0, 0x019FF, "Khmr" },
		{ 0x01A00, 0x01A1B, "Bugi" },
		{ 0x01A1E, 0x01A1F, "Bugi" },
		{ 0x01A20, 0x01A5E, "Lana" },
		{ 0x01A60, 0x01A7C, "Lana" },
		{ 0x01A7F, 0x01A89, "Lana" },
		{ 0x01A90, 0x01A99, "Lana" },
		{ 0x01AA0, 0x01AAD, "Lana" },
		{ 0x01AB0, 0x01ACE, "Zinh" },
		{ 0x01B00, 0x01B4C, "Bali" },
		{ 0x01B50, 0x01B7E, "Bali" },
		{ 0x01B80, 0x01BBF, "Sund" },
		{ 0x01BC0, 0x01BF3, "Batk" },
		{ 0x01BFC, 0x01BFF, "Batk" },
		{ 0x01C00, 0x01C37, "Lepc" },
		{ 0x01C3B, 0x01C49, "Lepc" },
		{ 0x01C4D, 0x01C4F, "Lepc" },
		{ 0x01C50, 0x01C7F, "Olck" },
		{ 0x01C80, 0x01C88, "Cyrl" },
		{ 0x01C90, 0x01CBA, "Geor" },
		{ 0x01CBD, 0x01CBF, "Geor" },
		{ 0x01CC0, 0x01CC7, "Sund" },
		{ 0x01CD0, 0x01CD2, "Zinh" },
		{ 0x01CD4, 0x01CE0, "Zinh" },
		{ 0x01CE2, 0x01CE8, "Zinh" },
		{ 0x01CE9, 0x01CEC, "Zyyy" },
		{ 0x01CEE, 0x01CF3, "Zyyy" },
		{ 0x01CF5, 0x01CF7, "Zyyy" },
		{ 0x01CF8, 0x01CF9, "Zinh" },
		{ 0x01D00, 0x01D25, "Latn" },
		{ 0x01D26, 0x01D2A, "Grek" },
		{ 0x01D2C, 0x01D5C, "Latn" },
		{ 0x01D5D, 0x01D61, "Grek" },
		{ 0x01D62, 0x01D65, "Latn" },
		{ 0x01D66, 0x01D6A, "Grek" },
		{ 0x01D6B, 0x01D77, "Latn" },
		{ 0x01D79, 0x01DBE, "Latn" },
		{ 0x01DC0, 0x01DFF, "Zinh" },
		{ 0x01E00, 0x01EFF, "Latn" },
		{ 0x01F00, 0x01F15, "Grek" },
		{ 0x01F18, 0x01F1D, "Grek" },
		{ 0x01F20, 0x01F45, "Grek" },
		{ 0x01F48, 0x01F4D, "Grek" },
		{ 0x01F50, 0x01F57, "Grek" },
		{ 0x01F5F, 0x01F7D, "Grek" },
		{ 0x01F80, 0x01FB4, "Grek" },
		{ 0x01FB6, 0x01FC4, "Grek" },
		{ 0x01FC6, 0x01FD3, "Grek" },
		{ 0x01FD6, 0x01FDB, "Grek" },
		{ 0x01FDD, 0x01FEF, "Grek" },
		{ 0x01FF2, 0x01FF4, "Grek" },
		{ 0x01FF6, 0x01FFE, "Grek" },
		{ 0x02000, 0x0200B, "Zyyy" },
		{ 0x0200C, 0x0200D, "Zinh" },
		{ 0x0200E, 0x02064, "Zyyy" },
		{ 0x02066, 0x02070, "Zyyy" },
		{ 0x02074, 0x0207E, "Zyyy" },
		{ 0x02080, 0x0208E, "Zyyy" },
		{ 0x02090, 0x0209C, "Latn" },
		{ 0x020A0, 0x020C0, "Zyyy" },
		{ 0x020D0, 0x020F0, "Zinh" },
		{ 0x02100, 0x02125, "Zyyy" },
		{ 0x02127, 0x02129, "Zyyy" },
		{ 0x0212A, 0x0212B, "Latn" },
		{ 0x0212C, 0x02131, "Zyyy" },
		{ 0x02133, 0x0214D, "Zyyy" },
		{ 0x0214F, 0x0215F, "Zyyy" },
		{ 0x02160, 0x02188, "Latn" },
		{ 0x02189, 0x0218B, "Zyyy" },
		{ 0x02190, 0x02426, "Zyyy" },
		{ 0x02440, 0x0244A, "Zyyy" },
		{ 0x02460, 0x027FF, "Zyyy" },
		{ 0x02800, 0x028FF, "Brai" },
		{ 0x02900, 0x02B73, "Zyyy" },
		{ 0x02B76, 0x02B95, "Zyyy" },
		{ 0x02B97, 0x02BFF, "Zyyy" },
		{ 0x02C00, 0x02C5F, "Glag" },
		{ 0x02C60, 0x02C7F, "Latn" },
		{ 0x02C80, 0x02CF3, "Copt" },
		{ 0x02CF9, 0x02CFF, "Copt" },
		{ 0x02D00, 0x02D25, "Geor" },
		{ 0x02D30, 0x02D67, "Tfng" },
		{ 0x02D6F, 0x02D70, "Tfng" },
		{ 0x02D80, 0x02D96, "Ethi" },
		{ 0x02DA0, 0x02DA6, "Ethi" },
		{ 0x02DA8, 0x02DAE, "Ethi" },
		{ 0x02DB0, 0x02DB6, "Ethi" },
		{ 0x02DB8, 0x02DBE, "Ethi" },
		{ 0x02DC0, 0x02DC6, "Ethi" },
		{ 0x02DC8, 0x02DCE, "Ethi" },
		{ 0x02DD0, 0x02DD6, "Ethi" },
		{ 0x02DD8, 0x02DDE, "Ethi" },
		{ 0x02DE0, 0x02DFF, "Cyrl" },
		{ 0x02E00, 0x02E5D, "Zyyy" },
		{ 0x02E80, 0x02E99, "Hani" },
		{ 0x02E9B, 0x02EF3, "Hani" },
		{ 0x02F00, 0x02FD5, "Hani" },
		{ 0x02FF0, 0x03004, "Zyyy" },
		{ 0x03008, 0x03020, "Zyyy" },
		{ 0x03021, 0x03029, "Hani" },
		{ 0x0302A, 0x0302D, "Zinh" },
		{ 0x0302E, 0x0302F, "Hang" },
		{ 0x03030, 0x03037, "Zyyy" },
		{ 0x03038, 0x0303B, "Hani" },
		{ 0x0303C, 0x0303F, "Zyyy" },
		{ 0x03041, 0x03096, "Hira" },
		{ 0x03099, 0x0309A, "Zinh" },
		{ 0x0309B, 0x0309C, "Zyyy" },
		{ 0x0309D, 0x0309F, "Hira" },
		{ 0x030A1, 0x030FA, "Kana" },
		{ 0x030FB, 0x030FC, "Zyyy" },
		{ 0x030FD, 0x030FF, "Kana" },
		{ 0x03105, 0x0312F, "Bopo" },
		{ 0x03131, 0x0318E, "Hang" },
		{ 0x03190, 0x0319F, "Zyyy" },
		{ 0x031A0, 0x031BF, "Bopo" },
		{ 0x031C0, 0x031E3, "Zyyy" },
		{ 0x031F0, 0x031FF, "Kana" },
		{ 0x03200, 0x0321E, "Hang" },
		{ 0x03220, 0x0325F, "Zyyy" },
		{ 0x03260, 0x0327E, "Hang" },
		{ 0x0327F, 0x032CF, "Zyyy" },
		{ 0x032D0, 0x032FE, "Kana" },
		{ 0x03300, 0x03357, "Kana" },
		{ 0x03358, 0x033FF, "Zyyy" },
		{ 0x03400, 0x04DBF, "Hani" },
		{ 0x04DC0, 0x04DFF, "Zyyy" },
		{ 0x04E00, 0x09FFF, "Hani" },
		{ 0x0A000, 0x0A48C, "Yiii" },
		{ 0x0A490, 0x0A4C6, "Yiii" },
		{ 0x0A4D0, 0x0A4FF, "Lisu" },
		{ 0x0A500, 0x0A62B, "Vaii" },
		{ 0x0A640, 0x0A69F, "Cyrl" },
		{ 0x0A6A0, 0x0A6F7, "Bamu" },
		{ 0x0A700, 0x0A721, "Zyyy" },
		{ 0x0A722, 0x0A787, "Latn" },
		{ 0x0A788, 0x0A78A, "Zyyy" },
		{ 0x0A78B, 0x0A7CA, "Latn" },
		{ 0x0A7D0, 0x0A7D1, "Latn" },
		{ 0x0A7D5, 0x0A7D9, "Latn" },
		{ 0x0A7F2, 0x0A7FF, "Latn" },
		{ 0x0A800, 0x0A82C, "Sylo" },
		{ 0x0A830, 0x0A839, "Zyyy" },
		{ 0x0A840, 0x0A877, "Phag" },
		{ 0x0A880, 0x0A8C5, "Saur" },
		{ 0x0A8CE, 0x0A8D9, "Saur" },
		{ 0x0A8E0, 0x0A8FF, "Deva" },
		{ 0x0A900, 0x0A92D, "Kali" },
		{ 0x0A930, 0x0A953, "Rjng" },
		{ 0x0A960, 0x0A97C, "Hang" },
		{ 0x0A980, 0x0A9CD, "Java" },
		{ 0x0A9D0, 0x0A9D9, "Java" },
		{ 0x0A9DE, 0x0A9DF, "Java" },
		{ 0x0A9E0, 0x0A9FE, "Mymr" },
		{ 0x0AA00, 0x0AA36, "Cham" },
		{ 0x0AA40, 0x0AA4D, "Cham" },
		{ 0x0AA50, 0x0AA59, "Cham" },
		{ 0x0AA5C, 0x0AA5F, "Cham" },
		{ 0x0AA60, 0x0AA7F, "Mymr" },
		{ 0x0AA80, 0x0AAC2, "Tavt" },
		{ 0x0AADB, 0x0AADF, "Tavt" },
		{ 0x0AAE0, 0x0AAF6, "Mtei" },
		{ 0x0AB01, 0x0AB06, "Ethi" },
		{ 0x0AB09, 0x0AB0E, "Ethi" },
		{ 0x0AB11, 0x0AB16, "Ethi" },
		{ 0x0AB20, 0x0AB26, "Ethi" },
		{ 0x0AB28, 0x0AB2E, "Ethi" },
		{ 0x0AB30, 0x0AB5A, "Latn" },
		{ 0x0AB5C, 0x0AB64, "Latn" },
		{ 0x0AB66, 0x0AB69, "Latn" },
		{ 0x0AB6A, 0x0AB6B, "Zyyy" },
		{ 0x0AB70, 0x0ABBF, "Cher" },
		{ 0x0ABC0, 0x0ABED, "Mtei" },
		{ 0x0ABF0, 0x0ABF9, "Mtei" },
		{ 0x0AC00, 0x0D7A3, "Hang" },
		{ 0x0D7B0, 0x0D7C6, "Hang" },
		{ 0x0D7CB, 0x0D7FB, "Hang" },
		{ 0x0F900, 0x0FA6D, "Hani" },
		{ 0x0FA70, 0x0FAD9, "Hani" },
		{ 0x0FB00, 0x0FB06, "Latn" },
		{ 0x0FB13, 0x0FB17, "Armn" },
		{ 0x0FB1D, 0x0FB36, "Hebr" },
		{ 0x0FB38, 0x0FB3C, "Hebr" },
		{ 0x0FB40, 0x0FB41, "Hebr" },
		{ 0x0FB43, 0x0FB44, "Hebr" },
		{ 0x0FB46, 0x0FB4F, "Hebr" },
		{ 0x0FB50, 0x0FBC2, "Arab" },
		{ 0x0FBD3, 0x0FD3D, "Arab" },
		{ 0x0FD3E, 0x0FD3F, "Zyyy" },
		{ 0x0FD40, 0x0FD8F, "Arab" },
		{ 0x0FD92, 0x0FDC7, "Arab" },
		{ 0x0FDF0, 0x0FDFF, "Arab" },
		{ 0x0FE00, 0x0FE0F, "Zinh" },
		{ 0x0FE10, 0x0FE19, "Zyyy" },
		{ 0x0FE20, 0x0FE2D, "Zinh" },
		{ 0x0FE2E, 0x0FE2F, "Cyrl" },
		{ 0x0FE30, 0x0FE52, "Zyyy" },
		{ 0x0FE54, 0x0FE66, "Zyyy" },
		{ 0x0FE68, 0x0FE6B, "Zyyy" },
		{ 0x0FE70, 0x0FE74, "Arab" },
		{ 0x0FE76, 0x0FEFC, "Arab" },
		{ 0x0FF01, 0x0FF20, "Zyyy" },
		{ 0x0FF21, 0x0FF3A, "Latn" },
		{ 0x0FF3B, 0x0FF40, "Zyyy" },
		{ 0x0FF41, 0x0FF5A, "Latn" },
		{ 0x0FF5B, 0x0FF65, "Zyyy" },
		{ 0x0FF66, 0x0FF6F, "Kana" },
		{ 0x0FF71, 0x0FF9D, "Kana" },
		{ 0x0FF9E, 0x0FF9F, "Zyyy" },
		{ 0x0FFA0, 0x0FFBE, "Hang" },
		{ 0x0FFC2, 0x0FFC7, "Hang" },
		{ 0x0FFCA, 0x0FFCF, "Hang" },
		{ 0x0FFD2, 0x0FFD7, "Hang" },
		{ 0x0FFDA, 0x0FFDC, "Hang" },
		{ 0x0FFE0, 0x0FFE6, "Zyyy" },
		{ 0x0FFE8, 0x0FFEE, "Zyyy" },
		{ 0x0FFF9, 0x0FFFD, "Zyyy" },
		{ 0x10000, 0x1000B, "Linb" },
		{ 0x1000D, 0x10026, "Linb" },
		{ 0x10028, 0x1003A, "Linb" },
		{ 0x1003C, 0x1003D, "Linb" },
		{ 0x1003F, 0x1004D, "Linb" },
		{ 0x10050, 0x1005D, "Linb" },
		{ 0x10080, 0x100FA, "Linb" },
		{ 0x10100, 0x10102, "Zyyy" },
		{ 0x10107, 0x10133, "Zyyy" },
		{ 0x10137, 0x1013F, "Zyyy" },
		{ 0x10140, 0x1018E, "Grek" },
		{ 0x10190, 0x1019C, "Zyyy" },
		{ 0x101D0, 0x101FC, "Zyyy" },
		{ 0x10280, 0x1029C, "Lyci" },
		{ 0x102A0, 0x102D0, "Cari" },
		{ 0x102E1, 0x102FB, "Zyyy" },
		{ 0x10300, 0x10323, "Ital" },
		{ 0x1032D, 0x1032F, "Ital" },
		{ 0x10330, 0x1034A, "Goth" },
		{ 0x10350, 0x1037A, "Perm" },
		{ 0x10380, 0x1039D, "Ugar" },
		{ 0x103A0, 0x103C3, "Xpeo" },
		{ 0x103C8, 0x103D5, "Xpeo" },
		{ 0x10400, 0x1044F, "Dsrt" },
		{ 0x10450, 0x1047F, "Shaw" },
		{ 0x10480, 0x1049D, "Osma" },
		{ 0x104A0, 0x104A9, "Osma" },
		{ 0x104B0, 0x104D3, "Osge" },
		{ 0x104D8, 0x104FB, "Osge" },
		{ 0x10500, 0x10527, "Elba" },
		{ 0x10530, 0x10563, "Aghb" },
		{ 0x10570, 0x1057A, "Vith" },
		{ 0x1057C, 0x1058A, "Vith" },
		{ 0x1058C, 0x10592, "Vith" },
		{ 0x10594, 0x10595, "Vith" },
		{ 0x10597, 0x105A1, "Vith" },
		{ 0x105A3, 0x105B1, "Vith" },
		{ 0x105B3, 0x105B9, "Vith" },
		{ 0x105BB, 0x105BC, "Vith" },
		{ 0x10600, 0x10736, "Lina" },
		{ 0x10740, 0x10755, "Lina" },
		{ 0x10760, 0x10767, "Lina" },
		{ 0x10780, 0x10785, "Latn" },
		{ 0x10787, 0x107B0, "Latn" },
		{ 0x107B2, 0x107BA, "Latn" },
		{ 0x10800, 0x10805, "Cprt" },
		{ 0x1080A, 0x10835, "Cprt" },
		{ 0x10837, 0x10838, "Cprt" },
		{ 0x10840, 0x10855, "Armi" },
		{ 0x10857, 0x1085F, "Armi" },
		{ 0x10860, 0x1087F, "Palm" },
		{ 0x10880, 0x1089E, "Nbat" },
		{ 0x108A7, 0x108AF, "Nbat" },
		{ 0x108E0, 0x108F2, "Hatr" },
		{ 0x108F4, 0x108F5, "Hatr" },
		{ 0x108FB, 0x108FF, "Hatr" },
		{ 0x10900, 0x1091B, "Phnx" },
		{ 0x10920, 0x10939, "Lydi" },
		{ 0x10980, 0x1099F, "Mero" },
		{ 0x109A0, 0x109B7, "Merc" },
		{ 0x109BC, 0x109CF, "Merc" },
		{ 0x109D2, 0x109FF, "Merc" },
		{ 0x10A00, 0x10A03, "Khar" },
		{ 0x10A05, 0x10A06, "Khar" },
		{ 0x10A0C, 0x10A13, "Khar" },
		{ 0x10A15, 0x10A17, "Khar" },
		{ 0x10A19, 0x10A35, "Khar" },
		{ 0x10A38, 0x10A3A, "Khar" },
		{ 0x10A3F, 0x10A48, "Khar" },
		{ 0x10A50, 0x10A58, "Khar" },
		{ 0x10A60, 0x10A7F, "Sarb" },
		{ 0x10A80, 0x10A9F, "Narb" },
		{ 0x10AC0, 0x10AE6, "Mani" },
		{ 0x10AEB, 0x10AF6, "Mani" },
		{ 0x10B00, 0x10B35, "Avst" },
		{ 0x10B39, 0x10B3F, "Avst" },
		{ 0x10B40, 0x10B55, "Prti" },
		{ 0x10B58, 0x10B5F, "Prti" },
		{ 0x10B60, 0x10B72, "Phli" },
		{ 0x10B78, 0x10B7F, "Phli" },
		{ 0x10B80, 0x10B91, "Phlp" },
		{ 0x10B99, 0x10B9C, "Phlp" },
		{ 0x10BA9, 0x10BAF, "Phlp" },
		{ 0x10C00, 0x10C48, "Orkh" },
		{ 0x10C80, 0x10CB2, "Hung" },
		{ 0x10CC0, 0x10CF2, "Hung" },
		{ 0x10CFA, 0x10CFF, "Hung" },
		{ 0x10D00, 0x10D27, "Rohg" },
		{ 0x10D30, 0x10D39, "Rohg" },
		{ 0x10E60, 0x10E7E, "Arab" },
		{ 0x10E80, 0x10EA9, "Yezi" },
		{ 0x10EAB, 0x10EAD, "Yezi" },
		{ 0x10EB0, 0x10EB1, "Yezi" },
		{ 0x10EFD, 0x10EFF, "Arab" },
		{ 0x10F00, 0x10F27, "Sogo" },
		{ 0x10F30, 0x10F59, "Sogd" },
		{ 0x10F70, 0x10F89, "Ougr" },
		{ 0x10FB0, 0x10FCB, "Chrs" },
		{ 0x10FE0, 0x10FF6, "Elym" },
		{ 0x11000, 0x1104D, "Brah" },
		{ 0x11052, 0x11075, "Brah" },
		{ 0x11080, 0x110C2, "Kthi" },
		{ 0x110D0, 0x110E8, "Sora" },
		{ 0x110F0, 0x110F9, "Sora" },
		{ 0x11100, 0x11134, "Cakm" },
		{ 0x11136, 0x11147, "Cakm" },
		{ 0x11150, 0x11176, "Mahj" },
		{ 0x11180, 0x111DF, "Shrd" },
		{ 0x111E1, 0x111F4, "Sinh" },
		{ 0x11200, 0x11211, "Khoj" },
		{ 0x11213, 0x11241, "Khoj" },
		{ 0x11280, 0x11286, "Mult" },
		{ 0x1128A, 0x1128D, "Mult" },
		{ 0x1128F, 0x1129D, "Mult" },
		{ 0x1129F, 0x112A9, "Mult" },
		{ 0x112B0, 0x112EA, "Sind" },
		{ 0x112F0, 0x112F9, "Sind" },
		{ 0x11300, 0x11303, "Gran" },
		{ 0x11305, 0x1130C, "Gran" },
		{ 0x1130F, 0x11310, "Gran" },
		{ 0x11313, 0x11328, "Gran" },
		{ 0x1132A, 0x11330, "Gran" },
		{ 0x11332, 0x11333, "Gran" },
		{ 0x11335, 0x11339, "Gran" },
		{ 0x1133C, 0x11344, "Gran" },
		{ 0x11347, 0x11348, "Gran" },
		{ 0x1134B, 0x1134D, "Gran" },
		{ 0x1135D, 0x11363, "Gran" },
		{ 0x11366, 0x1136C, "Gran" },
		{ 0x11370, 0x11374, "Gran" },
		{ 0x11400, 0x1145B, "Newa" },
		{ 0x1145D, 0x11461, "Newa" },
		{ 0x11480, 0x114C7, "Tirh" },
		{ 0x114D0, 0x114D9, "Tirh" },
		{ 0x11580, 0x115B5, "Sidd" },
		{ 0x115B8, 0x115DD, "Sidd" },
		{ 0x11600, 0x11644, "Modi" },
		{ 0x11650, 0x11659, "Modi" },
		{ 0x11660, 0x1166C, "Mong" },
		{ 0x11680, 0x116B9, "Takr" },
		{ 0x116C0, 0x116C9, "Takr" },
		{ 0x11700, 0x1171A, "Ahom" },
		{ 0x1171D, 0x1172B, "Ahom" },
		{ 0x11730, 0x11746, "Ahom" },
		{ 0x11800, 0x1183B, "Dogr" },
		{ 0x118A0, 0x118F2, "Wara" },
		{ 0x11900, 0x11906, "Diak" },
		{ 0x1190C, 0x11913, "Diak" },
		{ 0x11915, 0x11916, "Diak" },
		{ 0x11918, 0x11935, "Diak" },
		{ 0x11937, 0x11938, "Diak" },
		{ 0x1193B, 0x11946, "Diak" },
		{ 0x11950, 0x11959, "Diak" },
		{ 0x119A0, 0x119A7, "Nand" },
		{ 0x119AA, 0x119D7, "Nand" },
		{ 0x119DA, 0x119E4, "Nand" },
		{ 0x11A00, 0x11A47, "Zanb" },
		{ 0x11A50, 0x11AA2, "Soyo" },
		{ 0x11AB0, 0x11ABF, "Cans" },
		{ 0x11AC0, 0x11AF8, "Pauc" },
		{ 0x11B00, 0x11B09, "Deva" },
		{ 0x11C00, 0x11C08, "Bhks" },
		{ 0x11C0A, 0x11C36, "Bhks" },
		{ 0x11C38, 0x11C45, "Bhks" },
		{ 0x11C50, 0x11C6C, "Bhks" },
		{ 0x11C70, 0x11C8F, "Marc" },
		{ 0x11C92, 0x11CA7, "Marc" },
		{ 0x11CA9, 0x11CB6, "Marc" },
		{ 0x11D00, 0x11D06, "Gonm" },
		{ 0x11D08, 0x11D09, "Gonm" },
		{ 0x11D0B, 0x11D36, "Gonm" },
		{ 0x11D3C, 0x11D3D, "Gonm" },
		{ 0x11D3F, 0x11D47, "Gonm" },
		{ 0x11D50, 0x11D59, "Gonm" },
		{ 0x11D60, 0x11D65, "Gong" },
		{ 0x11D67, 0x11D68, "Gong" },
		{ 0x11D6A, 0x11D8E, "Gong" },
		{ 0x11D90, 0x11D91, "Gong" },
		{ 0x11D93, 0x11D98, "Gong" },
		{ 0x11DA0, 0x11DA9, "Gong" },
		{ 0x11EE0, 0x11EF8, "Maka" },
		{ 0x11F00, 0x11F10, "Kawi" },
		{ 0x11F12, 0x11F3A, "Kawi" },
		{ 0x11F3E, 0x11F59, "Kawi" },
		{ 0x11FC0, 0x11FF1, "Taml" },
		{ 0x12000, 0x12399, "Xsux" },
		{ 0x12400, 0x1246E, "Xsux" },
		{ 0x12470, 0x12474, "Xsux" },
		{ 0x12480, 0x12543, "Xsux" },
		{ 0x12F90, 0x12FF2, "Cpmn" },
		{ 0x13000, 0x13455, "Egyp" },
		{ 0x14400, 0x14646, "Hluw" },
		{ 0x16800, 0x16A38, "Bamu" },
		{ 0x16A40, 0x16A5E, "Mroo" },
		{ 0x16A60, 0x16A69, "Mroo" },
		{ 0x16A6E, 0x16A6F, "Mroo" },
		{ 0x16A70, 0x16ABE, "Tnsa" },
		{ 0x16AC0, 0x16AC9, "Tnsa" },
		{ 0x16AD0, 0x16AED, "Bass" },
		{ 0x16AF0, 0x16AF5, "Bass" },
		{ 0x16B00, 0x16B45, "Hmng" },
		{ 0x16B50, 0x16B59, "Hmng" },
		{ 0x16B5B, 0x16B61, "Hmng" },
		{ 0x16B63, 0x16B77, "Hmng" },
		{ 0x16B7D, 0x16B8F, "Hmng" },
		{ 0x16E40, 0x16E9A, "Medf" },
		{ 0x16F00, 0x16F4A, "Plrd" },
		{ 0x16F4F, 0x16F87, "Plrd" },
		{ 0x16F8F, 0x16F9F, "Plrd" },
		{ 0x16FE2, 0x16FE3, "Hani" },
		{ 0x16FF0, 0x16FF1, "Hani" },
		{ 0x17000, 0x187F7, "Tang" },
		{ 0x18800, 0x18AFF, "Tang" },
		{ 0x18B00, 0x18CD5, "Kits" },
		{ 0x18D00, 0x18D08, "Tang" },
		{ 0x1AFF0, 0x1AFF3, "Kana" },
		{ 0x1AFF5, 0x1AFFB, "Kana" },
		{ 0x1AFFD, 0x1AFFE, "Kana" },
		{ 0x1B001, 0x1B11F, "Hira" },
		{ 0x1B120, 0x1B122, "Kana" },
		{ 0x1B150, 0x1B152, "Hira" },
		{ 0x1B164, 0x1B167, "Kana" },
		{ 0x1B170, 0x1B2FB, "Nshu" },
		{ 0x1BC00, 0x1BC6A, "Dupl" },
		{ 0x1BC70, 0x1BC7C, "Dupl" },
		{ 0x1BC80, 0x1BC88, "Dupl" },
		{ 0x1BC90, 0x1BC99, "Dupl" },
		{ 0x1BC9C, 0x1BC9F, "Dupl" },
		{ 0x1BCA0, 0x1BCA3, "Zyyy" },
		{ 0x1CF00, 0x1CF2D, "Zinh" },
		{ 0x1CF30, 0x1CF46, "Zinh" },
		{ 0x1CF50, 0x1CFC3, "Zyyy" },
		{ 0x1D000, 0x1D0F5, "Zyyy" },
		{ 0x1D100, 0x1D126, "Zyyy" },
		{ 0x1D129, 0x1D166, "Zyyy" },
		{ 0x1D167, 0x1D169, "Zinh" },
		{ 0x1D16A, 0x1D17A, "Zyyy" },
		{ 0x1D17B, 0x1D182, "Zinh" },
		{ 0x1D183, 0x1D184, "Zyyy" },
		{ 0x1D185, 0x1D18B, "Zinh" },
		{ 0x1D18C, 0x1D1A9, "Zyyy" },
		{ 0x1D1AA, 0x1D1AD, "Zinh" },
		{ 0x1D1AE, 0x1D1EA, "Zyyy" },
		{ 0x1D200, 0x1D245, "Grek" },
		{ 0x1D2C0, 0x1D2D3, "Zyyy" },
		{ 0x1D2E0, 0x1D2F3, "Zyyy" },
		{ 0x1D300, 0x1D356, "Zyyy" },
		{ 0x1D360, 0x1D378, "Zyyy" },
		{ 0x1D400, 0x1D454, "Zyyy" },
		{ 0x1D456, 0x1D49C, "Zyyy" },
		{ 0x1D49E, 0x1D49F, "Zyyy" },
		{ 0x1D4A5, 0x1D4A6, "Zyyy" },
		{ 0x1D4A9, 0x1D4AC, "Zyyy" },
		{ 0x1D4AE, 0x1D4B9, "Zyyy" },
		{ 0x1D4BD, 0x1D4C3, "Zyyy" },
		{ 0x1D4C5, 0x1D505, "Zyyy" },
		{ 0x1D507, 0x1D50A, "Zyyy" },
		{ 0x1D50D, 0x1D514, "Zyyy" },
		{ 0x1D516, 0x1D51C, "Zyyy" },
		{ 0x1D51E, 0x1D539, "Zyyy" },
		{ 0x1D53B, 0x1D53E, "Zyyy" },
		{ 0x1D540, 0x1D544, "Zyyy" },
		{ 0x1D54A, 0x1D550, "Zyyy" },
		{ 0x1D552, 0x1D6A5, "Zyyy" },
		{ 0x1D6A8, 0x1D7CB, "Zyyy" },
		{ 0x1D7CE, 0x1D7FF, "Zyyy" },
		{ 0x1D800, 0x1DA8B, "Sgnw" },
		{ 0x1DA9B, 0x1DA9F, "Sgnw" },
		{ 0x1DAA1, 0x1DAAF, "Sgnw" },
		{ 0x1DF00, 0x1DF1E, "Latn" },
		{ 0x1DF25, 0x1DF2A, "Latn" },
		{ 0x1E000, 0x1E006, "Glag" },
		{ 0x1E008, 0x1E018, "Glag" },
		{ 0x1E01B, 0x1E021, "Glag" },
		{ 0x1E023, 0x1E024, "Glag" },
		{ 0x1E026, 0x1E02A, "Glag" },
		{ 0x1E030, 0x1E06D, "Cyrl" },
		{ 0x1E100, 0x1E12C, "Hmnp" },
		{ 0x1E130, 0x1E13D, "Hmnp" },
		{ 0x1E140, 0x1E149, "Hmnp" },
		{ 0x1E14E, 0x1E14F, "Hmnp" },
		{ 0x1E290, 0x1E2AE, "Toto" },
		{ 0x1E2C0, 0x1E2F9, "Wcho" },
		{ 0x1E4D0, 0x1E4F9, "Nagm" },
		{ 0x1E7E0, 0x1E7E6, "Ethi" },
		{ 0x1E7E8, 0x1E7EB, "Ethi" },
		{ 0x1E7ED, 0x1E7EE, "Ethi" },
		{ 0x1E7F0, 0x1E7FE, "Ethi" },
		{ 0x1E800, 0x1E8C4, "Mend" },
		{ 0x1E8C7, 0x1E8D6, "Mend" },
		{ 0x1E900, 0x1E94B, "Adlm" },
		{ 0x1E950, 0x1E959, "Adlm" },
		{ 0x1E95E, 0x1E95F, "Adlm" },
		{ 0x1EC71, 0x1ECB4, "Zyyy" },
		{ 0x1ED01, 0x1ED3D, "Zyyy" },
		{ 0x1EE00, 0x1EE03, "Arab" },
		{ 0x1EE05, 0x1EE1F, "Arab" },
		{ 0x1EE21, 0x1EE22, "Arab" },
		{ 0x1EE29, 0x1EE32, "Arab" },
		{ 0x1EE34, 0x1EE37, "Arab" },
		{ 0x1EE4D, 0x1EE4F, "Arab" },
		{ 0x1EE51, 0x1EE52, "Arab" },
		{ 0x1EE61, 0x1EE62, "Arab" },
		{ 0x1EE67, 0x1EE6A, "Arab" },
		{ 0x1EE6C, 0x1EE72, "Arab" },
		{ 0x1EE74, 0x1EE77, "Arab" },
		{ 0x1EE79, 0x1EE7C, "Arab" },
		{ 0x1EE80, 0x1EE89, "Arab" },
		{ 0x1EE8B, 0x1EE9B, "Arab" },
		{ 0x1EEA1, 0x1EEA3, "Arab" },
		{ 0x1EEA5, 0x1EEA9, "Arab" },
		{ 0x1EEAB, 0x1EEBB, "Arab" },
		{ 0x1EEF0, 0x1EEF1, "Arab" },
		{ 0x1F000, 0x1F02B, "Zyyy" },
		{ 0x1F030, 0x1F093, "Zyyy" },
		{ 0x1F0A0, 0x1F0AE, "Zyyy" },
		{ 0x1F0B1, 0x1F0BF, "Zyyy" },
		{ 0x1F0C1, 0x1F0CF, "Zyyy" },
		{ 0x1F0D1, 0x1F0F5, "Zyyy" },
		{ 0x1F100, 0x1F1AD, "Zyyy" },
		{ 0x1F1E6, 0x1F1FF, "Zyyy" },
		{ 0x1F201, 0x1F202, "Zyyy" },
		{ 0x1F210, 0x1F23B, "Zyyy" },
		{ 0x1F240, 0x1F248, "Zyyy" },
		{ 0x1F250, 0x1F251, "Zyyy" },
		{ 0x1F260, 0x1F265, "Zyyy" },
		{ 0x1F300, 0x1F6D7, "Zyyy" },
		{ 0x1F6DC, 0x1F6EC, "Zyyy" },
		{ 0x1F6F0, 0x1F6FC, "Zyyy" },
		{ 0x1F700, 0x1F776, "Zyyy" },
		{ 0x1F77B, 0x1F7D9, "Zyyy" },
		{ 0x1F7E0, 0x1F7EB, "Zyyy" },
		{ 0x1F800, 0x1F80B, "Zyyy" },
		{ 0x1F810, 0x1F847, "Zyyy" },
		{ 0x1F850, 0x1F859, "Zyyy" },
		{ 0x1F860, 0x1F887, "Zyyy" },
		{ 0x1F890, 0x1F8AD, "Zyyy" },
		{ 0x1F8B0, 0x1F8B1, "Zyyy" },
		{ 0x1F900, 0x1FA53, "Zyyy" },
		{ 0x1FA60, 0x1FA6D, "Zyyy" },
		{ 0x1FA70, 0x1FA7C, "Zyyy" },
		{ 0x1FA80, 0x1FA88, "Zyyy" },
		{ 0x1FA90, 0x1FABD, "Zyyy" },
		{ 0x1FABF, 0x1FAC5, "Zyyy" },
		{ 0x1FACE, 0x1FADB, "Zyyy" },
		{ 0x1FAE0, 0x1FAE8, "Zyyy" },
		{ 0x1FAF0, 0x1FAF8, "Zyyy" },
		{ 0x1FB00, 0x1FB92, "Zyyy" },
		{ 0x1FB94, 0x1FBCA, "Zyyy" },
		{ 0x1FBF0, 0x1FBF9, "Zyyy" },
		{ 0x20000, 0x2A6DF, "Hani" },
		{ 0x2A700, 0x2B739, "Hani" },
		{ 0x2B740, 0x2B81D, "Hani" },
		{ 0x2B820, 0x2CEA1, "Hani" },
		{ 0x2CEB0, 0x2EBE0, "Hani" },
		{ 0x2EBF0, 0x2EE5D, "Hani" },
		{ 0x2F800, 0x2FA1D, "Hani" },
		{ 0x30000, 0x3134A, "Hani" },
		{ 0x31350, 0x323AF, "Hani" },
		{ 0xE0020, 0xE007F, "Zyyy" },
		{ 0xE0100, 0xE01EF, "Zinh" },
	},
	-- Scripts.txt gives full names; here we consider them aliases to save space.
	aliases = {
		Adlm = "Adlam",
		Aghb = "Caucasian Albanian",
		Ahom = "Ahom",
		Arab = "Arabic",
		Armi = "Imperial Aramaic",
		Armn = "Armenian",
		Avst = "Avestan",
		Bali = "Balinese",
		Bamu = "Bamum",
		Bass = "Bassa Vah",
		Batk = "Batak",
		Beng = "Bengali",
		Bhks = "Bhaiksuki",
		Bopo = "Bopomofo",
		Brah = "Brahmi",
		Brai = "Braille",
		Bugi = "Buginese",
		Buhd = "Buhid",
		Cakm = "Chakma",
		Cans = "Canadian Aboriginal",
		Cari = "Carian",
		Cham = "Cham",
		Cher = "Cherokee",
		Chrs = "Chorasmian",
		Copt = "Coptic",
		Cpmn = "Cypro Minoan",
		Cprt = "Cypriot",
		Cyrl = "Cyrillic",
		Deva = "Devanagari",
		Diak = "Dives Akuru",
		Dogr = "Dogra",
		Dsrt = "Deseret",
		Dupl = "Duployan",
		Egyp = "Egyptian Hieroglyphs",
		Elba = "Elbasan",
		Elym = "Elymaic",
		Ethi = "Ethiopic",
		Geor = "Georgian",
		Glag = "Glagolitic",
		Gong = "Gunjala Gondi",
		Gonm = "Masaram Gondi",
		Goth = "Gothic",
		Gran = "Grantha",
		Grek = "Greek",
		Gujr = "Gujarati",
		Guru = "Gurmukhi",
		Hang = "Hangul",
		Hani = "Han",
		Hano = "Hanunoo",
		Hatr = "Hatran",
		Hebr = "Hebrew",
		Hira = "Hiragana",
		Hluw = "Anatolian Hieroglyphs",
		Hmng = "Pahawh Hmong",
		Hmnp = "Nyiakeng Puachue Hmong",
		Hrkt = "Katakana Or Hiragana",
		Hung = "Old Hungarian",
		Ital = "Old Italic",
		Java = "Javanese",
		Kali = "Kayah Li",
		Kana = "Katakana",
		Kawi = "Kawi",
		Khar = "Kharoshthi",
		Khmr = "Khmer",
		Khoj = "Khojki",
		Kits = "Khitan Small Script",
		Knda = "Kannada",
		Kthi = "Kaithi",
		Lana = "Tai Tham",
		Laoo = "Lao",
		Latn = "Latin",
		Lepc = "Lepcha",
		Limb = "Limbu",
		Lina = "Linear A",
		Linb = "Linear B",
		Lisu = "Lisu",
		Lyci = "Lycian",
		Lydi = "Lydian",
		Mahj = "Mahajani",
		Maka = "Makasar",
		Mand = "Mandaic",
		Mani = "Manichaean",
		Marc = "Marchen",
		Medf = "Medefaidrin",
		Mend = "Mende Kikakui",
		Merc = "Meroitic Cursive",
		Mero = "Meroitic Hieroglyphs",
		Mlym = "Malayalam",
		Modi = "Modi",
		Mong = "Mongolian",
		Mroo = "Mro",
		Mtei = "Meetei Mayek",
		Mult = "Multani",
		Mymr = "Myanmar",
		Nagm = "Nag Mundari",
		Nand = "Nandinagari",
		Narb = "Old North Arabian",
		Nbat = "Nabataean",
		Newa = "Newa",
		Nkoo = "NKo",
		Nshu = "Nushu",
		Ogam = "Ogham",
		Olck = "Ol Chiki",
		Orkh = "Old Turkic",
		Orya = "Oriya",
		Osge = "Osage",
		Osma = "Osmanya",
		Ougr = "Old Uyghur",
		Palm = "Palmyrene",
		Pauc = "Pau Cin Hau",
		Perm = "Old Permic",
		Phag = "Phags Pa",
		Phli = "Inscriptional Pahlavi",
		Phlp = "Psalter Pahlavi",
		Phnx = "Phoenician",
		Plrd = "Miao",
		Prti = "Inscriptional Parthian",
		Rjng = "Rejang",
		Rohg = "Hanifi Rohingya",
		Runr = "Runic",
		Samr = "Samaritan",
		Sarb = "Old South Arabian",
		Saur = "Saurashtra",
		Sgnw = "SignWriting",
		Shaw = "Shavian",
		Shrd = "Sharada",
		Sidd = "Siddham",
		Sind = "Khudawadi",
		Sinh = "Sinhala",
		Sogd = "Sogdian",
		Sogo = "Old Sogdian",
		Sora = "Sora Sompeng",
		Soyo = "Soyombo",
		Sund = "Sundanese",
		Sylo = "Syloti Nagri",
		Syrc = "Syriac",
		Tagb = "Tagbanwa",
		Takr = "Takri",
		Tale = "Tai Le",
		Talu = "New Tai Lue",
		Taml = "Tamil",
		Tang = "Tangut",
		Tavt = "Tai Viet",
		Telu = "Telugu",
		Tfng = "Tifinagh",
		Tglg = "Tagalog",
		Thaa = "Thaana",
		Thai = "Thai",
		Tibt = "Tibetan",
		Tirh = "Tirhuta",
		Tnsa = "Tangsa",
		Toto = "Toto",
		Ugar = "Ugaritic",
		Vaii = "Vai",
		Vith = "Vithkuqi",
		Wara = "Warang Citi",
		Wcho = "Wancho",
		Xpeo = "Old Persian",
		Xsux = "Cuneiform",
		Yezi = "Yezidi",
		Yiii = "Yi",
		Zanb = "Zanabazar Square",
		Zinh = "Inherited",
		Zyyy = "Common",
		Zzzz = "Unknown",
	},
}

-- Required for binary search function in [[Module:Language/scripts]].
-- Cannot get length of module loaded with mw.loadData.
data.ranges.length = #data.ranges

data.rtl = {}

for _, script in ipairs(mw.loadData "Module:Lang/data".rtl_scripts) do
	-- [[Module:Lang/data]] has script codes in lowercase;
	-- this module has script codes with the first letter capitalized.
	data.rtl[script:gsub("^%a", string.upper)] = true
end

return data</text>
      <sha1>chvvggwtyt9uanecd8s4kjbmbqhq800</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Exponential search</title>
    <ns>828</ns>
    <id>1097</id>
    <revision>
      <id>81295</id>
      <parentid>81294</parentid>
      <timestamp>2023-02-13T00:43:11Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Module:Exponential_search]]</comment>
      <origin>81294</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="1092" sha1="jqqi8l27tb73lglksbukg2g3bzt3fmv" xml:space="preserve">-- This module provides a generic exponential search algorithm.
require[[strict]]

local checkType = require('libraryUtil').checkType
local floor = math.floor

local function midPoint(lower, upper)
	return floor(lower + (upper - lower) / 2)
end

local function search(testFunc, i, lower, upper)
	if testFunc(i) then
		if i + 1 == upper then
			return i
		end
		lower = i
		if upper then
			i = midPoint(lower, upper)
		else
			i = i * 2
		end
		return search(testFunc, i, lower, upper)
	else
		upper = i
		i = midPoint(lower, upper)
		return search(testFunc, i, lower, upper)
	end
end

return function (testFunc, init)
	checkType('Exponential search', 1, testFunc, 'function')
	checkType('Exponential search', 2, init, 'number', true)
	if init and (init &lt; 1 or init ~= floor(init) or init == math.huge) then
		error(string.format(
			"invalid init value '%s' detected in argument #2 to " ..
			"'Exponential search' (init value must be a positive integer)",
			tostring(init)
		), 2)
	end
	init = init or 2
	if not testFunc(1) then
		return nil
	end
	return search(testFunc, init, 1, nil)
end</text>
      <sha1>jqqi8l27tb73lglksbukg2g3bzt3fmv</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ill</title>
    <ns>10</ns>
    <id>869</id>
    <redirect title="Template:Interlanguage link" />
    <revision>
      <id>41557</id>
      <parentid>41556</parentid>
      <timestamp>2022-12-05T19:41:57Z</timestamp>
      <contributor>
        <username>imported&gt;Immanuelle</username>
        <id>0</id>
      </contributor>
      <minor/>
      <comment>13 revisions imported from [[:wikipedia:Template:Ill]]: Importing wikipedia userpage as it's better than my old user page</comment>
      <origin>10028</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="70" sha1="9yrea9lsi02cl62dfnri583uddinxr9" xml:space="preserve">#REDIRECT [[Template:Interlanguage link]]
{{R from template shortcut}}</text>
      <sha1>9yrea9lsi02cl62dfnri583uddinxr9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Template other</title>
    <ns>10</ns>
    <id>722</id>
    <revision>
      <id>165330</id>
      <parentid>165241</parentid>
      <timestamp>2025-08-05T00:40:26Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Adding [[Category:Aelaki book content]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165330</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="469" sha1="jlyzgy04vji53g5z1xkl7v91a8yy6u6" xml:space="preserve">{{#switch:
  &lt;!--If no or empty "demospace" parameter then detect namespace--&gt;
  {{#if:{{{demospace|}}}
  | {{lc: {{{demospace}}} }}    &lt;!--Use lower case "demospace"--&gt;
  | {{#ifeq:{{NAMESPACE}}|{{ns:Template}}
    | template
    | other
    }}
  }}
| template = {{{1|}}}
| other
| #default = {{{2|}}}
}}&lt;!--End switch--&gt;&lt;noinclude&gt;

{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;

[[Category:Aelaki book content]]</text>
      <sha1>jlyzgy04vji53g5z1xkl7v91a8yy6u6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Yesno</title>
    <ns>10</ns>
    <id>710</id>
    <revision>
      <id>76980</id>
      <parentid>39411</parentid>
      <timestamp>2023-01-04T21:20:58Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported: taking from wiktionary, hope strict doesn't fuck this up</comment>
      <origin>2600</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="374" sha1="bioaq6x8oitfnx7oqmfhviol4hbp1nd" xml:space="preserve">{{&lt;includeonly&gt;safesubst:&lt;/includeonly&gt;#switch: {{&lt;includeonly&gt;safesubst:&lt;/includeonly&gt;lc: {{{1|¬}}} }}
 |no
 |n
 |f
 |false
 |off
 |0        = {{{no|&lt;!-- null --&gt;}}}
 |         = {{{blank|{{{no|&lt;!-- null --&gt;}}}}}}
 |¬        = {{{¬|}}}
 |yes
 |y
 |t
 |true
 |on
 |1        = {{{yes|yes}}}
 |#default = {{{def|{{{yes|yes}}}}}}
}}&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>bioaq6x8oitfnx7oqmfhviol4hbp1nd</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Clear</title>
    <ns>10</ns>
    <id>723</id>
    <revision>
      <id>165324</id>
      <parentid>165238</parentid>
      <timestamp>2025-08-05T00:40:20Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Adding [[Category:Aelaki book content]] using [[c:Help:Cat-a-lot|Cat-a-lot]]</comment>
      <origin>165324</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="134" sha1="49e0rpti9m7qr91flkjsour4r2x8tru" xml:space="preserve">&lt;div style="clear:{{{1|both}}};" class={{{class|}}}&gt;&lt;/div&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;

[[Category:Aelaki book content]]</text>
      <sha1>49e0rpti9m7qr91flkjsour4r2x8tru</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Color contrast</title>
    <ns>828</ns>
    <id>995</id>
    <revision>
      <id>41631</id>
      <parentid>41630</parentid>
      <timestamp>2022-11-21T17:36:42Z</timestamp>
      <contributor>
        <username>imported&gt;Immanuelle</username>
        <id>0</id>
      </contributor>
      <minor/>
      <comment>49 revisions imported from [[:wikipedia:Module:Color_contrast]]</comment>
      <origin>15576</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="6971" sha1="3j3oaih63ygo9p806h5yxpscaqh3xu9" xml:space="preserve">--
-- This module implements
--  {{Color contrast ratio}}
--  {{Greater color contrast ratio}}
--  {{ColorToLum}}
--  {{RGBColorToLum}}
--
local p = {}
local HTMLcolor = mw.loadData( 'Module:Color contrast/colors' )

local function sRGB (v)
	if (v &lt;= 0.03928) then
		v = v / 12.92
	else
		v = math.pow((v+0.055)/1.055, 2.4)
	end
	return v
end

local function rgbdec2lum(R, G, B)
	if ( 0 &lt;= R and R &lt; 256 and 0 &lt;= G and G &lt; 256 and 0 &lt;= B and B &lt; 256 ) then
		return 0.2126 * sRGB(R/255) + 0.7152 * sRGB(G/255) + 0.0722 * sRGB(B/255)
	else
		return ''
	end
end

local function hsl2lum(h, s, l)
	if ( 0 &lt;= h and h &lt; 360 and 0 &lt;= s and s &lt;= 1 and 0 &lt;= l and l &lt;= 1 ) then
		local c = (1 - math.abs(2*l - 1))*s
		local x = c*(1 - math.abs( math.fmod(h/60, 2) - 1) )
		local m = l - c/2

		local r, g, b = m, m, m
		if( 0 &lt;= h and h &lt; 60 ) then
			r = r + c
			g = g + x
		elseif( 60 &lt;= h and h &lt; 120 ) then
			r = r + x
			g = g + c
		elseif( 120 &lt;= h and h &lt; 180 ) then
			g = g + c
			b = b + x
		elseif( 180 &lt;= h and h &lt; 240 ) then
			g = g + x
			b = b + c
		elseif( 240 &lt;= h and h &lt; 300 ) then
			r = r + x
			b = b + c
		elseif( 300 &lt;= h and h &lt; 360 ) then
			r = r + c
			b = b + x
		end
		return rgbdec2lum(255*r, 255*g, 255*b)
	else
		return ''
	end
end

local function color2lum(c)

	if (c == nil) then
		return ''
	end

	-- html '#' entity
	c = c:gsub("&amp;#35;", "#")

	-- whitespace
	c = c:match( '^%s*(.-)[%s;]*$' )

	-- unstrip nowiki strip markers
	c = mw.text.unstripNoWiki(c)

	-- lowercase
	c = c:lower()

	-- first try to look it up
	local L = HTMLcolor[c]
	if (L ~= nil) then
		return L
	end

	-- convert from hsl
	if mw.ustring.match(c,'^hsl%([%s]*[0-9][0-9%.]*[%s]*,[%s]*[0-9][0-9%.]*%%[%s]*,[%s]*[0-9][0-9%.]*%%[%s]*%)$') then
		local h, s, l = mw.ustring.match(c,'^hsl%([%s]*([0-9][0-9%.]*)[%s]*,[%s]*([0-9][0-9%.]*)%%[%s]*,[%s]*([0-9][0-9%.]*)%%[%s]*%)$')
		return hsl2lum(tonumber(h), tonumber(s)/100, tonumber(l)/100)
	end

	-- convert from rgb
	if mw.ustring.match(c,'^rgb%([%s]*[0-9][0-9]*[%s]*,[%s]*[0-9][0-9]*[%s]*,[%s]*[0-9][0-9]*[%s]*%)$') then
		local R, G, B = mw.ustring.match(c,'^rgb%([%s]*([0-9][0-9]*)[%s]*,[%s]*([0-9][0-9]*)[%s]*,[%s]*([0-9][0-9]*)[%s]*%)$')
		return rgbdec2lum(tonumber(R), tonumber(G), tonumber(B))
	end

	-- convert from rgb percent
	if mw.ustring.match(c,'^rgb%([%s]*[0-9][0-9%.]*%%[%s]*,[%s]*[0-9][0-9%.]*%%[%s]*,[%s]*[0-9][0-9%.]*%%[%s]*%)$') then
		local R, G, B = mw.ustring.match(c,'^rgb%([%s]*([0-9][0-9%.]*)%%[%s]*,[%s]*([0-9][0-9%.]*)%%[%s]*,[%s]*([0-9][0-9%.]*)%%[%s]*%)$')
		return rgbdec2lum(255*tonumber(R)/100, 255*tonumber(G)/100, 255*tonumber(B)/100)
	end

	-- remove leading # (if there is one) and whitespace
	c = mw.ustring.match(c, '^[%s#]*([a-f0-9]*)[%s]*$')

	-- split into rgb
	local cs = mw.text.split(c or '', '')
	if( #cs == 6 ) then
		local R = 16*tonumber('0x' .. cs[1]) + tonumber('0x' .. cs[2])
		local G = 16*tonumber('0x' .. cs[3]) + tonumber('0x' .. cs[4])
		local B = 16*tonumber('0x' .. cs[5]) + tonumber('0x' .. cs[6])

		return rgbdec2lum(R, G, B)
	elseif ( #cs == 3 ) then
		local R = 16*tonumber('0x' .. cs[1]) + tonumber('0x' .. cs[1])
		local G = 16*tonumber('0x' .. cs[2]) + tonumber('0x' .. cs[2])
		local B = 16*tonumber('0x' .. cs[3]) + tonumber('0x' .. cs[3])

		return rgbdec2lum(R, G, B)
	end

	-- failure, return blank
	return ''
end

-- This exports the function for use in other modules.
-- The colour is passed as a string.
function p._lum(color)
	return color2lum(color)
end

function p._greatercontrast(args)
	local bias = tonumber(args['bias'] or '0') or 0
	local css = (args['css'] and args['css'] ~= '') and true or false
	local v1 = color2lum(args[1] or '')
	local c2 = args[2] or '#FFFFFF'
	local v2 = color2lum(c2)
	local c3 = args[3] or '#000000'
	local v3 = color2lum(c3)
	local ratio1 = -1;
	local ratio2 = -1;
	if (type(v1) == 'number' and type(v2) == 'number') then
		ratio1 = (v2 + 0.05)/(v1 + 0.05)
		ratio1 = (ratio1 &lt; 1) and 1/ratio1 or ratio1
	end
	if (type(v1) == 'number' and type(v3) == 'number') then
		ratio2 = (v3 + 0.05)/(v1 + 0.05)
		ratio2 = (ratio2 &lt; 1) and 1/ratio2 or ratio2
	end

	if css then
		local c1 = args[1] or ''
		if mw.ustring.match(c1, '^[A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9]$') or
			mw.ustring.match(c1, '^[A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9]$') then
				c1 = '#' .. c1
		end
		if mw.ustring.match(c2, '^[A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9]$') or
			mw.ustring.match(c2, '^[A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9]$') then
				c2 = '#' .. c2
		end
		if mw.ustring.match(v3, '^[A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9]$') or
			mw.ustring.match(v3, '^[A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9]$') then
				c3 = '#' .. c3
		end
		return 'background-color:' .. c1 .. '; color:' .. ((ratio1 &gt; 0) and (ratio2 &gt; 0) and ((ratio1 + bias &gt; ratio2) and c2 or c3) or '') .. ';'
	end

	return (ratio1 &gt; 0) and (ratio2 &gt; 0) and ((ratio1 + bias &gt; ratio2) and c2 or c3) or ''
end

function p._ratio(args)
	local v1 = color2lum(args[1])
	local v2 = color2lum(args[2])
	if (type(v1) == 'number' and type(v2) == 'number') then
		-- v1 should be the brighter of the two.
		if v2 &gt; v1 then
			v1, v2 = v2, v1
		end
		return (v1 + 0.05)/(v2 + 0.05)
	else
		return args['error'] or '?'
	end
end

function p._styleratio(args)
	local style = (args[1] or ''):lower()
	local bg, fg = 'white', 'black'
	local lum_bg, lum_fg = 1, 0

	if args[2] then
		local lum = color2lum(args[2])
		if lum ~= '' then bg, lum_bg = args[2], lum end
	end
	if args[3] then
		local lum = color2lum(args[3])
		if lum ~= '' then fg, lum_fg = args[3], lum end
	end

	local slist = mw.text.split(mw.ustring.gsub(mw.ustring.gsub(style or '', '&amp;#[Xx]23;', '#'), '&amp;#35;', '#'), ';')
	for k = 1,#slist do
		local s = slist[k]
		local k,v = s:match( '^[%s]*([^:]-):([^:]-)[%s;]*$' )
		k = k or ''
		v = v or ''
		if (k:match('^[%s]*(background)[%s]*$') or k:match('^[%s]*(background%-color)[%s]*$')) then
			local lum = color2lum(v)
			if( lum ~= '' ) then bg, lum_bg = v, lum end
		elseif (k:match('^[%s]*(color)[%s]*$')) then
			local lum = color2lum(v)
			if( lum ~= '' ) then bg, lum_fg = v, lum end
		end
	end
	if lum_bg &gt; lum_fg then
		return (lum_bg + 0.05)/(lum_fg + 0.05)
	else
		return (lum_fg + 0.05)/(lum_bg + 0.05)
	end
end

--[[
Use {{#invoke:Color contrast|somecolor}} directly or
{{#invoke:Color contrast}} from a wrapper template.

Parameters:
	-- |1=	— required; A color to check.
--]]
function p.lum(frame)
	local color = frame.args[1] or frame:getParent().args[1]
	return p._lum(color)
end

function p.ratio(frame)
	local args = frame.args[1] and frame.args or frame:getParent().args
	return p._ratio(args)
end

function p.styleratio(frame)
	local args = frame.args[1] and frame.args or frame:getParent().args
	return p._styleratio(args)
end

function p.greatercontrast(frame)
	local args = frame.args[1] and frame.args or frame:getParent().args
	return p._greatercontrast(args)
end

return p</text>
      <sha1>3j3oaih63ygo9p806h5yxpscaqh3xu9</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Color contrast/colors</title>
    <ns>828</ns>
    <id>996</id>
    <revision>
      <id>41633</id>
      <parentid>41632</parentid>
      <timestamp>2022-11-21T17:36:42Z</timestamp>
      <contributor>
        <username>imported&gt;Immanuelle</username>
        <id>0</id>
      </contributor>
      <minor/>
      <comment>6 revisions imported from [[:wikipedia:Module:Color_contrast/colors]]</comment>
      <origin>15583</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="6119" sha1="chi69ar1btd4wp6xbk3uez6sfu0vipn" xml:space="preserve">return {
	aliceblue            = 0.92880068253475,
	antiquewhite         = 0.84646951707754,
	aqua                 = 0.7874,
	aquamarine           = 0.8078549208338,
	azure                = 0.97265264954166,
	beige                = 0.8988459998705,
	bisque               = 0.80732327372979,
	black                = 0,
	blanchedalmond       = 0.85084439608156,
	blue                 = 0.0722,
	blueviolet           = 0.12622014321946,
	brown                = 0.098224287876511,
	burlywood            = 0.51559844533893,
	cadetblue            = 0.29424681085422,
	chartreuse           = 0.76032025902623,
	chocolate            = 0.23898526114557,
	coral                = 0.37017930872924,
	cornflowerblue       = 0.30318641994179,
	cornsilk             = 0.93562110372965,
	crimson              = 0.16042199953026,
	cyan                 = 0.7874,
	darkblue             = 0.018640801980939,
	darkcyan             = 0.20329317839046,
	darkgoldenrod        = 0.27264703559993,
	darkgray             = 0.39675523072563,
	darkgreen            = 0.091143429047575,
	darkgrey             = 0.39675523072563,
	darkkhaki            = 0.45747326349994,
	darkmagenta          = 0.07353047651207,
	darkolivegreen       = 0.12651920884889,
	darkorange           = 0.40016167026524,
	darkorchid           = 0.13413142174857,
	darkred              = 0.054889674531132,
	darksalmon           = 0.40541471563381,
	darkseagreen         = 0.43789249325969,
	darkslateblue        = 0.065792846227988,
	darkslategray        = 0.067608151928044,
	darkslategrey        = 0.067608151928044,
	darkturquoise        = 0.4874606277449,
	darkviolet           = 0.10999048339343,
	deeppink             = 0.23866895828276,
	deepskyblue          = 0.44481603395575,
	dimgray              = 0.14126329114027,
	dimgrey              = 0.14126329114027,
	dodgerblue           = 0.27442536991456,
	firebrick            = 0.10724525535015,
	floralwhite          = 0.95922484825004,
	forestgreen          = 0.18920812076002,
	fuchsia              = 0.2848,
	gainsboro            = 0.71569350050648,
	ghostwhite           = 0.94311261886323,
	gold                 = 0.69860877428159,
	goldenrod            = 0.41919977809569,
	gray                 = 0.2158605001139,
	green                = 0.15438342968146,
	greenyellow          = 0.80609472611453,
	grey                 = 0.2158605001139,
	honeydew             = 0.96336535554782,
	hotpink              = 0.34658438169715,
	indianred            = 0.21406134963884,
	indigo               = 0.03107561486337,
	ivory                = 0.99071270600615,
	khaki                = 0.77012343394121,
	lavender             = 0.80318750514521,
	lavenderblush        = 0.90172748631046,
	lawngreen            = 0.73905893124963,
	lemonchiffon         = 0.94038992245622,
	lightblue            = 0.63709141280807,
	lightcoral           = 0.35522120733135,
	lightcyan            = 0.94587293494829,
	lightgoldenrodyellow = 0.93348351018297,
	lightgray            = 0.65140563741982,
	lightgreen           = 0.69091979956865,
	lightgrey            = 0.65140563741982,
	lightpink            = 0.58566152734898,
	lightsalmon          = 0.4780675225206,
	lightseagreen        = 0.35050145117042,
	lightskyblue         = 0.56195637618331,
	lightslategray       = 0.23830165007287,
	lightslategrey       = 0.23830165007287,
	lightsteelblue       = 0.53983888284666,
	lightyellow          = 0.98161818392882,
	lime                 = 0.7152,
	limegreen            = 0.44571042246098,
	linen                = 0.88357340984379,
	magenta              = 0.2848,
	maroon               = 0.045891942324215,
	mediumaquamarine     = 0.49389703310801,
	mediumblue           = 0.044077780212328,
	mediumorchid         = 0.21639251153773,
	mediumpurple         = 0.22905858091648,
	mediumseagreen       = 0.34393112338131,
	mediumslateblue      = 0.20284629471622,
	mediumspringgreen    = 0.70704308194184,
	mediumturquoise      = 0.5133827926448,
	mediumvioletred      = 0.14371899849357,
	midnightblue         = 0.02071786635086,
	mintcream            = 0.97834604947588,
	mistyrose            = 0.82183047859185,
	moccasin             = 0.80083000991567,
	navajowhite          = 0.76519682342785,
	navy                 = 0.015585128108224,
	oldlace              = 0.91900633405549,
	olive                = 0.20027537200568,
	olivedrab            = 0.22593150951929,
	orange               = 0.4817026703631,
	orangered            = 0.25516243753416,
	orchid               = 0.31348806761439,
	palegoldenrod        = 0.78792647887614,
	palegreen            = 0.77936759006353,
	paleturquoise        = 0.76436077921714,
	palevioletred        = 0.28754994117889,
	papayawhip           = 0.87797100199835,
	peachpuff            = 0.74905589878251,
	peru                 = 0.30113074877936,
	pink                 = 0.63271070702466,
	plum                 = 0.45734221587969,
	powderblue           = 0.68254586500605,
	purple               = 0.061477070432439,
	rebeccapurple        = 0.07492341159447,
	red                  = 0.2126,
	rosybrown            = 0.32319457649407,
	royalblue            = 0.16663210743188,
	saddlebrown          = 0.097922285020521,
	salmon               = 0.36977241527596,
	sandybrown           = 0.46628543696283,
	seagreen             = 0.19734199706275,
	seashell             = 0.92737862206922,
	sienna               = 0.13697631337098,
	silver               = 0.52711512570581,
	skyblue              = 0.55291668518184,
	slateblue            = 0.14784278062136,
	slategray            = 0.20896704076536,
	slategrey            = 0.20896704076536,
	snow                 = 0.96533341834849,
	springgreen          = 0.73052306068529,
	steelblue            = 0.20562642207625,
	tan                  = 0.48237604163921,
	teal                 = 0.16996855778968,
	thistle              = 0.56818401093733,
	tomato               = 0.30638612719415,
	turquoise            = 0.5895536427578,
	violet               = 0.40315452986676,
	wheat                = 0.74909702820482,
	white                = 1,
	whitesmoke           = 0.91309865179342,
	yellow               = 0.9278,
	yellowgreen          = 0.50762957208707,
}</text>
      <sha1>chi69ar1btd4wp6xbk3uez6sfu0vipn</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Flatlist</title>
    <ns>10</ns>
    <id>1090</id>
    <revision>
      <id>75352</id>
      <parentid>75349</parentid>
      <timestamp>2023-01-04T04:48:29Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:Flatlist]]</comment>
      <origin>75349</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="272" sha1="o82bq69tm2fyaauto7y36tmanwibujt" xml:space="preserve">&lt;templatestyles src="Hlist/styles.css"/&gt;&lt;div class="hlist {{{class|}}}" {{#if:{{{style|}}}{{{indent|}}}|style="{{#if:{{{indent|}}}|margin-left: {{#expr:{{{indent}}}*1.6}}em;}} {{{style|}}}"}}&gt;{{#if:{{{1|}}}|
{{{1}}}
&lt;/div&gt;}}&lt;noinclude&gt;&lt;/div&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>o82bq69tm2fyaauto7y36tmanwibujt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Small</title>
    <ns>10</ns>
    <id>847</id>
    <revision>
      <id>40341</id>
      <parentid>40340</parentid>
      <timestamp>2022-12-09T12:55:05Z</timestamp>
      <contributor>
        <username>imported&gt;Immanuelle</username>
        <id>0</id>
      </contributor>
      <minor/>
      <comment>34 revisions imported from [[:wikipedia:Template:Small]]</comment>
      <origin>9112</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="257" sha1="dvonxxvea06kvln677gbl2xk9rrnlog" xml:space="preserve">&lt;span style="font-size:85%;"&gt;{{{1}}}&lt;/span&gt;&lt;includeonly&gt;{{SAFESUBST:#if:{{{1|}}}||[[Category:Pages using small with an empty input parameter]]}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}&lt;!--Categories and interwikis go in the /doc sub-page.--&gt;
&lt;/noinclude&gt;</text>
      <sha1>dvonxxvea06kvln677gbl2xk9rrnlog</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ifsubst</title>
    <ns>10</ns>
    <id>1040</id>
    <revision>
      <id>32056</id>
      <parentid>32055</parentid>
      <timestamp>2022-12-29T17:20:02Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>2 revisions imported: Importing recent [[Minor December Outage]] created pages from Immanuelle wiki. Currently [[December Intermediate Period]] pages are not yet imported, so this may look weird in many ways.</comment>
      <origin>16158</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="302" sha1="6n9xrkgwrhqddknwc59l4tya8074m0o" xml:space="preserve">{{ safesubst:&lt;noinclude/&gt;#if:{{{demo|}}}
|{{ safesubst:&lt;noinclude/&gt;#ifeq:{{{demo}}} |no
 |{{{no|{{{2|}}}}}}
 |{{{yes|{{{1|}}}}}}
}}
|{{ safesubst:&lt;noinclude/&gt;#ifeq:{{ safesubst:&lt;noinclude/&gt;NAMESPACE}}|{{NAMESPACE}}
 |{{{no|{{{2|}}}}}}
 |{{{yes|{{{1|}}}}}}
}}}}&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>6n9xrkgwrhqddknwc59l4tya8074m0o</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Color</title>
    <ns>10</ns>
    <id>1259</id>
    <revision>
      <id>155793</id>
      <parentid>155792</parentid>
      <timestamp>2024-07-17T07:52:57Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:Color]]</comment>
      <origin>155792</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="308" sha1="n0nawhm1ogbyw7hb5ukt0cjj9ex64x7" xml:space="preserve">{{&lt;includeonly&gt;safesubst:&lt;/includeonly&gt;ifsubst|1=&lt;span|2=&lt;templatestyles src="Template:Color/styles.css" /&gt;&lt;span class="tmp-color"}} style="color:{{{1|}}}"&gt;{{{2|{{{1|}}}}}}&lt;/span&gt;&lt;noinclude&gt;{{Documentation}}&lt;!-- PLEASE ADD THIS TEMPLATE'S CATEGORIES AND INTERWIKIS TO THE /doc SUBPAGE, THANKS --&gt;&lt;/noinclude&gt;</text>
      <sha1>n0nawhm1ogbyw7hb5ukt0cjj9ex64x7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:(!</title>
    <ns>10</ns>
    <id>1632</id>
    <revision>
      <id>23847</id>
      <parentid>23846</parentid>
      <timestamp>2022-10-22T20:17:52Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:(!]]</comment>
      <origin>23846</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="89" sha1="suugjngdajtu9ghvowyeqkomyxg6pqt" xml:space="preserve">&lt;includeonly&gt;{|&lt;/includeonly&gt;&lt;noinclude&gt;&lt;nowiki&gt;{|&lt;/nowiki&gt;{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>suugjngdajtu9ghvowyeqkomyxg6pqt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Greater color contrast ratio</title>
    <ns>10</ns>
    <id>1762</id>
    <revision>
      <id>41554</id>
      <parentid>24746</parentid>
      <timestamp>2022-11-21T17:51:08Z</timestamp>
      <contributor>
        <username>imported&gt;Immanuelle</username>
        <id>0</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:Greater_color_contrast_ratio]]</comment>
      <origin>24745</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="121" sha1="rf2pxg07x3v7fq91j9zzu6nj4e8wbrh" xml:space="preserve">&lt;includeonly&gt;{{safesubst:#invoke:Color contrast|greatercontrast}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>rf2pxg07x3v7fq91j9zzu6nj4e8wbrh</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Color box</title>
    <ns>10</ns>
    <id>7457</id>
    <revision>
      <id>86686</id>
      <parentid>86685</parentid>
      <timestamp>2023-05-09T17:35:38Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:Color_box]]</comment>
      <origin>86685</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="431" sha1="6vnxaqokjyhw23h1bkqsma8dm5sayp3" xml:space="preserve">&lt;templatestyles src="Legend/styles.css" /&gt;&lt;span class="legend-color" style="{{#if:{{{1|}}}|{{greater color contrast ratio|{{{1}}}|black|white|css=y}}
   }}{{#if:{{{3|}}}|color:{{{3}}};
   }}{{#if:{{{border|}}}|border:1px solid {{{border}}};
   }}{{#if:{{{padding|}}}|padding:{{{padding}}};}}"&gt;{{#if:{{{2|}}}
       |{{#if:{{{padding|}}}|{{{2}}}|&amp;nbsp;{{{2}}}&amp;nbsp;}}
       |&amp;nbsp;}}&lt;/span&gt;&lt;noinclude&gt;
{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>6vnxaqokjyhw23h1bkqsma8dm5sayp3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Hlist/styles.css</title>
    <ns>10</ns>
    <id>3077</id>
    <revision>
      <id>128321</id>
      <parentid>111288</parentid>
      <timestamp>2023-12-15T21:39:57Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Immanuelle changed the content model of the page [[Template:Hlist/styles.css]] from "plain text" to "Sanitized CSS"</comment>
      <origin>128321</origin>
      <model>sanitized-css</model>
      <format>text/css</format>
      <text bytes="2922" sha1="gfbk8cwecy39b1u1zxq4sqqxyf84d2r" xml:space="preserve">/* {{pp-protected|reason=match parent|small=yes}} */
/* 
 * hlist styles are defined in core and Minerva and differ in Minerva. The
 * current definitions here (2023-01-01) are sufficient to override Minerva
 * without use of the hlist-separated class. The most problematic styles were
 * related to margin, padding, and the bullet. Check files listed at
 * [[MediaWiki talk:Common.css/to do#hlist-separated]]
 */
/*
 * TODO: When the majority of readership supports it (or some beautiful world
 * in which grade C support is above the minimum threshold), use :is()
 */
.hlist dl,
.hlist ol,
.hlist ul {
	margin: 0;
	padding: 0;
}

/* Display list items inline */
.hlist dd,
.hlist dt,
.hlist li {
	/*
	 * don't trust the note that says margin doesn't work with inline
	 * removing margin: 0 makes dds have margins again
	 * We also want to reset margin-right in Minerva
	 */
	margin: 0; 
	display: inline;
}

/* Display requested top-level lists inline */
.hlist.inline,
.hlist.inline dl,
.hlist.inline ol,
.hlist.inline ul,
/* Display nested lists inline */
.hlist dl dl,
.hlist dl ol,
.hlist dl ul,
.hlist ol dl,
.hlist ol ol,
.hlist ol ul,
.hlist ul dl,
.hlist ul ol,
.hlist ul ul {
	display: inline;
}

/* Hide empty list items */
.hlist .mw-empty-li {
	display: none;
}

/* TODO: :not() can maybe be used here to remove the later rule. naive test
 * seems to work. more testing needed. like so:
 *.hlist dt:not(:last-child)::after {
 *	content: ": ";
 *}
 *.hlist dd:not(:last-child)::after,
 *.hlist li:not(:last-child)::after {
 *	content: " · ";
 *	font-weight: bold;
 *}
 */
/* Generate interpuncts */
.hlist dt::after {
	content: ": ";
}

.hlist dd::after,
.hlist li::after {
	content: " · ";
	font-weight: bold;
}

.hlist dd:last-child::after,
.hlist dt:last-child::after,
.hlist li:last-child::after {
	content: none;
}

/* Add parentheses around nested lists */
.hlist dd dd:first-child::before,
.hlist dd dt:first-child::before,
.hlist dd li:first-child::before,
.hlist dt dd:first-child::before,
.hlist dt dt:first-child::before,
.hlist dt li:first-child::before,
.hlist li dd:first-child::before,
.hlist li dt:first-child::before,
.hlist li li:first-child::before {
	content: " (";
	font-weight: normal;
}

.hlist dd dd:last-child::after,
.hlist dd dt:last-child::after,
.hlist dd li:last-child::after,
.hlist dt dd:last-child::after,
.hlist dt dt:last-child::after,
.hlist dt li:last-child::after,
.hlist li dd:last-child::after,
.hlist li dt:last-child::after,
.hlist li li:last-child::after {
	content: ")";
	font-weight: normal;
}

/* Put ordinals in front of ordered list items */
.hlist ol {
	counter-reset: listitem;
}

.hlist ol &gt; li {
	counter-increment: listitem;
}

.hlist ol &gt; li::before {
	content: " " counter(listitem) "\a0";
}

.hlist dd ol &gt; li:first-child::before,
.hlist dt ol &gt; li:first-child::before,
.hlist li ol &gt; li:first-child::before {
	content: " (" counter(listitem) "\a0";
}</text>
      <sha1>gfbk8cwecy39b1u1zxq4sqqxyf84d2r</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Legend/styles.css</title>
    <ns>10</ns>
    <id>3983</id>
    <revision>
      <id>128250</id>
      <parentid>46550</parentid>
      <timestamp>2023-12-15T09:45:04Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <comment>Immanuelle changed the content model of the page [[Template:Legend/styles.css]] from "plain text" to "Sanitized CSS"</comment>
      <origin>128250</origin>
      <model>sanitized-css</model>
      <format>text/css</format>
      <text bytes="359" sha1="snsolhs3l12896xqc89e8b5hu9itnmf" xml:space="preserve">/* {{pp-template}} */

.legend {
	page-break-inside: avoid;
	break-inside: avoid-column;
}

.legend-color {
	display: inline-block;
	min-width: 1.25em;
	height: 1.25em;
	line-height: 1.25;
	margin: 1px 0;
	text-align: center;
	border: 1px solid black;
	background-color: transparent;
	color: black;
}

.legend-text {/*empty for now, but part of the design!*/}</text>
      <sha1>snsolhs3l12896xqc89e8b5hu9itnmf</sha1>
    </revision>
  </page>
  <page>
    <title>Template:IPA common</title>
    <ns>10</ns>
    <id>10331</id>
    <revision>
      <id>128302</id>
      <parentid>128301</parentid>
      <timestamp>2023-12-15T21:37:13Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:IPA_common]]</comment>
      <origin>128301</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1006" sha1="1kfumfld0hk7fnraryin31e06rig4hj" xml:space="preserve">&lt;templatestyles src="IPA common/styles.css" /&gt;{{(!}} role="presentation" class="{{#if:{{{caption|def}}}|IPA-common-captioned}} {{{class|}}}" style="{{{style|}}}"
{{#if:{{{caption|def}}}|! class="IPA-common-caption" style="{{{captionstyle|}}}" {{!}} {{{caption}}}}}
|-
|
{{{table}}}
|-
| class="IPA-common-notes" |
{{#if:{{{separator|}}}|{{#if:{{{caption|def}}}|----}}}}
{{flatlist|
* [[Help:IPA|IPA help]]{{#if:{{{audio|}}}|
* [[Help:Media|audio help]]|{{#if:{{{audiopage|}}}|
* [[File:Loudspeaker.svg|11px|link={{{audiopage}}}]]&amp;nbsp;[[{{{audiopage}}}|audio]]}}}}
* [[International Phonetic Alphabet chart|full chart]]{{template other|
* [[Template:{{{name}}}/table{{#ifeq:{{SUBPAGENAME}}|sandbox|/sandbox}}|table]]{{#ifexist:Template:{{{name}}}/audiotable|
** [[Template:{{{name}}}/audiotable{{#ifeq:{{SUBPAGENAME}}|sandbox|/sandbox}}|audio]]}}}}
* [[Template:{{{name}}}|template]]
}}
{{yesno|{{{notes|yes}}}|yes={{{notescontent&lt;includeonly&gt;|&lt;/includeonly&gt;}}}}}
|}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>1kfumfld0hk7fnraryin31e06rig4hj</sha1>
    </revision>
  </page>
  <page>
    <title>Template:IPAlink</title>
    <ns>10</ns>
    <id>10225</id>
    <redirect title="Template:IPA link" />
    <revision>
      <id>127936</id>
      <parentid>127935</parentid>
      <timestamp>2023-12-04T06:48:13Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:IPAlink]]</comment>
      <origin>127935</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="99" sha1="mxz0uc6va7ill496j4n81gtvqbgdbyo" xml:space="preserve">#REDIRECT [[Template:IPA link]]

{{redirect category shell|{{R from move}}{{R from modification}}}}</text>
      <sha1>mxz0uc6va7ill496j4n81gtvqbgdbyo</sha1>
    </revision>
  </page>
  <page>
    <title>Template:IPA link</title>
    <ns>10</ns>
    <id>2217</id>
    <revision>
      <id>28354</id>
      <parentid>28353</parentid>
      <timestamp>2022-10-27T17:02:22Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:IPA_link]]</comment>
      <origin>28353</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="170" sha1="99tmmy1kbwuscys61iyebbrezcxtb14" xml:space="preserve">&lt;includeonly&gt;{{#invoke:IPA symbol|link|symbol={{{1|}}}|text={{{2|}}}|audio={{{audio|}}}|errortext={{{errortext|}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>99tmmy1kbwuscys61iyebbrezcxtb14</sha1>
    </revision>
  </page>
  <page>
    <title>Module:IPA symbol</title>
    <ns>828</ns>
    <id>2222</id>
    <revision>
      <id>128294</id>
      <parentid>128293</parentid>
      <timestamp>2023-12-15T21:37:10Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Module:IPA_symbol]]</comment>
      <origin>128293</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="2876" sha1="egighfbjgxykizrs2xmjpwah113k6n0" xml:space="preserve">local data = mw.loadData('Module:IPA symbol/data').data
local p = {}

local gsub = mw.ustring.gsub
local len = mw.ustring.len
local sub = mw.ustring.sub

local function reverseLook(t, s)
	local ret
	for i = 1, len(s) - 1 do
		-- Look for 2-char matches first
		ret = t[sub(s, i, i + 1)] or t[sub(s, i, i)]
		if ret then
			return ret
		end
	end
	ret = t[sub(s, -1)] -- Last character
	if ret then
		return ret
	end
end

local function returnData(s, dataType)
	for _, v in ipairs(data.univPatterns) do
		s = gsub(s, v.pat, v.rep)
	end
	local key = s
	for _, v in ipairs(data.keyPatterns) do
		key = gsub(key, v.pat, v.rep)
	end
	local ret = data.sounds[key] or data.diacritics[key]
		or reverseLook(data.diacritics, s)
	if ret and dataType then
		if ret[dataType] then
			ret = ret[dataType]
		else
			error(string.format('Invalid data type "%s"', dataType))
		end
	end
	return ret
end

local function returnErrorCat()
	return require('Module:Category handler').main{
		'[[Category:International Phonetic Alphabet pages needing attention]]',
		other = ''
	}
end

local function returnError(s)
	return string.format(
		'&lt;span class="error"&gt;Error using {{[[Template:IPA symbol|IPA symbol]]}}: "%s" not found in list&lt;/span&gt;%s',
		s, returnErrorCat())
end

function p._main(s, errorText, output)
	return returnData(s, output or 'article') or errorText or returnError(s)
end

function p.main(frame)
	local args = {}
	for k, v in pairs(frame.args) do
		args[k] = v ~= '' and v
	end
	if not args.symbol then
		return '' -- Exit early
	end
	if args.errortext == 'blank' then
		args.errortext = ''
	end
	return p._main(args.symbol, args.errortext, args.output)
end

function p._link(s, displayText, prefix, suffix, audio, addSpan, errorText)
	local t = returnData(s)
	if t then
		s = string.format('%s[[:%s|%s]]%s',
			prefix or '', t.article, displayText or s, suffix or '')
		if addSpan ~= 'no' then
			local span = mw.html.create('span'):addClass('IPA'):attr('lang', 'und-fonipa')
			if prefix or suffix then
				span:addClass('nowrap'):attr('title',
					'Representation in the International Phonetic Alphabet (IPA)')
			end
			s = tostring(span:wikitext(s))
		end
		if audio then
			audio = require('Module:Yesno')(audio, audio)
			audio = audio == true and t.audio or audio
			if audio ~= '' then
				audio = ' ' .. mw.getCurrentFrame():expandTemplate{
					title = 'Template:Audio',
					args = { audio, '', help = 'no' }
				}
			end
		else
			audio = ''
		end
		return s .. audio
	 else
		return errorText or returnError(s)
	end
end

function p.link(frame)
	local args = {}
	for k, v in pairs(frame.args) do
		args[k] = v ~= '' and v
	end
	if not args.symbol then
		return '' -- Exit early
	end
	if args.errortext == 'blank' then
		args.errortext = ''
	end
	return p._link(args.symbol, args.text, args.prefix, args.suffix, args.audio,
		args.span, args.errortext)
end

return p</text>
      <sha1>egighfbjgxykizrs2xmjpwah113k6n0</sha1>
    </revision>
  </page>
  <page>
    <title>Module:IPA symbol/data</title>
    <ns>828</ns>
    <id>2223</id>
    <revision>
      <id>128296</id>
      <parentid>128295</parentid>
      <timestamp>2023-12-15T21:37:10Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Module:IPA_symbol/data]]</comment>
      <origin>128295</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="51983" sha1="asvras4s8m728gh2mr5hvz5nxwp70zz" xml:space="preserve">local data = {
	sounds = {},
	diacritics = {},
	univPatterns = {
		{
			pat = "g", -- Latin Small Letter G
			rep = "ɡ" -- Latin Small Letter Script G
		},
		{
			pat = "ᵍ", -- Modifier Letter Small G
			rep = "ᶢ" -- Modifier Letter Small Script G
		},
		{
			pat = "l̴", -- 'l' + Combining Tilde Overlay
			rep = "ɫ" -- Latin Small Letter L with Middle Tilde
		},
		{
			pat = "ˁ", -- Modifier Letter Reversed Glottal Stop
			rep = "ˤ" -- Modifier Letter Small Reversed Glottal Stop
		},
		{
			pat = "’", -- Right Single Quotation Mark
			rep = "ʼ" -- Modifier Letter Apostrophe
		},
		{
			pat = "ȷ", -- Latin Small Letter Dotless J
			rep = "j" -- Latin Small Letter J
		},
		{
			pat = "ʇ", -- Latin Small Letter Turned T
			rep = "ǀ" -- Latin Letter Dental Click
		},
		{
			pat = "[!ʗ]", -- Exclamation Mark / Latin Letter Stretched C
			rep = "ǃ" -- Latin Letter Retroflex Click
		},
		{
			pat = "ǃǃ", -- Latin Letter Retroflex Click x 2
			rep = "𝼊" -- Latin Letter Retroflex Click With Retroflex Hook
			
		},
		{
			pat = "‼", -- Latin Letter Retroflex Click x 2
			rep = "𝼊" -- Latin Letter Retroflex Click With Retroflex Hook
		},
		{
			pat = "ʖ", -- Latin Letter Inverted Glottal Stop
			rep = "ǁ" -- Latin Letter Lateral Click
		},
		{
			pat = "ꞵ", -- Latin Small Letter Beta
			rep = "β" -- Greek Small Letter Beta
		},
		{
			pat = "γ", -- Greek Small Letter Gamma
			rep = "ɣ" -- Latin Small Letter Gamma
		},
		{
			pat = "φ", -- Greek Small Letter Phi
			rep = "ɸ" -- Latin Small Letter Phi
		},
		{
			pat = "ꭓ", -- Latin Small Letter Chi
			rep = "χ" -- Greek Small Letter Chi
		},
		
	},
	keyPatterns = {
		-- These do not affect the revese look for diacritics
		{
			pat = "[͜͡ːˑ◌]", -- Tie bars, length marks, dotted circle
			rep = ""
			
		},
		{
			pat = "ᵏ", -- Modifier Letter Small K
			rep = "k" -- Latin Small Letter K
		},
		{
			pat = "ᶢ", -- Modifier Letter Small Script G
			rep = "ɡ" -- Latin Small Letter Script G
		},
		{
			pat = "ᵑ", -- Modifier Letter Small Eng
			rep = "ŋ" -- Latin Small Letter Eng
		},
	}
}

local rawData = {
	sounds = {
		-- PULMONIC CONSONANTS
		-- Nasals
		{
			name = "Voiceless bilabial nasal",
			symbols = { "m̥" },
			audio = "Voiceless Bilabial Nasal.ogg"
		},
		{
			name = "Voiced bilabial nasal",
			symbols = { "m" },
			audio = "Bilabial nasal.ogg"
		},
		{
			name = "Voiced labiodental nasal",
			symbols = { "ɱ" },
			audio = "Labiodental nasal.ogg"
		},
		{
			name = "Voiced linguolabial nasal",
			symbols = { "n̼" },
			audio = "Linguolabial nasal.ogg"
		},
		{
			name = "Voiced dental nasal",
			symbols = { "n̪" },
		},
		{
			name = "Voiceless alveolar nasal",
			symbols = { "n̥" },
			audio = "Voiceless Alveolar Nasal.ogg"
		},
		{
			name = "Voiced alveolar nasal",
			symbols = { "n" },
			audio = "Alveolar nasal.ogg"
		},
		{
			name = "Voiced postalveolar nasal",
			symbols = { "n̠" },
		},
		{
			name = "Voiceless retroflex nasal",
			symbols = { "ɳ̊", "ɳ̥" },
		},
		{
			name = "Voiced retroflex nasal",
			symbols = { "ɳ" },
			audio = "Retroflex nasal.ogg"
		},
		{
			name = "Voiceless alveolo-palatal nasal",
			symbols = { "n̠̊ʲ", "ɲ̊˖", "ɲ̟̊", "ȵ̊" },
		},
		{
			name = "Voiced alveolo-palatal nasal",
			symbols = { "n̠ʲ", "ɲ˖", "ɲ̟", "ȵ" },
		},
		{
			name = "Voiceless palatal nasal",
			symbols = { "ɲ̊", "ɲ̥" },
		},
		{
			name = "Voiced palatal nasal",
			symbols = { "ɲ" },
			audio = "Palatal nasal.ogg"
		},
		{
			name = "Voiced post-palatal nasal",
			symbols = { "ɲ˗", "ɲ̠", "ŋ˖", "ŋ̟" },
		},
		{
			name = "Voiceless velar nasal",
			symbols = { "ŋ̊", "ŋ̥" },
		},
		{
			name = "Voiced velar nasal",
			symbols = { "ŋ" },
			audio = "Velar nasal.ogg"
		},
		{
			name = "Voiced pre-uvular nasal",
			symbols = { "ɴ̟", "ŋ˗", "ŋ̠" },
		},
		{
			name = "Voiceless uvular nasal",
			symbols = { "ɴ̥", "ɴ̊" },
		},
		{
			name = "Voiced uvular nasal",
			symbols = { "ɴ" },
			audio = "Uvular nasal.ogg"
		},
		-- Plosives
		{
			name = "Voiceless bilabial plosive",
			symbols = { "p" },
			audio = "Voiceless bilabial plosive.ogg"
		},
		{
			name = "Voiced bilabial plosive",
			symbols = { "b" },
			audio = "Voiced bilabial plosive.ogg"
		},
		{
			name = "Voiceless labiodental plosive",
			symbols = { "p̪", "p͆" },
		},
		{
			name = "Voiced labiodental plosive",
			symbols = { "b̪" },
		},
		{
			name = "Voiceless linguolabial plosive",
			symbols = { "t̼" },
			audio = "Voiceless linguolabial stop.ogg"
		},
		{
			name = "Voiced linguolabial plosive",
			symbols = { "d̼" },
			audio = "Voiced linguolabial stop.ogg"
		},
		{
			name = "Voiceless dental plosive",
			symbols = { "t̪" },
			audio = "Voiceless dental stop.ogg"
		},
		{
			name = "Voiced dental plosive",
			symbols = { "d̪" },
			audio = "Voiced dental stop.ogg"
		},
		{
			name = "Voiceless alveolar plosive",
			symbols = { "t" },
			audio = "Voiceless alveolar plosive.ogg"
		},
		{
			name = "Voiced alveolar plosive",
			symbols = { "d" },
			audio = "Voiced alveolar plosive.ogg"
		},
		{
			name = "Voiceless postalveolar plosive",
			symbols = { "t̠" },
		},
		{
			name = "Voiced postalveolar plosive",
			symbols = { "d̠" },
		},
		{
			name = "Voiceless retroflex plosive",
			symbols = { "ʈ" },
			audio = "Voiceless retroflex stop.oga"
		},
		{
			name = "Voiced retroflex plosive",
			symbols = { "ɖ" },
			audio = "Voiced retroflex stop.oga"
		},
		{
			name = "Voiceless alveolo-palatal plosive",
			symbols = { "t̠ʲ", "c̟", "ȶ" },
		},
		{
			name = "Voiced alveolo-palatal plosive",
			symbols = { "d̠ʲ", "ɟ˖", "ɟ̟", "ȡ" },
		},
		{
			name = "Voiceless palatal plosive",
			symbols = { "c" },
			audio = "Voiceless palatal plosive.ogg"
		},
		{
			name = "Voiced palatal plosive",
			symbols = { "ɟ" },
			audio = "Voiced palatal plosive.ogg"
		},
		{
			name = "Voiceless post-palatal plosive",
			symbols = { "c̠", "k̟" },
		},
		{
			name = "Voiced post-palatal plosive",
			symbols = { "ɟ˗", "ɟ̠", "ɡ˖", "ɡ̟" },
		},
		{
			name = "Voiceless velar plosive",
			symbols = { "k" },
			audio = "Voiceless velar plosive.ogg"
		},
		{
			name = "Voiced velar plosive",
			symbols = { "ɡ" },
			audio = "Voiced velar plosive 02.ogg"
		},
		{
			name = "Voiceless pre-uvular plosive",
			symbols = { "q˖", "q̟", "k̠" },
		},
		{
			name = "Voiced pre-uvular plosive",
			symbols = { "ɢ̟", "ɡ˗", "ɡ̠" },
		},
		{
			name = "Voiceless uvular plosive",
			symbols = { "q" },
			audio = "Voiceless uvular plosive.ogg"
		},
		{
			name = "Voiced uvular plosive",
			symbols = { "ɢ" },
			audio = "Voiced uvular stop.oga"
		},
		{
			name = "Epiglottal plosive",
			symbols = { "ʡ" },
			audio = "Epiglottal stop.ogg"
		},
		{
			name = "Glottal stop",
			symbols = { "ʔ" },
			audio = "Glottal stop.ogg"
		},
		-- Affricates
		{
			name = "Voiceless bilabial affricate",
			symbols = { "pɸ" },
			audio = "Voiceless bilabial affricate.ogg"
		},
		{
			name = "Voiced bilabial affricate",
			symbols = { "bβ" },
		},
		{
			name = "Voiceless labiodental affricate",
			symbols = { "p̪f", "p͆f", "pf" },
			audio = "Voiceless labiodental affricate.ogg"
		},
		{
			name = "Voiced labiodental affricate",
			symbols = { "b̪v", "bv" },
			audio = "Voiced labiodental affricate.ogg"
		},
		{
			name = "Voiceless dental affricate",
			symbols = { "t̪s̪", "ts̪", "t̟s̟", "ts̟" },
			audio = "Voiceless dental sibilant affricate.oga"
		},
		{
			name = "Voiced dental affricate",
			symbols = { "d̪z̪", "dz̪", "d̟z̟", "dz̟" },
			audio = "Voiced dental sibilant affricate.oga"
		},
		{
			name = "Voiceless dental non-sibilant affricate",
			symbols = { "t̪θ", "t̟θ", "tθ" },
			audio = "Voiceless dental non-sibilant affricate.oga"
		},
		{
			name = "Voiced dental non-sibilant affricate",
			symbols = { "d̪ð", "d̟ð", "dð" },
			audio = "Voiced dental non-sibilant affricate.oga"
		},
		{
			name = "Voiceless alveolar affricate",
			symbols = { "ts", "ʦ" },
			audio = "Voiceless alveolar sibilant affricate.oga"
		},
		{
			name = "Voiced alveolar affricate",
			symbols = { "dz", "ʣ" },
			audio = "Voiced alveolar sibilant affricate.oga"
		},
		{
			name = "Voiceless apico-alveolar affricate",
			symbols = { "t̺s̺", "ts̺", "t̠s̠", "ts̠" },
		},
		{
			name = "Voiced apico-alveolar affricate",
			symbols = { "d̺z̺", "dz̺", "d̠z̠", "dz̠" },
		},
		{
			name = "Voiceless alveolar non-sibilant affricate",
			symbols = { "tɹ̝̊", "tɹ̥", "tθ̠", "tθ͇" },
		},
		{
			name = "Voiced alveolar non-sibilant affricate",
			symbols = { "dɹ̝", "dɹ", "dð̠", "dð͇" },
		},
		{
			name = "Voiceless postalveolar affricate",
			symbols = { "t̠ʃ", "tʃ", "ʧ" },
			audio = "Voiceless palato-alveolar affricate.ogg"
		},
		{
			name = "Voiced postalveolar affricate",
			symbols = { "d̠ʒ", "dʒ", "ʤ" },
			audio = "Voiced palato-alveolar affricate.ogg"
		},
		{
			name = "Voiceless postalveolar non-sibilant affricate",
			symbols = { "t̠ɹ̠̊˔", "tɹ̠̊˔", "tɹ̝̊˗", "t̠ɹ̝̊˗", "t̠ɹ̠̊", "tɹ̠̊" },
			audio = "Voiceless postalveolar non-sibilant affricate.ogg"
		},
		{
			name = "Voiced postalveolar non-sibilant affricate",
			symbols = { "d̠ɹ̠˔", "dɹ̠˔", "dɹ̝˗", "d̠ɹ̝˗", "d̠ɹ̠", "dɹ̠" },
			audio = "Voiced postalveolar non-sibilant affricate.ogg"
		},
		{
			name = "Voiceless retroflex affricate",
			symbols = { "ʈʂ", "tʂ" },
			audio = "Voiceless retroflex affricate.ogg"
		},
		{
			name = "Voiced retroflex affricate",
			symbols = { "ɖʐ", "dʐ" },
			audio = "Voiced retroflex affricate.ogg"
		},
		{
			name = "Voiceless alveolo-palatal affricate",
			symbols = { "tɕ", "cɕ", "ʨ" },
			audio = "Voiceless alveolo-palatal affricate.ogg"
		},
		{
			name = "Voiced alveolo-palatal affricate",
			symbols = { "dʑ", "ɟʑ", "ʥ" },
			audio = "Voiced alveolo-palatal affricate.ogg"
		},
		{
			name = "Voiceless palatal affricate",
			symbols = { "cç" },
			audio = "Voiceless palatal affricate.ogg"
		},
		{
			name = "Voiced palatal affricate",
			symbols = { "ɟʝ" },
			audio = "Voiced palatal affricate.ogg"
		},
		{
			name = "Voiceless post-palatal affricate",
			symbols = { "c̠ç˗", "cç˗", "c̠ç̠", "cç̠", "k̟x̟", "kx̟" },
		},
		{
			name = "Voiced post-palatal affricate",
			symbols = { "ɟ˗ʝ˗", "ɟʝ˗", "ɟ̠ʝ̠", "ɟʝ̠", "ɡ˖ɣ˖", "ɡɣ˖", "ɡ̟ɣ̟", "ɡɣ̟" },
		},
		{
			name = "Voiceless velar affricate",
			symbols = { "kx" },
			audio = "Voiceless velar affricate.ogg"
		},
		{
			name = "Voiced velar affricate",
			symbols = { "ɡɣ" },
			audio = "Voiced velar affricate.ogg"
		},
		{
			name = "Voiceless pre-uvular affricate",
			symbols = { "q˖χ˖", "qχ˖", "q̟χ̟", "qχ̟", "k̠x̠", "kx̠" },
		},
		{
			name = "Voiceless uvular affricate",
			symbols = { "qχ" },
			audio = "Voiceless uvular affricate.ogg"
		},
		{
			name = "Voiced uvular affricate",
			symbols = { "ɢʁ" },
			audio = "Voiced uvular affricate.ogg"
		},
		{
			name = "Voiceless pharyngeal affricate",
			symbols = { "ʡħ" },
		},
		{
			name = "Voiceless epiglottal affricate",
			symbols = { "ʡʜ" },
			audio = "Voiceless epiglottal affricate.ogg"
		},
		{
			name = "Voiced epiglottal affricate",
			symbols = { "ʡʢ" },
			audio = "Voiced epiglottal affricate.ogg"
		},
		{
			name = "Voiceless glottal affricate",
			symbols = { "ʔh" },
			audio = "Voiceless glottal affricate.ogg"
		},
		-- Fricatives
		{
			name = "Voiceless bilabial fricative",
			symbols = { "ɸ", "β̞̊", "β̥˕" },
			audio = "Voiceless bilabial fricative.ogg"
		},
		{
			name = "Voiced bilabial fricative",
			symbols = { "β" },
			audio = "Voiced bilabial fricative.ogg"
		},
		{
			name = "Voiceless labiodental fricative",
			symbols = { "f", "ʋ̥", "f̞" },
			audio = "Voiceless labio-dental fricative.ogg"
		},
		{
			name = "Voiced labiodental fricative",
			symbols = { "v" },
			audio = "Voiced labio-dental fricative.ogg"
		},
		{
			name = "Voiceless linguolabial fricative",
			symbols = { "θ̼" },
			audio = "Voiceless linguolabial fricative.ogg"
		},
		{
			name = "Voiced linguolabial fricative",
			symbols = { "ð̼" },
		},
		{
			name = "Voiceless dental fricative",
			symbols = { "θ", "θ̞" },
			audio = "Voiceless dental fricative.ogg"
		},
		{
			name = "Voiced dental fricative",
			symbols = { "ð" },
			audio = "Voiced dental fricative.ogg"
		},
		{
			name = "Voiceless dental sibilant fricative",
			symbols = { "s̪" },
		},
		{
			name = "Voiced dental sibilant fricative",
			symbols = { "z̪" },
		},
		{
			name = "Voiceless denti-alveolar fricative",
			symbols = { "s̻̪", "s̪̻", "s̻͆", "s̟" },
		},
		{
			name = "Voiceless alveolar fricative",
			symbols = { "s" },
			audio = "Voiceless alveolar sibilant.ogg"
		},
		{
			name = "Voiced alveolar fricative",
			symbols = { "z" },
			audio = "Voiced alveolar sibilant.ogg"
		},
		{
			name = "Voiceless apico-alveolar fricative",
			symbols = { "s̺" },
		},
		{
			name = "Voiced apico-alveolar fricative",
			symbols = { "z̺" },
		},
		{
			name = "Voiceless alveolar retracted fricative",
			symbols = { "s̠" },
			audio = "Voiceless alveolar retracted sibilant.ogg"
		},
		{
			name = "Voiced alveolar retracted fricative",
			symbols = { "z̠" },
		},
		{
			name = "Voiceless alveolar non-sibilant fricative",
			symbols = { "θ̠", "θ͇", "ɹ̝̊", "ɹ̥" },
			audio = "Voiceless alveolar non-sibilant fricative.ogg"
		},
		{
			name = "Voiced alveolar non-sibilant fricative",
			symbols = { "ð̠", "ð͇", "ɹ̝" },
			audio = "Voiced alveolar non-sibilant fricative.ogg"
		},
		{
			name = "Voiceless alveolar tapped fricative",
			symbols = { "ɾ̞̊" },
		},
		{
			name = "Voiced alveolar tapped fricative",
			symbols = { "ɾ̞" },
			audio = "Voiced alveolar tapped fricative.ogg"
		},
		{
			name = "Voiceless postalveolar fricative",
			symbols = { "ʃ" },
			audio = "Voiceless palato-alveolar sibilant.ogg"
		},
		{
			name = "Voiced postalveolar fricative",
			symbols = { "ʒ" },
			audio = "Voiced palato-alveolar sibilant.ogg"
		},
		{
			name = "Voiceless postalveolar non-sibilant fricative",
			symbols = { "ɹ̠̊˔", "ɹ̝̊˗" },
			audio = "Voiceless postalveolar non-sibilant fricative.ogg"
		},
		{
			name = "Voiced postalveolar non-sibilant fricative",
			symbols = { "ɹ̠˔", "ɹ̝˗" },
			audio = "Voiced postalveolar non-sibilant fricative.ogg"
		},
		{
			name = "Voiceless retroflex fricative",
			symbols = { "ʂ" },
			audio = "Voiceless retroflex sibilant.ogg"
		},
		{
			name = "Voiced retroflex fricative",
			symbols = { "ʐ" },
			audio = "Voiced retroflex sibilant.ogg"
		},
		{
			name = "Voiceless retroflex non-sibilant fricative",
			symbols = { "ɻ̝̊", "ɻ̊˔" },
		},
		{
			name = "Voiced retroflex non-sibilant fricative",
			symbols = { "ɻ̝", "ɻ˔", "ɻ̊" },
		},
		{
			name = "Voiceless alveolo-palatal fricative",
			symbols = { "ɕ" },
			audio = "Voiceless alveolo-palatal sibilant.ogg"
		},
		{
			name = "Voiced alveolo-palatal fricative",
			symbols = { "ʑ" },
			audio = "Voiced alveolo-palatal sibilant.ogg"
		},
		{
			name = "Voiceless palatal fricative",
			symbols = { "ç" },
			audio = "Voiceless palatal fricative.ogg"
		},
		{
			name = "Voiced palatal fricative",
			symbols = { "ʝ" },
			audio = "Voiced palatal fricative.ogg"
		},
		{
			name = "Voiceless post-palatal fricative",
			symbols = { "ç˗", "ç̠", "x̟" },
		},
		{
			name = "Voiced post-palatal fricative",
			symbols = { "ʝ˗", "ʝ̠", "ɣ˖", "ɣ̟" },
		},
		{
			name = "Voiceless velar fricative",
			symbols = { "x", "ɰ̊", "x̞", "ɣ̊˕", "ɣ̞̊" },
			audio = "Voiceless velar fricative.ogg"
		},
		{
			name = "Voiced velar fricative",
			symbols = { "ɣ" },
			audio = "Voiced velar fricative.ogg"
		},
		{
			name = "Voiceless pre-uvular fricative",
			symbols = { "χ˖", "χ̟", "x̠" },
		},
		{
			name = "Voiced pre-uvular fricative",
			symbols = { "ʁ̟", "ɣ˗", "ɣ̠" },
		},
		{
			name = "Voiceless uvular fricative",
			symbols = { "χ" },
			audio = "Voiceless uvular fricative.ogg"
		},
		{
			name = "Voiced uvular fricative",
			symbols = { "ʁ" },
			audio = "Voiced uvular fricative.ogg"
		},
		{
			name = "Voiceless pharyngeal fricative",
			symbols = { "ħ" },
			audio = "Voiceless pharyngeal fricative.ogg"
		},
		{
			name = "Voiced pharyngeal fricative",
			symbols = { "ʕ" },
			audio = "Voiced pharyngeal fricative.ogg"
		},
		{
			name = "Voiceless glottal fricative",
			symbols = { "h" },
			audio = "Voiceless glottal fricative.ogg"
		},
		{
			name = "Voiced glottal fricative",
			symbols = { "ɦ" },
			audio = "Voiced glottal fricative.ogg"
		},
		{
			name = "Voiceless bidental fricative",
			symbols = { "h̪͆" },
		},
		-- Approximants
		{
			name = "Voiced bilabial approximant",
			symbols = { "β̞" },
			audio = "Bilabial approximant.ogg"
		},
		{
			name = "Voiced labiodental approximant",
			symbols = { "ʋ" },
			audio = "Labiodental approximant.ogg"
		},
		{
			name = "Voiced dental approximant",
			symbols = { "ð̞" },
			audio = "Voiced dental approximant.ogg"
		},
		{
			name = "Voiced alveolar approximant",
			symbols = { "ɹ" },
			audio = "Alveolar approximant.ogg"
		},
		{
			name = "Voiced postalveolar approximant",
			symbols = { "ɹ̠" },
			audio = "Postalveolar approximant.ogg"
		},
		{
			name = "Voiced retroflex approximant",
			symbols = { "ɻ" },
			audio = "Retroflex Approximant2.oga"
		},
		{
			name = "Voiceless palatal approximant",
			symbols = { "j̊" },
		},
		{
			name = "Voiced palatal approximant",
			symbols = { "j", "ʝ˕", "ʝ̞" },
			audio = "Palatal approximant.ogg"
		},
		{
			name = "Voiced post-palatal approximant",
			symbols = { "j˗", "j̠", "ɰ̟", "ɰ˖", "ʝ˕˗", "ʝ˗˕", "ʝ̞˗", "ɣ˕˖", "ɣ˖˕", "ɣ̞˖" },
			audio = "Post-palatal approximant.ogg"
		},
		{
			name = "Voiced velar approximant",
			symbols = { "ɰ", "ɣ˕", "ɣ̞" },
			audio = "Voiced velar approximant.ogg"
		},
			{
			name = "Voiced velar bunched approximant",
			symbols = { "ɹ̈ "},
		},
		{
			name = "Voiced uvular approximant",
			symbols = { "ʁ̞" },
			audio = "Voiced Uvular Approximant.ogg"
		},
		{
			name = "Voiced pharyngeal approximant",
			symbols = { "ʕ̞" },
		},
		{
			name = "Voiced epiglottal approximant",
			symbols = { "ʢ̞" },
		},
		{
			name = "Creaky-voiced glottal approximant",
			symbols = { "ʔ̞", "ʔ̰" },
		},
		-- Taps/flaps
		{
			name = "Voiced bilabial flap",
			symbols = { "ⱱ̟", "b̆" },
		},
		{
			name = "Voiced labiodental flap",
			symbols = { "ⱱ" },
			audio = "Labiodental flap.ogg"
		},
		{
			name = "Voiced linguolabial tap",
			symbols = { "ɾ̼" },
		},
		{
			name = "Voiced dental tap or flap",
			symbols = { "ɾ̪" },
			article = "Dental tap",
		},
		{
			name = "Voiceless alveolar tap or flap",
			symbols = { "ɾ̥" },
			article = "Voiceless alveolar tap",
		},
		{
			name = "Voiced alveolar tap or flap",
			symbols = { "ɾ" },
			article = "Voiced dental and alveolar taps and flaps",
			audio = "Alveolar tap.ogg"
		},
		{
			name = "Voiced postalveolar flap",
			symbols = { "ɾ̠" },
		},
		{
			name = "Voiced alveolar nasal tap or flap",
			symbols = { "ɾ̃", "n̆" },
			article = "Alveolar nasal tap",
		},
		{
			name = "Voiceless retroflex flap",
			symbols = { "ɽ̊" },
		},
		{
			name = "Voiced retroflex flap",
			symbols = { "ɽ" },
			audio = "Retroflex flap.ogg"
		},
		{
			name = "Voiced velar tap",
			symbols = { "ɡ̆" },
		},
		{
			name = "Voiced uvular tap or flap",
			symbols = { "ɢ̆", "ʀ̆" },
			article = "Voiced uvular tap and flap",
		},
		{
			name = "Voiced epiglottal tap",
			symbols = { "ʡ̆", "ʢ̆" },
			audio = "Epiglottal flap.oga"
		},
		-- Trills
		{
			name = "Voiceless bilabial trill",
			symbols = { "ʙ̥" },
			audio = "Voiceless bilabial trill with aspiration.ogg"
		},
		{
			name = "Voiced bilabial trill",
			symbols = { "ʙ" },
			audio = "Bilabial trill.ogg"
		},
		{
			name = "Voiced linguolabial trill",
			symbols = { "r̼" },
			audio = "Linguolabial trill.ogg"
		},
		{
			name = "Voiced dental trill",
			symbols = { "r̪" },
		},
		{
			name = "Voiceless alveolar trill",
			symbols = { "r̥" },
			audio = "Voiceless alveolar trill.ogg"
		},
		{
			name = "Voiced alveolar trill",
			symbols = { "r" },
			audio = "Alveolar trill.ogg"
		},
		{
			name = "Voiceless alveolar fricative trill",
			symbols = { "r̝̊" },
		},
		{
			name = "Voiced alveolar fricative trill",
			symbols = { "r̝" },
			audio = "Raised alveolar non-sonorant trill.ogg"
		},
		{
			name = "Voiced postalveolar trill",
			symbols = { "r̠" },
			audio = "Voiced postalveolar trill.ogg"
		},
		{
			name = "Voiceless retroflex trill",
			symbols = { "ɽ̊r̥", "ɽr̥" },
			audio = "Voiceless retroflex trill.ogg"
		},
		{
			name = "Voiced retroflex trill",
			symbols = { "ɽr" },
			audio = "Voiced retroflex trill.ogg"
		},
		{
			name = "Voiceless pre-uvular fricative trill",
			symbols = { "ʀ̝̊˖", "ʀ̟̊˔" },
		},
		{
			name = "Voiced pre-uvular fricative trill",
			symbols = { "ʀ̝˖", "ʀ̟˔" },
		},
		{
			name = "Voiceless uvular trill",
			symbols = { "ʀ̥" },
			audio = "Voiceless uvular trill.ogg"
		},
		{
			name = "Voiced uvular trill",
			symbols = { "ʀ" },
			audio = "Uvular trill.ogg"
		},
		{
			name = "Voiceless uvular fricative trill",
			symbols = { "ʀ̝̊" },
			audio = "Voiceless uvular fricative trill.ogg"
		},
		{
			name = "Voiced uvular fricative trill",
			symbols = { "ʀ̝" },
		},
		{
			name = "Voiceless epiglottal trill",
			symbols = { "ʜ" },
			audio = "Voiceless epiglottal trill.ogg"
		},
		{
			name = "Voiced epiglottal trill",
			symbols = { "ʢ" },
			audio = "Voiced epiglottal trill 2.ogg"
		},
		-- Lateral affricates
		{
			name = "Voiceless alveolar lateral affricate",
			symbols = { "tɬ", "ƛ" },
			audio = "Voiceless alveolar lateral affricate.ogg"
		},
		{
			name = "Voiced alveolar lateral affricate",
			symbols = { "dɮ" },
			audio = "Voiced alveolar lateral affricate.ogg"
		},
		{
			name = "Voiceless retroflex lateral affricate",
			symbols = { "ʈɭ̊˔", "tɭ̊˔", "ʈɭ̊", "tɭ̊", "ʈꞎ", "tꞎ" },
		},
		{
			name = "Voiced retroflex lateral affricate",
			symbols = { "ɖɭ˔", "dɭ˔", "ɖɭ", "dɭ", "ɖ𝼅", "d𝼅" },
		},
		{
			name = "Voiceless palatal lateral affricate",
			symbols = { "cʎ̝̊", "cʎ̥", "c𝼆", "t𝼆" },
			audio = "Voiceless palatal lateral affricate.ogg"
		},
		{
			name = "Voiced palatal lateral affricate",
			symbols = { "ɟʎ̝", "ɟʎ", "ɟ𝼆̬", "d𝼆̬" },
		},
		{
			name = "Voiceless velar lateral affricate",
			symbols = { "kʟ̝̊", "kʟ̥", "k𝼄" },
			audio = "Voiceless velar lateral affricate.ogg"
		},
		{
			name = "Voiced velar lateral affricate",
			symbols = { "ɡʟ̝", "ɡʟ", "ɡ𝼄̬" },
			audio = "Voiced velar lateral affricate.ogg"
		},
		-- Lateral fricatives
		{
			name = "Voiceless dental lateral fricative",
			symbols = { "ɬ̪" },
		},
		{
			name = "Voiced dental lateral fricative",
			symbols = { "ɮ̪", "ɮ͆" },
		},
		{
			name = "Voiceless alveolar lateral fricative",
			symbols = { "ɬ" },
			audio = "Voiceless alveolar lateral fricative.ogg"
		},
		{
			name = "Voiced alveolar lateral fricative",
			symbols = { "ɮ" },
			audio = "Voiced alveolar lateral fricative.ogg"
		},
		{
			name = "Voiceless retroflex lateral fricative",
			symbols = { "ɭ̊˔", "ꞎ", "ɭ̊" },
			audio = "Voiceless retroflex lateral fricative.ogg"
		},
		{
			name = "Voiced retroflex lateral fricative",
			symbols = { "ɭ˔", "𝼅" },
		},
		{
			name = "Voiceless alveolo-palatal lateral fricative",
			symbols = { "ɬ̠ʲ", "ʎ̝̊˖", "ȴ̊˔", "l̠̊ʲ", "ʎ̟̊", "ȴ̊" },
		},
		{
			name = "Voiceless palatal lateral fricative",
			symbols = { "ʎ̝̊", "ʎ̥", "𝼆" },
			audio = "Voiceless palatal lateral fricative.ogg"
		},
		{
			name = "Voiced palatal lateral fricative",
			symbols = { "ʎ̝", "𝼆̬" },
		},
		{
			name = "Voiceless velar lateral fricative",
			symbols = { "ʟ̝̊", "ʟ̥", "𝼄" },
			audio = "Voiceless velar lateral fricative.ogg"
		},
		{
			name = "Voiced velar lateral fricative",
			symbols = { "ʟ̝", "𝼄̬" },
			audio = "Voiced velar lateral fricative.ogg"
		},
		-- Lateral approximants
		{
			name = "Voiced dental lateral approximant",
			symbols = { "l̪" },
			audio = "Voiced dental lateral approximant.ogg"
		},
		{
			name = "Voiceless alveolar lateral approximant",
			symbols = { "l̥" },
		},
		{
			name = "Voiced alveolar lateral approximant",
			symbols = { "l" },
			audio = "Alveolar lateral approximant.ogg"
		},
		{
			name = "Voiced postalveolar lateral approximant",
			symbols = { "l̠" },
			audio = "Voiced postalveolar lateral approximant.ogg"
		},
		{
			name = "Voiced retroflex lateral approximant",
			symbols = { "ɭ" },
			audio = "Retroflex lateral approximant.ogg"
		},
		{
			name = "Voiced alveolo-palatal lateral approximant",
			symbols = { "l̠ʲ", "ʎ̟", "ȴ" },
		},
		{
			name = "Voiced palatal lateral approximant",
			symbols = { "ʎ" },
			audio = "Palatal lateral approximant.ogg"
		},
		{
			name = "Voiced velar lateral approximant",
			symbols = { "ʟ" },
			audio = "Velar lateral approximant.ogg"
		},
		{
			name = "Voiced uvular lateral approximant",
			symbols = { "ʟ̠" },
			audio = "Uvular lateral approximant.ogg"
		},
		-- Lateral taps/flaps
		{
			name = "Voiceless alveolar lateral flap",
			symbols = { "ɺ̥" },
		},
		{
			name = "Voiced alveolar lateral flap",
			symbols = { "ɺ" },
		},
		{
			name = "Voiceless retroflex lateral flap",
			symbols = { "ɭ̥̆", "𝼈̥" },
		},
		{
			name = "Voiced retroflex lateral flap",
			symbols = { "ɭ̆", "𝼈" },
		},
		{
			name = "Voiced palatal lateral flap",
			symbols = { "ʎ̆" },
		},
		{
			name = "Voiced velar lateral tap",
			symbols = { "ʟ̆" },
		},
		-- NON-PULMONIC CONSONANTS
		-- Ejective stops
		{
			name = "Bilabial ejective stop",
			symbols = { "pʼ" },
			audio = "Bilabial ejective plosive.ogg"
		},
		{
			name = "Dental ejective stop",
			symbols = { "t̪ʼ" },
		},
		{
			name = "Alveolar ejective stop",
			symbols = { "tʼ" },
			audio = "Alveolar ejective plosive.ogg"
		},
		{
			name = "Retroflex ejective stop",
			symbols = { "ʈʼ" },
			audio = "Retroflex ejective.ogg"
		},
		{
			name = "Palatal ejective stop",
			symbols = { "cʼ" },
			audio = "Palatal ejective.ogg"
		},
		{
			name = "Velar ejective stop",
			symbols = { "kʼ" },
			audio = "Velar ejective plosive.ogg"
		},
		{
			name = "Uvular ejective stop",
			symbols = { "qʼ" },
			audio = "Uvular ejective plosive.ogg"
		},
		{
			name = "Epiglottal ejective",
			symbols = { "ʡʼ" },
			audio = "Epiglottal ejective.ogg"
		},
		-- Ejective affricates
		{
			name = "Labiodental ejective affricate",
			symbols = { "p̪fʼ" },
		},
		{
			name = "Dental ejective affricate",
			symbols = { "t̪θʼ", "t̟θʼ", "tθʼ" },
			audio = "Dental ejective affricate.ogg"
		},
		{
			name = "Alveolar ejective affricate",
			symbols = { "tsʼ" },
			audio = "Alveolar ejective affricate.ogg"
		},
		{
			name = "Palato-alveolar ejective affricate",
			symbols = { "t̠ʃʼ", "tʃʼ" },
			audio = "Palato-alveolar ejective affricate.ogg"
		},
		{
			name = "Retroflex ejective affricate",
			symbols = { "ʈʂʼ", "tʂʼ" },
			audio = "Retroflex ejective affricate.ogg"
		},
		{
			name = "Alveolo-palatal ejective affricate",
			symbols = { "t̠ɕʼ", "tɕʼ", "cɕʼ" },
		},
		{
			name = "Palatal ejective affricate",
			symbols = { "cçʼ" },
			audio = "Palatal ejective affricate.ogg"
		},
		{
			name = "Velar ejective affricate",
			symbols = { "kxʼ" },
			audio = "Velar ejective affricate.ogg"
		},
		{
			name = "Uvular ejective affricate",
			symbols = { "qχʼ" },
			audio = "Uvular ejective affricate.ogg"
		},
		-- Ejective fricatives
		{
			name = "Bilabial ejective fricative",
			symbols = { "ɸʼ" },
		},
		{
			name = "Labiodental ejective fricative",
			symbols = { "fʼ" },
			audio = "Labiodental ejective fricative.ogg"
		},
		{
			name = "Dental ejective fricative",
			symbols = { "θʼ" },
			audio = "Dental ejective fricative.ogg"
		},
		{
			name = "Alveolar ejective fricative",
			symbols = { "sʼ" },
			audio = "Alveolar ejective fricative.ogg"
		},
		{
			name = "Palato-alveolar ejective fricative",
			symbols = { "ʃʼ" },
			audio = "Palato-alveolar ejective fricative.ogg"
		},
		{
			name = "Retroflex ejective fricative",
			symbols = { "ʂʼ" },
			audio = "Retroflex ejective fricative.ogg"
		},
		{
			name = "Alveolo-palatal ejective fricative",
			symbols = { "ɕʼ" },
			audio = "Alveolo-palatal ejective fricative.ogg"
		},
		{
			name = "Palatal ejective fricative",
			symbols = { "çʼ" },
			audio = "Palatal ejective fricative.ogg"
		},
		{
			name = "Velar ejective fricative",
			symbols = { "xʼ" },
			audio = "Velar ejective fricative.ogg"
		},
		{
			name = "Uvular ejective fricative",
			symbols = { "χʼ" },
			audio = "Uvular ejective fricative.ogg"
		},
		-- Lateral ejective affricates
		{
			name = "Alveolar lateral ejective affricate",
			symbols = { "tɬʼ", "ƛʼ" },
			audio = "Alveolar lateral ejective affricate.ogg"
		},
		{
			name = "Palatal lateral ejective affricate",
			symbols = { "cʎ̝̊ʼ", "cʎ̥ʼ" },
			audio = "Palatal lateral ejective affricate.ogg"
		},
		{
			name = "Velar lateral ejective affricate",
			symbols = { "kʟ̝̊ʼ", "kʟ̥ʼ" },
			audio = "Velar lateral ejective affricate.ogg"
		},
		-- Lateral ejective fricatives
		{
			name = "Alveolar lateral ejective fricative",
			symbols = { "ɬʼ" },
			audio = "Alveolar lateral ejective fricative.ogg"
		},
		-- Tenuis clicks
		{
			name = "Tenuis bilabial click",
			symbols = { "ʘ", "kʘ" },
			audio = "Clic bilabial sourd.ogg"
		},
		{
			name = "Tenuis dental click",
			symbols = { "ǀ", "kǀ" },
			audio = "Dental click.ogg"
		},
		{
			name = "Tenuis alveolar click",
			symbols = { "ǃ", "kǃ" },
			audio = "Postalveolar click.ogg"
		},
		{
			name = "Tenuis palatal click",
			symbols = { "ǂ", "kǂ" },
			audio = "Palatoalveolar click.ogg"
		},
		{
			name = "Back-released velar click",
			symbols = { "ʞ" },
		},
		-- Voiced clicks
		{
			name = "Voiced bilabial click",
			symbols = { "ʘ̬", "ɡʘ" },
		},
		{
			name = "Voiced dental click",
			symbols = { "ǀ̬", "ɡǀ" },
		},
		{
			name = "Voiced alveolar click",
			symbols = { "ǃ̬", "ɡǃ" },
		},
		{
			name = "Tenuis retroflex click",
			symbols = { "𝼊" },
		},
		{
			name = "Voiced palatal click",
			symbols = { "ǂ̬", "ɡǂ" },
		},
		{
			name = "Voiced retroflex click",
			symbols = { "𝼊̬", "ɡ𝼊" },
		},
		-- Nasal clicks
		{
			name = "Bilabial nasal click",
			symbols = { "ʘ̃", "ŋʘ" },
			audio = "Bilabial nasal click.ogg"
		},
		{
			name = "Dental nasal click",
			symbols = { "ǀ̃", "ŋǀ" },
		},
		{
			name = "Alveolar nasal click",
			symbols = { "ǃ̃", "ŋǃ" },
			audio = "Intervocalic nasal alveolar clicks.ogg"
		},
		{
			name = "Palatal nasal click",
			symbols = { "ǂ̃", "ŋǂ" },
		},
		{
			name = "Retroflex nasal click",
			symbols = { "𝼊̃", "ŋ𝼊" },
		},
		-- Lateral clicks
		{
			name = "Tenuis alveolar lateral click",
			symbols = { "ǁ", "kǁ" },
			audio = "Alveolar lateral click.ogg"
		},
		{
			name = "Voiced alveolar lateral click",
			symbols = { "ǁ̬", "ɡǁ" },
		},
		-- Lateral nasal clicks
		{
			name = "Alveolar lateral nasal click",
			symbols = { "ǁ̃", "ŋǁ" },
		},
		-- Glottalized clicks
		{
			name = "Glottalized bilabial nasal click",
			symbols = { "ʘ̃ˀ", "ʘˀ", "ŋ̊ʘˀ", "ŋʘˀ" },
		},
		{
			name = "Glottalized dental nasal click",
			symbols = { "ǀ̃ˀ", "ǀˀ", "ŋ̊ǀˀ", "ŋǀˀ" },
		},
		{
			name = "Glottalized alveolar nasal click",
			symbols = { "ǃ̃ˀ", "ǃˀ", "ŋ̊ǃˀ", "ŋǃˀ" },
		},
		{
			name = "Glottalized retroflex nasal click",
			symbols = { "𝼊̃ˀ", "𝼊ˀ", "ŋ𝼊ˀ", "ŋ̊𝼊ˀ" },
		},
		{
			name = "Glottalized palatal nasal click",
			symbols = { "ǂ̃ˀ", "ǂˀ", "ŋ̊ǂˀ", "ŋǂˀ" },
		},
		{
			name = "Glottalized alveolar lateral nasal click",
			symbols = { "ǁ̃ˀ", "ǁˀ", "ŋ̊ǁˀ", "ŋǁˀ" },
		},
		-- Implosives
		{
			name = "Voiceless bilabial implosive",
			symbols = { "ɓ̥", "ƥ" },
		},
		{
			name = "Voiced bilabial implosive",
			symbols = { "ɓ" },
			audio = "Voiced bilabial implosive.ogg"
		},
		{
			name = "Voiceless alveolar implosive",
			symbols = { "ɗ̥", "ƭ" },
		},
		{
			name = "Voiced alveolar implosive",
			symbols = { "ɗ" },
			audio = "Voiced alveolar implosive.ogg"
		},
		{
			name = "Voiceless retroflex implosive",
			symbols = { "ᶑ̊", "ᶑ̥", "𝼉" },
		},
		{
			name = "Voiced retroflex implosive",
			symbols = { "ᶑ" },
		},
		{
			name = "Voiceless palatal implosive",
			symbols = { "ʄ̊", "ʄ̥", "ƈ" },
		},
		{
			name = "Voiced palatal implosive",
			symbols = { "ʄ" },
			audio = "Voiced palatal implosive.ogg"
		},
		{
			name = "Voiceless velar implosive",
			symbols = { "ɠ̊", "ƙ" },
		},
		{
			name = "Voiced velar implosive",
			symbols = { "ɠ" },
			audio = "Voiced velar implosive.ogg"
		},
		{
			name = "Voiceless uvular implosive",
			symbols = { "ʛ̥", "ʠ" },
		},
		{
			name = "Voiced uvular implosive",
			symbols = { "ʛ" },
			audio = "Voiced uvular implosive.ogg"
		},
		-- CO-ARTICULATED CONSONANTS
		-- Co-articulated nasals
		{
			name = "Voiced labial–alveolar nasal",
			symbols = { "nm" },
		},
		{
			name = "Voiced labial–velar nasal",
			symbols = { "ŋm" },
			audio = "Labial-velar nasal stop.ogg"
		},
		-- Co-articulated plosives
		{
			name = "Voiceless labial–alveolar plosive",
			symbols = { "tp" },
		},
		{
			name = "Voiced labial–alveolar plosive",
			symbols = { "db" },
		},
		{
			name = "Voiceless labial–velar plosive",
			symbols = { "kp" },
			audio = "Voiceless labial-velar plosive.ogg"
		},
		{
			name = "Voiced labial–velar plosive",
			symbols = { "ɡb" },
			audio = "Voiced labial-velar plosive.ogg"
		},
		{
			name = "Voiceless uvular–epiglottal plosive",
			symbols = { "qʡ" },
		},
		-- Co-articulated continuants
		{
			name = "Voiceless labial–palatal fricative",
			symbols = { "ɥ̊" },
		},
		{
			name = "Voiced labial–palatal approximant",
			symbols = { "ɥ" },
			audio = "LL-Q150 (fra)-WikiLucas00-IPA ɥ.wav"
		},
		{
			name = "Voiceless labial–velar fricative",
			symbols = { "ʍ", "w̥", "hw" },
			audio = "Voiceless labio-velar fricative.ogg"
		},
		{
			name = "Voiced labial–velar approximant",
			symbols = { "w" },
			audio = "Voiced labio-velar approximant.ogg"
		},
		{
			name = "Compressed voiced labial–velar approximant",
			symbols = { "wᵝ", "ɰᵝ" },
			article = "Voiced labial–velar approximant",
		},
		{
			name = "Sj-sound",
			symbols = { "ɧ" },
			audio = "Voiceless dorso-palatal velar fricative.ogg"
		},
		-- Co-articulated lateral approximants
		{
			name = "Velarized dental lateral approximant",
			symbols = { "ɫ̪", "l̪ˠ" },
		},
		{
			name = "Velarized alveolar lateral approximant",
			symbols = { "ɫ", "lˠ" },
			audio = "Velarized alveolar lateral approximant.ogg"
		},
		-- Nasal approximants
		{
			name = "Nasal palatal approximant",
			symbols = { "j̃" },
		},
		{
			name = "Nasal labial–velar approximant",
			symbols = { "w̃" },
		},
		{
			name = "Voiceless nasal glottal approximant",
			symbols = { "h̃" },
		},
		-- VOWELS
		-- Close vowels
		{
			name = "Close front unrounded vowel",
			symbols = { "i" },
			audio = "Close front unrounded vowel.ogg"
		},
		{
			name = "Close front rounded vowel",
			symbols = { "y" },
			audio = "Close front rounded vowel.ogg"
		},
		{
			name = "Close front compressed vowel",
			symbols = { "y͍", "iᵝ" },
			audio = "Close front rounded vowel.ogg"
		},
		{
			name = "Close front protruded vowel",
			symbols = { "y̫", "yʷ", "iʷ" },
		},
		{
			name = "Close central unrounded vowel",
			symbols = { "ɨ", "ï" },
			audio = "Close central unrounded vowel.ogg"
		},
		{
			name = "Close central rounded vowel",
			symbols = { "ʉ", "ü" },
			audio = "Close central rounded vowel.ogg"
		},
		{
			name = "Close central protruded vowel",
			symbols = { "ʉ̫", "ʉʷ", "ɨʷ" },
			audio = "Close central rounded vowel.ogg"
		},
		{
			name = "Close central compressed vowel",
			symbols = { "ÿ", "ɨᵝ" },
		},
		{
			name = "Close back unrounded vowel",
			symbols = { "ɯ" },
			audio = "Close back unrounded vowel.ogg"
		},
		{
			name = "Close back rounded vowel",
			symbols = { "u" },
			audio = "Close back rounded vowel.ogg"
		},
		{
			name = "Close back protruded vowel",
			symbols = { "u̫", "uʷ", "ɯʷ" },
			audio = "Close back rounded vowel.ogg"
		},
		{
			name = "Close back compressed vowel",
			symbols = { "u͍", "ɯᵝ" },
			audio = "Ja-U.oga"
		},
		-- Near-close vowels
		{
			name = "Near-close near-front unrounded vowel",
			symbols = { "ɪ", "ɪ̟", "i̞", "e̝" },
			audio = "Near-close near-front unrounded vowel.ogg"
		},
		{
			name = "Near-close near-front rounded vowel",
			symbols = { "ʏ", "y̞", "y˕", "ø̝" },
			audio = "Near-close near-front rounded vowel.ogg"
		},
		{
			name = "Near-close near-front compressed vowel",
			symbols = { "ʏ͍", "ɪᵝ" },
			audio = "Near-close near-front rounded vowel.ogg"
		},
		{
			name = "Near-close near-front protruded vowel",
			symbols = { "ʏ̫", "ʏʷ", "ɪʷ" },
		},
		{
			name = "Near-close central unrounded vowel",
			symbols = { "ɪ̈", "ɨ̞", "ɘ̝" },
			audio = "Near-close central unrounded vowel.ogg"
		},
		{
			name = "Near-close central rounded vowel",
			symbols = { "ʊ̈", "ʊ̟", "ʉ̞", "ɵ̝" },
		},
		{
			name = "Near-close central protruded vowel",
			symbols = { "ʊ̫̈", "ʉ̫˕", "ʊ̈ʷ", "ʉ̞ʷ", "ɪ̈ʷ", "ɨ̞ʷ" },
		},
		{
			name = "Near-close central compressed vowel",
			symbols = { "ʏ̈", "ɨ̞ᵝ" },
		},
		{
			name = "Near-close near-back unrounded vowel",
			symbols = { "ɯ̞", "ɯ̽" },
			audio = "Near-close near-back unrounded vowel.ogg"
		},
		{
			name = "Near-close near-back rounded vowel",
			symbols = { "ʊ", "u̞", "o̝" },
			audio = "Near-close near-back rounded vowel.ogg"
		},
		{
			name = "Near-close near-back protruded vowel",
			symbols = { "ʊ̫", "ʊʷ", "ɯ̽ʷ", "ɤ̝̈ʷ", "u̫˕", "u̞ʷ", "ɯ̞ʷ", "ɤ̝ʷ" },
			audio = "Near-close near-back rounded vowel.ogg"
		},
		{
			name = "Near-close near-back compressed vowel",
			symbols = { "ʊ͍", "ɯ̽ᵝ", "ɯ̞̈ᵝ", "ɯ̞ᵝ" },
		},
		-- Close-mid vowels
		{
			name = "Close-mid front unrounded vowel",
			symbols = { "e" },
			audio = "Close-mid front unrounded vowel.ogg"
		},
		{
			name = "Close-mid front rounded vowel",
			symbols = { "ø" },
			audio = "Close-mid front rounded vowel.ogg"
		},
		{
			name = "Close-mid front compressed vowel",
			symbols = { "ø͍", "eᵝ" },
			audio = "Close-mid front rounded vowel.ogg"
		},
		{
			name = "Close-mid front protruded vowel",
			symbols = { "ø̫", "øʷ", "eʷ" },
		},
		{
			name = "Close-mid central unrounded vowel",
			symbols = { "ɘ", "ë", "ɤ̈" },
			audio = "Close-mid central unrounded vowel.ogg"
		},
		{
			name = "Close-mid central rounded vowel",
			symbols = { "ɵ", "ö" },
			audio = "Close-mid central rounded vowel.ogg"
		},
		{
			name = "Close-mid central protruded vowel",
			symbols = { "ɵ̫", "ɵʷ", "ɘʷ" },
			audio = "Close-mid central rounded vowel.ogg"
		},
		{
			name = "Close-mid central compressed vowel",
			symbols = { "ø̈", "ɘᵝ" },
		},
		{
			name = "Close-mid back unrounded vowel",
			symbols = { "ɤ" },
			audio = "Close-mid back unrounded vowel.ogg"
		},
		{
			name = "Close-mid back rounded vowel",
			symbols = { "o" },
			audio = "Close-mid back rounded vowel.ogg"
		},
		{
			name = "Close-mid back protruded vowel",
			symbols = { "o̫", "oʷ", "ɤʷ" },
			audio = "Close-mid back rounded vowel.ogg"
		},
		{
			name = "Close-mid back compressed vowel",
			symbols = { "o͍", "ɤᵝ" },
		},
		-- Mid vowels
		{
			name = "Mid front unrounded vowel",
			symbols = { "e̞", "ɛ̝" },
			audio = "Mid front unrounded vowel.ogg"
		},
		{
			name = "Mid front rounded vowel",
			symbols = { "ø̞", "œ̝" },
			audio = "Mid front rounded vowel.ogg"
		},
		{
			name = "Mid front compressed vowel",
			symbols = { "ø͍˕", "œ͍˔", "e̞ᵝ", "ɛ̝ᵝ" },
		},
		{
			name = "Mid front protruded vowel",
			symbols = { "ø̫˕", "œ̫˔", "ø̞ʷ", "œ̝ʷ", "e̞ʷ", "ɛ̝ʷ" },
		},
		{
			name = "Mid central vowel",
			symbols = { "ə" },
			audio = "Mid-central vowel.ogg"
		},
		{
			name = "Mid central unrounded vowel",
			symbols = { "ə̜", "ɘ̞", "ɜ̝" },
			audio = "Mid-central vowel.ogg"
		},
		{
			name = "Mid central rounded vowel",
			symbols = { "ə̹", "ɵ̞", "ɞ̝" },
			audio = "Mid central rounded vowel.ogg"
		},
		{
			name = "Mid back unrounded vowel",
			symbols = { "ɤ̞", "ʌ̝" },
			audio = "ɤ̞ IPA sound.opus"
		},
		{
			name = "Mid back rounded vowel",
			symbols = { "o̞", "ɔ̝" },
			audio = "Mid back rounded vowel.ogg"
		},
		-- Open-mid vowels
		{
			name = "Open-mid front unrounded vowel",
			symbols = { "ɛ" },
			audio = "Open-mid front unrounded vowel.ogg"
		},
		{
			name = "Open-mid front rounded vowel",
			symbols = { "œ" },
			audio = "Open-mid front rounded vowel.ogg"
		},
		{
			name = "Open-mid front compressed vowel",
			symbols = { "œ͍", "ɛᵝ" },
			audio = "Open-mid front rounded vowel.ogg"
		},
		{
			name = "Open-mid front protruded vowel",
			symbols = { "œ̫", "œʷ", "ɛʷ" },
		},
		{
			name = "Open-mid central unrounded vowel",
			symbols = { "ɜ", "ɛ̈", "ʌ̈" },
			audio = "Open-mid central unrounded vowel.ogg"
		},
		{
			name = "Open-mid central rounded vowel",
			symbols = { "ɞ" },
			audio = "Open-mid central rounded vowel.ogg"
		},
		{
			name = "Open-mid back unrounded vowel",
			symbols = { "ʌ" },
			audio = "PR-open-mid back unrounded vowel2.ogg"
		},
		{
			name = "Open-mid back rounded vowel",
			symbols = { "ɔ" },
			audio = "PR-open-mid back rounded vowel.ogg"
		},
		-- Near-open vowels
		{
			name = "Near-open front unrounded vowel",
			symbols = { "æ" },
			audio = "Near-open front unrounded vowel.ogg"
		},
		{
			name = "Near-open central vowel",
			symbols = { "ɐ" },
			audio = "Near-open central unrounded vowel.ogg"
		},
		{
			name = "Near-open central unrounded vowel",
			symbols = { "ɐ̜", "ɜ̞" },
			audio = "PR-near-open central unrounded vowel.ogg"
		},
		{
			name = "Near-open central rounded vowel",
			symbols = { "ɐ̹", "ɞ̞" },
		},
		-- Open vowels
		{
			name = "Open front unrounded vowel",
			symbols = { "a", "æ̞" },
			audio = "PR-open front unrounded vowel.ogg"
		},
		{
			name = "Open front rounded vowel",
			symbols = { "ɶ" },
			audio = "Open front rounded vowel.ogg"
		},
		{
			name = "Open central unrounded vowel",
			symbols = { "ä", "a̠", "ɑ̈", "ɐ̞" },
			audio = "Open central unrounded vowel.ogg"
		},
		{
			name = "Open central rounded vowel",
			symbols = { "ɒ̈", "ɶ̈" },
			audio = "Open central rounded vowel.ogg"
		},
		{
			name = "Open back unrounded vowel",
			symbols = { "ɑ" },
			audio = "Open back unrounded vowel.ogg"
		},
		{
			name = "Open back rounded vowel",
			symbols = { "ɒ" },
			audio = "PR-open back rounded vowel.ogg"
		},
		{
			name = "R-colored vowel",
			symbols = { "ɚ", "ɝ", "ɹ̩", "ɻ̍" },
			audio = "En-us-er.ogg"
		},
		-- SUPRASEGMENTALS
		{
			name = "Primary stress",
			symbols = { "ˈ" },
			article = "Stress (linguistics)",
		},
		{
			name = "Secondary stress",
			symbols = { "ˌ" },
		},
		{
			name = "Minor (foot) group",
			symbols = { "|" },
			article = "Prosodic unit",
		},
		{
			name = "Major (intonation) group",
			symbols = { "‖" },
			article = "Prosodic unit",
		},
		{
			name = "Syllable break",
			symbols = { "." },
			article = "Syllable",
		},
		{
			name = "Linking (absence of a break)",
			symbols = { "‿" },
			article = "Connected speech",
		},
		-- TONES AND WORD ACCENTS
		{
			name = "Downstep",
			symbols = { "ꜜ" },
		},
		{
			name = "Upstep",
			symbols = { "ꜛ" },
		},
		{
			name = "Global rise",
			symbols = { "↗" },
			article = "Intonation (linguistics)",
		},
		{
			name = "Global fall",
			symbols = { "↘" },
			article = "Intonation (linguistics)",
		},
		-- EXTENDED IPA (extIPA)
		{
			name = "Bilabial percussive",
			symbols = { "ʬ" },
		},
		{
			name = "Bidental percussive",
			symbols = { "ʭ" },
		},
		{
			name = "Velopharyngeal fricative",
			symbols = { "ʩ" },
		},
		{
			name = "Voiceless alveolar lateral–median fricative",
			symbols = { "ʪ" },
			article = "Lateral release (phonetics)",
		},
		{
			name = "Voiced alveolar lateral–median fricative",
			symbols = { "ʫ" },
			article = "Lateral release (phonetics)",
		},
		{
			name = "Ingressive airflow",
			symbols = { "↓" },
			article = "Ingressive sound",
		},
		{
			name = "Egressive airflow",
			symbols = { "↑" },
			article = "Egressive sound",
		},
		{
			name = "Apical r",
			symbols = { "ɹ̺" },
			article = "Pronunciation of English /r/",
		},
		{
			name = "Bunched r",
			symbols = { "ɹ̈" },
			article = "Pronunciation of English /r/",
		},
		{
			name = "Sublaminal lower alveolar percussive",
			symbols = { "¡" },
			article = "Percussive consonant",
		},
		{
			name = "Percussive alveolar click",
			symbols = { "ǃ¡" },
		},
		{
			name = "Buccal interdental trill",
			symbols = { "ↀr̪͆" },
			article = "Blowing a raspberry",
		},
		-- NON-IPA
		{
			name = "Morphological boundary",
			symbols = { "#" },
			article = "Word stem",
		},
		{
			name = "Zero",
			symbols = { "∅" },
			article = "Zero (linguistics)",
		},
	},
	diacritics = {
		-- DIACRITICS
		{
			name = "Voiceless",
			symbols = { "̥", "̊", "ḁ", "å", "ů", "ẘ", "ẙ" },
		},
		{
			name = "Voiced",
			symbols = { "̬" },
			article = "Voice (phonetics)",
		},
		{
			name = "Aspirated",
			symbols = { "ʰ" },
			article = "Aspirated consonant",
		},
		{
			name = "More rounded",
			symbols = { "̹", "͗", "˒" },
			article = "Roundedness",
		},
		{
			name = "Less rounded",
			symbols = { "̜", "͑", "˓", "͍" },
			article = "Roundedness",
		},
		{
			name = "Advanced",
			symbols = { "̟", "˖" },
			article = "Relative articulation#Advanced and retracted",
		},
		{
			name = "Retracted",
			symbols = { "̠", "˗" },
			article = "Relative articulation#Advanced and retracted",
		},
		{
			name = "Centralized",
			symbols = { "̈" },
			article = "Relative articulation#Centralized vowels",
		},
		{
			name = "Mid-centralized",
			symbols = { "̽" },
			article = "Relative articulation#Mid-centralized vowel",
		},
		{
			name = "Syllabic",
			symbols = { "̩", "̍" },
			article = "Syllabic consonant",
		},
		{
			name = "Non-syllabic",
			symbols = { "̯", "̑" },
			article = "Semivowel",
		},
		{
			name = "Rhoticity",
			symbols = { "˞" },
			article = "R-colored vowel",
			audio = "En-us-er.ogg"
		},
		{
			name = "Breathy voiced",
			symbols = { "̤", "ṳ", "ʱ" },
			article = "Breathy voice",
		},
		{
			name = "Creaky voiced",
			symbols = { "̰", "ḛ", "ḭ", "ṵ" },
			article = "Creaky voice",
		},
		{
			name = "Linguolabial",
			symbols = { "̼" },
			article = "Linguolabial consonant",
		},
		{
			name = "Labialized",
			symbols = { "ʷ", "̫" },
			article = "Labialization",
		},
		{
			name = "Palatalized",
			symbols = { "ʲ" },
			article = "Palatalization (phonetics)",
		},
		{
			name = "Velarized",
			symbols = { "ˠ" },
			article = "Velarization",
		},
		{
			name = "Pharyngealized",
			symbols = { "ˤ" },
			article = "Pharyngealization",
		},
		{
			name = "Velarized or pharyngealized",
			symbols = { "̴", "ᵯ", "ᵰ", "ᵱ", "ᵬ", "ᵮ", "ᵵ", "ᵭ", "ᵴ", "ᵶ", "ᵳ", "ᵲ" },
			article = "Pharyngealization",
		},
		{
			name = "Raised",
			symbols = { "̝", "˔" },
			article = "Relative articulation#Raised and lowered",
		},
		{
			name = "Lowered",
			symbols = { "̞", "˕" },
			article = "Relative articulation#Raised and lowered",
		},
		{
			name = "Advanced tongue root",
			symbols = { "̘" },
		},
		{
			name = "Retracted tongue root",
			symbols = { "̙" },
		},
		{
			name = "Dental",
			symbols = { "̪", "͆" },
			article = "Dental consonant",
		},
		{
			name = "Apical",
			symbols = { "̺" },
			article = "Apical consonant",
		},
		{
			name = "Laminal",
			symbols = { "̻" },
			article = "Laminal consonant",
		},
		{
			name = "Nasalized",
			symbols = { "̃", "ṽ" },
			article = "Nasalization",
		},
		{
			name = "Nasal vowel",
			symbols = { "ĩ", "ỹ", "ɨ̃", "ʉ̃", "ɯ̃", "ũ", "ɪ̃", "ʏ̃", "ʊ̃", "ẽ", "ø̃", "ɘ̃", "ɵ̃", "ɤ̃", "õ", "ə̃", "ɛ̃", "œ̃", "ɜ̃", "ɞ̃", "ʌ̃", "ɔ̃", "æ̃", "ɐ̃", "ã", "ɶ̃", "ä̃", "ɑ̃", "ɒ̃" },
		},
		{
			name = "Nasal release",
			symbols = { "ⁿ" },
		},
		{
			name = "Lateral release",
			symbols = { "ˡ" },
			article = "Lateral release (phonetics)",
		},
		{
			name = "No audible release",
			symbols = { "̚" },
		},
		{
			name = "Ejective",
			symbols = { "ʼ" },
			article = "Ejective consonant",
		},
		{
			name = "Glottalized",
			symbols = { "ˀ" },
			article = "Glottalization",
		},
		{
			name = "Labio-palatalized",
			symbols = { "ᶣ" },
			article = "Labio-palatalization",
		},
		-- SUPRASEGMENTALS
		{
			name = "Long",
			symbols = { "ː" },
			article = "Length (phonetics)",
		},
		{
			name = "Half-long",
			symbols = { "ˑ" },
			article = "Length (phonetics)",
		},
		{
			name = "Extra-short",
			symbols = { "̆" },
			article = "Extra-shortness",
		},
		-- TONES AND WORD ACCENTS
		{
			name = "Accent",
			symbols = { "̋", "ű", "ӳ", "ő", "́", "í", "ý", "ú", "é", "ó", "á", "̄", "ī", "ȳ", "ū", "ē", "ō", "ǣ", "ā", "̀", "ì", "ỳ", "ù", "è", "ò", "à", "̏", "ȉ", "ȕ", "ȅ", "ȍ", "ȁ" },
			article = "Pitch-accent language",
		},
		{
			name = "Tone",
			symbols = { "̌", "̂", "᷄", "᷅", "᷇", "᷆", "᷈", "᷉", "˥", "˦", "˧", "˨", "˩" },
			article = "Tone (linguistics)",
		},
		-- EXTENDED IPA (extIPA)
		{
			name = "Alveolar",
			symbols = { "͇" },
			article = "Alveolar consonant",
		},
		{
			name = "Strong articulation",
			symbols = { "͈", "̎" },
			article = "Fortis and lenis",
		},
		{
			name = "Weak articulation",
			symbols = { "͉", "᷂" },
			article = "Fortis and lenis",
		},
		{
			name = "Denasalized",
			symbols = { "͊" },
			article = "Denasalization",
		},
		{
			name = "Velopharyngeal friction",
			symbols = { "͌" },
			article = "Velopharyngeal consonant",
		},
		{
			name = "Whistled articulation",
			symbols = { "͎" },
			article = "Whistled sibilant",
		},
		{
			name = "Unaspirated",
			symbols = { "˭" },
			article = "Tenuis consonant",
		},
		{
			name = "Pre-aspiration",
			symbols = { "ʰp", "ʰt", "ʰʈ", "ʰc", "ʰk", "ʰq", "ʰn" },
			article = "Preaspiration",
		},
		-- NON-IPA
		{
			name = "Retroflex",
			symbols = { "̣", "̢" },
			article = "Retroflex consonant",
		},
		{
			name = "Prenasalized consonant",
			symbols = { "ᵐ", "ᶬ", "ⁿt", "ⁿd", "ⁿθ", "ⁿð", "ⁿs", "ⁿz", "ⁿʃ", "ⁿʒ", "ⁿɕ", "ⁿʑ", "ⁿr", "ⁿɬ", "ⁿɮ", "ⁿl", "ᶯ", "ᶮ", "ᵑ", "ᶰ" },
		},
		{
			name = "Pre-stopped consonant",
			symbols = { "ᵖ", "ᵇ", "ᵗ", "ᵈ", "ᶜ", "ᶡ", "ᵏ", "ᶢ", "ᴳ" },
		},
		{
			name = "Post-stopped nasal",
			symbols = { "mᵇ", "nᵈ", "ɲᶡ", "ŋᶢ", "ɴᴳ" },
		},
	}
}

for k, group in pairs(rawData) do
	for _, v in ipairs(group) do
		local t = {
			name = v.name,
			symbol = v.symbols[1],
			article = v.article or v.name,
			audio = v.audio or ""
		}
		for _, s in ipairs(v.symbols) do
			data[k][s] = t
		end
	end
end
	
return { data = data, rawData = rawData }</text>
      <sha1>asvras4s8m728gh2mr5hvz5nxwp70zz</sha1>
    </revision>
  </page>
  <page>
    <title>Template:N/A</title>
    <ns>10</ns>
    <id>14680</id>
    <redirect title="Template:N/a" />
    <revision>
      <id>147450</id>
      <parentid>147449</parentid>
      <timestamp>2024-03-08T04:35:00Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported: importing wikipedia</comment>
      <origin>147449</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="26" sha1="hpes2hbf4mkh2diqgvle34iuur4r7u3" xml:space="preserve">#redirect [[Template:n/a]]</text>
      <sha1>hpes2hbf4mkh2diqgvle34iuur4r7u3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:IPA vowels</title>
    <ns>10</ns>
    <id>10330</id>
    <revision>
      <id>128284</id>
      <parentid>128283</parentid>
      <timestamp>2023-12-15T21:36:56Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:IPA_vowels]]</comment>
      <origin>128283</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="563" sha1="1bhy3jtp9bxb91wj9lh7jki639mv74d" xml:space="preserve">{{IPA common|name=IPA vowels|table={{IPA vowels/table|caption={{{caption|def}}}|audio={{yesno|{{{audio|}}}}}|tableclass={{{tableclass|}}}|tablestyle={{{tablestyle|}}}}}|caption={{{caption|[[International Phonetic Alphabet|IPA]]: [[Vowel]]s}}}|audiopage=IPA vowel chart with audio|notescontent=Legend: [[Roundedness|unrounded&amp;nbsp;&lt;span style="color: #000;"&gt;&amp;bull;&lt;/span&gt;&amp;nbsp;rounded]]|notes={{{notes|yes}}}|separator=yes|audio={{yesno|{{{audio|}}}}}|class={{{class|}}}|style={{{style|}}}|captionstyle={{{captionstyle|}}}}}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>1bhy3jtp9bxb91wj9lh7jki639mv74d</sha1>
    </revision>
  </page>
  <page>
    <title>Template:IPA common/styles.css</title>
    <ns>10</ns>
    <id>10332</id>
    <revision>
      <id>128304</id>
      <parentid>128303</parentid>
      <timestamp>2023-12-15T21:37:14Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:IPA_common/styles.css]]</comment>
      <origin>128303</origin>
      <model>sanitized-css</model>
      <format>text/css</format>
      <text bytes="1641" sha1="lzxw9ezijd82zml41v9ssxol90lutl9" xml:space="preserve">/* {{pp-template}} */
.IPA-common-captioned {
	border: 1px solid #a2a9b1;
	background: #f8f9fa;
	padding: 0.2em;
}

.IPA-common-caption {
	padding: 0.2em;
	text-align: center;
	background: #f2f2ce;
}

.IPA-common-table {
	margin: auto;
}

.IPA-common-table .wraplinks .selflink {
	white-space: normal;
}

.IPA-common-constable th {
	font-weight: normal;
}

.IPA-common-constable th:not(.IPA-pulmonic-mannerarrow)[scope="col"] {
	text-align: center;
	vertical-align: middle;
	padding-left: 0;
	padding-right: 0;
	max-width: 4em;
}

.IPA-common-constable th:not(.IPA-pulmonic-placearrow)[scope="row"] {
	text-align: left;
	vertical-align: middle;
}

.IPA-common-constable td {
	vertical-align: middle;
}

.IPA-common-constable:not(.IPA-common-audiotable) td:not([colspan]) {
	text-align: center;
	max-width: 1.2em;
	min-width: 1.2em;
	padding: 0.1em 0.2em;
	font-size: 125%;
}

.IPA-common-audiotable td {
	padding: 0;
}

.IPA-common-noleftborder {
	border-left: none;
}

.IPA-common-norightborder {
	border-right: none;
}

.IPA-common-notopborder {
	border-top: none;
}

.IPA-common-nobottomborder {
	border-bottom: none;
}

.IPA-common-shaded {
	background-color: #ddd;
}

.IPA-common-notes {
	text-align: left;
	font-size: 85%;
}

.IPA-common-notes &gt; div {
	float: right;
}

.IPA-common-notes &gt; div ul {
	white-space: nowrap;
	font-weight: normal;
	line-height: inherit;
}

.IPA-common-notes &gt; div ul li {
	word-spacing: -0.125em;
}

.IPA-audiocell {
	width: 40px;
	text-align: center;
}

.IPA-audiocell-symbol {
	font-size: 120%;
}

.IPA-audiocell-audio {
	height: 20px;
}

.IPA-audiocell-audio .ext-phonos-attribution {
	margin-left: 0;
}</text>
      <sha1>lzxw9ezijd82zml41v9ssxol90lutl9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:IPA vowels/table</title>
    <ns>10</ns>
    <id>10334</id>
    <revision>
      <id>128308</id>
      <parentid>128307</parentid>
      <timestamp>2023-12-15T21:37:16Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:IPA_vowels/table]]</comment>
      <origin>128307</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2061" sha1="o8qoqogtrvg31jbi517qfyf5zbt61jg" xml:space="preserve">&lt;noinclude&gt;{{pp-template|small=yes}}&lt;templatestyles src="IPA common/styles.css" /&gt;&lt;/noinclude&gt;&lt;templatestyles src="IPA vowels/styles.css" /&gt;{{(!}} class="nowrap IPA-vowels-main {{#if:{{{caption|def}}}||IPA-vowels-nocaption}} IPA-vowels-{{#if:{{{audio|}}}|&lt;noinclude&gt;no&lt;/noinclude&gt;|no}}audio {{{tableclass|}}}" style="{{{tablestyle|}}}"
!
! scope="col" | [[Front vowel|Front]]
! scope="col" | [[Central vowel|Central]]
! scope="col" | [[Back vowel|Back]]
|-
! scope="row" | [[Close vowel|Close]]
| {{IPA vowels/vowelpair|i|y|-26|8|-44|6|audio={{{audio|}}}}}
| {{IPA vowels/vowelpair|ɨ|ʉ|-6|8|-6|6|audio={{{audio|}}}}}
| {{IPA vowels/vowelpair|ɯ|u|13|8|34|6|audio={{{audio|}}}}}
|-
! scope="row" class="IPA-vowels-minorcaption" | [[Near-close vowel|Near-close]]
| {{IPA vowels/vowelpair|ɪ|ʏ|30|6|72|4|audio={{{audio|}}}}}
|
| {{IPA vowels/vowelpair||ʊ|-22|6|-34|4|audio={{{audio|}}}}}
|-
! scope="row" | [[Close-mid vowel|Close-mid]]
| {{IPA vowels/vowelpair|e|ø|14|4|38|2|audio={{{audio|}}}}}
| {{IPA vowels/vowelpair|ɘ|ɵ|12|4|34|2|audio={{{audio|}}}}}
| {{IPA vowels/vowelpair|ɤ|o|13|4|34|2|audio={{{audio|}}}}}
|-
! scope="row" class="IPA-vowels-minorcaption" | [[Mid vowel|Mid]]
| {{IPA vowels/vowelpair|e̞|ø̞|37|2|76|0|audio={{{audio|}}}}}
| {{IPA vowels/vowelsingle|ə|25|2|54|0|audio={{{audio|}}}}}
| {{IPA vowels/vowelpair|ɤ̞|o̞|13|2|34|0|audio={{{audio|}}}}}
|-
! scope="row" | [[Open-mid vowel|Open-mid]]
| {{IPA vowels/vowelpair|ɛ|œ|59|0|118|-2|audio={{{audio|}}}}}
| {{IPA vowels/vowelpair|ɜ|ɞ|34|0|74|-2|audio={{{audio|}}}}}
| {{IPA vowels/vowelpair|ʌ|ɔ|13|0|34|-2|audio={{{audio|}}}}}
|-
! scope="row" class="IPA-vowels-minorcaption" | [[Near-open vowel|Near-open]]
| {{IPA vowels/vowelpair|æ||80|-2|156|-4|audio={{{audio|}}}}}
| {{IPA vowels/vowelsingle|ɐ|46|-2|94|-4|audio={{{audio|}}}}}
|
|-
! scope="row" | [[Open vowel|Open]]
| {{IPA vowels/vowelpair|a|ɶ|102|-4|198|-6|audio={{{audio|}}}}}
| {{IPA vowels/vowelpair|ä||57|-4|116|-6|audio={{{audio|}}}}}
| {{IPA vowels/vowelpair|ɑ|ɒ|13|-4|34|-6|audio={{{audio|}}}}}
|}</text>
      <sha1>o8qoqogtrvg31jbi517qfyf5zbt61jg</sha1>
    </revision>
  </page>
  <page>
    <title>Template:IPA vowels/styles.css</title>
    <ns>10</ns>
    <id>10333</id>
    <revision>
      <id>128306</id>
      <parentid>128305</parentid>
      <timestamp>2023-12-15T21:37:15Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:IPA_vowels/styles.css]]</comment>
      <origin>128305</origin>
      <model>sanitized-css</model>
      <format>text/css</format>
      <text bytes="1888" sha1="5j2j3sdpilg38ganqttxi3ui8cshv92" xml:space="preserve">/* {{pp-template}} */
.IPA-vowels-noaudio {
	background: #f8f9fa url(//upload.wikimedia.org/wikipedia/commons/thumb/4/4f/Blank_vowel_trapezoid.svg/320px-Blank_vowel_trapezoid.svg.png) bottom 10% right 10% no-repeat;
}

.IPA-vowels-audio {
	background: #f8f9fa url(//upload.wikimedia.org/wikipedia/commons/thumb/4/4f/Blank_vowel_trapezoid.svg/600px-Blank_vowel_trapezoid.svg.png) bottom 10% right 10% no-repeat;
}

.IPA-vowels-main {
	table-layout: fixed;
	border-collapse: collapse;
	text-align: center;
}

.IPA-vowels-nocaption {
	border: 1px solid #a2a9b1;
}

.IPA-vowels-main th {
	vertical-align: middle;
	background: #f8f9fa;
}

.IPA-vowels-main th[scope="col"] {
	text-align: center;
	padding-top: 0.2em;
}

.IPA-vowels-main th[scope="row"] {
	text-align: right;
	padding-left: 0.4em;
}

.IPA-vowels-main td {
	vertical-align: middle;
}

.IPA-vowels-noaudio td {
	width: 106.67px;
	min-width: 106.67px;
	height: 32px;
}

.IPA-vowels-audio td {
	width: 200px;
	min-width: 200px;
	height: 60px;
}

.IPA-vowels-minorcaption {
	font-weight: normal;
}

.IPA-vowels-container {
	display: flex;
	justify-content: center;
	font-size: 125%;
	line-height: 1.2;
}

.IPA-vowels-container-dot {
	text-align: center;
	width: 1em;
	background: #f8f9fa;
}

.IPA-vowels-container-left {
	max-width: 1em;
	min-width: 1em;
	direction: rtl;
	text-align: right;
}

.IPA-vowels-container-left &gt; span {
	padding-left: 0.2em;
	background: #f8f9fa;
}

.IPA-vowels-container-right {
	max-width: 1em;
	min-width: 1em;
	direction: ltr;
	text-align: left;
}

.IPA-vowels-container-right &gt; span {
	padding-right: 0.2em;
	background: #f8f9fa;
}

.IPA-vowels-container-single {
	padding-left: 0.2em;
	padding-right: 0.2em;
	background: #f8f9fa;
}

.IPA-vowels-audio .IPA-audiocell {
	background: #f8f9fa;
}

.IPA-vowels-audiocell-empty {
	width: 40px;
}

.IPA-vowels-audio .IPA-audiocell-audio {
	font-size: 90%;
}</text>
      <sha1>5j2j3sdpilg38ganqttxi3ui8cshv92</sha1>
    </revision>
  </page>
  <page>
    <title>Template:IPA vowels/vowelpair</title>
    <ns>10</ns>
    <id>10335</id>
    <revision>
      <id>128310</id>
      <parentid>128309</parentid>
      <timestamp>2023-12-15T21:37:16Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:IPA_vowels/vowelpair]]</comment>
      <origin>128309</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="773" sha1="1ro8js9dmmknkojq5dk4b97dwl1rxd8" xml:space="preserve">&lt;div class="IPA-vowels-container" {{#if:{{{audio|}}}|style="transform: translate({{{5|0}}}px, {{{6|0}}}px);"&gt;
{{#if:{{{1|}}}|{{IPA common/audiocell|{{{1}}}}}|&lt;div class="IPA-vowels-audiocell-empty"&gt;&lt;/div&gt;}}
{{#if:{{{2|}}}|{{IPA common/audiocell|{{{2}}}}}|&lt;div class="IPA-vowels-audiocell-empty"&gt;&lt;/div&gt;}}
|&gt;
&lt;div class="IPA-vowels-container-left" style="transform: translate({{{3|0}}}px, {{{4|0}}}px);"&gt;{{#if:{{{1|}}}|&lt;span&gt;{{IPA link|{{{1}}}}}&lt;/span&gt;}}&lt;/div&gt;
&lt;div class="IPA-vowels-container-dot" style="transform: translate({{{3|0}}}px, {{{4|0}}}px);"&gt;[[File:Disc Plain black.svg|5x5px|alt=&amp;bull;|link=]]&lt;/div&gt;
&lt;div class="IPA-vowels-container-right" style="transform: translate({{{3|0}}}px, {{{4|0}}}px);"&gt;{{#if:{{{2|}}}|&lt;span&gt;{{IPA link|{{{2}}}}}&lt;/span&gt;}}&lt;/div&gt;
}}&lt;/div&gt;</text>
      <sha1>1ro8js9dmmknkojq5dk4b97dwl1rxd8</sha1>
    </revision>
  </page>
  <page>
    <title>Template:IPA vowels/vowelsingle</title>
    <ns>10</ns>
    <id>10336</id>
    <revision>
      <id>128312</id>
      <parentid>128311</parentid>
      <timestamp>2023-12-15T21:37:17Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:IPA_vowels/vowelsingle]]</comment>
      <origin>128311</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="327" sha1="haiwmjianexip28w8f276wokreut5oe" xml:space="preserve">&lt;noinclude&gt;{{pp-template|small=yes}}&lt;/noinclude&gt;&lt;div class="IPA-vowels-container" {{#if:{{{audio|}}}|style="transform: translate({{{4|0}}}px, {{{5|0}}}px);"&gt;
{{IPA common/audiocell|{{{1|}}}}}
|&gt;
&lt;div class="IPA-vowels-container-single" style="transform: translate({{{2|0}}}px, {{{3|0}}}px);"&gt;{{IPA link|{{{1}}}}}&lt;/div&gt;
}}&lt;/div&gt;</text>
      <sha1>haiwmjianexip28w8f276wokreut5oe</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Color/styles.css</title>
    <ns>10</ns>
    <id>16455</id>
    <revision>
      <id>155827</id>
      <parentid>155826</parentid>
      <timestamp>2024-07-17T07:53:10Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Template:Color/styles.css]]</comment>
      <origin>155826</origin>
      <model>sanitized-css</model>
      <format>text/css</format>
      <text bytes="615" sha1="i2expinwsw9vdsw3wqe4epew26guobf" xml:space="preserve">/* {{pp-template}} */
/* [[phab:T360683]]: This stylesheet removes the function of this template in
 * dark mode
 */
html.skin-theme-clientpref-night div:not(.notheme) &gt; .tmp-color,
html.skin-theme-clientpref-night p &gt; .tmp-color,
html.skin-theme-clientpref-night table:not(.notheme) .tmp-color {
   color: inherit !important;
}
@media (prefers-color-scheme: dark) {
    /* automatic mode */
    html.skin-theme-clientpref-os div:not(.notheme) &gt; .tmp-color,
    html.skin-theme-clientpref-os p &gt; .tmp-color,
    html.skin-theme-clientpref-os table:not(.notheme) .tmp-color {
      color: inherit !important;
    }
}</text>
      <sha1>i2expinwsw9vdsw3wqe4epew26guobf</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite web</title>
    <ns>10</ns>
    <id>2798</id>
    <revision>
      <id>90615</id>
      <parentid>33447</parentid>
      <timestamp>2023-05-21T02:15:37Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>4 revisions imported: importing Portal Userspace</comment>
      <origin>30640</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="122" sha1="rcgmbcxu7hvs583g1f3rzz4c4dkizda" xml:space="preserve">&lt;includeonly&gt;{{#invoke:citation/CS1|citation
|CitationClass=web
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>rcgmbcxu7hvs583g1f3rzz4c4dkizda</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1</title>
    <ns>828</ns>
    <id>744</id>
    <revision>
      <id>155777</id>
      <parentid>155776</parentid>
      <timestamp>2024-07-17T07:52:43Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Module:Citation/CS1]]</comment>
      <origin>155776</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="226159" sha1="7sahwn7umrpjn8voh7tpvtm2yhs02x8" xml:space="preserve">require ('strict');

--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------

each of these counts against the Lua upvalue limit

]]

local validation;																-- functions in Module:Citation/CS1/Date_validation

local utilities;																-- functions in Module:Citation/CS1/Utilities
local z = {};																	-- table of tables in Module:Citation/CS1/Utilities

local identifiers;																-- functions and tables in Module:Citation/CS1/Identifiers
local metadata;																	-- functions in Module:Citation/CS1/COinS
local cfg = {};																	-- table of configuration tables that are defined in Module:Citation/CS1/Configuration
local whitelist = {};															-- table of tables listing valid template parameter names; defined in Module:Citation/CS1/Whitelist


--[[------------------&lt; P A G E   S C O P E   V A R I A B L E S &gt;---------------

declare variables here that have page-wide scope that are not brought in from
other modules; that are created here and used here

]]

local added_deprecated_cat;														-- Boolean flag so that the category is added only once
local added_vanc_errs;															-- Boolean flag so we only emit one Vancouver error / category
local added_generic_name_errs;													-- Boolean flag so we only emit one generic name error / category and stop testing names once an error is encountered
local added_numeric_name_errs;													-- Boolean flag so we only emit one numeric name error / category and stop testing names once an error is encountered
local added_numeric_name_maint;													-- Boolean flag so we only emit one numeric name maint category and stop testing names once a category has been emitted
local Frame;																	-- holds the module's frame table
local is_preview_mode;															-- true when article is in preview mode; false when using 'Preview page with this template' (previewing the module)
local is_sandbox;																-- true when using sandbox modules to render citation


--[[--------------------------&lt; F I R S T _ S E T &gt;------------------------------------------------------------

Locates and returns the first set value in a table of values where the order established in the table,
left-to-right (or top-to-bottom), is the order in which the values are evaluated.  Returns nil if none are set.

This version replaces the original 'for _, val in pairs do' and a similar version that used ipairs.  With the pairs
version the order of evaluation could not be guaranteed.  With the ipairs version, a nil value would terminate
the for-loop before it reached the actual end of the list.

]]

local function first_set (list, count)
	local i = 1;
	while i &lt;= count do															-- loop through all items in list
		if utilities.is_set( list[i] ) then
			return list[i];														-- return the first set list member
		end
		i = i + 1;																-- point to next
	end
end


--[[--------------------------&lt; A D D _ V A N C _ E R R O R &gt;----------------------------------------------------

Adds a single Vancouver system error message to the template's output regardless of how many error actually exist.
To prevent duplication, added_vanc_errs is nil until an error message is emitted.

added_vanc_errs is a Boolean declared in page scope variables above

]]

local function add_vanc_error (source, position)
	if added_vanc_errs then return end
		
	added_vanc_errs = true;														-- note that we've added this category
	utilities.set_message ('err_vancouver', {source, position});
end


--[[--------------------------&lt; I S _ S C H E M E &gt;------------------------------------------------------------

does this thing that purports to be a URI scheme seem to be a valid scheme?  The scheme is checked to see if it
is in agreement with http://tools.ietf.org/html/std66#section-3.1 which says:
	Scheme names consist of a sequence of characters beginning with a
   letter and followed by any combination of letters, digits, plus
   ("+"), period ("."), or hyphen ("-").

returns true if it does, else false

]]

local function is_scheme (scheme)
	return scheme and scheme:match ('^%a[%a%d%+%.%-]*:');						-- true if scheme is set and matches the pattern
end


--[=[-------------------------&lt; I S _ D O M A I N _ N A M E &gt;--------------------------------------------------

Does this thing that purports to be a domain name seem to be a valid domain name?

Syntax defined here: http://tools.ietf.org/html/rfc1034#section-3.5
BNF defined here: https://tools.ietf.org/html/rfc4234
Single character names are generally reserved; see https://tools.ietf.org/html/draft-ietf-dnsind-iana-dns-01#page-15;
	see also [[Single-letter second-level domain]]
list of TLDs: https://www.iana.org/domains/root/db

RFC 952 (modified by RFC 1123) requires the first and last character of a hostname to be a letter or a digit.  Between
the first and last characters the name may use letters, digits, and the hyphen.

Also allowed are IPv4 addresses. IPv6 not supported

domain is expected to be stripped of any path so that the last character in the last character of the TLD.  tld
is two or more alpha characters.  Any preceding '//' (from splitting a URL with a scheme) will be stripped
here.  Perhaps not necessary but retained in case it is necessary for IPv4 dot decimal.

There are several tests:
	the first character of the whole domain name including subdomains must be a letter or a digit
	internationalized domain name (ASCII characters with .xn-- ASCII Compatible Encoding (ACE) prefix xn-- in the TLD) see https://tools.ietf.org/html/rfc3490
	single-letter/digit second-level domains in the .org, .cash, and .today TLDs
	q, x, and z SL domains in the .com TLD
	i and q SL domains in the .net TLD
	single-letter SL domains in the ccTLDs (where the ccTLD is two letters)
	two-character SL domains in gTLDs (where the gTLD is two or more letters)
	three-plus-character SL domains in gTLDs (where the gTLD is two or more letters)
	IPv4 dot-decimal address format; TLD not allowed

returns true if domain appears to be a proper name and TLD or IPv4 address, else false

]=]

local function is_domain_name (domain)
	if not domain then
		return false;															-- if not set, abandon
	end
	
	domain = domain:gsub ('^//', '');											-- strip '//' from domain name if present; done here so we only have to do it once
	
	if not domain:match ('^[%w]') then											-- first character must be letter or digit
		return false;
	end

	if domain:match ('^%a+:') then												-- hack to detect things that look like s:Page:Title where Page: is namespace at Wikisource
		return false;
	end

	local patterns = {															-- patterns that look like URLs
		'%f[%w][%w][%w%-]+[%w]%.%a%a+$',										-- three or more character hostname.hostname or hostname.tld
		'%f[%w][%w][%w%-]+[%w]%.xn%-%-[%w]+$',									-- internationalized domain name with ACE prefix
		'%f[%a][qxz]%.com$',													-- assigned one character .com hostname (x.com times out 2015-12-10)
		'%f[%a][iq]%.net$',														-- assigned one character .net hostname (q.net registered but not active 2015-12-10)
		'%f[%w][%w]%.%a%a$',													-- one character hostname and ccTLD (2 chars)
		'%f[%w][%w][%w]%.%a%a+$',												-- two character hostname and TLD
		'^%d%d?%d?%.%d%d?%d?%.%d%d?%d?%.%d%d?%d?',								-- IPv4 address
		}

	for _, pattern in ipairs (patterns) do										-- loop through the patterns list
		if domain:match (pattern) then
			return true;														-- if a match then we think that this thing that purports to be a URL is a URL
		end
	end

	for _, d in ipairs (cfg.single_letter_2nd_lvl_domains_t) do					-- look for single letter second level domain names for these top level domains
		if domain:match ('%f[%w][%w]%.' .. d) then
			return true
		end
	end
	return false;																-- no matches, we don't know what this thing is
end


--[[--------------------------&lt; I S _ U R L &gt;------------------------------------------------------------------

returns true if the scheme and domain parts of a URL appear to be a valid URL; else false.

This function is the last step in the validation process.  This function is separate because there are cases that
are not covered by split_url(), for example is_parameter_ext_wikilink() which is looking for bracketted external
wikilinks.

]]

local function is_url (scheme, domain)
	if utilities.is_set (scheme) then											-- if scheme is set check it and domain
		return is_scheme (scheme) and is_domain_name (domain);
	else
		return is_domain_name (domain);											-- scheme not set when URL is protocol-relative
	end
end


--[[--------------------------&lt; S P L I T _ U R L &gt;------------------------------------------------------------

Split a URL into a scheme, authority indicator, and domain.

First remove Fully Qualified Domain Name terminator (a dot following TLD) (if any) and any path(/), query(?) or fragment(#).

If protocol-relative URL, return nil scheme and domain else return nil for both scheme and domain.

When not protocol-relative, get scheme, authority indicator, and domain.  If there is an authority indicator (one
or more '/' characters immediately following the scheme's colon), make sure that there are only 2.

Any URL that does not have news: scheme must have authority indicator (//).  TODO: are there other common schemes
like news: that don't use authority indicator?

Strip off any port and path;

]]

local function split_url (url_str)
	local scheme, authority, domain;
	
	url_str = url_str:gsub ('([%a%d])%.?[/%?#].*$', '%1');						-- strip FQDN terminator and path(/), query(?), fragment (#) (the capture prevents false replacement of '//')

	if url_str:match ('^//%S*') then											-- if there is what appears to be a protocol-relative URL
		domain = url_str:match ('^//(%S*)')
	elseif url_str:match ('%S-:/*%S+') then										-- if there is what appears to be a scheme, optional authority indicator, and domain name
		scheme, authority, domain = url_str:match ('(%S-:)(/*)(%S+)');			-- extract the scheme, authority indicator, and domain portions
		if utilities.is_set (authority) then
			authority = authority:gsub ('//', '', 1);							-- replace place 1 pair of '/' with nothing;
			if utilities.is_set(authority) then									-- if anything left (1 or 3+ '/' where authority should be) then
				return scheme;													-- return scheme only making domain nil which will cause an error message
			end
		else
			if not scheme:match ('^news:') then									-- except for news:..., MediaWiki won't link URLs that do not have authority indicator; TODO: a better way to do this test?
				return scheme;													-- return scheme only making domain nil which will cause an error message
			end
		end
		domain = domain:gsub ('(%a):%d+', '%1');								-- strip port number if present
	end
	
	return scheme, domain;
end


--[[--------------------------&lt; L I N K _ P A R A M _ O K &gt;---------------------------------------------------

checks the content of |title-link=, |series-link=, |author-link=, etc. for properly formatted content: no wikilinks, no URLs

Link parameters are to hold the title of a Wikipedia article, so none of the WP:TITLESPECIALCHARACTERS are allowed:
	# &lt; &gt; [ ] | { } _
except the underscore which is used as a space in wiki URLs and # which is used for section links

returns false when the value contains any of these characters.

When there are no illegal characters, this function returns TRUE if value DOES NOT appear to be a valid URL (the
|&lt;param&gt;-link= parameter is ok); else false when value appears to be a valid URL (the |&lt;param&gt;-link= parameter is NOT ok).

]]

local function link_param_ok (value)
	local scheme, domain;
	if value:find ('[&lt;&gt;%[%]|{}]') then											-- if any prohibited characters
		return false;
	end

	scheme, domain = split_url (value);											-- get scheme or nil and domain or nil from URL; 
	return not is_url (scheme, domain);											-- return true if value DOES NOT appear to be a valid URL
end


--[[--------------------------&lt; L I N K _ T I T L E _ O K &gt;---------------------------------------------------

Use link_param_ok() to validate |&lt;param&gt;-link= value and its matching |&lt;title&gt;= value.

|&lt;title&gt;= may be wiki-linked but not when |&lt;param&gt;-link= has a value.  This function emits an error message when
that condition exists

check &lt;link&gt; for inter-language interwiki-link prefix.  prefix must be a MediaWiki-recognized language
code and must begin with a colon.

]]

local function link_title_ok (link, lorig, title, torig)
	local orig;
	if utilities.is_set (link) then 											-- don't bother if &lt;param&gt;-link doesn't have a value
		if not link_param_ok (link) then										-- check |&lt;param&gt;-link= markup
			orig = lorig;														-- identify the failing link parameter
		elseif title:find ('%[%[') then											-- check |title= for wikilink markup
			orig = torig;														-- identify the failing |title= parameter
		elseif link:match ('^%a+:') then										-- if the link is what looks like an interwiki
			local prefix = link:match ('^(%a+):'):lower();						-- get the interwiki prefix

			if cfg.inter_wiki_map[prefix] then									-- if prefix is in the map, must have preceding colon
				orig = lorig;													-- flag as error
			end
		end
	end

	if utilities.is_set (orig) then
		link = '';																-- unset
		utilities.set_message ('err_bad_paramlink', orig);						-- URL or wikilink in |title= with |title-link=;
	end
	
	return link;																-- link if ok, empty string else
end


--[[--------------------------&lt; C H E C K _ U R L &gt;------------------------------------------------------------

Determines whether a URL string appears to be valid.

First we test for space characters.  If any are found, return false.  Then split the URL into scheme and domain
portions, or for protocol-relative (//example.com) URLs, just the domain.  Use is_url() to validate the two
portions of the URL.  If both are valid, or for protocol-relative if domain is valid, return true, else false.

Because it is different from a standard URL, and because this module used external_link() to make external links
that work for standard and news: links, we validate newsgroup names here.  The specification for a newsgroup name
is at https://tools.ietf.org/html/rfc5536#section-3.1.4

]]

local function check_url( url_str )
	if nil == url_str:match ("^%S+$") then										-- if there are any spaces in |url=value it can't be a proper URL
		return false;
	end
	local scheme, domain;

	scheme, domain = split_url (url_str);										-- get scheme or nil and domain or nil from URL;
	
	if 'news:' == scheme then													-- special case for newsgroups
		return domain:match('^[%a%d%+%-_]+%.[%a%d%+%-_%.]*[%a%d%+%-_]$');
	end
	
	return is_url (scheme, domain);												-- return true if value appears to be a valid URL
end


--[=[-------------------------&lt; I S _ P A R A M E T E R _ E X T _ W I K I L I N K &gt;----------------------------

Return true if a parameter value has a string that begins and ends with square brackets [ and ] and the first
non-space characters following the opening bracket appear to be a URL.  The test will also find external wikilinks
that use protocol-relative URLs. Also finds bare URLs.

The frontier pattern prevents a match on interwiki-links which are similar to scheme:path URLs.  The tests that
find bracketed URLs are required because the parameters that call this test (currently |title=, |chapter=, |work=,
and |publisher=) may have wikilinks and there are articles or redirects like '//Hus' so, while uncommon, |title=[[//Hus]]
is possible as might be [[en://Hus]].

]=]

local function is_parameter_ext_wikilink (value)
local scheme, domain;

	if value:match ('%f[%[]%[%a%S*:%S+.*%]') then								-- if ext. wikilink with scheme and domain: [xxxx://yyyyy.zzz]
		scheme, domain = split_url (value:match ('%f[%[]%[(%a%S*:%S+).*%]'));
	elseif value:match ('%f[%[]%[//%S+.*%]') then								-- if protocol-relative ext. wikilink: [//yyyyy.zzz]
		scheme, domain = split_url (value:match ('%f[%[]%[(//%S+).*%]'));
	elseif value:match ('%a%S*:%S+') then										-- if bare URL with scheme; may have leading or trailing plain text
		scheme, domain = split_url (value:match ('(%a%S*:%S+)'));
	elseif value:match ('//%S+') then											-- if protocol-relative bare URL: //yyyyy.zzz; may have leading or trailing plain text
		scheme, domain = split_url (value:match ('(//%S+)'));					-- what is left should be the domain
	else
		return false;															-- didn't find anything that is obviously a URL
	end

	return is_url (scheme, domain);												-- return true if value appears to be a valid URL
end


--[[-------------------------&lt; C H E C K _ F O R _ U R L &gt;-----------------------------------------------------

loop through a list of parameters and their values.  Look at the value and if it has an external link, emit an error message.

]]

local function check_for_url (parameter_list, error_list)
	for k, v in pairs (parameter_list) do										-- for each parameter in the list
		if is_parameter_ext_wikilink (v) then									-- look at the value; if there is a URL add an error message
			table.insert (error_list, utilities.wrap_style ('parameter', k));
		end
	end
end


--[[--------------------------&lt; S A F E _ F O R _ U R L &gt;------------------------------------------------------

Escape sequences for content that will be used for URL descriptions

]]

local function safe_for_url( str )
	if str:match( "%[%[.-%]%]" ) ~= nil then 
		utilities.set_message ('err_wikilink_in_url', {});
	end
	
	return str:gsub( '[%[%]\n]', {	
		['['] = '&amp;#91;',
		[']'] = '&amp;#93;',
		['\n'] = ' ' } );
end


--[[--------------------------&lt; E X T E R N A L _ L I N K &gt;----------------------------------------------------

Format an external link with error checking

]]

local function external_link (URL, label, source, access)
	local err_msg = '';
	local domain;
	local path;
	local base_url;

	if not utilities.is_set (label) then
		label = URL;
		if utilities.is_set (source) then
			utilities.set_message ('err_bare_url_missing_title', {utilities.wrap_style ('parameter', source)});
		else
			error (cfg.messages["bare_url_no_origin"]);							-- programmer error; valid parameter name does not have matching meta-parameter
		end			
	end
	if not check_url (URL) then
		utilities.set_message ('err_bad_url', {utilities.wrap_style ('parameter', source)});
	end
	
	domain, path = URL:match ('^([/%.%-%+:%a%d]+)([/%?#].*)$');					-- split the URL into scheme plus domain and path
	if path then																-- if there is a path portion
		path = path:gsub ('[%[%]]', {['['] = '%5b', [']'] = '%5d'});			-- replace '[' and ']' with their percent-encoded values
		URL = table.concat ({domain, path});									-- and reassemble
	end

	base_url = table.concat ({ "[", URL, " ", safe_for_url (label), "]" });		-- assemble a wiki-markup URL

	if utilities.is_set (access) then											-- access level (subscription, registration, limited)
		base_url = utilities.substitute (cfg.presentation['ext-link-access-signal'], {cfg.presentation[access].class, cfg.presentation[access].title, base_url});	-- add the appropriate icon
	end

	return base_url;
end


--[[--------------------------&lt; D E P R E C A T E D _ P A R A M E T E R &gt;--------------------------------------

Categorize and emit an error message when the citation contains one or more deprecated parameters.  The function includes the
offending parameter name to the error message.  Only one error message is emitted regardless of the number of deprecated
parameters in the citation.

added_deprecated_cat is a Boolean declared in page scope variables above

]]

local function deprecated_parameter(name)
	if not added_deprecated_cat then
		added_deprecated_cat = true;											-- note that we've added this category
		utilities.set_message ('err_deprecated_params', {name});				-- add error message
	end
end


--[=[-------------------------&lt; K E R N _ Q U O T E S &gt;--------------------------------------------------------

Apply kerning to open the space between the quote mark provided by the module and a leading or trailing quote
mark contained in a |title= or |chapter= parameter's value.

This function will positive kern either single or double quotes:
	"'Unkerned title with leading and trailing single quote marks'"
	" 'Kerned title with leading and trailing single quote marks' " (in real life the kerning isn't as wide as this example)
Double single quotes (italic or bold wiki-markup) are not kerned.

Replaces Unicode quote marks in plain text or in the label portion of a [[L|D]] style wikilink with typewriter
quote marks regardless of the need for kerning.  Unicode quote marks are not replaced in simple [[D]] wikilinks.

Call this function for chapter titles, for website titles, etc.; not for book titles.

]=]

local function kern_quotes (str)
	local cap = '';
	local wl_type, label, link;

	wl_type, label, link = utilities.is_wikilink (str);							-- wl_type is: 0, no wl (text in label variable); 1, [[D]]; 2, [[L|D]]
	
	if 1 == wl_type then														-- [[D]] simple wikilink with or without quote marks
		if mw.ustring.match (str, '%[%[[\"“”\'‘’].+[\"“”\'‘’]%]%]') then		-- leading and trailing quote marks
			str = utilities.substitute (cfg.presentation['kern-left'], str);
			str = utilities.substitute (cfg.presentation['kern-right'], str);
		elseif mw.ustring.match (str, '%[%[[\"“”\'‘’].+%]%]')	then			-- leading quote marks
			str = utilities.substitute (cfg.presentation['kern-left'], str);
		elseif mw.ustring.match (str, '%[%[.+[\"“”\'‘’]%]%]') then				-- trailing quote marks
			str = utilities.substitute (cfg.presentation['kern-right'], str);
		end

	else																		-- plain text or [[L|D]]; text in label variable
		label = mw.ustring.gsub (label, '[“”]', '\"');							-- replace “” (U+201C &amp; U+201D) with " (typewriter double quote mark)
		label = mw.ustring.gsub (label, '[‘’]', '\'');							-- replace ‘’ (U+2018 &amp; U+2019) with ' (typewriter single quote mark)

		cap = mw.ustring.match (label, "^([\"\'][^\'].+)");						-- match leading double or single quote but not doubled single quotes (italic markup)
		if utilities.is_set (cap) then
			label = utilities.substitute (cfg.presentation['kern-left'], cap);
		end
	
		cap = mw.ustring.match (label, "^(.+[^\'][\"\'])$")						-- match trailing double or single quote but not doubled single quotes (italic markup)
		if utilities.is_set (cap) then
			label = utilities.substitute (cfg.presentation['kern-right'], cap);
		end
		
		if 2 == wl_type then
			str = utilities.make_wikilink (link, label);						-- reassemble the wikilink
		else
			str = label;
		end
	end
	return str;
end


--[[--------------------------&lt; F O R M A T _ S C R I P T _ V A L U E &gt;----------------------------------------

|script-title= holds title parameters that are not written in Latin-based scripts: Chinese, Japanese, Arabic, Hebrew, etc. These scripts should
not be italicized and may be written right-to-left.  The value supplied by |script-title= is concatenated onto Title after Title has been wrapped
in italic markup.

Regardless of language, all values provided by |script-title= are wrapped in &lt;bdi&gt;...&lt;/bdi&gt; tags to isolate RTL languages from the English left to right.

|script-title= provides a unique feature.  The value in |script-title= may be prefixed with a two-character ISO 639-1 language code and a colon:
	|script-title=ja:*** *** (where * represents a Japanese character)
Spaces between the two-character code and the colon and the colon and the first script character are allowed:
	|script-title=ja : *** ***
	|script-title=ja: *** ***
	|script-title=ja :*** ***
Spaces preceding the prefix are allowed: |script-title = ja:*** ***

The prefix is checked for validity.  If it is a valid ISO 639-1 language code, the lang attribute (lang="ja") is added to the &lt;bdi&gt; tag so that browsers can
know the language the tag contains.  This may help the browser render the script more correctly.  If the prefix is invalid, the lang attribute
is not added.  At this time there is no error message for this condition.

Supports |script-title=, |script-chapter=, |script-&lt;periodical&gt;=

]]

local function format_script_value (script_value, script_param)
	local lang='';																-- initialize to empty string
	local name;
	if script_value:match('^%l%l%l?%s*:') then									-- if first 3 or 4 non-space characters are script language prefix
		lang = script_value:match('^(%l%l%l?)%s*:%s*%S.*');						-- get the language prefix or nil if there is no script
		if not utilities.is_set (lang) then
			utilities.set_message ('err_script_parameter', {script_param, cfg.err_msg_supl['missing title part']});		-- prefix without 'title'; add error message
			return '';															-- script_value was just the prefix so return empty string
		end
																				-- if we get this far we have prefix and script
		name = cfg.lang_tag_remap[lang] or mw.language.fetchLanguageName( lang, cfg.this_wiki_code );	-- get language name so that we can use it to categorize
		if utilities.is_set (name) then											-- is prefix a proper ISO 639-1 language code?
			script_value = script_value:gsub ('^%l+%s*:%s*', '');				-- strip prefix from script
																				-- is prefix one of these language codes?
			if utilities.in_array (lang, cfg.script_lang_codes) then
				utilities.add_prop_cat ('script', {name, lang})
			else
				utilities.set_message ('err_script_parameter', {script_param, cfg.err_msg_supl['unknown language code']});	-- unknown script-language; add error message
			end
			lang = ' lang="' .. lang .. '" ';									-- convert prefix into a lang attribute
		else
			utilities.set_message ('err_script_parameter', {script_param, cfg.err_msg_supl['invalid language code']});		-- invalid language code; add error message
			lang = '';															-- invalid so set lang to empty string
		end
	else
		utilities.set_message ('err_script_parameter', {script_param, cfg.err_msg_supl['missing prefix']});				-- no language code prefix; add error message
	end
	script_value = utilities.substitute (cfg.presentation['bdi'], {lang, script_value});	-- isolate in case script is RTL

	return script_value;
end


--[[--------------------------&lt; S C R I P T _ C O N C A T E N A T E &gt;------------------------------------------

Initially for |title= and |script-title=, this function concatenates those two parameter values after the script
value has been wrapped in &lt;bdi&gt; tags.

]]

local function script_concatenate (title, script, script_param)
	if utilities.is_set (script) then
		script = format_script_value (script, script_param);					-- &lt;bdi&gt; tags, lang attribute, categorization, etc.; returns empty string on error
		if utilities.is_set (script) then
			title = title .. ' ' .. script;										-- concatenate title and script title
		end
	end
	return title;
end


--[[--------------------------&lt; W R A P _ M S G &gt;--------------------------------------------------------------

Applies additional message text to various parameter values. Supplied string is wrapped using a message_list
configuration taking one argument.  Supports lower case text for {{citation}} templates.  Additional text taken
from citation_config.messages - the reason this function is similar to but separate from wrap_style().

]]

local function wrap_msg (key, str, lower)
	if not utilities.is_set ( str ) then
		return "";
	end
	if true == lower then
		local msg;
		msg = cfg.messages[key]:lower();										-- set the message to lower case before 
		return utilities.substitute ( msg, str );								-- including template text
	else
		return utilities.substitute ( cfg.messages[key], str );
	end		
end


--[[----------------&lt; W I K I S O U R C E _ U R L _ M A K E &gt;-------------------

Makes a Wikisource URL from Wikisource interwiki-link.  Returns the URL and appropriate
label; nil else.

str is the value assigned to |chapter= (or aliases) or |title= or |title-link=

]]

local function wikisource_url_make (str)
	local wl_type, D, L;
	local ws_url, ws_label;
	local wikisource_prefix = table.concat ({'https://', cfg.this_wiki_code, '.wikisource.org/wiki/'});

	wl_type, D, L = utilities.is_wikilink (str);								-- wl_type is 0 (not a wikilink), 1 (simple wikilink), 2 (complex wikilink)

	if 0 == wl_type then														-- not a wikilink; might be from |title-link=
		str = D:match ('^[Ww]ikisource:(.+)') or D:match ('^[Ss]:(.+)');		-- article title from interwiki link with long-form or short-form namespace
		if utilities.is_set (str) then
			ws_url = table.concat ({											-- build a Wikisource URL
				wikisource_prefix,												-- prefix
				str,															-- article title
				});
			ws_label = str;														-- label for the URL
		end
	elseif 1 == wl_type then													-- simple wikilink: [[Wikisource:ws article]]
		str = D:match ('^[Ww]ikisource:(.+)') or D:match ('^[Ss]:(.+)');		-- article title from interwiki link with long-form or short-form namespace
		if utilities.is_set (str) then
			ws_url = table.concat ({											-- build a Wikisource URL
				wikisource_prefix,												-- prefix
				str,															-- article title
				});
			ws_label = str;														-- label for the URL
		end
	elseif 2 == wl_type then													-- non-so-simple wikilink: [[Wikisource:ws article|displayed text]] ([[L|D]])
		str = L:match ('^[Ww]ikisource:(.+)') or L:match ('^[Ss]:(.+)');		-- article title from interwiki link with long-form or short-form namespace
		if utilities.is_set (str) then
			ws_label = D;														-- get ws article name from display portion of interwiki link
			ws_url = table.concat ({											-- build a Wikisource URL
				wikisource_prefix,												-- prefix
				str,															-- article title without namespace from link portion of wikilink
				});
		end
	end

	if ws_url then
		ws_url = mw.uri.encode (ws_url, 'WIKI');								-- make a usable URL
		ws_url = ws_url:gsub ('%%23', '#');										-- undo percent-encoding of fragment marker
	end

	return ws_url, ws_label, L or D;											-- return proper URL or nil and a label or nil
end


--[[----------------&lt; F O R M A T _ P E R I O D I C A L &gt;-----------------------

Format the three periodical parameters: |script-&lt;periodical&gt;=, |&lt;periodical&gt;=,
and |trans-&lt;periodical&gt;= into a single Periodical meta-parameter.

]]

local function format_periodical (script_periodical, script_periodical_source, periodical, trans_periodical)

	if not utilities.is_set (periodical) then
		periodical = '';														-- to be safe for concatenation
	else
		periodical = utilities.wrap_style ('italic-title', periodical);			-- style 
	end

	periodical = script_concatenate (periodical, script_periodical, script_periodical_source);	-- &lt;bdi&gt; tags, lang attribute, categorization, etc.; must be done after title is wrapped

	if utilities.is_set (trans_periodical) then
		trans_periodical = utilities.wrap_style ('trans-italic-title', trans_periodical);
		if utilities.is_set (periodical) then
			periodical = periodical .. ' ' .. trans_periodical;
		else																	-- here when trans-periodical without periodical or script-periodical
			periodical = trans_periodical;
			utilities.set_message ('err_trans_missing_title', {'periodical'});
		end
	end

	return periodical;
end


--[[------------------&lt; F O R M A T _ C H A P T E R _ T I T L E &gt;---------------

Format the four chapter parameters: |script-chapter=, |chapter=, |trans-chapter=,
and |chapter-url= into a single chapter meta- parameter (chapter_url_source used
for error messages).

]]

local function format_chapter_title (script_chapter, script_chapter_source, chapter, chapter_source, trans_chapter, trans_chapter_source, chapter_url, chapter_url_source, no_quotes, access)
	local ws_url, ws_label, L = wikisource_url_make (chapter);					-- make a wikisource URL and label from a wikisource interwiki link
	if ws_url then
		ws_label = ws_label:gsub ('_', ' ');									-- replace underscore separators with space characters
		chapter = ws_label;
	end

	if not utilities.is_set (chapter) then
		chapter = '';															-- to be safe for concatenation
	else
		if false == no_quotes then
			chapter = kern_quotes (chapter);									-- if necessary, separate chapter title's leading and trailing quote marks from module provided quote marks
			chapter = utilities.wrap_style ('quoted-title', chapter);
		end
	end

	chapter = script_concatenate (chapter, script_chapter, script_chapter_source);	-- &lt;bdi&gt; tags, lang attribute, categorization, etc.; must be done after title is wrapped

	if utilities.is_set (chapter_url) then
		chapter = external_link (chapter_url, chapter, chapter_url_source, access);	-- adds bare_url_missing_title error if appropriate
	elseif ws_url then
		chapter = external_link (ws_url, chapter .. '&amp;nbsp;', 'ws link in chapter');	-- adds bare_url_missing_title error if appropriate; space char to move icon away from chap text; TODO: better way to do this?
		chapter = utilities.substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, chapter});				
	end

	if utilities.is_set (trans_chapter) then
		trans_chapter = utilities.wrap_style ('trans-quoted-title', trans_chapter);
		if utilities.is_set (chapter) then
			chapter = chapter .. ' ' .. trans_chapter;
		else																	-- here when trans_chapter without chapter or script-chapter
			chapter = trans_chapter;
			chapter_source = trans_chapter_source:match ('trans%-?(.+)');		-- when no chapter, get matching name from trans-&lt;param&gt;
			utilities.set_message ('err_trans_missing_title', {chapter_source});
		end
	end

	return chapter;
end


--[[----------------&lt; H A S _ I N V I S I B L E _ C H A R S &gt;-------------------

This function searches a parameter's value for non-printable or invisible characters.
The search stops at the first match.

This function will detect the visible replacement character when it is part of the Wikisource.

Detects but ignores nowiki and math stripmarkers.  Also detects other named stripmarkers
(gallery, math, pre, ref) and identifies them with a slightly different error message.
See also coins_cleanup().

Output of this function is an error message that identifies the character or the
Unicode group, or the stripmarker that was detected along with its position (or,
for multi-byte characters, the position of its first byte) in the parameter value.

]]

local function has_invisible_chars (param, v)
	local position = '';														-- position of invisible char or starting position of stripmarker
	local capture;																-- used by stripmarker detection to hold name of the stripmarker
	local stripmarker;															-- boolean set true when a stripmarker is found

	capture = string.match (v, '[%w%p ]*');										-- test for values that are simple ASCII text and bypass other tests if true
	if capture == v then														-- if same there are no Unicode characters
		return;
	end

	for _, invisible_char in ipairs (cfg.invisible_chars) do
		local char_name = invisible_char[1];									-- the character or group name
		local pattern = invisible_char[2];										-- the pattern used to find it
		position, _, capture = mw.ustring.find (v, pattern);					-- see if the parameter value contains characters that match the pattern
		
		if position and (cfg.invisible_defs.zwj == capture) then				-- if we found a zero-width joiner character
			if mw.ustring.find (v, cfg.indic_script) then						-- it's ok if one of the Indic scripts
				position = nil;													-- unset position
			elseif cfg.emoji_t[mw.ustring.codepoint (v, position+1)] then			-- is zwj followed by a character listed in emoji{}?
				position = nil;													-- unset position
			end
		end
		
		if position then
			if 'nowiki' == capture or 'math' == capture or						-- nowiki and math stripmarkers (not an error condition)
				('templatestyles' == capture and utilities.in_array (param, {'id', 'quote'})) then	-- templatestyles stripmarker allowed in these parameters
					stripmarker = true;											-- set a flag
			elseif true == stripmarker and cfg.invisible_defs.del == capture then	-- because stripmakers begin and end with the delete char, assume that we've found one end of a stripmarker
				position = nil;													-- unset
			else
				local err_msg;
				if capture and not (cfg.invisible_defs.del == capture or cfg.invisible_defs.zwj == capture) then
					err_msg = capture .. ' ' .. char_name;
				else
					err_msg = char_name .. ' ' .. 'character';
				end

				utilities.set_message ('err_invisible_char', {err_msg, utilities.wrap_style ('parameter', param), position});	-- add error message
				return;															-- and done with this parameter
			end
		end
	end
end


--[[-------------------&lt; A R G U M E N T _ W R A P P E R &gt;----------------------

Argument wrapper.  This function provides support for argument mapping defined
in the configuration file so that multiple names can be transparently aliased to
single internal variable.

]]

local function argument_wrapper ( args )
	local origin = {};
	
	return setmetatable({
		ORIGIN = function ( self, k )
			local dummy = self[k];												-- force the variable to be loaded.
			return origin[k];
		end
	},
	{
		__index = function ( tbl, k )
			if origin[k] ~= nil then
				return nil;
			end
			
			local args, list, v = args, cfg.aliases[k];
			
			if type( list ) == 'table' then
				v, origin[k] = utilities.select_one ( args, list, 'err_redundant_parameters' );
				if origin[k] == nil then
					origin[k] = '';												-- Empty string, not nil
				end
			elseif list ~= nil then
				v, origin[k] = args[list], list;
			else
				-- maybe let through instead of raising an error?
				-- v, origin[k] = args[k], k;
				error( cfg.messages['unknown_argument_map'] .. ': ' .. k);
			end
			
			-- Empty strings, not nil;
			if v == nil then
				v = '';
				origin[k] = '';
			end
			
			tbl = rawset( tbl, k, v );
			return v;
		end,
	});
end


--[[--------------------------&lt; N O W R A P _ D A T E &gt;-------------------------

When date is YYYY-MM-DD format wrap in nowrap span: &lt;span ...&gt;YYYY-MM-DD&lt;/span&gt;.
When date is DD MMMM YYYY or is MMMM DD, YYYY then wrap in nowrap span:
&lt;span ...&gt;DD MMMM&lt;/span&gt; YYYY or &lt;span ...&gt;MMMM DD,&lt;/span&gt; YYYY

DOES NOT yet support MMMM YYYY or any of the date ranges.

]]

local function nowrap_date (date)
	local cap = '';
	local cap2 = '';

	if date:match("^%d%d%d%d%-%d%d%-%d%d$") then
		date = utilities.substitute (cfg.presentation['nowrap1'], date);
	
	elseif date:match("^%a+%s*%d%d?,%s+%d%d%d%d$") or date:match ("^%d%d?%s*%a+%s+%d%d%d%d$") then
		cap, cap2 = string.match (date, "^(.*)%s+(%d%d%d%d)$");
		date = utilities.substitute (cfg.presentation['nowrap2'], {cap, cap2});
	end
	
	return date;
end


--[[--------------------------&lt; S E T _ T I T L E T Y P E &gt;---------------------

This function sets default title types (equivalent to the citation including
|type=&lt;default value&gt;) for those templates that have defaults. Also handles the
special case where it is desirable to omit the title type from the rendered citation
(|type=none).

]]

local function set_titletype (cite_class, title_type)
	if utilities.is_set (title_type) then
		if 'none' == cfg.keywords_xlate[title_type] then
			title_type = '';													-- if |type=none then type parameter not displayed
		end
		return title_type;														-- if |type= has been set to any other value use that value
	end

	return cfg.title_types [cite_class] or '';									-- set template's default title type; else empty string for concatenation
end


--[[--------------------------&lt; S A F E _ J O I N &gt;-----------------------------

Joins a sequence of strings together while checking for duplicate separation characters.

]]

local function safe_join( tbl, duplicate_char )
	local f = {};																-- create a function table appropriate to type of 'duplicate character'
		if 1 == #duplicate_char then											-- for single byte ASCII characters use the string library functions
			f.gsub = string.gsub
			f.match = string.match
			f.sub = string.sub
		else																	-- for multi-byte characters use the ustring library functions
			f.gsub = mw.ustring.gsub
			f.match = mw.ustring.match
			f.sub = mw.ustring.sub
		end

	local str = '';																-- the output string
	local comp = '';															-- what does 'comp' mean?
	local end_chr = '';
	local trim;
	for _, value in ipairs( tbl ) do
		if value == nil then value = ''; end
		
		if str == '' then														-- if output string is empty
			str = value;														-- assign value to it (first time through the loop)
		elseif value ~= '' then
			if value:sub(1, 1) == '&lt;' then										-- special case of values enclosed in spans and other markup.
				comp = value:gsub( "%b&lt;&gt;", "" );								-- remove HTML markup (&lt;span&gt;string&lt;/span&gt; -&gt; string)
			else
				comp = value;
			end
																				-- typically duplicate_char is sepc
			if f.sub(comp, 1, 1) == duplicate_char then							-- is first character same as duplicate_char? why test first character?
																				--   Because individual string segments often (always?) begin with terminal punct for the
																				--   preceding segment: 'First element' .. 'sepc next element' .. etc.?
				trim = false;
				end_chr = f.sub(str, -1, -1);									-- get the last character of the output string
				-- str = str .. "&lt;HERE(enchr=" .. end_chr .. ")"				-- debug stuff?
				if end_chr == duplicate_char then								-- if same as separator
					str = f.sub(str, 1, -2);									-- remove it
				elseif end_chr == "'" then										-- if it might be wiki-markup
					if f.sub(str, -3, -1) == duplicate_char .. "''" then		-- if last three chars of str are sepc'' 
						str = f.sub(str, 1, -4) .. "''";						-- remove them and add back ''
					elseif  f.sub(str, -5, -1) == duplicate_char .. "]]''" then	-- if last five chars of str are sepc]]'' 
						trim = true;											-- why? why do this and next differently from previous?
					elseif f.sub(str, -4, -1) == duplicate_char .. "]''" then	-- if last four chars of str are sepc]'' 
						trim = true;											-- same question
					end
				elseif end_chr == "]" then										-- if it might be wiki-markup
					if f.sub(str, -3, -1) == duplicate_char .. "]]" then		-- if last three chars of str are sepc]] wikilink 
						trim = true;
					elseif f.sub(str, -3, -1) == duplicate_char .. '"]' then	-- if last three chars of str are sepc"] quoted external link 
						trim = true;
					elseif  f.sub(str, -2, -1) == duplicate_char .. "]" then	-- if last two chars of str are sepc] external link
						trim = true;
					elseif f.sub(str, -4, -1) == duplicate_char .. "'']" then	-- normal case when |url=something &amp; |title=Title.
						trim = true;
					end
				elseif end_chr == " " then										-- if last char of output string is a space
					if f.sub(str, -2, -1) == duplicate_char .. " " then			-- if last two chars of str are &lt;sepc&gt;&lt;space&gt;
						str = f.sub(str, 1, -3);								-- remove them both
					end
				end

				if trim then
					if value ~= comp then 										-- value does not equal comp when value contains HTML markup
						local dup2 = duplicate_char;
						if f.match(dup2, "%A" ) then dup2 = "%" .. dup2; end	-- if duplicate_char not a letter then escape it
						
						value = f.gsub(value, "(%b&lt;&gt;)" .. dup2, "%1", 1 )		-- remove duplicate_char if it follows HTML markup
					else
						value = f.sub(value, 2, -1 );							-- remove duplicate_char when it is first character
					end
				end
			end
			str = str .. value; 												-- add it to the output string
		end
	end
	return str;
end


--[[--------------------------&lt; I S _ S U F F I X &gt;-----------------------------

returns true if suffix is properly formed Jr, Sr, or ordinal in the range 1–9.
Puncutation not allowed.

]]

local function is_suffix (suffix)
	if utilities.in_array (suffix, {'Jr', 'Sr', 'Jnr', 'Snr', '1st', '2nd', '3rd'}) or suffix:match ('^%dth$') then
		return true;
	end
	return false;
end


--[[--------------------&lt; I S _ G O O D _ V A N C _ N A M E &gt;-------------------

For Vancouver style, author/editor names are supposed to be rendered in Latin
(read ASCII) characters.  When a name uses characters that contain diacritical
marks, those characters are to be converted to the corresponding Latin
character. When a name is written using a non-Latin alphabet or logogram, that
name is to be transliterated into Latin characters. The module doesn't do this
so editors may/must.

This test allows |first= and |last= names to contain any of the letters defined
in the four Unicode Latin character sets
	[http://www.unicode.org/charts/PDF/U0000.pdf C0 Controls and Basic Latin] 0041–005A, 0061–007A
	[http://www.unicode.org/charts/PDF/U0080.pdf C1 Controls and Latin-1 Supplement] 00C0–00D6, 00D8–00F6, 00F8–00FF
	[http://www.unicode.org/charts/PDF/U0100.pdf Latin Extended-A] 0100–017F
	[http://www.unicode.org/charts/PDF/U0180.pdf Latin Extended-B] 0180–01BF, 01C4–024F

|lastn= also allowed to contain hyphens, spaces, and apostrophes.
	(http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35029/)
|firstn= also allowed to contain hyphens, spaces, apostrophes, and periods

This original test:
	if nil == mw.ustring.find (last, "^[A-Za-zÀ-ÖØ-öø-ƿǄ-ɏ%-%s%']*$")
	or nil == mw.ustring.find (first, "^[A-Za-zÀ-ÖØ-öø-ƿǄ-ɏ%-%s%'%.]+[2-6%a]*$") then
was written outside of the code editor and pasted here because the code editor
gets confused between character insertion point and cursor position. The test has
been rewritten to use decimal character escape sequence for the individual bytes
of the Unicode characters so that it is not necessary to use an external editor
to maintain this code.

	\195\128-\195\150 – À-Ö (U+00C0–U+00D6 – C0 controls)
	\195\152-\195\182 – Ø-ö (U+00D8-U+00F6 – C0 controls)
	\195\184-\198\191 – ø-ƿ (U+00F8-U+01BF – C0 controls, Latin extended A &amp; B)
	\199\132-\201\143 – Ǆ-ɏ (U+01C4-U+024F – Latin extended B)

]]

local function is_good_vanc_name (last, first, suffix, position)
	if not suffix then
		if first:find ('[,%s]') then											-- when there is a space or comma, might be first name/initials + generational suffix
			first = first:match ('(.-)[,%s]+');									-- get name/initials
			suffix = first:match ('[,%s]+(.+)$');								-- get generational suffix
		end
	end
	if utilities.is_set (suffix) then
		if not is_suffix (suffix) then
			add_vanc_error (cfg.err_msg_supl.suffix, position);
			return false;														-- not a name with an appropriate suffix
		end
	end
	if nil == mw.ustring.find (last, "^[A-Za-z\195\128-\195\150\195\152-\195\182\195\184-\198\191\199\132-\201\143\225\184\128-\225\187\191%-%s%']*$") or
		nil == mw.ustring.find (first, "^[A-Za-z\195\128-\195\150\195\152-\195\182\195\184-\198\191\199\132-\201\143\225\184\128-\225\187\191%-%s%'%.]*$") then
			add_vanc_error (cfg.err_msg_supl['non-Latin char'], position);
			return false;														-- not a string of Latin characters; Vancouver requires Romanization
	end;
	return true;
end


--[[--------------------------&lt; R E D U C E _ T O _ I N I T I A L S &gt;------------------------------------------

Attempts to convert names to initials in support of |name-list-style=vanc.  

Names in |firstn= may be separated by spaces or hyphens, or for initials, a period.
See http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35062/.

Vancouver style requires family rank designations (Jr, II, III, etc.) to be rendered
as Jr, 2nd, 3rd, etc.  See http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35085/.
This code only accepts and understands generational suffix in the Vancouver format
because Roman numerals look like, and can be mistaken for, initials.

This function uses ustring functions because firstname initials may be any of the
Unicode Latin characters accepted by is_good_vanc_name ().

]]

local function reduce_to_initials (first, position)
	if first:find (',', 1, true) then
		return first;															-- commas not allowed; abandon
	end

	local name, suffix = mw.ustring.match (first, "^(%u+) ([%dJS][%drndth]+)$");

	if not name then															-- if not initials and a suffix
		name = mw.ustring.match (first, "^(%u+)$");								-- is it just initials?
	end

	if name then																-- if first is initials with or without suffix
		if 3 &gt; mw.ustring.len (name) then										-- if one or two initials
			if suffix then														-- if there is a suffix
				if is_suffix (suffix) then										-- is it legitimate?
					return first;												-- one or two initials and a valid suffix so nothing to do
				else
					add_vanc_error (cfg.err_msg_supl.suffix, position);			-- one or two initials with invalid suffix so error message
					return first;												-- and return first unmolested
				end
			else
				return first;													-- one or two initials without suffix; nothing to do
			end
		end
	end																			-- if here then name has 3 or more uppercase letters so treat them as a word

	local initials_t, names_t = {}, {};											-- tables to hold name parts and initials
	local i = 1;																-- counter for number of initials

	names_t = mw.text.split (first, '[%s%-]+');									-- split into a sequence of names and possible suffix

	while names_t[i] do															-- loop through the sequence
		if 1 &lt; i and names_t[i]:match ('[%dJS][%drndth]+%.?$') then				-- if not the first name, and looks like a suffix (may have trailing dot)
			names_t[i] = names_t[i]:gsub ('%.', '');							-- remove terminal dot if present
			if is_suffix (names_t[i]) then										-- if a legitimate suffix
				table.insert (initials_t, ' ' .. names_t[i]);					-- add a separator space, insert at end of initials sequence
				break;															-- and done because suffix must fall at the end of a name
			end																	-- no error message if not a suffix; possibly because of Romanization
		end
		if 3 &gt; i then
			table.insert (initials_t, mw.ustring.sub (names_t[i], 1, 1));		-- insert the initial at end of initials sequence
		end
		i = i + 1;																-- bump the counter
	end
			
	return table.concat (initials_t);											-- Vancouver format does not include spaces.
end


--[[--------------------------&lt; I N T E R W I K I _ P R E F I X E N _ G E T &gt;----------------------------------

extract interwiki prefixen from &lt;value&gt;.  Returns two one or two values:
	false – no prefixen
	nil – prefix exists but not recognized
	project prefix, language prefix – when value has either of:
		:&lt;project&gt;:&lt;language&gt;:&lt;article&gt;
		:&lt;language&gt;:&lt;project&gt;:&lt;article&gt;
	project prefix, nil – when &lt;value&gt; has only a known single-letter prefix
	nil, language prefix – when &lt;value&gt; has only a known language prefix

accepts single-letter project prefixen: 'd' (wikidata), 's' (wikisource), and 'w' (wikipedia) prefixes; at this
writing, the other single-letter prefixen (b (wikibook), c (commons), m (meta), n (wikinews), q (wikiquote), and
v (wikiversity)) are not supported.

]]

local function interwiki_prefixen_get (value, is_link)
	if not value:find (':%l+:') then											-- if no prefix
		return false;															-- abandon; boolean here to distinguish from nil fail returns later
	end

	local prefix_patterns_linked_t = {											-- sequence of valid interwiki and inter project prefixen
		'^%[%[:([dsw]):(%l%l+):',												-- wikilinked; project and language prefixes
		'^%[%[:(%l%l+):([dsw]):',												-- wikilinked; language and project prefixes
		'^%[%[:([dsw]):',														-- wikilinked; project prefix
		'^%[%[:(%l%l+):',														-- wikilinked; language prefix
		}
		
	local prefix_patterns_unlinked_t = {										-- sequence of valid interwiki and inter project prefixen
		'^:([dsw]):(%l%l+):',													-- project and language prefixes
		'^:(%l%l+):([dsw]):',													-- language and project prefixes
		'^:([dsw]):',															-- project prefix
		'^:(%l%l+):',															-- language prefix
		}
	
	local cap1, cap2;
	for _, pattern in ipairs ((is_link and prefix_patterns_linked_t) or prefix_patterns_unlinked_t) do
		cap1, cap2 = value:match (pattern);
		if cap1 then
			break;																-- found a match so stop looking
		end
	end
	
	if cap1 and cap2 then														-- when both then :project:language: or :language:project: (both forms allowed)
		if 1 == #cap1 then														-- length == 1 then :project:language:
			if cfg.inter_wiki_map[cap2] then									-- is language prefix in the interwiki map?
				return cap1, cap2;												-- return interwiki project and interwiki language
			end
		else																	-- here when :language:project:
			if cfg.inter_wiki_map[cap1] then									-- is language prefix in the interwiki map?
				return cap2, cap1;												-- return interwiki project and interwiki language
			end
		end
		return nil;																-- unknown interwiki language
	elseif not (cap1 or cap2) then												-- both are nil?
		return nil;																-- we got something that looks like a project prefix but isn't; return fail
	elseif 1 == #cap1 then														-- here when one capture
		return cap1, nil;														-- length is 1 so return project, nil language
	else																		-- here when one capture and its length it more than 1
		if cfg.inter_wiki_map[cap1] then										-- is language prefix in the interwiki map?
			return nil, cap1;													-- return nil project, language
		end
	end
end


--[[--------------------------&lt; L I S T _ P E O P L E &gt;--------------------------

Formats a list of people (authors, contributors, editors, interviewers, translators) 

names in the list will be linked when
	|&lt;name&gt;-link= has a value
	|&lt;name&gt;-mask- does NOT have a value; masked names are presumed to have been
		rendered previously so should have been linked there

when |&lt;name&gt;-mask=0, the associated name is not rendered

]]

local function list_people (control, people, etal)
	local sep;
	local namesep;
	local format = control.format;
	local maximum = control.maximum;
	local name_list = {};

	if 'vanc' == format then													-- Vancouver-like name styling?
		sep = cfg.presentation['sep_nl_vanc'];									-- name-list separator between names is a comma
		namesep = cfg.presentation['sep_name_vanc'];							-- last/first separator is a space
	else
		sep = cfg.presentation['sep_nl'];										-- name-list separator between names is a semicolon
		namesep = cfg.presentation['sep_name'];									-- last/first separator is &lt;comma&gt;&lt;space&gt;
	end
	
	if sep:sub (-1, -1) ~= " " then sep = sep .. " " end
	if utilities.is_set (maximum) and maximum &lt; 1 then return "", 0; end		-- returned 0 is for EditorCount; not used for other names
	
	for i, person in ipairs (people) do
		if utilities.is_set (person.last) then
			local mask = person.mask;
			local one;
			local sep_one = sep;

			if utilities.is_set (maximum) and i &gt; maximum then
				etal = true;
				break;
			end
			
			if mask then
				local n = tonumber (mask);										-- convert to a number if it can be converted; nil else
				if n then
					one = 0 ~= n and string.rep("&amp;mdash;", n) or nil;			-- make a string of (n &gt; 0) mdashes, nil else, to replace name
					person.link = nil;											-- don't create link to name if name is replaces with mdash string or has been set nil
				else
					one = mask;													-- replace name with mask text (must include name-list separator)
					sep_one = " ";												-- modify name-list separator
				end
			else
				one = person.last;												-- get surname
				local first = person.first										-- get given name
				if utilities.is_set (first) then
					if ("vanc" == format) then									-- if Vancouver format
						one = one:gsub ('%.', '');								-- remove periods from surnames (http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35029/)
						if not person.corporate and is_good_vanc_name (one, first, nil, i) then		-- and name is all Latin characters; corporate authors not tested
							first = reduce_to_initials (first, i);				-- attempt to convert first name(s) to initials
						end
					end
					one = one .. namesep .. first;
				end
			end
			if utilities.is_set (person.link) then
				one = utilities.make_wikilink (person.link, one);				-- link author/editor
			end

			if one then															-- if &lt;one&gt; has a value (name, mdash replacement, or mask text replacement)
				local proj, tag = interwiki_prefixen_get (one, true);			-- get the interwiki prefixen if present

				if 'w' == proj and ('Wikipedia' == mw.site.namespaces.Project['name']) then
					proj = nil;													-- for stuff like :w:de:&lt;article&gt;, :w is unnecessary TODO: maint cat?
				end
				if proj then
					proj = ({['d'] = 'Wikidata', ['s'] = 'Wikisource', ['w'] = 'Wikipedia'})[proj];	-- :w (wikipedia) for linking from a non-wikipedia project
					if proj then 
						one = one .. utilities.wrap_style ('interproj', proj);	-- add resized leading space, brackets, static text, language name
						tag = nil;												-- unset; don't do both project and language
					end
				end
				if tag == cfg.this_wiki_code then
					tag = nil;													-- stuff like :en:&lt;article&gt; at en.wiki is pointless TODO: maint cat?
				end
				if tag then
					local lang = cfg.lang_tag_remap[tag] or cfg.mw_languages_by_tag_t[tag];
					if lang then												-- error messaging done in extract_names() where we know parameter names
						one = one .. utilities.wrap_style ('interwiki', lang);	-- add resized leading space, brackets, static text, language name
					end
				end

				table.insert (name_list, one);									-- add it to the list of names
				table.insert (name_list, sep_one);								-- add the proper name-list separator
			end
		end
	end

	local count = #name_list / 2;												-- (number of names + number of separators) divided by 2
	if 0 &lt; count then 
		if 1 &lt; count and not etal then
			if 'amp' == format then
				name_list[#name_list-2] = " &amp; ";								-- replace last separator with ampersand text
			elseif 'and' == format then
				if 2 == count then
					name_list[#name_list-2] = cfg.presentation.sep_nl_and;		-- replace last separator with 'and' text
				else
					name_list[#name_list-2] = cfg.presentation.sep_nl_end;		-- replace last separator with '(sep) and' text
				end
			end
		end
		name_list[#name_list] = nil;											-- erase the last separator
	end

	local result = table.concat (name_list);									-- construct list
	if etal and utilities.is_set (result) then									-- etal may be set by |display-authors=etal but we might not have a last-first list
		result = result .. sep .. cfg.messages['et al'];						-- we've got a last-first list and etal so add et al.
	end
	
	return result, count;														-- return name-list string and count of number of names (count used for editor names only)
end


--[[--------------------&lt; M A K E _ C I T E R E F _ I D &gt;-----------------------

Generates a CITEREF anchor ID if we have at least one name or a date.  Otherwise
returns an empty string.

namelist is one of the contributor-, author-, or editor-name lists chosen in that
order.  year is Year or anchor_year.

]]

local function make_citeref_id (namelist, year)
	local names={};							-- a table for the one to four names and year
	for i,v in ipairs (namelist) do			-- loop through the list and take up to the first four last names
		names[i] = v.last
		if i == 4 then break end			-- if four then done
	end
	table.insert (names, year);				-- add the year at the end
	local id = table.concat(names);			-- concatenate names and year for CITEREF id
	if utilities.is_set (id) then			-- if concatenation is not an empty string
		return "CITEREF" .. id;				-- add the CITEREF portion
	else
		return '';							-- return an empty string; no reason to include CITEREF id in this citation
	end
end


--[[--------------------------&lt; C I T E _ C L A S S _A T T R I B U T E _M A K E &gt;------------------------------

construct &lt;cite&gt; tag class attribute for this citation.

&lt;cite_class&gt; – config.CitationClass from calling template
&lt;mode&gt; – value from |mode= parameter

]]

local function cite_class_attribute_make (cite_class, mode)
	local class_t = {};
	table.insert (class_t, 'citation');											-- required for blue highlight
	if 'citation' ~= cite_class then
		table.insert (class_t, cite_class);										-- identify this template for user css
		table.insert (class_t, utilities.is_set (mode) and mode or 'cs1');		-- identify the citation style for user css or javascript
	else
		table.insert (class_t, utilities.is_set (mode) and mode or 'cs2');		-- identify the citation style for user css or javascript
	end
	for _, prop_key in ipairs (z.prop_keys_t) do
		table.insert (class_t, prop_key);										-- identify various properties for user css or javascript
	end

	return table.concat (class_t, ' ');											-- make a big string and done
end


--[[---------------------&lt; N A M E _ H A S _ E T A L &gt;--------------------------

Evaluates the content of name parameters (author, editor, etc.) for variations on
the theme of et al.  If found, the et al. is removed, a flag is set to true and
the function returns the modified name and the flag.

This function never sets the flag to false but returns its previous state because
it may have been set by previous passes through this function or by the associated
|display-&lt;names&gt;=etal parameter

]]

local function name_has_etal (name, etal, nocat, param)

	if utilities.is_set (name) then												-- name can be nil in which case just return
		local patterns = cfg.et_al_patterns; 									-- get patterns from configuration
		
		for _, pattern in ipairs (patterns) do									-- loop through all of the patterns
			if name:match (pattern) then										-- if this 'et al' pattern is found in name
				name = name:gsub (pattern, '');									-- remove the offending text
				etal = true;													-- set flag (may have been set previously here or by |display-&lt;names&gt;=etal)
				if not nocat then												-- no categorization for |vauthors=
					utilities.set_message ('err_etal', {param});				-- and set an error if not added
				end
			end
		end
	end

	return name, etal;
end


--[[---------------------&lt; N A M E _ I S _ N U M E R I C &gt;----------------------

Add an error message and category when &lt;name&gt; parameter value does not contain letters.  

Add a maintenance category when &lt;name&gt; parameter value has numeric characters mixed with characters that are 
not numeric characters; could be letters and/or punctuation characters.

This function will only emit one error and one maint message for the current template.  Does not emit both error
and maint messages/categories for the same parameter value.

returns nothing

]]

local function name_is_numeric (name, name_alias, list_name)
	local patterns = {
		'^%D+%d',																-- &lt;name&gt; must have digits preceded by other characters
		'^%D*%d+%D+',															-- &lt;name&gt; must have digits followed by other characters
		}

	if not added_numeric_name_errs and mw.ustring.match (name, '^[%A]+$') then	-- if we have not already set an error message and &lt;name&gt; does not have any alpha characters
		utilities.set_message ('err_numeric_names', name_alias);				-- add an error message
		added_numeric_name_errs = true;											-- set the flag so we emit only one error message
		return;																	-- when here no point in further testing; abandon
	end

	if not added_numeric_name_maint then										-- if we have already set a maint message
		for _, pattern in ipairs (patterns) do									-- spin through list of patterns
			if mw.ustring.match (name, pattern) then							-- digits preceded or followed by anything but digits; %D+ includes punctuation
				utilities.set_message ('maint_numeric_names', cfg.special_case_translation [list_name]);	-- add a maint cat for this template
				added_numeric_name_maint = true;								-- set the flag so we emit only one maint message
				return;															-- when here no point in further testing; abandon
			end
		end
	end
end


--[[-----------------&lt; N A M E _ H A S _ M U L T _ N A M E S &gt;------------------

Evaluates the content of last/surname (authors etc.) parameters for multiple names.
Multiple names are indicated if there is more than one comma or any "unescaped"
semicolons. Escaped semicolons are ones used as part of selected HTML entities.
If the condition is met, the function adds the multiple name maintenance category.

Same test for first except that commas should not appear in given names (MOS:JR says
that the generational suffix does not take a separator character).  Titles, degrees,
postnominals, affiliations, all normally comma separated don't belong in a citation.

&lt;name&gt; – name parameter value
&lt;list_name&gt; – AuthorList, EditorList, etc
&lt;limit&gt; – number of allowed commas; 1 (default) for surnames; 0 for given names

returns nothing

]]

local function name_has_mult_names (name, list_name, limit)
	local _, commas, semicolons, nbsps;
	limit = limit and limit or 1;
	if utilities.is_set (name) then
		_, commas = name:gsub (',', '');										-- count the number of commas
		_, semicolons = name:gsub (';', '');									-- count the number of semicolons
		-- nbsps probably should be its own separate count rather than merged in
		-- some way with semicolons because Lua patterns do not support the
		-- grouping operator that regex does, which means there is no way to add
		-- more entities to escape except by adding more counts with the new
		-- entities
		_, nbsps = name:gsub ('&amp;nbsp;','');										-- count nbsps
		
		-- There is exactly 1 semicolon per &amp;nbsp; entity, so subtract nbsps
		-- from semicolons to 'escape' them. If additional entities are added,
		-- they also can be subtracted.
		if limit &lt; commas or 0 &lt; (semicolons - nbsps) then
			utilities.set_message ('maint_mult_names', cfg.special_case_translation [list_name]);	-- add a maint message
		end
	end
end


--[=[-------------------------&lt; I S _ G E N E R I C &gt;----------------------------------------------------------

Compares values assigned to various parameters according to the string provided as &lt;item&gt; in the function call.
&lt;item&gt; can have on of two values:
	'generic_names' – for name-holding parameters: |last=, |first=, |editor-last=, etc
	'generic_titles' – for |title=

There are two types of generic tests.  The 'accept' tests look for a pattern that should not be rejected by the
'reject' test.  For example,
	|author=[[John Smith (author)|Smith, John]]
would be rejected by the 'author' reject test.  But piped wikilinks with 'author' disambiguation should not be
rejected so the 'accept' test prevents that from happening.  Accept tests are always performed before reject
tests.

Each of the 'accept' and 'reject' sequence tables hold tables for en.wiki (['en']) and local.wiki (['local'])
that each can hold a test sequence table  The sequence table holds, at index [1], a test pattern, and, at index
[2], a boolean control value.  The control value tells string.find() or mw.ustring.find() to do plain-text search (true)
or a pattern search (false).  The intent of all this complexity is to make these searches as fast as possible so
that we don't run out of processing time on very large articles.

Returns
	true when a reject test finds the pattern or string
	false when an accept test finds the pattern or string
	nil else

]=]

local function is_generic (item, value, wiki)
	local test_val;
	local str_lower = {															-- use string.lower() for en.wiki (['en']) and use mw.ustring.lower() or local.wiki (['local'])
		['en'] = string.lower,
		['local'] = mw.ustring.lower,
		}
	local str_find = {															-- use string.find() for en.wiki (['en']) and use mw.ustring.find() or local.wiki (['local'])
		['en'] = string.find,
		['local'] = mw.ustring.find,
		}

	local function test (val, test_t, wiki)										-- local function to do the testing; &lt;wiki&gt; selects lower() and find() functions
		val = test_t[2] and str_lower[wiki](value) or val;						-- when &lt;test_t[2]&gt; set to 'true', plaintext search using lowercase value
		return str_find[wiki] (val, test_t[1], 1, test_t[2]);					-- return nil when not found or matched
	end
		
	local test_types_t = {'accept', 'reject'};									-- test accept patterns first, then reject patterns
	local wikis_t = {'en', 'local'};											-- do tests for each of these keys; en.wiki first, local.wiki second

	for _, test_type in ipairs (test_types_t) do								-- for each test type
		for _, generic_value in pairs (cfg.special_case_translation[item][test_type]) do	-- spin through the list of generic value fragments to accept or reject
			for _, wiki in ipairs (wikis_t) do
				if generic_value[wiki] then
					if test (value, generic_value[wiki], wiki) then				-- go do the test
						return ('reject' == test_type);							-- param value rejected, return true; false else
					end
				end
			end
		end
	end
end


--[[--------------------------&lt; N A M E _ I S _ G E N E R I C &gt;------------------------------------------------

calls is_generic() to determine if &lt;name&gt; is a 'generic name' listed in cfg.generic_names; &lt;name_alias&gt; is the
parameter name used in error messaging

]]

local function name_is_generic (name, name_alias)
	if not added_generic_name_errs  and is_generic ('generic_names', name) then
		utilities.set_message ('err_generic_name', name_alias);					-- set an error message
		added_generic_name_errs = true;
	end
end


--[[--------------------------&lt; N A M E _ C H E C K S &gt;--------------------------------------------------------

This function calls various name checking functions used to validate the content of the various name-holding parameters.

]]

local function name_checks (last, first, list_name, last_alias, first_alias)
	local accept_name;

	if utilities.is_set (last) then
		last, accept_name = utilities.has_accept_as_written (last);				-- remove accept-this-as-written markup when it wraps all of &lt;last&gt;

		if not accept_name then													-- &lt;last&gt; not wrapped in accept-as-written markup
			name_has_mult_names (last, list_name);								-- check for multiple names in the parameter
			name_is_numeric (last, last_alias, list_name);						-- check for names that have no letters or are a mix of digits and other characters
			name_is_generic (last, last_alias);									-- check for names found in the generic names list
		end
	end

	if utilities.is_set (first) then
		first, accept_name = utilities.has_accept_as_written (first);			-- remove accept-this-as-written markup when it wraps all of &lt;first&gt;

		if not accept_name then													-- &lt;first&gt; not wrapped in accept-as-written markup
			name_has_mult_names (first, list_name, 0);							-- check for multiple names in the parameter; 0 is number of allowed commas in a given name
			name_is_numeric (first, first_alias, list_name);					-- check for names that have no letters or are a mix of digits and other characters
			name_is_generic (first, first_alias);								-- check for names found in the generic names list
		end
		local wl_type, D = utilities.is_wikilink (first);
		if 0 ~= wl_type then
			first = D;
			utilities.set_message ('err_bad_paramlink', first_alias);
		end
	end

	return last, first;															-- done
end


--[[----------------------&lt; E X T R A C T _ N A M E S &gt;-------------------------

Gets name list from the input arguments

Searches through args in sequential order to find |lastn= and |firstn= parameters
(or their aliases), and their matching link and mask parameters. Stops searching
when both |lastn= and |firstn= are not found in args after two sequential attempts:
found |last1=, |last2=, and |last3= but doesn't find |last4= and |last5= then the
search is done.

This function emits an error message when there is a |firstn= without a matching
|lastn=.  When there are 'holes' in the list of last names, |last1= and |last3=
are present but |last2= is missing, an error message is emitted. |lastn= is not
required to have a matching |firstn=.

When an author or editor parameter contains some form of 'et al.', the 'et al.'
is stripped from the parameter and a flag (etal) returned that will cause list_people()
to add the static 'et al.' text from Module:Citation/CS1/Configuration.  This keeps
'et al.' out of the template's metadata.  When this occurs, an error is emitted.

]]

local function extract_names(args, list_name)
	local names = {};															-- table of names
	local last;																	-- individual name components
	local first;
	local link;
	local mask;
	local i = 1;																-- loop counter/indexer
	local n = 1;																-- output table indexer
	local count = 0;															-- used to count the number of times we haven't found a |last= (or alias for authors, |editor-last or alias for editors)
	local etal = false;															-- return value set to true when we find some form of et al. in an author parameter

	local last_alias, first_alias, link_alias;									-- selected parameter aliases used in error messaging
	while true do
		last, last_alias = utilities.select_one ( args, cfg.aliases[list_name .. '-Last'], 'err_redundant_parameters', i );		-- search through args for name components beginning at 1
		first, first_alias = utilities.select_one ( args, cfg.aliases[list_name .. '-First'], 'err_redundant_parameters', i );
		link, link_alias = utilities.select_one ( args, cfg.aliases[list_name .. '-Link'], 'err_redundant_parameters', i );
		mask = utilities.select_one ( args, cfg.aliases[list_name .. '-Mask'], 'err_redundant_parameters', i );
	
		if last then															-- error check |lastn= alias for unknown interwiki link prefix; done here because this is where we have the parameter name
			local project, language = interwiki_prefixen_get (last, true);		-- true because we expect interwiki links in |lastn= to be wikilinked
			if nil == project and nil == language then							-- when both are nil
				utilities.set_message ('err_bad_paramlink', last_alias);		-- not known, emit an error message	-- TODO: err_bad_interwiki?
				last = utilities.remove_wiki_link (last);						-- remove wikilink markup; show display value only
			end
		end
		
		if link then															-- error check |linkn= alias for unknown interwiki link prefix
			local project, language = interwiki_prefixen_get (link, false);		-- false because wiki links in |author-linkn= is an error
			if nil == project and nil == language then							-- when both are nil
				utilities.set_message ('err_bad_paramlink', link_alias);		-- not known, emit an error message	-- TODO: err_bad_interwiki?
				link = nil;														-- unset so we don't link
				link_alias = nil;
			end
		end
		
		last, etal = name_has_etal (last, etal, false, last_alias);				-- find and remove variations on et al.
		first, etal = name_has_etal (first, etal, false, first_alias);			-- find and remove variations on et al.
		last, first = name_checks (last, first, list_name, last_alias, first_alias);						-- multiple names, extraneous annotation, etc. checks

		if first and not last then												-- if there is a firstn without a matching lastn
			local alias = first_alias:find ('given', 1, true) and 'given' or 'first';	-- get first or given form of the alias
			utilities.set_message ('err_first_missing_last', {
				first_alias,													-- param name of alias missing its mate
				first_alias:gsub (alias, {['first'] = 'last', ['given'] = 'surname'}),	-- make param name appropriate to the alias form
				});																-- add this error message
		elseif not first and not last then										-- if both firstn and lastn aren't found, are we done?
			count = count + 1;													-- number of times we haven't found last and first
			if 2 &lt;= count then													-- two missing names and we give up
				break;															-- normal exit or there is a two-name hole in the list; can't tell which
			end
		else																	-- we have last with or without a first
			local result;
			link = link_title_ok (link, link_alias, last, last_alias);			-- check for improper wiki-markup

			if first then
				link = link_title_ok (link, link_alias, first, first_alias);	-- check for improper wiki-markup
			end

			names[n] = {last = last, first = first, link = link, mask = mask, corporate = false};	-- add this name to our names list (corporate for |vauthors= only)
			n = n + 1;															-- point to next location in the names table
			if 1 == count then													-- if the previous name was missing
				utilities.set_message ('err_missing_name', {list_name:match ("(%w+)List"):lower(), i - 1});	-- add this error message
			end
			count = 0;															-- reset the counter, we're looking for two consecutive missing names
		end
		i = i + 1;																-- point to next args location
	end
	
	return names, etal;															-- all done, return our list of names and the etal flag
end


--[[--------------------------&lt; N A M E _ T A G _ G E T &gt;------------------------------------------------------

attempt to decode |language=&lt;lang_param&gt; and return language name and matching tag; nil else.

This function looks for:
	&lt;lang_param&gt; as a tag in cfg.lang_tag_remap{}
	&lt;lang_param&gt; as a name in cfg.lang_name_remap{}
	
	&lt;lang_param&gt; as a name in cfg.mw_languages_by_name_t
	&lt;lang_param&gt; as a tag in cfg.mw_languages_by_tag_t
when those fail, presume that &lt;lang_param&gt; is an IETF-like tag that MediaWiki does not recognize.  Strip all
script, region, variant, whatever subtags from &lt;lang_param&gt; to leave just a two or three character language tag
and look for the new &lt;lang_param&gt; in cfg.mw_languages_by_tag_t{}

on success, returns name (in properly capitalized form) and matching tag (in lowercase); on failure returns nil

]]

local function name_tag_get (lang_param)
	local lang_param_lc = mw.ustring.lower (lang_param);						-- use lowercase as an index into the various tables
	local name;
	local tag;

	name = cfg.lang_tag_remap[lang_param_lc];									-- assume &lt;lang_param_lc&gt; is a tag; attempt to get remapped language name 
	if name then																-- when &lt;name&gt;, &lt;lang_param&gt; is a tag for a remapped language name
		if cfg.lang_name_remap[name:lower()][2] ~= lang_param_lc then
			utilities.set_message ('maint_unknown_lang');						-- add maint category if not already added
			return name, cfg.lang_name_remap[name:lower()][2];					-- so return name and tag from lang_name_remap[name]; special case to xlate sr-ec and sr-el to sr-cyrl and sr-latn
		end
		return name, lang_param_lc;												-- so return &lt;name&gt; from remap and &lt;lang_param_lc&gt;
	end

	tag = lang_param_lc:match ('^(%a%a%a?)%-.*');								-- still assuming that &lt;lang_param_lc&gt; is a tag; strip script, region, variant subtags
	name = cfg.lang_tag_remap[tag];												-- attempt to get remapped language name with language subtag only
	if name then																-- when &lt;name&gt;, &lt;tag&gt; is a tag for a remapped language name
		return name, tag;														-- so return &lt;name&gt; from remap and &lt;tag&gt;
	end

	if cfg.lang_name_remap[lang_param_lc] then									-- not a remapped tag, assume &lt;lang_param_lc&gt; is a name; attempt to get remapped language tag 
		return cfg.lang_name_remap[lang_param_lc][1], cfg.lang_name_remap[lang_param_lc][2];	-- for this &lt;lang_param_lc&gt;, return a (possibly) new name and appropriate tag
	end

	name = cfg.mw_languages_by_tag_t[lang_param_lc];							-- assume that &lt;lang_param_lc&gt; is a tag; attempt to get its matching language name
	
	if name then
		return name, lang_param_lc;												-- &lt;lang_param_lc&gt; is a tag so return it and &lt;name&gt;
	end
	
	tag = cfg.mw_languages_by_name_t[lang_param_lc];							-- assume that &lt;lang_param_lc&gt; is a language name; attempt to get its matching tag
	
	if tag then
		return cfg.mw_languages_by_tag_t[tag], tag;								-- &lt;lang_param_lc&gt; is a name so return the name from the table and &lt;tag&gt;
	end

	tag = lang_param_lc:match ('^(%a%a%a?)%-.*');								-- is &lt;lang_param_lc&gt; an IETF-like tag that MediaWiki doesn't recognize? &lt;tag&gt; gets the language subtag; nil else

	if tag then
		name = cfg.mw_languages_by_tag_t[tag];									-- attempt to get a language name using the shortened &lt;tag&gt;
		if name then
			return name, tag;													-- &lt;lang_param_lc&gt; is an unrecognized IETF-like tag so return &lt;name&gt; and language subtag
		end
	end
end


--[[-------------------&lt; L A N G U A G E _ P A R A M E T E R &gt;------------------

Gets language name from a provided two- or three-character ISO 639 code.  If a code
is recognized by MediaWiki, use the returned name; if not, then use the value that
was provided with the language parameter.

When |language= contains a recognized language (either code or name), the page is
assigned to the category for that code: Category:Norwegian-language sources (no).
For valid three-character code languages, the page is assigned to the single category
for '639-2' codes: Category:CS1 ISO 639-2 language sources.

Languages that are the same as the local wiki are not categorized.  MediaWiki does
not recognize three-character equivalents of two-character codes: code 'ar' is
recognized but code 'ara' is not.

This function supports multiple languages in the form |language=nb, French, th
where the language names or codes are separated from each other by commas with
optional space characters.

]]

local function language_parameter (lang)
	local tag;																	-- some form of IETF-like language tag; language subtag with optional region, sript, vatiant, etc subtags
	local lang_subtag;															-- ve populates |language= with mostly unecessary region subtags the MediaWiki does not recognize; this is the base language subtag
	local name;																	-- the language name
	local language_list = {};													-- table of language names to be rendered
	local names_t = {};															-- table made from the value assigned to |language=

	local this_wiki_name = mw.language.fetchLanguageName (cfg.this_wiki_code, cfg.this_wiki_code);	-- get this wiki's language name

	names_t = mw.text.split (lang, '%s*,%s*');									-- names should be a comma separated list

	for _, lang in ipairs (names_t) do											-- reuse lang here because we don't yet know if lang is a language name or a language tag
		name, tag = name_tag_get (lang);										-- attempt to get name/tag pair for &lt;lang&gt;; &lt;name&gt; has proper capitalization; &lt;tag&gt; is lowercase

		if utilities.is_set (tag) then
			lang_subtag = tag:gsub ('^(%a%a%a?)%-.*', '%1');					-- for categorization, strip any IETF-like tags from language tag

			if cfg.this_wiki_code ~= lang_subtag then							-- when the language is not the same as this wiki's language
				if 2 == lang_subtag:len() then									-- and is a two-character tag
					utilities.add_prop_cat ('foreign-lang-source', {name, tag}, lang_subtag);		-- categorize it; tag appended to allow for multiple language categorization
				else															-- or is a recognized language (but has a three-character tag)
					utilities.add_prop_cat ('foreign-lang-source-2', {lang_subtag}, lang_subtag);			-- categorize it differently TODO: support multiple three-character tag categories per cs1|2 template?
				end
			elseif cfg.local_lang_cat_enable then								-- when the language and this wiki's language are the same and categorization is enabled
				utilities.add_prop_cat ('local-lang-source', {name, lang_subtag});		-- categorize it
			end
		else
			name = lang;														-- return whatever &lt;lang&gt; has so that we show something
			utilities.set_message ('maint_unknown_lang');						-- add maint category if not already added
		end
		
		table.insert (language_list, name);
		name = '';																-- so we can reuse it
	end
 
	name = utilities.make_sep_list (#language_list, language_list);
	if (1 == #language_list) and (lang_subtag == cfg.this_wiki_code) then		-- when only one language, find lang name in this wiki lang name; for |language=en-us, 'English' in 'American English'
		return '';																-- if one language and that language is this wiki's return an empty string (no annotation)
	end
	return (" " .. wrap_msg ('language', name));								-- otherwise wrap with '(in ...)'
	--[[ TODO: should only return blank or name rather than full list
	so we can clean up the bunched parenthetical elements Language, Type, Format
	]]
end


--[[-----------------------&lt; S E T _ C S _ S T Y L E &gt;--------------------------

Gets the default CS style configuration for the given mode.
Returns default separator and either postscript as passed in or the default.
In CS1, the default postscript and separator are '.'.
In CS2, the default postscript is the empty string and the default separator is ','.

]]

local function set_cs_style (postscript, mode)
	if utilities.is_set(postscript) then
		-- emit a maintenance message if user postscript is the default cs1 postscript
		-- we catch the opposite case for cs2 in set_style
		if mode == 'cs1' and postscript == cfg.presentation['ps_' .. mode] then
			utilities.set_message ('maint_postscript');
		end
	else
		postscript = cfg.presentation['ps_' .. mode];
	end
	return cfg.presentation['sep_' .. mode], postscript;
end


--[[--------------------------&lt; S E T _ S T Y L E &gt;-----------------------------

Sets the separator and postscript styles. Checks the |mode= first and the
#invoke CitationClass second. Removes the postscript if postscript == none.

]]

local function set_style (mode, postscript, cite_class)
	local sep;
	if 'cs2' == mode then
		sep, postscript = set_cs_style (postscript, 'cs2');
	elseif 'cs1' == mode then
		sep, postscript = set_cs_style (postscript, 'cs1');
	elseif 'citation' == cite_class	then
		sep, postscript = set_cs_style (postscript, 'cs2');
	else
		sep, postscript = set_cs_style (postscript, 'cs1');
	end

	if cfg.keywords_xlate[postscript:lower()] == 'none' then
		-- emit a maintenance message if user postscript is the default cs2 postscript
		-- we catch the opposite case for cs1 in set_cs_style
		if 'cs2' == mode or ('cs1' ~= mode and 'citation' == cite_class) then	-- {{citation |title=Title |mode=cs1 |postscript=none}} should not emit maint message
			utilities.set_message ('maint_postscript');
		end
		postscript = '';
	end
	
	return sep, postscript
end


--[=[-------------------------&lt; I S _ P D F &gt;-----------------------------------

Determines if a URL has the file extension that is one of the PDF file extensions
used by [[MediaWiki:Common.css]] when applying the PDF icon to external links.

returns true if file extension is one of the recognized extensions, else false

]=]

local function is_pdf (url)
	return url:match ('%.pdf$') or url:match ('%.PDF$') or
		url:match ('%.pdf[%?#]') or url:match ('%.PDF[%?#]') or
		url:match ('%.PDF&amp;#035') or url:match ('%.pdf&amp;#035');
end


--[[--------------------------&lt; S T Y L E _ F O R M A T &gt;-----------------------

Applies CSS style to |format=, |chapter-format=, etc.  Also emits an error message
if the format parameter does not have a matching URL parameter.  If the format parameter
is not set and the URL contains a file extension that is recognized as a PDF document
by MediaWiki's commons.css, this code will set the format parameter to (PDF) with
the appropriate styling.

]]

local function style_format (format, url, fmt_param, url_param)
	if utilities.is_set (format) then
		format = utilities.wrap_style ('format', format);						-- add leading space, parentheses, resize
		if not utilities.is_set (url) then
			utilities.set_message ('err_format_missing_url', {fmt_param, url_param});	-- add an error message
		end
	elseif is_pdf (url) then													-- format is not set so if URL is a PDF file then
		format = utilities.wrap_style ('format', 'PDF');						-- set format to PDF
	else
		format = '';															-- empty string for concatenation
	end
	return format;
end


--[[---------------------&lt; G E T _ D I S P L A Y _ N A M E S &gt;------------------

Returns a number that defines the number of names displayed for author and editor
name lists and a Boolean flag to indicate when et al. should be appended to the name list.

When the value assigned to |display-xxxxors= is a number greater than or equal to zero,
return the number and the previous state of the 'etal' flag (false by default
but may have been set to true if the name list contains some variant of the text 'et al.').

When the value assigned to |display-xxxxors= is the keyword 'etal', return a number
that is one greater than the number of authors in the list and set the 'etal' flag true.
This will cause the list_people() to display all of the names in the name list followed by 'et al.'

In all other cases, returns nil and the previous state of the 'etal' flag.

inputs:
	max: A['DisplayAuthors'] or A['DisplayEditors'], etc; a number or some flavor of etal
	count: #a or #e
	list_name: 'authors' or 'editors'
	etal: author_etal or editor_etal

This function sets an error message when |display-xxxxors= value greater than or equal to number of names but
not when &lt;max&gt; comes from {{cs1 config}} global settings.  When using global settings, &lt;param&gt; is set to the
keyword 'cs1 config' which is used to supress the normal error.  Error is suppressed because it is to be expected
that some citations in an article will have the same or fewer names that the limit specified in {{cs1 config}}.

]]

local function get_display_names (max, count, list_name, etal, param)
	if utilities.is_set (max) then
		if 'etal' == max:lower():gsub("[ '%.]", '') then						-- the :gsub() portion makes 'etal' from a variety of 'et al.' spellings and stylings
			max = count + 1;													-- number of authors + 1 so display all author name plus et al.
			etal = true;														-- overrides value set by extract_names()
		elseif max:match ('^%d+$') then											-- if is a string of numbers
			max = tonumber (max);												-- make it a number
			if (max &gt;= count) and ('cs1 config' ~= param) then					-- error when local |display-xxxxors= value greater than or equal to number of names; not an error when using global setting
				utilities.set_message ('err_disp_name', {param, max});			-- add error message
				max = nil;
			end
		else																	-- not a valid keyword or number
			utilities.set_message ('err_disp_name', {param, max});				-- add error message
			max = nil;															-- unset; as if |display-xxxxors= had not been set
		end
	end
	
	return max, etal;
end


--[[----------&lt; E X T R A _ T E X T _ I N _ P A G E _ C H E C K &gt;---------------

Adds error if |page=, |pages=, |quote-page=, |quote-pages= has what appears to be
some form of p. or pp. abbreviation in the first characters of the parameter content.

check page for extraneous p, p., pp, pp., pg, pg. at start of parameter value:
	good pattern: '^P[^%.P%l]' matches when page begins PX or P# but not Px
		      where x and X are letters and # is a digit
	bad pattern:  '^[Pp][PpGg]' matches when page begins pp, pP, Pp, PP, pg, pG, Pg, PG

]]

local function extra_text_in_page_check (val, name)
	if not val:match (cfg.vol_iss_pg_patterns.good_ppattern) then
		for _, pattern in ipairs (cfg.vol_iss_pg_patterns.bad_ppatterns) do		-- spin through the selected sequence table of patterns
			if val:match (pattern) then											-- when a match, error so
				utilities.set_message ('err_extra_text_pages', name);	 		-- add error message
				return;															-- and done
			end
		end
	end		
end


--[[--------------------------&lt; E X T R A _ T E X T _ I N _ V O L _ I S S _ C H E C K &gt;------------------------

Adds error if |volume= or |issue= has what appears to be some form of redundant 'type' indicator.  Applies to
both; this function looks for issue text in both |issue= and |volume= and looks for volume-like text in |voluem=
and |issue=.

For |volume=:
	'V.', or 'Vol.' (with or without the dot) abbreviations or 'Volume' in the first characters of the parameter
	content (all case insensitive). 'V' and 'v' (without the dot) are presumed to be roman numerals so
	are allowed.

For |issue=:
	'No.', 'I.', 'Iss.' (with or without the dot) abbreviations, or 'Issue' in the first characters of the
	parameter content (all case insensitive); numero styling: 'n°' with degree sign U+00B0, and № precomposed
	numero sign U+2116.
	
Single character values ('v', 'i', 'n') allowed when not followed by separator character ('.', ':', '=', or
whitespace character) – param values are trimmed of whitespace by MediaWiki before delivered to the module.
	
&lt;val&gt; is |volume= or |issue= parameter value
&lt;name&gt; is |volume= or |issue= parameter name for error message
&lt;selector&gt; is 'v' for |volume=, 'i' for |issue=

sets error message on failure; returns nothing

]]

local function extra_text_in_vol_iss_check (val, name, selector)
	if not utilities.is_set (val) then
		return;
	end
	
	local handler = 'v' == selector and 'err_extra_text_volume' or 'err_extra_text_issue';
	val = val:lower();															-- force parameter value to lower case

	for _, pattern in ipairs (cfg.vol_iss_pg_patterns.vi_patterns_t) do			-- spin through the sequence table of patterns
		if val:match (pattern) then												-- when a match, error so
			utilities.set_message (handler, name);								-- add error message
			return;																-- and done
		end
	end
end


--[=[-------------------------&lt; G E T _ V _ N A M E _ T A B L E &gt;----------------------------------------------

split apart a |vauthors= or |veditors= parameter.  This function allows for corporate names, wrapped in doubled
parentheses to also have commas; in the old version of the code, the doubled parentheses were included in the
rendered citation and in the metadata.  Individual author names may be wikilinked

	|vauthors=Jones AB, [[E. B. White|White EB]], ((Black, Brown, and Co.))

]=]

local function get_v_name_table (vparam, output_table, output_link_table)
	local name_table = mw.text.split(vparam, "%s*,%s*");						-- names are separated by commas
	local wl_type, label, link;													-- wl_type not used here; just a placeholder
	
	local i = 1;
	
	while name_table[i] do
		if name_table[i]:match ('^%(%(.*[^%)][^%)]$') then						-- first segment of corporate with one or more commas; this segment has the opening doubled parentheses
			local name = name_table[i];
			i = i + 1;															-- bump indexer to next segment
			while name_table[i] do
				name = name .. ', ' .. name_table[i];							-- concatenate with previous segments
				if name_table[i]:match ('^.*%)%)$') then						-- if this table member has the closing doubled parentheses
					break;														-- and done reassembling so
				end
				i = i + 1;														-- bump indexer
			end
			table.insert (output_table, name);									-- and add corporate name to the output table
			table.insert (output_link_table, '');								-- no wikilink
		else
			wl_type, label, link = utilities.is_wikilink (name_table[i]);		-- wl_type is: 0, no wl (text in label variable); 1, [[D]]; 2, [[L|D]]
			table.insert (output_table, label);									-- add this name
			if 1 == wl_type then
				table.insert (output_link_table, label);						-- simple wikilink [[D]]
			else
				table.insert (output_link_table, link);							-- no wikilink or [[L|D]]; add this link if there is one, else empty string
			end
		end
		i = i + 1;
	end	
	return output_table;
end


--[[--------------------------&lt; P A R S E _ V A U T H O R S _ V E D I T O R S &gt;--------------------------------

This function extracts author / editor names from |vauthors= or |veditors= and finds matching |xxxxor-maskn= and
|xxxxor-linkn= in args.  It then returns a table of assembled names just as extract_names() does.

Author / editor names in |vauthors= or |veditors= must be in Vancouver system style. Corporate or institutional names
may sometimes be required and because such names will often fail the is_good_vanc_name() and other format compliance
tests, are wrapped in doubled parentheses ((corporate name)) to suppress the format tests.

Supports generational suffixes Jr, 2nd, 3rd, 4th–6th.

This function sets the Vancouver error when a required comma is missing and when there is a space between an author's initials.

]]

local function parse_vauthors_veditors (args, vparam, list_name)
	local names = {};															-- table of names assembled from |vauthors=, |author-maskn=, |author-linkn=
	local v_name_table = {};
	local v_link_table = {};													-- when name is wikilinked, targets go in this table
	local etal = false;															-- return value set to true when we find some form of et al. vauthors parameter
	local last, first, link, mask, suffix;
	local corporate = false;

	vparam, etal = name_has_etal (vparam, etal, true);							-- find and remove variations on et al. do not categorize (do it here because et al. might have a period)
	v_name_table = get_v_name_table (vparam, v_name_table, v_link_table);		-- names are separated by commas

	for i, v_name in ipairs(v_name_table) do
		first = '';																-- set to empty string for concatenation and because it may have been set for previous author/editor
		local accept_name;
		v_name, accept_name = utilities.has_accept_as_written (v_name);			-- remove accept-this-as-written markup when it wraps all of &lt;v_name&gt;

		if accept_name then
			last = v_name;
			corporate = true;													-- flag used in list_people()
		elseif string.find(v_name, "%s") then
			if v_name:find('[;%.]') then										-- look for commonly occurring punctuation characters; 
				add_vanc_error (cfg.err_msg_supl.punctuation, i);
			end
			local lastfirstTable = {}
			lastfirstTable = mw.text.split(v_name, "%s+")
			first = table.remove(lastfirstTable);								-- removes and returns value of last element in table which should be initials or generational suffix

			if not mw.ustring.match (first, '^%u+$') then						-- mw.ustring here so that later we will catch non-Latin characters
				suffix = first;													-- not initials so assume that whatever we got is a generational suffix
				first = table.remove(lastfirstTable);							-- get what should be the initials from the table
			end
			last = table.concat(lastfirstTable, ' ')							-- returns a string that is the concatenation of all other names that are not initials and generational suffix
			if not utilities.is_set (last) then
				first = '';														-- unset
				last = v_name;													-- last empty because something wrong with first
				add_vanc_error (cfg.err_msg_supl.name, i);
			end
			if mw.ustring.match (last, '%a+%s+%u+%s+%a+') then
				add_vanc_error (cfg.err_msg_supl['missing comma'], i);			-- matches last II last; the case when a comma is missing
			end
			if mw.ustring.match (v_name, ' %u %u$') then						-- this test is in the wrong place TODO: move or replace with a more appropriate test
				add_vanc_error (cfg.err_msg_supl.initials, i);					-- matches a space between two initials
			end
		else
			last = v_name;														-- last name or single corporate name?  Doesn't support multiword corporate names? do we need this?
		end
		
		if utilities.is_set (first) then
			if not mw.ustring.match (first, "^%u?%u$") then						-- first shall contain one or two upper-case letters, nothing else
				add_vanc_error (cfg.err_msg_supl.initials, i);					-- too many initials; mixed case initials (which may be ok Romanization); hyphenated initials
			end
			is_good_vanc_name (last, first, suffix, i);							-- check first and last before restoring the suffix which may have a non-Latin digit
			if utilities.is_set (suffix) then
				first = first .. ' ' .. suffix;									-- if there was a suffix concatenate with the initials
				suffix = '';													-- unset so we don't add this suffix to all subsequent names
			end
		else
			if not corporate then
				is_good_vanc_name (last, '', nil, i);
			end
		end

		link = utilities.select_one ( args, cfg.aliases[list_name .. '-Link'], 'err_redundant_parameters', i ) or v_link_table[i];
		mask = utilities.select_one ( args, cfg.aliases[list_name .. '-Mask'], 'err_redundant_parameters', i );
		names[i] = {last = last, first = first, link = link, mask = mask, corporate = corporate};		-- add this assembled name to our names list
	end
	return names, etal;															-- all done, return our list of names
end


--[[--------------------------&lt; S E L E C T _ A U T H O R _ E D I T O R _ S O U R C E &gt;------------------------

Select one of |authors=, |authorn= / |lastn / firstn=, or |vauthors= as the source of the author name list or
select one of |editorn= / editor-lastn= / |editor-firstn= or |veditors= as the source of the editor name list.

Only one of these appropriate three will be used.  The hierarchy is: |authorn= (and aliases) highest and |authors= lowest;
|editorn= (and aliases) highest and |veditors= lowest (support for |editors= withdrawn)

When looking for |authorn= / |editorn= parameters, test |xxxxor1= and |xxxxor2= (and all of their aliases); stops after the second
test which mimicks the test used in extract_names() when looking for a hole in the author name list.  There may be a better
way to do this, I just haven't discovered what that way is.

Emits an error message when more than one xxxxor name source is provided.

In this function, vxxxxors = vauthors or veditors; xxxxors = authors as appropriate.

]]

local function select_author_editor_source (vxxxxors, xxxxors, args, list_name)
	local lastfirst = false;
	if utilities.select_one ( args, cfg.aliases[list_name .. '-Last'], 'none', 1 ) or		-- do this twice in case we have a |first1= without a |last1=; this ...
		utilities.select_one ( args, cfg.aliases[list_name .. '-First'], 'none', 1 ) or		-- ... also catches the case where |first= is used with |vauthors=
		utilities.select_one ( args, cfg.aliases[list_name .. '-Last'], 'none', 2 ) or
		utilities.select_one ( args, cfg.aliases[list_name .. '-First'], 'none', 2 ) then
			lastfirst = true;
	end

	if (utilities.is_set (vxxxxors) and true == lastfirst) or					-- these are the three error conditions
		(utilities.is_set (vxxxxors) and utilities.is_set (xxxxors)) or
		(true == lastfirst and utilities.is_set (xxxxors)) then
			local err_name;
			if 'AuthorList' == list_name then									-- figure out which name should be used in error message
				err_name = 'author';
			else
				err_name = 'editor';
			end
			utilities.set_message ('err_redundant_parameters', err_name .. '-name-list parameters');	-- add error message
	end

	if true == lastfirst then return 1 end;										-- return a number indicating which author name source to use
	if utilities.is_set (vxxxxors) then return 2 end;
	if utilities.is_set (xxxxors) then return 3 end;
	return 1;																	-- no authors so return 1; this allows missing author name test to run in case there is a first without last 
end


--[[--------------------------&lt; I S _ V A L I D _ P A R A M E T E R _ V A L U E &gt;------------------------------

This function is used to validate a parameter's assigned value for those parameters that have only a limited number
of allowable values (yes, y, true, live, dead, etc.).  When the parameter value has not been assigned a value (missing
or empty in the source template) the function returns the value specified by ret_val.  If the parameter value is one
of the list of allowed values returns the translated value; else, emits an error message and returns the value
specified by ret_val.

TODO: explain &lt;invert&gt;

]]

local function is_valid_parameter_value (value, name, possible, ret_val, invert)
	if not utilities.is_set (value) then
		return ret_val;															-- an empty parameter is ok
	end

	if (not invert and utilities.in_array (value, possible)) then				-- normal; &lt;value&gt; is in &lt;possible&gt; table
		return cfg.keywords_xlate[value];										-- return translation of parameter keyword
	elseif invert and not utilities.in_array (value, possible) then				-- invert; &lt;value&gt; is not in &lt;possible&gt; table
		return value;															-- return &lt;value&gt; as it is
	else
		utilities.set_message ('err_invalid_param_val', {name, value});			-- not an allowed value so add error message
		return ret_val;
	end
end


--[[--------------------------&lt; T E R M I N A T E _ N A M E _ L I S T &gt;----------------------------------------

This function terminates a name list (author, contributor, editor) with a separator character (sepc) and a space
when the last character is not a sepc character or when the last three characters are not sepc followed by two
closing square brackets (close of a wikilink).  When either of these is true, the name_list is terminated with a
single space character.

]]

local function terminate_name_list (name_list, sepc)
	if (string.sub (name_list, -3, -1) == sepc .. '. ') then					-- if already properly terminated
		return name_list;														-- just return the name list
	elseif (string.sub (name_list, -1, -1) == sepc) or (string.sub (name_list, -3, -1) == sepc .. ']]') then	-- if last name in list ends with sepc char
		return name_list .. " ";												-- don't add another
	else
		return name_list .. sepc .. ' ';										-- otherwise terminate the name list
	end
end


--[[-------------------------&lt; F O R M A T _ V O L U M E _ I S S U E &gt;-----------------------------------------

returns the concatenation of the formatted volume and issue (or journal article number) parameters as a single
string; or formatted volume or formatted issue, or an empty string if neither are set.

]]
	
local function format_volume_issue (volume, issue, article, cite_class, origin, sepc, lower)
	if not utilities.is_set (volume) and not utilities.is_set (issue) and not utilities.is_set (article) then
		return '';
	end

	-- same condition as in format_pages_sheets()
	local is_journal = 'journal' == cite_class or (utilities.in_array (cite_class, {'citation', 'map', 'interview'}) and 'journal' == origin);

	local is_numeric_vol = volume and (volume:match ('^[MDCLXVI]+$') or volume:match ('^%d+$'));	-- is only uppercase roman numerals or only digits?
	local is_long_vol = volume and (4 &lt; mw.ustring.len(volume));				-- is |volume= value longer than 4 characters?
	
	if volume and (not is_numeric_vol and is_long_vol) then						-- when not all digits or Roman numerals, is |volume= longer than 4 characters?
		utilities.add_prop_cat ('long-vol');									-- yes, add properties cat
	end

	if is_journal then															-- journal-style formatting
		local vol = '';

		if utilities.is_set (volume) then
			if is_numeric_vol then												-- |volume= value all digits or all uppercase Roman numerals?
				vol = utilities.substitute (cfg.presentation['vol-bold'], {sepc, volume});	-- render in bold face
			elseif is_long_vol then												-- not all digits or Roman numerals; longer than 4 characters?
				vol = utilities.substitute (cfg.messages['j-vol'], {sepc, utilities.hyphen_to_dash (volume)});	-- not bold
			else																-- four or fewer characters
				vol = utilities.substitute (cfg.presentation['vol-bold'], {sepc, utilities.hyphen_to_dash (volume)});	-- bold
			end
		end
		vol = vol .. (utilities.is_set (issue) and utilities.substitute (cfg.messages['j-issue'], issue) or '')
		vol = vol .. (utilities.is_set (article) and utilities.substitute (cfg.messages['j-article-num'], article) or '')
		return vol;
	end
	
	if 'podcast' == cite_class and utilities.is_set (issue) then
		return wrap_msg ('issue', {sepc, issue}, lower);
	end
	
	if 'conference' == cite_class and utilities.is_set (article) then			-- |article-number= supported only in journal and conference cites
		if utilities.is_set (volume) and utilities.is_set (article) then		-- both volume and article number
			return wrap_msg ('vol-art', {sepc, utilities.hyphen_to_dash (volume), article}, lower);
		elseif utilities.is_set (article) then									-- article number alone; when volume alone, handled below
			return wrap_msg ('art', {sepc, article}, lower);
		end
	end

	-- all other types of citation
	if utilities.is_set (volume) and utilities.is_set (issue) then
		return wrap_msg ('vol-no', {sepc, utilities.hyphen_to_dash (volume), issue}, lower);
	elseif utilities.is_set (volume) then
		return wrap_msg ('vol', {sepc, utilities.hyphen_to_dash (volume)}, lower);
	else
		return wrap_msg ('issue', {sepc, issue}, lower);
	end
end


--[[-------------------------&lt; F O R M A T _ P A G E S _ S H E E T S &gt;-----------------------------------------

adds static text to one of |page(s)= or |sheet(s)= values and returns it with all of the others set to empty strings.
The return order is:
	page, pages, sheet, sheets

Singular has priority over plural when both are provided.

]]

local function format_pages_sheets (page, pages, sheet, sheets, cite_class, origin, sepc, nopp, lower)
	if 'map' == cite_class then													-- only cite map supports sheet(s) as in-source locators
		if utilities.is_set (sheet) then
			if 'journal' == origin then
				return '', '', wrap_msg ('j-sheet', sheet, lower), '';
			else
				return '', '', wrap_msg ('sheet', {sepc, sheet}, lower), '';
			end
		elseif utilities.is_set (sheets) then
			if 'journal' == origin then
				return '', '', '', wrap_msg ('j-sheets', sheets, lower);
			else
				return '', '', '', wrap_msg ('sheets', {sepc, sheets}, lower);
			end
		end
	end

	local is_journal = 'journal' == cite_class or (utilities.in_array (cite_class, {'citation', 'map', 'interview'}) and 'journal' == origin);
	
	if utilities.is_set (page) then
		if is_journal then
			return utilities.substitute (cfg.messages['j-page(s)'], page), '', '', '';
		elseif not nopp then
			return utilities.substitute (cfg.messages['p-prefix'], {sepc, page}), '', '', '';
		else
			return utilities.substitute (cfg.messages['nopp'], {sepc, page}), '', '', '';
		end
	elseif utilities.is_set (pages) then
		if is_journal then
			return utilities.substitute (cfg.messages['j-page(s)'], pages), '', '', '';
		elseif tonumber(pages) ~= nil and not nopp then							-- if pages is only digits, assume a single page number
			return '', utilities.substitute (cfg.messages['p-prefix'], {sepc, pages}), '', '';
		elseif not nopp then
			return '', utilities.substitute (cfg.messages['pp-prefix'], {sepc, pages}), '', '';
		else
			return '', utilities.substitute (cfg.messages['nopp'], {sepc, pages}), '', '';
		end
	end
	
	return '', '', '', '';														-- return empty strings
end


--[[--------------------------&lt; I N S O U R C E _ L O C _ G E T &gt;----------------------------------------------

returns one of the in-source locators: page, pages, or at. 

If any of these are interwiki links to Wikisource, returns the label portion of the interwiki-link as plain text
for use in COinS.  This COinS thing is done because here we convert an interwiki-link to an external link and
add an icon span around that; get_coins_pages() doesn't know about the span.  TODO: should it?  

TODO: add support for sheet and sheets?; streamline;

TODO: make it so that this function returns only one of the three as the single in-source (the return value assigned
to a new name)?

]]

local function insource_loc_get (page, page_orig, pages, pages_orig, at)
	local ws_url, ws_label, coins_pages, L;										-- for Wikisource interwiki-links; TODO: this corrupts page metadata (span remains in place after cleanup; fix there?)

	if utilities.is_set (page) then
		if utilities.is_set (pages) or utilities.is_set (at) then
			pages = '';															-- unset the others
			at = '';
		end
		extra_text_in_page_check (page, page_orig);								-- emit error message when |page= value begins with what looks like p., pp., etc.

		ws_url, ws_label, L = wikisource_url_make (page);						-- make ws URL from |page= interwiki link; link portion L becomes tooltip label
		if ws_url then
			page = external_link (ws_url, ws_label .. '&amp;nbsp;', 'ws link in page');	-- space char after label to move icon away from in-source text; TODO: a better way to do this?
			page = utilities.substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, page});
			coins_pages = ws_label;
		end
	elseif utilities.is_set (pages) then
		if utilities.is_set (at) then
			at = '';															-- unset
		end
		extra_text_in_page_check (pages, pages_orig);							-- emit error message when |page= value begins with what looks like p., pp., etc.

		ws_url, ws_label, L = wikisource_url_make (pages);						-- make ws URL from |pages= interwiki link; link portion L becomes tooltip label
		if ws_url then
			pages = external_link (ws_url, ws_label .. '&amp;nbsp;', 'ws link in pages');	-- space char after label to move icon away from in-source text; TODO: a better way to do this?
			pages = utilities.substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, pages});
			coins_pages = ws_label;
		end
	elseif utilities.is_set (at) then
		ws_url, ws_label, L = wikisource_url_make (at);							-- make ws URL from |at= interwiki link; link portion L becomes tooltip label
		if ws_url then
			at = external_link (ws_url, ws_label .. '&amp;nbsp;', 'ws link in at');	-- space char after label to move icon away from in-source text; TODO: a better way to do this?
			at = utilities.substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, at});
			coins_pages = ws_label;
		end
	end
	
	return page, pages, at, coins_pages;
end

--[[--------------------------&lt; I S _ U N I Q U E _ A R C H I V E _ U R L &gt;------------------------------------

add error message when |archive-url= value is same as |url= or chapter-url= (or alias...) value

]]

local function is_unique_archive_url (archive, url, c_url, source, date)
	if utilities.is_set (archive) then
		if archive == url or archive == c_url then
			utilities.set_message ('err_bad_url', {utilities.wrap_style ('parameter', source)});	-- add error message
			return '', '';														-- unset |archive-url= and |archive-date= because same as |url= or |chapter-url=
		end
	end

	return archive, date;
end


--[=[-------------------------&lt; A R C H I V E _ U R L _ C H E C K &gt;--------------------------------------------

Check archive.org URLs to make sure they at least look like they are pointing at valid archives and not to the 
save snapshot URL or to calendar pages.  When the archive URL is 'https://web.archive.org/save/' (or http://...)
archive.org saves a snapshot of the target page in the URL.  That is something that Wikipedia should not allow
unwitting readers to do.

When the archive.org URL does not have a complete timestamp, archive.org chooses a snapshot according to its own
algorithm or provides a calendar 'search' result.  [[WP:ELNO]] discourages links to search results.

This function looks at the value assigned to |archive-url= and returns empty strings for |archive-url= and
|archive-date= and an error message when:
	|archive-url= holds an archive.org save command URL
	|archive-url= is an archive.org URL that does not have a complete timestamp (YYYYMMDDhhmmss 14 digits) in the
		correct place
otherwise returns |archive-url= and |archive-date=

There are two mostly compatible archive.org URLs:
	//web.archive.org/&lt;timestamp&gt;...		-- the old form
	//web.archive.org/web/&lt;timestamp&gt;...	-- the new form

The old form does not support or map to the new form when it contains a display flag.  There are four identified flags
('id_', 'js_', 'cs_', 'im_') but since archive.org ignores others following the same form (two letters and an underscore)
we don't check for these specific flags but we do check the form.

This function supports a preview mode.  When the article is rendered in preview mode, this function may return a modified
archive URL:
	for save command errors, return undated wildcard (/*/)
	for timestamp errors when the timestamp has a wildcard, return the URL unmodified
	for timestamp errors when the timestamp does not have a wildcard, return with timestamp limited to six digits plus wildcard (/yyyymm*/)

A secondary function is to return an archive-url timestamp from those urls that have them (archive.org and
archive.today).  The timestamp is used by validation.archive_date_check() to see if the value in |archive-date=
matches the timestamp in the archive url.

]=]

local function archive_url_check (url, date)
	local err_msg = '';															-- start with the error message empty
	local path, timestamp, flag;												-- portions of the archive.org URL
	
	timestamp = url:match ('//archive.today/(%d%d%d%d%d%d%d%d%d%d%d%d%d%d)/') or	-- get timestamp from archive.today urls
		url:match ('//archive.today/(%d%d%d%d%.%d%d%.%d%d%-%d%d%d%d%d%d)/');		-- this timestamp needs cleanup
	if timestamp then															-- if this was an archive.today url ...
		return url, date, timestamp:gsub ('[%.%-]', '');						-- return ArchiveURL, ArchiveDate, and timestamp (dots and dashes removed) from |archive-url=, and done
	end
																				-- here for archive.org urls
	if (not url:match('//web%.archive%.org/')) and (not url:match('//liveweb%.archive%.org/')) then		-- also deprecated liveweb Wayback machine URL
		return url, date;														-- not an archive.org archive, return ArchiveURL and ArchiveDate
	end

	if url:match('//web%.archive%.org/save/') then								-- if a save command URL, we don't want to allow saving of the target page 
		err_msg = cfg.err_msg_supl.save;
		url = url:gsub ('(//web%.archive%.org)/save/', '%1/*/', 1);				-- for preview mode: modify ArchiveURL
	elseif url:match('//liveweb%.archive%.org/') then
		err_msg = cfg.err_msg_supl.liveweb;
	else
		path, timestamp, flag = url:match('//web%.archive%.org/([^%d]*)(%d+)([^/]*)/');	-- split out some of the URL parts for evaluation
		if not path then														-- malformed in some way; pattern did not match
			err_msg = cfg.err_msg_supl.timestamp;
		elseif 14 ~= timestamp:len() then										-- path and flag optional, must have 14-digit timestamp here
			err_msg = cfg.err_msg_supl.timestamp;
			if '*' ~= flag then
				local replacement = timestamp:match ('^%d%d%d%d%d%d') or timestamp:match ('^%d%d%d%d');	-- get the first 6 (YYYYMM) or first 4 digits (YYYY)
				if replacement then												-- nil if there aren't at least 4 digits (year)
					replacement = replacement .. string.rep ('0', 14 - replacement:len());	-- year or yearmo (4 or 6 digits) zero-fill to make 14-digit timestamp
					url=url:gsub ('(//web%.archive%.org/[^%d]*)%d[^/]*', '%1' .. replacement .. '*', 1)	-- for preview, modify ts to 14 digits plus splat for calendar display
				end
			end
		elseif utilities.is_set (path) and 'web/' ~= path then					-- older archive URLs do not have the extra 'web/' path element
			err_msg = cfg.err_msg_supl.path;
		elseif utilities.is_set (flag) and not utilities.is_set (path) then		-- flag not allowed with the old form URL (without the 'web/' path element)
			err_msg = cfg.err_msg_supl.flag;
		elseif utilities.is_set (flag) and not flag:match ('%a%a_') then		-- flag if present must be two alpha characters and underscore (requires 'web/' path element)
			err_msg = cfg.err_msg_supl.flag;
		else
			return url, date, timestamp;										-- return ArchiveURL, ArchiveDate, and timestamp from |archive-url=
		end
	end
																				-- if here, something not right so
	utilities.set_message ('err_archive_url', {err_msg});						-- add error message and

	if is_preview_mode then
		return url, date, timestamp;											-- preview mode so return ArchiveURL, ArchiveDate, and timestamp from |archive-url=
	else
		return '', '';															-- return empty strings for ArchiveURL and ArchiveDate
	end
end


--[[--------------------------&lt; P L A C E _ C H E C K &gt;--------------------------------------------------------

check |place=, |publication-place=, |location= to see if these params include digits.  This function added because
many editors misuse location to specify the in-source location (|page(s)= and |at= are supposed to do that)

returns the original parameter value without modification; added maint cat when parameter value contains digits

]]

local function place_check (param_val)
	if not utilities.is_set (param_val) then									-- parameter empty or omitted
		return param_val;														-- return that empty state
	end
	
	if mw.ustring.find (param_val, '%d') then									-- not empty, are there digits in the parameter value
		utilities.set_message ('maint_location');								-- yep, add maint cat
	end
	
	return param_val;															-- and done
end


--[[--------------------------&lt; I S _ A R C H I V E D _ C O P Y &gt;----------------------------------------------

compares |title= to 'Archived copy' (placeholder added by bots that can't find proper title); if matches, return true; nil else

]]

local function is_archived_copy (title)
	title = mw.ustring.lower(title);											-- switch title to lower case
	if title:find (cfg.special_case_translation.archived_copy.en) then			-- if title is 'Archived copy'
		return true;
	elseif cfg.special_case_translation.archived_copy['local'] then
		if mw.ustring.find (title, cfg.special_case_translation.archived_copy['local']) then	-- mw.ustring() because might not be Latin script
			return true;
		end
	end
end


--[[--------------------------&lt; D I S P L A Y _ N A M E S _ S E L E C T &gt;--------------------------------------

for any of the |display-authors=, |display-editors=, etc parameters, select either the local or global setting.
When both are present, look at &lt;local_display_names&gt; value.  When the value is some sort of 'et al.'string,
special handling is required.

When {{cs1 config}} has |display-&lt;namelist&gt;= AND this template has |display-&lt;namelist&gt;=etal AND:
	the number of names specified by &lt;number_of_names&gt; is:
		greater than the number specified in the global |display-&lt;namelist&gt;= parameter (&lt;global_display_names&gt;)
			use global |display-&lt;namelist&gt;= parameter value
			set overridden maint category
		less than or equal to the number specified in the global |display-&lt;namelist&gt;=  parameter
			use local |display-&lt;namelist&gt;= parameter value

The purpose of this function is to prevent categorizing a template that has fewer names than the global setting
to keep the etal annotation specified by &lt;local_display_names&gt;.

]]

local function display_names_select (global_display_names, local_display_names, param_name, number_of_names, test)
	if global_display_names and utilities.is_set (local_display_names) then		-- when both
		if 'etal' == local_display_names:lower():gsub("[ '%.]", '') then		-- the :gsub() portion makes 'etal' from a variety of 'et al.' spellings and stylings
			number_of_names = tonumber (number_of_names);						-- convert these to numbers for comparison
			local global_display_names_num = tonumber (global_display_names);	-- &lt;global_display_names&gt; not set when parameter value is not digits

			if number_of_names &gt; global_display_names_num then					-- template has more names than global config allows to be displayed?
				utilities.set_message ('maint_overridden_setting');				-- set a maint message because global is overriding local |display-&lt;namelist&gt;=etal
				return global_display_names, 'cs1 config';						-- return global with spoof parameter name (for get_display_names())
			else
				return local_display_names, param_name;							-- return local because fewer names so let &lt;local_display_names&gt; control
			end
		end
																				-- here when &lt;global_display_names&gt; and &lt;local_display_names&gt; both numbers; &lt;global_display_names&gt; controls
		utilities.set_message ('maint_overridden_setting');						-- set a maint message
		return global_display_names, 'cs1 config';								-- return global with spoof parameter name (for get_display_names())
	end
																				-- here when only one of &lt;global_display_names&gt; or &lt;local_display_names&gt; set
	if global_display_names then
		return global_display_names, 'cs1 config';								-- return global with spoof parameter name (for get_display_names())
	else
		return local_display_names, param_name;									-- return local
	end
end


--[[--------------------------&lt; C I T A T I O N 0 &gt;------------------------------------------------------------

This is the main function doing the majority of the citation formatting.

]]

local function citation0( config, args )
	--[[ 
	Load Input Parameters
	The argument_wrapper facilitates the mapping of multiple aliases to single internal variable.
	]]
	local A = argument_wrapper ( args );
	local i 

	-- Pick out the relevant fields from the arguments.  Different citation templates
	-- define different field names for the same underlying things.	

	local author_etal;
	local a	= {};																-- authors list from |lastn= / |firstn= pairs or |vauthors=
	local Authors;
	local NameListStyle;
		if cfg.global_cs1_config_t['NameListStyle'] then						-- global setting in {{cs1 config}} overrides local |name-list-style= parameter value; nil when empty or assigned value invalid
			NameListStyle = is_valid_parameter_value (cfg.global_cs1_config_t['NameListStyle'], 'cs1 config: name-list-style', cfg.keywords_lists['name-list-style'], '');	-- error messaging 'param' here is a hoax
		else
			NameListStyle = is_valid_parameter_value (A['NameListStyle'], A:ORIGIN('NameListStyle'), cfg.keywords_lists['name-list-style'], '');
		end

		if cfg.global_cs1_config_t['NameListStyle'] and utilities.is_set (A['NameListStyle']) then	-- when template has |name-list-style=&lt;something&gt; which global setting has overridden
			utilities.set_message ('maint_overridden_setting');					-- set a maint message
		end

	local Collaboration = A['Collaboration'];

	do																			-- to limit scope of selected
		local selected = select_author_editor_source (A['Vauthors'], A['Authors'], args, 'AuthorList');
		if 1 == selected then
			a, author_etal = extract_names (args, 'AuthorList');				-- fetch author list from |authorn= / |lastn= / |firstn=, |author-linkn=, and |author-maskn=
		elseif 2 == selected then
			NameListStyle = 'vanc';												-- override whatever |name-list-style= might be
			a, author_etal = parse_vauthors_veditors (args, A['Vauthors'], 'AuthorList');	-- fetch author list from |vauthors=, |author-linkn=, and |author-maskn=
		elseif 3 == selected then
			Authors = A['Authors'];												-- use content of |people= or |credits=; |authors= is deprecated; TODO: constrain |people= and |credits= to cite av media, episode, serial?
		end
		if utilities.is_set (Collaboration) then
			author_etal = true;													-- so that |display-authors=etal not required
		end
	end

	local editor_etal;
	local e	= {};																-- editors list from |editor-lastn= / |editor-firstn= pairs or |veditors=

	do																			-- to limit scope of selected
		local selected = select_author_editor_source (A['Veditors'], nil, args, 'EditorList');	-- support for |editors= withdrawn
		if 1 == selected then
			e, editor_etal = extract_names (args, 'EditorList');				-- fetch editor list from |editorn= / |editor-lastn= / |editor-firstn=, |editor-linkn=, and |editor-maskn=
		elseif 2 == selected then
			NameListStyle = 'vanc';												-- override whatever |name-list-style= might be
			e, editor_etal = parse_vauthors_veditors (args, args.veditors, 'EditorList');	-- fetch editor list from |veditors=, |editor-linkn=, and |editor-maskn=
		end
	end
							
	local Chapter = A['Chapter'];												-- done here so that we have access to |contribution= from |chapter= aliases
	local Chapter_origin = A:ORIGIN ('Chapter');
	local Contribution;															-- because contribution is required for contributor(s)
		if 'contribution' == Chapter_origin then
			Contribution = Chapter;												-- get the name of the contribution
		end
	local c = {};																-- contributors list from |contributor-lastn= / contributor-firstn= pairs
	
	if utilities.in_array (config.CitationClass, {"book", "citation"}) and not utilities.is_set (A['Periodical']) then	-- |contributor= and |contribution= only supported in book cites
		c = extract_names (args, 'ContributorList');							-- fetch contributor list from |contributorn= / |contributor-lastn=, -firstn=, -linkn=, -maskn=
		
		if 0 &lt; #c then
			if not utilities.is_set (Contribution) then							-- |contributor= requires |contribution=
				utilities.set_message ('err_contributor_missing_required_param', 'contribution');	-- add missing contribution error message
				c = {};															-- blank the contributors' table; it is used as a flag later
			end
			if 0 == #a then														-- |contributor= requires |author=
				utilities.set_message ('err_contributor_missing_required_param', 'author');	-- add missing author error message
				c = {};															-- blank the contributors' table; it is used as a flag later
			end
		end
	else																		-- if not a book cite
		if utilities.select_one (args, cfg.aliases['ContributorList-Last'], 'err_redundant_parameters', 1 ) then	-- are there contributor name list parameters?
			utilities.set_message ('err_contributor_ignored');					-- add contributor ignored error message
		end
		Contribution = nil;														-- unset
	end

	local Title = A['Title'];
	local TitleLink = A['TitleLink'];

	local auto_select = '';														-- default is auto
	local accept_link;
	TitleLink, accept_link = utilities.has_accept_as_written (TitleLink, true);	-- test for accept-this-as-written markup
	if (not accept_link) and utilities.in_array (TitleLink, {'none', 'pmc', 'doi'}) then -- check for special keywords
		auto_select = TitleLink;												-- remember selection for later
		TitleLink = '';															-- treat as if |title-link= would have been empty
	end

	TitleLink = link_title_ok (TitleLink, A:ORIGIN ('TitleLink'), Title, 'title');	-- check for wiki-markup in |title-link= or wiki-markup in |title= when |title-link= is set

	local Section = '';															-- {{cite map}} only; preset to empty string for concatenation if not used
	if 'map' == config.CitationClass and 'section' == Chapter_origin then
		Section = A['Chapter'];													-- get |section= from |chapter= alias list; |chapter= and the other aliases not supported in {{cite map}}
		Chapter = '';															-- unset for now; will be reset later from |map= if present
	end

	local Periodical = A['Periodical'];
	local Periodical_origin = A:ORIGIN('Periodical');
	local ScriptPeriodical = A['ScriptPeriodical'];
	local ScriptPeriodical_origin = A:ORIGIN('ScriptPeriodical');
	local TransPeriodical =  A['TransPeriodical'];
	local TransPeriodical_origin =  A:ORIGIN ('TransPeriodical');
	
	if (utilities.in_array (config.CitationClass, {'book', 'encyclopaedia'}) and (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical) or utilities.is_set (TransPeriodical))) then
		local param;
		if utilities.is_set (Periodical) then									-- get a parameter name from one of these periodical related meta-parameters
			Periodical = '';													-- unset because not valid {{cite book}} or {{cite encyclopedia}} parameters 
			param = Periodical_origin											-- get parameter name for error messaging
		elseif utilities.is_set (TransPeriodical) then
			TransPeriodical = '';												-- unset because not valid {{cite book}} or {{cite encyclopedia}} parameters 
			param = TransPeriodical_origin;										-- get parameter name for error messaging
		elseif utilities.is_set (ScriptPeriodical) then
			ScriptPeriodical = '';												-- unset because not valid {{cite book}} or {{cite encyclopedia}} parameters 
			param = ScriptPeriodical_origin;									-- get parameter name for error messaging
		end

		if utilities.is_set (param) then										-- if we found one
			utilities.set_message ('err_periodical_ignored', {param});			-- emit an error message
		end
	end

	if utilities.is_set (Periodical) then
		local i;
		Periodical, i = utilities.strip_apostrophe_markup (Periodical);			-- strip apostrophe markup so that metadata isn't contaminated 
		if i then																-- non-zero when markup was stripped so emit an error message
			utilities.set_message ('err_apostrophe_markup', {Periodical_origin});
		end
	end

	if 'mailinglist' == config.CitationClass then								-- special case for {{cite mailing list}}
		if utilities.is_set (Periodical) and utilities.is_set (A ['MailingList']) then	-- both set emit an error TODO: make a function for this and similar?
			utilities.set_message ('err_redundant_parameters', {utilities.wrap_style ('parameter', Periodical_origin) .. cfg.presentation['sep_list_pair'] .. utilities.wrap_style ('parameter', 'mailinglist')});
		end

		Periodical = A ['MailingList'];											-- error or no, set Periodical to |mailinglist= value because this template is {{cite mailing list}}
		Periodical_origin = A:ORIGIN('MailingList');
	end

	-- web and news not tested for now because of 
	-- Wikipedia:Administrators%27_noticeboard#Is_there_a_semi-automated_tool_that_could_fix_these_annoying_"Cite_Web"_errors?
	if not (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical)) then	-- 'periodical' templates require periodical parameter
	--	local p = {['journal'] = 'journal', ['magazine'] = 'magazine', ['news'] = 'newspaper', ['web'] = 'website'};	-- for error message
		local p = {['journal'] = 'journal', ['magazine'] = 'magazine'};			-- for error message
		if p[config.CitationClass]  then
			utilities.set_message ('err_missing_periodical', {config.CitationClass, p[config.CitationClass]});
		end
	end
	
	local Volume;
	if 'citation' == config.CitationClass then
		if utilities.is_set (Periodical) then
			if not utilities.in_array (Periodical_origin, cfg.citation_no_volume_t) then	-- {{citation}} does not render |volume= when these parameters are used
				Volume = A['Volume'];											-- but does for all other 'periodicals'
			end
		elseif utilities.is_set (ScriptPeriodical) then
			if 'script-website' ~= ScriptPeriodical_origin then					-- {{citation}} does not render volume for |script-website=
				Volume = A['Volume'];											-- but does for all other 'periodicals'
			end
		else
			Volume = A['Volume'];												-- and does for non-'periodical' cites
		end
	elseif utilities.in_array (config.CitationClass, cfg.templates_using_volume) then	-- render |volume= for cs1 according to the configuration settings
		Volume = A['Volume'];
	end	
	extra_text_in_vol_iss_check (Volume, A:ORIGIN ('Volume'), 'v');	

	local Issue;
	if 'citation' == config.CitationClass then
		if utilities.is_set (Periodical) and utilities.in_array (Periodical_origin, cfg.citation_issue_t) then	-- {{citation}} may render |issue= when these parameters are used
			Issue = utilities.hyphen_to_dash (A['Issue']);
		end
	elseif utilities.in_array (config.CitationClass, cfg.templates_using_issue) then	-- conference &amp; map books do not support issue; {{citation}} listed here because included in settings table
		if not (utilities.in_array (config.CitationClass, {'conference', 'map', 'citation'}) and not (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical))) then
			Issue = utilities.hyphen_to_dash (A['Issue']);
		end
	end
	
	local ArticleNumber;

	if utilities.in_array (config.CitationClass, {'journal', 'conference'}) or ('citation' == config.CitationClass and utilities.is_set (Periodical) and 'journal' == Periodical_origin) then
		ArticleNumber = A['ArticleNumber'];
	end

	extra_text_in_vol_iss_check (Issue, A:ORIGIN ('Issue'), 'i');	

	local Page;
	local Pages;
	local At;
	local QuotePage;
	local QuotePages;
	if not utilities.in_array (config.CitationClass, cfg.templates_not_using_page) then		-- TODO: rewrite to emit ignored parameter error message?
		Page = A['Page'];
		Pages = utilities.hyphen_to_dash (A['Pages']);	
		At = A['At'];
		QuotePage = A['QuotePage'];
		QuotePages = utilities.hyphen_to_dash (A['QuotePages']);
	end

	local Edition = A['Edition'];
	local PublicationPlace = place_check (A['PublicationPlace'], A:ORIGIN('PublicationPlace'));
	local Place = place_check (A['Place'], A:ORIGIN('Place'));
	
	local PublisherName = A['PublisherName'];
	local PublisherName_origin = A:ORIGIN('PublisherName');
	if utilities.is_set (PublisherName) and (cfg.keywords_xlate['none'] ~= PublisherName) then
		local i = 0;
		PublisherName, i = utilities.strip_apostrophe_markup (PublisherName);	-- strip apostrophe markup so that metadata isn't contaminated; publisher is never italicized
		if i and (0 &lt; i) then													-- non-zero when markup was stripped so emit an error message
			utilities.set_message ('err_apostrophe_markup', {PublisherName_origin});
		end
	end
	
	if ('document' == config.CitationClass) and not utilities.is_set (PublisherName) then
		utilities.set_message ('err_missing_publisher', {config.CitationClass, 'publisher'});
	end

	local Newsgroup = A['Newsgroup'];											-- TODO: strip apostrophe markup?
	local Newsgroup_origin = A:ORIGIN('Newsgroup');	

	if 'newsgroup' == config.CitationClass then
		if utilities.is_set (PublisherName) and (cfg.keywords_xlate['none'] ~= PublisherName) then	-- general use parameter |publisher= not allowed in cite newsgroup
			utilities.set_message ('err_parameter_ignored', {PublisherName_origin});
		end

		PublisherName = nil;													-- ensure that this parameter is unset for the time being; will be used again after COinS
	end

	local URL = A['URL'];														-- TODO: better way to do this for URL, ChapterURL, and MapURL?
	local UrlAccess = is_valid_parameter_value (A['UrlAccess'], A:ORIGIN('UrlAccess'), cfg.keywords_lists['url-access'], nil);
	
	if not utilities.is_set (URL) and utilities.is_set (UrlAccess) then
		UrlAccess = nil;
		utilities.set_message ('err_param_access_requires_param', 'url');
	end
	
	local ChapterURL = A['ChapterURL'];
	local ChapterUrlAccess = is_valid_parameter_value (A['ChapterUrlAccess'], A:ORIGIN('ChapterUrlAccess'), cfg.keywords_lists['url-access'], nil);
	if not utilities.is_set (ChapterURL) and utilities.is_set (ChapterUrlAccess) then
		ChapterUrlAccess = nil;
		utilities.set_message ('err_param_access_requires_param', {A:ORIGIN('ChapterUrlAccess'):gsub ('%-access', '')});
	end

	local MapUrlAccess = is_valid_parameter_value (A['MapUrlAccess'], A:ORIGIN('MapUrlAccess'), cfg.keywords_lists['url-access'], nil);
	if not utilities.is_set (A['MapURL']) and utilities.is_set (MapUrlAccess) then
		MapUrlAccess = nil;
		utilities.set_message ('err_param_access_requires_param', {'map-url'});
	end

	local this_page = mw.title.getCurrentTitle();								-- also used for COinS and for language
	local no_tracking_cats = is_valid_parameter_value (A['NoTracking'], A:ORIGIN('NoTracking'), cfg.keywords_lists['yes_true_y'], nil);

	-- check this page to see if it is in one of the namespaces that cs1 is not supposed to add to the error categories
	if not utilities.is_set (no_tracking_cats) then								-- ignore if we are already not going to categorize this page
		if cfg.uncategorized_namespaces[this_page.namespace] then				-- is this page's namespace id one of the uncategorized namespace ids?
			no_tracking_cats = "true";											-- set no_tracking_cats
		end
		for _, v in ipairs (cfg.uncategorized_subpages) do						-- cycle through page name patterns
			if this_page.text:match (v) then									-- test page name against each pattern
				no_tracking_cats = "true";										-- set no_tracking_cats
				break;															-- bail out if one is found
			end
		end
	end
																				-- check for extra |page=, |pages= or |at= parameters. (also sheet and sheets while we're at it)
	utilities.select_one (args, {'page', 'p', 'pp', 'pages', 'at', 'sheet', 'sheets'}, 'err_redundant_parameters');	-- this is a dummy call simply to get the error message and category

	local coins_pages;
	
	Page, Pages, At, coins_pages = insource_loc_get (Page, A:ORIGIN('Page'), Pages, A:ORIGIN('Pages'), At);

	local NoPP = is_valid_parameter_value (A['NoPP'], A:ORIGIN('NoPP'), cfg.keywords_lists['yes_true_y'], nil);

	if utilities.is_set (PublicationPlace) and utilities.is_set (Place) then	-- both |publication-place= and |place= (|location=) allowed if different
		utilities.add_prop_cat ('location-test');								-- add property cat to evaluate how often PublicationPlace and Place are used together
		if PublicationPlace == Place then
			Place = '';															-- unset; don't need both if they are the same
		end
	elseif not utilities.is_set (PublicationPlace) and utilities.is_set (Place) then	-- when only |place= (|location=) is set ...
		PublicationPlace = Place;												-- promote |place= (|location=) to |publication-place
	end

	if PublicationPlace == Place then Place = ''; end							-- don't need both if they are the same

	local URL_origin = A:ORIGIN('URL');											-- get name of parameter that holds URL
	local ChapterURL_origin = A:ORIGIN('ChapterURL');							-- get name of parameter that holds ChapterURL
	local ScriptChapter = A['ScriptChapter'];
	local ScriptChapter_origin = A:ORIGIN ('ScriptChapter');
	local Format = A['Format'];
	local ChapterFormat = A['ChapterFormat'];
	local TransChapter = A['TransChapter'];
	local TransChapter_origin = A:ORIGIN ('TransChapter');
	local TransTitle = A['TransTitle'];
	local ScriptTitle = A['ScriptTitle'];
	
	--[[
	Parameter remapping for cite encyclopedia:
	When the citation has these parameters:
		|encyclopedia= and |title= then map |title= to |article= and |encyclopedia= to |title= for rendering
		|encyclopedia= and |article= then map |encyclopedia= to |title= for rendering

		|trans-title= maps to |trans-chapter= when |title= is re-mapped
		|url= maps to |chapter-url= when |title= is remapped
	
	All other combinations of |encyclopedia=, |title=, and |article= are not modified
	
	]]

	local Encyclopedia = A['Encyclopedia'];										-- used as a flag by this module and by ~/COinS
	local ScriptEncyclopedia = A['ScriptEncyclopedia'];
	local TransEncyclopedia = A['TransEncyclopedia'];

	if utilities.is_set (Encyclopedia) or utilities.is_set (ScriptEncyclopedia) then	-- emit error message when Encyclopedia set but template is other than {{cite encyclopedia}} or {{citation}}
		if 'encyclopaedia' ~= config.CitationClass and 'citation' ~= config.CitationClass then
			if utilities.is_set (Encyclopedia) then
				utilities.set_message ('err_parameter_ignored', {A:ORIGIN ('Encyclopedia')});
			else
				utilities.set_message ('err_parameter_ignored', {A:ORIGIN ('ScriptEncyclopedia')});
			end
			Encyclopedia = nil;													-- unset these because not supported by this template
			ScriptEncyclopedia = nil;
			TransEncyclopedia = nil;
		end
	elseif utilities.is_set (TransEncyclopedia) then
		utilities.set_message ('err_trans_missing_title', {'encyclopedia'});
	end

	if ('encyclopaedia' == config.CitationClass) or ('citation' == config.CitationClass and utilities.is_set (Encyclopedia)) then
		if utilities.is_set (Periodical) and utilities.is_set (Encyclopedia) then	-- when both parameters set emit an error message; {{citation}} only; Periodical not allowed in {{cite encyclopedia}}
			utilities.set_message ('err_periodical_ignored', {Periodical_origin});
		end

		if utilities.is_set (Encyclopedia) or utilities.is_set (ScriptEncyclopedia) then
			Periodical = Encyclopedia;											-- error or no, set Periodical to Encyclopedia for rendering; {{citation}} could (not legitimately) have both; use Encyclopedia
			Periodical_origin = A:ORIGIN ('Encyclopedia');
			ScriptPeriodical = ScriptEncyclopedia;
			ScriptPeriodical_origin = A:ORIGIN ('ScriptEncyclopedia');

			if utilities.is_set (Title) or utilities.is_set (ScriptTitle) then
				if not utilities.is_set (Chapter) then
					Chapter = Title;											-- |encyclopedia= and |title= are set so map |title= params to |article= params for rendering
					ScriptChapter = ScriptTitle;
					ScriptChapter_origin = A:ORIGIN('ScriptTitle')
					TransChapter = TransTitle;
					ChapterURL = URL;
					ChapterURL_origin = URL_origin;
					ChapterUrlAccess = UrlAccess;
					ChapterFormat = Format;

					if not utilities.is_set (ChapterURL) and utilities.is_set (TitleLink) then
						Chapter = utilities.make_wikilink (TitleLink, Chapter);
					end
					Title = Periodical;											-- now map |encyclopedia= params to |title= params for rendering
					ScriptTitle = ScriptPeriodical or '';
					TransTitle = TransEncyclopedia or '';
					Periodical = '';											-- redundant so unset
					ScriptPeriodical = '';
					URL = '';
					Format = '';
					TitleLink = '';
				end
			elseif utilities.is_set (Chapter) or utilities.is_set (ScriptChapter) then	-- |title= not set
				Title = Periodical;												-- |encyclopedia= set and |article= set so map |encyclopedia= to |title= for rendering
				ScriptTitle = ScriptPeriodical or '';
				TransTitle = TransEncyclopedia or '';
				Periodical = '';												-- redundant so unset
				ScriptPeriodical = '';
			end
		end
	end

	-- special case for cite techreport.
	local ID = A['ID'];
	if (config.CitationClass == "techreport") then								-- special case for cite techreport
		if utilities.is_set (A['Number']) then									-- cite techreport uses 'number', which other citations alias to 'issue'
			if not utilities.is_set (ID) then									-- can we use ID for the "number"?
				ID = A['Number'];												-- yes, use it
			else																-- ID has a value so emit error message
				utilities.set_message ('err_redundant_parameters', {utilities.wrap_style ('parameter', 'id') .. cfg.presentation['sep_list_pair'] .. utilities.wrap_style ('parameter', 'number')});
			end
		end	
	end

	-- Account for the oddity that is {{cite conference}}, before generation of COinS data.
	local ChapterLink -- = A['ChapterLink'];									-- deprecated as a parameter but still used internally by cite episode
	local Conference = A['Conference'];
	local BookTitle = A['BookTitle'];
	local TransTitle_origin = A:ORIGIN ('TransTitle');
	if 'conference' == config.CitationClass then
		if utilities.is_set (BookTitle) then
			Chapter = Title;
			Chapter_origin = 'title';
	--		ChapterLink = TitleLink;											-- |chapter-link= is deprecated
			ChapterURL = URL;
			ChapterUrlAccess = UrlAccess;
			ChapterURL_origin = URL_origin;
			URL_origin = '';
			ChapterFormat = Format;
			TransChapter = TransTitle;
			TransChapter_origin = TransTitle_origin;
			Title = BookTitle;
			Format = '';
	--		TitleLink = '';
			TransTitle = '';
			URL = '';
		end
	elseif 'speech' ~= config.CitationClass then
		Conference = '';														-- not cite conference or cite speech so make sure this is empty string
	end
	
	-- CS1/2 mode
	local Mode;
		if cfg.global_cs1_config_t['Mode'] then									-- global setting in {{cs1 config}} overrides local |mode= parameter value; nil when empty or assigned value invalid
			Mode = is_valid_parameter_value (cfg.global_cs1_config_t['Mode'], 'cs1 config: mode', cfg.keywords_lists['mode'], '');	-- error messaging 'param' here is a hoax
		else
			Mode = is_valid_parameter_value (A['Mode'], A:ORIGIN('Mode'), cfg.keywords_lists['mode'], '');
		end

		if cfg.global_cs1_config_t['Mode'] and utilities.is_set (A['Mode']) then	-- when template has |mode=&lt;something&gt; which global setting has overridden
			utilities.set_message ('maint_overridden_setting');					-- set a maint message
		end

	-- separator character and postscript
	local sepc, PostScript = set_style (Mode:lower(), A['PostScript'], config.CitationClass);
	-- controls capitalization of certain static text
	local use_lowercase = ( sepc == ',' );
	
	-- cite map oddities
	local Cartography = "";
	local Scale = "";
	local Sheet = A['Sheet'] or '';
	local Sheets = A['Sheets'] or '';
	if config.CitationClass == "map" then
		if utilities.is_set (Chapter) then										--TODO: make a function for this and similar?
			utilities.set_message ('err_redundant_parameters', {utilities.wrap_style ('parameter', 'map') .. cfg.presentation['sep_list_pair'] .. utilities.wrap_style ('parameter', Chapter_origin)});	-- add error message
		end
		Chapter = A['Map'];
		Chapter_origin = A:ORIGIN('Map');
		ChapterURL = A['MapURL'];
		ChapterURL_origin = A:ORIGIN('MapURL');
		TransChapter = A['TransMap'];
		ScriptChapter = A['ScriptMap']
		ScriptChapter_origin = A:ORIGIN('ScriptMap')

		ChapterUrlAccess = MapUrlAccess;
		ChapterFormat = A['MapFormat'];

		Cartography = A['Cartography'];
		if utilities.is_set ( Cartography ) then
			Cartography = sepc .. " " .. wrap_msg ('cartography', Cartography, use_lowercase);
		end		
		Scale = A['Scale'];
		if utilities.is_set ( Scale ) then
			Scale = sepc .. " " .. Scale;
		end
	end

	-- Account for the oddities that are {{cite episode}} and {{cite serial}}, before generation of COinS data.
	local Series = A['Series'];
	if 'episode' == config.CitationClass or 'serial' == config.CitationClass then
		local SeriesLink = A['SeriesLink'];

		SeriesLink = link_title_ok (SeriesLink, A:ORIGIN ('SeriesLink'), Series, 'series');	-- check for wiki-markup in |series-link= or wiki-markup in |series= when |series-link= is set

		local Network = A['Network'];
		local Station = A['Station'];
		local s, n = {}, {};
																				-- do common parameters first
		if utilities.is_set (Network) then table.insert(n, Network); end
		if utilities.is_set (Station) then table.insert(n, Station); end
		ID = table.concat(n, sepc .. ' ');
		
		if 'episode' == config.CitationClass then								-- handle the oddities that are strictly {{cite episode}}
			local Season = A['Season'];
			local SeriesNumber = A['SeriesNumber'];

			if utilities.is_set (Season) and utilities.is_set (SeriesNumber) then	-- these are mutually exclusive so if both are set TODO: make a function for this and similar?
				utilities.set_message ('err_redundant_parameters', {utilities.wrap_style ('parameter', 'season') .. cfg.presentation['sep_list_pair'] .. utilities.wrap_style ('parameter', 'seriesno')});		-- add error message
				SeriesNumber = '';												-- unset; prefer |season= over |seriesno=
			end
																				-- assemble a table of parts concatenated later into Series
			if utilities.is_set (Season) then table.insert(s, wrap_msg ('season', Season, use_lowercase)); end
			if utilities.is_set (SeriesNumber) then table.insert(s, wrap_msg ('seriesnum', SeriesNumber, use_lowercase)); end
			if utilities.is_set (Issue) then table.insert(s, wrap_msg ('episode', Issue, use_lowercase)); end
			Issue = '';															-- unset because this is not a unique parameter
	
			Chapter = Title;													-- promote title parameters to chapter
			ScriptChapter = ScriptTitle;
			ScriptChapter_origin = A:ORIGIN('ScriptTitle');
			ChapterLink = TitleLink;											-- alias |episode-link=
			TransChapter = TransTitle;
			ChapterURL = URL;
			ChapterUrlAccess = UrlAccess;
			ChapterURL_origin = URL_origin;
			ChapterFormat = Format;

			Title = Series;														-- promote series to title
			TitleLink = SeriesLink;
			Series = table.concat(s, sepc .. ' ');								-- this is concatenation of season, seriesno, episode number

			if utilities.is_set (ChapterLink) and not utilities.is_set (ChapterURL) then	-- link but not URL
				Chapter = utilities.make_wikilink (ChapterLink, Chapter);
			elseif utilities.is_set (ChapterLink) and utilities.is_set (ChapterURL) then	-- if both are set, URL links episode;
				Series = utilities.make_wikilink (ChapterLink, Series);
			end
			URL = '';															-- unset
			TransTitle = '';
			ScriptTitle = '';
			Format = '';
			
		else																	-- now oddities that are cite serial
			Issue = '';															-- unset because this parameter no longer supported by the citation/core version of cite serial
			Chapter = A['Episode'];												-- TODO: make |episode= available to cite episode someday?
			if utilities.is_set (Series) and utilities.is_set (SeriesLink) then
				Series = utilities.make_wikilink (SeriesLink, Series);
			end
			Series = utilities.wrap_style ('italic-title', Series);				-- series is italicized
		end	
	end
	-- end of {{cite episode}} stuff

	-- handle type parameter for those CS1 citations that have default values
	local TitleType = A['TitleType'];
	local Degree = A['Degree'];
	if utilities.in_array (config.CitationClass, {'AV-media-notes', 'document', 'interview', 'mailinglist', 'map', 'podcast', 'pressrelease', 'report', 'speech', 'techreport', 'thesis'}) then
		TitleType = set_titletype (config.CitationClass, TitleType);
		if utilities.is_set (Degree) and "Thesis" == TitleType then				-- special case for cite thesis
			TitleType = Degree .. ' ' .. cfg.title_types ['thesis']:lower();
		end
	end

	if utilities.is_set (TitleType) then										-- if type parameter is specified
		TitleType = utilities.substitute ( cfg.messages['type'], TitleType);	-- display it in parentheses
	-- TODO: Hack on TitleType to fix bunched parentheses problem
	end

	-- legacy: promote PublicationDate to Date if neither Date nor Year are set.
	local Date = A['Date'];
 	local Date_origin;															-- to hold the name of parameter promoted to Date; required for date error messaging
	local PublicationDate = A['PublicationDate'];
	local Year = A['Year'];

	if not utilities.is_set (Date) then
		Date = Year;															-- promote Year to Date
		Year = nil;																-- make nil so Year as empty string isn't used for CITEREF
		if not utilities.is_set (Date) and utilities.is_set (PublicationDate) then	-- use PublicationDate when |date= and |year= are not set
			Date = PublicationDate;												-- promote PublicationDate to Date
			PublicationDate = '';												-- unset, no longer needed
			Date_origin = A:ORIGIN('PublicationDate');							-- save the name of the promoted parameter
		else
			Date_origin = A:ORIGIN('Year');										-- save the name of the promoted parameter
		end
	else
		Date_origin = A:ORIGIN('Date');											-- not a promotion; name required for error messaging
	end

	if PublicationDate == Date then PublicationDate = ''; end					-- if PublicationDate is same as Date, don't display in rendered citation

	--[[
	Go test all of the date-holding parameters for valid MOS:DATE format and make sure that dates are real dates. This must be done before we do COinS because here is where
	we get the date used in the metadata.
	
	Date validation supporting code is in Module:Citation/CS1/Date_validation
	]]

	local DF = is_valid_parameter_value (A['DF'], A:ORIGIN('DF'), cfg.keywords_lists['df'], '');
	if not utilities.is_set (DF) then
		DF = cfg.global_df;														-- local |df= if present overrides global df set by {{use xxx date}} template
	end

	local ArchiveURL;
	local ArchiveDate;
	local ArchiveFormat = A['ArchiveFormat'];
	local archive_url_timestamp;												-- timestamp from wayback machine url
	
	ArchiveURL, ArchiveDate, archive_url_timestamp = archive_url_check (A['ArchiveURL'], A['ArchiveDate'])
	ArchiveFormat = style_format (ArchiveFormat, ArchiveURL, 'archive-format', 'archive-url');
	
	ArchiveURL, ArchiveDate = is_unique_archive_url (ArchiveURL, URL, ChapterURL, A:ORIGIN('ArchiveURL'), ArchiveDate);		-- add error message when URL or ChapterURL == ArchiveURL

	local AccessDate = A['AccessDate'];
	local COinS_date = {};														-- holds date info extracted from |date= for the COinS metadata by Module:Date verification
	local DoiBroken = A['DoiBroken'];
	local Embargo = A['Embargo'];
	local anchor_year;															-- used in the CITEREF identifier
	do	-- create defined block to contain local variables error_message, date_parameters_list, mismatch
		local error_message = '';
																				-- AirDate has been promoted to Date so not necessary to check it
		local date_parameters_list = {
			['access-date'] = {val = AccessDate, name = A:ORIGIN ('AccessDate')},
			['archive-date'] = {val = ArchiveDate, name = A:ORIGIN ('ArchiveDate')},
			['date'] = {val = Date, name = Date_origin},
			['doi-broken-date'] = {val = DoiBroken, name = A:ORIGIN ('DoiBroken')},
			['pmc-embargo-date'] = {val = Embargo, name = A:ORIGIN ('Embargo')},
			['publication-date'] = {val = PublicationDate, name = A:ORIGIN ('PublicationDate')},
			['year'] = {val = Year, name = A:ORIGIN ('Year')},
			};

		local error_list = {};
		anchor_year, Embargo = validation.dates(date_parameters_list, COinS_date, error_list);

		if utilities.is_set (Year) and utilities.is_set (Date) then				-- both |date= and |year= not normally needed; 
			validation.year_date_check (Year, A:ORIGIN ('Year'), Date, A:ORIGIN ('Date'), error_list);
		end
		
		if 0 == #error_list then												-- error free dates only; 0 when error_list is empty
			local modified = false;												-- flag
			
			if utilities.is_set (DF) then										-- if we need to reformat dates
				modified = validation.reformat_dates (date_parameters_list, DF);	-- reformat to DF format, use long month names if appropriate
			end

			if true == validation.date_hyphen_to_dash (date_parameters_list) then	-- convert hyphens to dashes where appropriate
				modified = true;
				utilities.set_message ('maint_date_format');					-- hyphens were converted so add maint category
			end
			
	-- for those wikis that can and want to have English date names translated to the local language; not supported at en.wiki
			if cfg.date_name_auto_xlate_enable and validation.date_name_xlate (date_parameters_list, cfg.date_digit_auto_xlate_enable ) then
				utilities.set_message ('maint_date_auto_xlated');				-- add maint cat
				modified = true;
			end

			if modified then													-- if the date_parameters_list values were modified
				AccessDate = date_parameters_list['access-date'].val;			-- overwrite date holding parameters with modified values
				ArchiveDate = date_parameters_list['archive-date'].val;
				Date = date_parameters_list['date'].val;
				DoiBroken = date_parameters_list['doi-broken-date'].val;
				PublicationDate = date_parameters_list['publication-date'].val;
			end

			if archive_url_timestamp and utilities.is_set (ArchiveDate) then
				validation.archive_date_check (ArchiveDate, archive_url_timestamp, DF);	-- does YYYYMMDD in archive_url_timestamp match date in ArchiveDate
			end
		else
			utilities.set_message ('err_bad_date', {utilities.make_sep_list (#error_list, error_list)});	-- add this error message
		end
	end	-- end of do

	if utilities.in_array (config.CitationClass, {'book', 'encyclopaedia'}) or	-- {{cite book}}, {{cite encyclopedia}}; TODO: {{cite conference}} and others?
		('citation' == config.CitationClass and utilities.is_set (Encyclopedia)) or			-- {{citation}} as an encylopedia citation
		('citation' == config.CitationClass and not utilities.is_set (Periodical)) then		-- {{citation}} as a book citation
			if utilities.is_set (PublicationPlace) then
				if not utilities.is_set (PublisherName) then
					local date = COinS_date.rftdate and tonumber (COinS_date.rftdate:match ('%d%d%d%d'));	-- get year portion of COinS date (because in Arabic numerals); convert string to number
					if date and (1850 &lt;= date) then								-- location has no publisher; if date is 1850 or later
						utilities.set_message ('maint_location_no_publisher');	-- add maint cat
					end
				else															-- PublisherName has a value
					if cfg.keywords_xlate['none'] == PublisherName then			-- if that value is 'none' (only for book and encyclopedia citations)
						PublisherName = '';										-- unset
					end
				end
			end
	end

	local ID_list = {};															-- sequence table of rendered identifiers
	local ID_list_coins = {};													-- table of identifiers and their values from args; key is same as cfg.id_handlers's key
	local Class = A['Class'];													-- arxiv class identifier
	
	local ID_support = {
		{A['ASINTLD'], 'ASIN', 'err_asintld_missing_asin', A:ORIGIN ('ASINTLD')},				
		{DoiBroken, 'DOI', 'err_doibroken_missing_doi', A:ORIGIN ('DoiBroken')},
		{Embargo, 'PMC', 'err_embargo_missing_pmc', A:ORIGIN ('Embargo')},
		}

	ID_list, ID_list_coins = identifiers.identifier_lists_get (args, {DoiBroken = DoiBroken, ASINTLD = A['ASINTLD'], Embargo = Embargo, Class = Class}, ID_support);

	-- Account for the oddities that are {{cite arxiv}}, {{cite biorxiv}}, {{cite citeseerx}}, {{cite medrxiv}}, {{cite ssrn}}, before generation of COinS data.
	if utilities.in_array (config.CitationClass, whitelist.preprint_template_list_t) then	-- |arxiv= or |eprint= required for cite arxiv; |biorxiv=, |citeseerx=, |medrxiv=, |ssrn= required for their templates
		if not (args[cfg.id_handlers[config.CitationClass:upper()].parameters[1]] or 		-- can't use ID_list_coins k/v table here because invalid parameters omitted
			args[cfg.id_handlers[config.CitationClass:upper()].parameters[2]]) then			-- which causes unexpected parameter missing error message
				utilities.set_message ('err_' .. config.CitationClass .. '_missing');		-- add error message
		end

		Periodical = ({['arxiv'] = 'arXiv', ['biorxiv'] = 'bioRxiv', ['citeseerx'] = 'CiteSeerX', ['medrxiv'] = 'medRxiv', ['ssrn'] = 'Social Science Research Network'})[config.CitationClass];
	end

	-- Link the title of the work if no |url= was provided, but we have a |pmc= or a |doi= with |doi-access=free

	if config.CitationClass == "journal" and not utilities.is_set (URL) and not utilities.is_set (TitleLink) and not utilities.in_array (cfg.keywords_xlate[Title], {'off', 'none'}) then -- TODO: remove 'none' once existing citations have been switched to 'off', so 'none' can be used as token for "no title" instead
		if 'none' ~= cfg.keywords_xlate[auto_select] then						-- if auto-linking not disabled
 	 		if identifiers.auto_link_urls[auto_select] then						-- manual selection
		 		URL = identifiers.auto_link_urls[auto_select];					-- set URL to be the same as identifier's external link
 				URL_origin = cfg.id_handlers[auto_select:upper()].parameters[1];	-- set URL_origin to parameter name for use in error message if citation is missing a |title=
			elseif identifiers.auto_link_urls['pmc'] then						-- auto-select PMC
				URL = identifiers.auto_link_urls['pmc'];						-- set URL to be the same as the PMC external link if not embargoed
				URL_origin = cfg.id_handlers['PMC'].parameters[1];				-- set URL_origin to parameter name for use in error message if citation is missing a |title=
			elseif identifiers.auto_link_urls['doi'] then						-- auto-select DOI
				URL = identifiers.auto_link_urls['doi'];
				URL_origin = cfg.id_handlers['DOI'].parameters[1];
			end
 	 	end

		if utilities.is_set (URL) then											-- set when using an identifier-created URL
			if utilities.is_set (AccessDate) then								-- |access-date= requires |url=; identifier-created URL is not |url=
				utilities.set_message ('err_accessdate_missing_url');			-- add an error message
				AccessDate = '';												-- unset
			end

			if utilities.is_set (ArchiveURL) then								-- |archive-url= requires |url=; identifier-created URL is not |url=
				utilities.set_message ('err_archive_missing_url');				-- add an error message
				ArchiveURL = '';												-- unset
			end
		end
	end

	-- At this point fields may be nil if they weren't specified in the template use.  We can use that fact.
	-- Test if citation has no title
	if	not utilities.is_set (Title) and not utilities.is_set (TransTitle) and not utilities.is_set (ScriptTitle) then	-- has special case for cite episode
		utilities.set_message ('err_citation_missing_title', {'episode' == config.CitationClass and 'series' or 'title'});
	end

	if utilities.in_array (cfg.keywords_xlate[Title], {'off', 'none'}) and
			utilities.in_array (config.CitationClass, {'journal', 'citation'}) and
			(utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical)) and
			('journal' == Periodical_origin or 'script-journal' == ScriptPeriodical_origin) then	-- special case for journal cites
				Title = '';														-- set title to empty string
				utilities.set_message ('maint_untitled');						-- add maint cat
	end

	-- COinS metadata (see &lt;http://ocoins.info/&gt;) for automated parsing of citation information.
	-- handle the oddity that is cite encyclopedia and {{citation |encyclopedia=something}}. Here we presume that
	-- when Periodical, Title, and Chapter are all set, then Periodical is the book (encyclopedia) title, Title
	-- is the article title, and Chapter is a section within the article.  So, we remap 
	
	local coins_chapter = Chapter;												-- default assuming that remapping not required
	local coins_title = Title;													-- et tu
	if 'encyclopaedia' == config.CitationClass or ('citation' == config.CitationClass and utilities.is_set (Encyclopedia)) then
		if utilities.is_set (Chapter) and utilities.is_set (Title) and utilities.is_set (Periodical) then		-- if all are used then
			coins_chapter = Title;												-- remap
			coins_title = Periodical;
		end
	end
	local coins_author = a;														-- default for coins rft.au 
	if 0 &lt; #c then																-- but if contributor list
		coins_author = c;														-- use that instead
	end
	
	-- this is the function call to COinS()
	local OCinSoutput = metadata.COinS({
		['Periodical'] = utilities.strip_apostrophe_markup (Periodical),		-- no markup in the metadata
		['Encyclopedia'] = Encyclopedia,										-- just a flag; content ignored by ~/COinS
		['Chapter'] = metadata.make_coins_title (coins_chapter, ScriptChapter),	-- Chapter and ScriptChapter stripped of bold / italic / accept-as-written markup
		['Degree'] = Degree;													-- cite thesis only
		['Title'] = metadata.make_coins_title (coins_title, ScriptTitle),		-- Title and ScriptTitle stripped of bold / italic / accept-as-written markup
		['PublicationPlace'] = PublicationPlace,
		['Date'] = COinS_date.rftdate,											-- COinS_date.* has correctly formatted date values if Date is valid;
		['Season'] = COinS_date.rftssn,
		['Quarter'] = COinS_date.rftquarter,
		['Chron'] =  COinS_date.rftchron,
		['Series'] = Series,
		['Volume'] = Volume,
		['Issue'] = Issue,
		['ArticleNumber'] = ArticleNumber,
		['Pages'] = coins_pages or metadata.get_coins_pages (first_set ({Sheet, Sheets, Page, Pages, At, QuotePage, QuotePages}, 7)),	-- pages stripped of external links
		['Edition'] = Edition,
		['PublisherName'] = PublisherName or Newsgroup,							-- any apostrophe markup already removed from PublisherName
		['URL'] = first_set ({ChapterURL, URL}, 2),
		['Authors'] = coins_author,
		['ID_list'] = ID_list_coins,
		['RawPage'] = this_page.prefixedText,
	}, config.CitationClass);

	-- Account for the oddities that are {{cite arxiv}}, {{cite biorxiv}}, {{cite citeseerx}}, {{cite medrxiv}}, and {{cite ssrn}} AFTER generation of COinS data.
	if utilities.in_array (config.CitationClass, whitelist.preprint_template_list_t) then	-- we have set rft.jtitle in COinS to arXiv, bioRxiv, CiteSeerX, medRxiv, or ssrn now unset so it isn't displayed
		Periodical = '';														-- periodical not allowed in these templates; if article has been published, use cite journal
	end

	-- special case for cite newsgroup.  Do this after COinS because we are modifying Publishername to include some static text
	if 'newsgroup' == config.CitationClass and utilities.is_set (Newsgroup) then
		PublisherName = utilities.substitute (cfg.messages['newsgroup'], external_link( 'news:' .. Newsgroup, Newsgroup, Newsgroup_origin, nil ));
	end

	local Editors;
	local EditorCount;															-- used only for choosing {ed.) or (eds.) annotation at end of editor name-list
	local Contributors;															-- assembled contributors name list
	local contributor_etal;
	local Translators;															-- assembled translators name list
	local translator_etal;
	local t = {};																-- translators list from |translator-lastn= / translator-firstn= pairs
	t = extract_names (args, 'TranslatorList');									-- fetch translator list from |translatorn= / |translator-lastn=, -firstn=, -linkn=, -maskn=
	local Interviewers;															
	local interviewers_list = {};					
	interviewers_list = extract_names (args, 'InterviewerList');				-- process preferred interviewers parameters
	local interviewer_etal;
	
	-- Now perform various field substitutions.
	-- We also add leading spaces and surrounding markup and punctuation to the
	-- various parts of the citation, but only when they are non-nil.
	do
		local last_first_list;
		local control = { 
			format = NameListStyle,												-- empty string, '&amp;', 'amp', 'and', or 'vanc'
			maximum = nil,														-- as if display-authors or display-editors not set
			mode = Mode
		};

		do																		-- do editor name list first because the now unsupported coauthors used to modify control table
			local display_names, param = display_names_select (cfg.global_cs1_config_t['DisplayEditors'], A['DisplayEditors'], A:ORIGIN ('DisplayEditors'), #e);
			control.maximum, editor_etal = get_display_names (display_names, #e, 'editors', editor_etal, param);

			Editors, EditorCount = list_people (control, e, editor_etal);

			if 1 == EditorCount and (true == editor_etal or 1 &lt; #e) then		-- only one editor displayed but includes etal then 
				EditorCount = 2;												-- spoof to display (eds.) annotation
			end
		end
		do																		-- now do interviewers
			local display_names, param = display_names_select (cfg.global_cs1_config_t['DisplayInterviewers'], A['DisplayInterviewers'], A:ORIGIN ('DisplayInterviewers'), #interviewers_list);
			control.maximum, interviewer_etal = get_display_names (display_names, #interviewers_list, 'interviewers', interviewer_etal, param);

			Interviewers = list_people (control, interviewers_list, interviewer_etal);
		end
		do																		-- now do translators
			local display_names, param = display_names_select (cfg.global_cs1_config_t['DisplayTranslators'], A['DisplayTranslators'], A:ORIGIN ('DisplayTranslators'), #t);
			control.maximum, translator_etal = get_display_names (display_names, #t, 'translators', translator_etal, param);

			Translators = list_people (control, t, translator_etal);
		end
		do																		-- now do contributors
			local display_names, param = display_names_select (cfg.global_cs1_config_t['DisplayContributors'], A['DisplayContributors'], A:ORIGIN ('DisplayContributors'), #c);
			control.maximum, contributor_etal = get_display_names (display_names, #c, 'contributors', contributor_etal, param);

			Contributors = list_people (control, c, contributor_etal);
		end
		do																		-- now do authors
			local display_names, param = display_names_select (cfg.global_cs1_config_t['DisplayAuthors'], A['DisplayAuthors'], A:ORIGIN ('DisplayAuthors'), #a, author_etal);
			control.maximum, author_etal = get_display_names (display_names, #a, 'authors', author_etal, param);

			last_first_list = list_people (control, a, author_etal);

			if utilities.is_set (Authors) then
				Authors, author_etal = name_has_etal (Authors, author_etal, false, 'authors');	-- find and remove variations on et al.
				if author_etal then
					Authors = Authors .. ' ' .. cfg.messages['et al'];			-- add et al. to authors parameter
				end
			else
				Authors = last_first_list;										-- either an author name list or an empty string
			end
		end																		-- end of do
	
		if utilities.is_set (Authors) and utilities.is_set (Collaboration) then
			Authors = Authors .. ' (' .. Collaboration .. ')';					-- add collaboration after et al.
		end

	end

	local ConferenceFormat = A['ConferenceFormat'];
	local ConferenceURL = A['ConferenceURL'];
	ConferenceFormat = style_format (ConferenceFormat, ConferenceURL, 'conference-format', 'conference-url');
	Format = style_format (Format, URL, 'format', 'url');

	-- special case for chapter format so no error message or cat when chapter not supported
	if not (utilities.in_array (config.CitationClass, {'web', 'news', 'journal', 'magazine', 'pressrelease', 'podcast', 'newsgroup', 'arxiv', 'biorxiv', 'citeseerx', 'medrxiv', 'ssrn'}) or
		('citation' == config.CitationClass and (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical)) and not utilities.is_set (Encyclopedia))) then
			ChapterFormat = style_format (ChapterFormat, ChapterURL, 'chapter-format', 'chapter-url');
	end

	if not utilities.is_set (URL) then
		if utilities.in_array (config.CitationClass, {"web", "podcast", "mailinglist"}) or		-- |url= required for cite web, cite podcast, and cite mailinglist
			('citation' == config.CitationClass and ('website' == Periodical_origin or 'script-website' == ScriptPeriodical_origin)) then	-- and required for {{citation}} with |website= or |script-website=
				utilities.set_message ('err_cite_web_url');
		end
		
		-- do we have |accessdate= without either |url= or |chapter-url=?
		if utilities.is_set (AccessDate) and not utilities.is_set (ChapterURL) then		-- ChapterURL may be set when URL is not set;
			utilities.set_message ('err_accessdate_missing_url');
			AccessDate = '';
		end
	end

	local UrlStatus = is_valid_parameter_value (A['UrlStatus'], A:ORIGIN('UrlStatus'), cfg.keywords_lists['url-status'], '');
	local OriginalURL
	local OriginalURL_origin
	local OriginalFormat
	local OriginalAccess;
	UrlStatus = UrlStatus:lower();												-- used later when assembling archived text
	if utilities.is_set ( ArchiveURL ) then
		if utilities.is_set (ChapterURL) then 									-- if chapter-url= is set apply archive url to it
			OriginalURL = ChapterURL;											-- save copy of source chapter's url for archive text
			OriginalURL_origin = ChapterURL_origin;								-- name of |chapter-url= parameter for error messages
			OriginalFormat = ChapterFormat;										-- and original |chapter-format=

			if 'live' ~= UrlStatus then
				ChapterURL = ArchiveURL											-- swap-in the archive's URL
				ChapterURL_origin = A:ORIGIN('ArchiveURL')						-- name of |archive-url= parameter for error messages
				ChapterFormat = ArchiveFormat or '';							-- swap in archive's format
				ChapterUrlAccess = nil;											-- restricted access levels do not make sense for archived URLs
			end
		elseif utilities.is_set (URL) then
			OriginalURL = URL;													-- save copy of original source URL
			OriginalURL_origin = URL_origin;									-- name of URL parameter for error messages
			OriginalFormat = Format; 											-- and original |format=
			OriginalAccess = UrlAccess;

			if 'live' ~= UrlStatus then											-- if URL set then |archive-url= applies to it
				URL = ArchiveURL												-- swap-in the archive's URL
				URL_origin = A:ORIGIN('ArchiveURL')								-- name of archive URL parameter for error messages
				Format = ArchiveFormat or '';									-- swap in archive's format
				UrlAccess = nil;												-- restricted access levels do not make sense for archived URLs
			end
		end
	elseif utilities.is_set (UrlStatus) then									-- if |url-status= is set when |archive-url= is not set
 		utilities.set_message ('maint_url_status');								-- add maint cat
	end

	if utilities.in_array (config.CitationClass, {'web', 'news', 'journal', 'magazine', 'pressrelease', 'podcast', 'newsgroup', 'arxiv', 'biorxiv', 'citeseerx', 'medrxiv', 'ssrn'}) or	-- if any of the 'periodical' cites except encyclopedia
		('citation' == config.CitationClass and (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical)) and not utilities.is_set (Encyclopedia)) then
			local chap_param;
			if utilities.is_set (Chapter) then									-- get a parameter name from one of these chapter related meta-parameters
				chap_param = A:ORIGIN ('Chapter')
			elseif utilities.is_set (TransChapter) then
				chap_param = A:ORIGIN ('TransChapter')
			elseif utilities.is_set (ChapterURL) then
				chap_param = A:ORIGIN ('ChapterURL')
			elseif utilities.is_set (ScriptChapter) then
				chap_param = ScriptChapter_origin;
			else utilities.is_set (ChapterFormat)
				chap_param = A:ORIGIN ('ChapterFormat')
			end

			if utilities.is_set (chap_param) then								-- if we found one
				utilities.set_message ('err_chapter_ignored', {chap_param});	-- add error message
				Chapter = '';													-- and set them to empty string to be safe with concatenation
				TransChapter = '';
				ChapterURL = '';
				ScriptChapter = '';
				ChapterFormat = '';
			end
	else																		-- otherwise, format chapter / article title
		local no_quotes = false;												-- default assume that we will be quoting the chapter parameter value
		if utilities.is_set (Contribution) and 0 &lt; #c then						-- if this is a contribution with contributor(s)
			if utilities.in_array (Contribution:lower(), cfg.keywords_lists.contribution) then	-- and a generic contribution title
				no_quotes = true;												-- then render it unquoted
			end
		end

		Chapter = format_chapter_title (ScriptChapter, ScriptChapter_origin, Chapter, Chapter_origin, TransChapter, TransChapter_origin, ChapterURL, ChapterURL_origin, no_quotes, ChapterUrlAccess);		-- Contribution is also in Chapter
		if utilities.is_set (Chapter) then
			Chapter = Chapter .. ChapterFormat ;
			if 'map' == config.CitationClass and utilities.is_set (TitleType) then
				Chapter = Chapter .. ' ' .. TitleType;							-- map annotation here; not after title
			end
			Chapter = Chapter .. sepc .. ' ';
		elseif utilities.is_set (ChapterFormat) then							-- |chapter= not set but |chapter-format= is so ...
			Chapter = ChapterFormat .. sepc .. ' ';								-- ... ChapterFormat has error message, we want to see it
		end
	end

	-- Format main title
	local plain_title = false;
	local accept_title;
	Title, accept_title = utilities.has_accept_as_written (Title, true);		-- remove accept-this-as-written markup when it wraps all of &lt;Title&gt;
	if accept_title and ('' == Title) then										-- only support forced empty for now "(())"
		Title = cfg.messages['notitle'];										-- replace by predefined "No title" message
			-- TODO: utilities.set_message ( 'err_redundant_parameters', ...);	-- issue proper error message instead of muting	 
			ScriptTitle = '';													-- just mute for now	 
			TransTitle = '';													-- just mute for now
 		plain_title = true;														-- suppress text decoration for descriptive title
		utilities.set_message ('maint_untitled');								-- add maint cat
	end

	if not accept_title then													-- &lt;Title&gt; not wrapped in accept-as-written markup
		if '...' == Title:sub (-3) then											-- if ellipsis is the last three characters of |title=
			Title = Title:gsub ('(%.%.%.)%.+$', '%1');							-- limit the number of dots to three
		elseif not mw.ustring.find (Title, '%.%s*%a%.$') and					-- end of title is not a 'dot-(optional space-)letter-dot' initialism ...
			not mw.ustring.find (Title, '%s+%a%.$') then						-- ...and not a 'space-letter-dot' initial (''Allium canadense'' L.)
				Title = mw.ustring.gsub(Title, '%' .. sepc .. '$', '');			-- remove any trailing separator character; sepc and ms.ustring() here for languages that use multibyte separator characters
		end

		if utilities.is_set (ArchiveURL) and is_archived_copy (Title) then
			utilities.set_message ('maint_archived_copy');						-- add maintenance category before we modify the content of Title
		end

		if is_generic ('generic_titles', Title) then
			utilities.set_message ('err_generic_title');						-- set an error message
		end
	end

	if (not plain_title) and (utilities.in_array (config.CitationClass, {'web', 'news', 'journal', 'magazine', 'document', 'pressrelease', 'podcast', 'newsgroup', 'mailinglist', 'interview', 'arxiv', 'biorxiv', 'citeseerx', 'medrxiv', 'ssrn'}) or
		('citation' == config.CitationClass and (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical)) and not utilities.is_set (Encyclopedia)) or
		('map' == config.CitationClass and (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical)))) then		-- special case for cite map when the map is in a periodical treat as an article
			Title = kern_quotes (Title);										-- if necessary, separate title's leading and trailing quote marks from module provided quote marks
			Title = utilities.wrap_style ('quoted-title', Title);
			Title = script_concatenate (Title, ScriptTitle, 'script-title');	-- &lt;bdi&gt; tags, lang attribute, categorization, etc.; must be done after title is wrapped
			TransTitle = utilities.wrap_style ('trans-quoted-title', TransTitle );
	elseif plain_title or ('report' == config.CitationClass) then				-- no styling for cite report and descriptive titles (otherwise same as above)
		Title = script_concatenate (Title, ScriptTitle, 'script-title');		-- &lt;bdi&gt; tags, lang attribute, categorization, etc.; must be done after title is wrapped
		TransTitle = utilities.wrap_style ('trans-quoted-title', TransTitle );	-- for cite report, use this form for trans-title
	else
		Title = utilities.wrap_style ('italic-title', Title);
		Title = script_concatenate (Title, ScriptTitle, 'script-title');		-- &lt;bdi&gt; tags, lang attribute, categorization, etc.; must be done after title is wrapped
		TransTitle = utilities.wrap_style ('trans-italic-title', TransTitle);
	end

	if utilities.is_set (TransTitle) then
		if utilities.is_set (Title) then
			TransTitle = " " .. TransTitle;
		else
			utilities.set_message ('err_trans_missing_title', {'title'});
		end
	end

	if utilities.is_set (Title) then											-- TODO: is this the right place to be making Wikisource URLs?
		if utilities.is_set (TitleLink) and utilities.is_set (URL) then
			utilities.set_message ('err_wikilink_in_url');						-- set an error message because we can't have both
			TitleLink = '';														-- unset
		end
	
		if not utilities.is_set (TitleLink) and utilities.is_set (URL) then
			Title = external_link (URL, Title, URL_origin, UrlAccess) .. TransTitle .. Format;
			URL = '';															-- unset these because no longer needed
			Format = "";
		elseif utilities.is_set (TitleLink) and not utilities.is_set (URL) then
			local ws_url;
			ws_url = wikisource_url_make (TitleLink);							-- ignore ws_label return; not used here
			if ws_url then
				Title = external_link (ws_url, Title .. '&amp;nbsp;', 'ws link in title-link');	-- space char after Title to move icon away from italic text; TODO: a better way to do this?
				Title = utilities.substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], TitleLink, Title});				
				Title = Title .. TransTitle;
			else
				Title = utilities.make_wikilink (TitleLink, Title) .. TransTitle;
			end
		else
			local ws_url, ws_label, L;											-- Title has italic or quote markup by the time we get here which causes is_wikilink() to return 0 (not a wikilink)
			ws_url, ws_label, L = wikisource_url_make (Title:gsub('^[\'"]*(.-)[\'"]*$', '%1'));	-- make ws URL from |title= interwiki link (strip italic or quote markup); link portion L becomes tooltip label
			if ws_url then
				Title = Title:gsub ('%b[]', ws_label);							-- replace interwiki link with ws_label to retain markup
				Title = external_link (ws_url, Title .. '&amp;nbsp;', 'ws link in title');	-- space char after Title to move icon away from italic text; TODO: a better way to do this?
				Title = utilities.substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, Title});				
				Title = Title .. TransTitle;
			else
				Title = Title .. TransTitle;
			end
		end
	else
		Title = TransTitle;
	end

	if utilities.is_set (Place) then
		Place = " " .. wrap_msg ('written', Place, use_lowercase) .. sepc .. " ";
	end

	local ConferenceURL_origin = A:ORIGIN('ConferenceURL');						-- get name of parameter that holds ConferenceURL
	if utilities.is_set (Conference) then
		if utilities.is_set (ConferenceURL) then
			Conference = external_link( ConferenceURL, Conference, ConferenceURL_origin, nil );
		end
		Conference = sepc .. " " .. Conference .. ConferenceFormat;
	elseif utilities.is_set (ConferenceURL) then
		Conference = sepc .. " " .. external_link( ConferenceURL, nil, ConferenceURL_origin, nil );
	end

	local Position = '';
	if not utilities.is_set (Position) then
		local Minutes = A['Minutes'];
		local Time = A['Time'];

		if utilities.is_set (Minutes) then
			if utilities.is_set (Time) then		--TODO: make a function for this and similar?
				utilities.set_message ('err_redundant_parameters', {utilities.wrap_style ('parameter', 'minutes') .. cfg.presentation['sep_list_pair'] .. utilities.wrap_style ('parameter', 'time')});
			end
			Position = " " .. Minutes .. " " .. cfg.messages['minutes'];
		else
			if utilities.is_set (Time) then
				local TimeCaption = A['TimeCaption']
				if not utilities.is_set (TimeCaption) then
					TimeCaption = cfg.messages['event'];
					if sepc ~= '.' then
						TimeCaption = TimeCaption:lower();
					end
				end
				Position = " " .. TimeCaption .. " " .. Time;
			end
		end
	else
		Position = " " .. Position;
		At = '';
	end

	Page, Pages, Sheet, Sheets = format_pages_sheets (Page, Pages, Sheet, Sheets, config.CitationClass, Periodical_origin, sepc, NoPP, use_lowercase);

	At = utilities.is_set (At) and (sepc .. " " .. At) or "";
	Position = utilities.is_set (Position) and (sepc .. " " .. Position) or "";
	if config.CitationClass == 'map' then
		local Sections = A['Sections'];											-- Section (singular) is an alias of Chapter so set earlier
		local Inset = A['Inset'];
		
		if utilities.is_set ( Inset ) then
			Inset = sepc .. " " .. wrap_msg ('inset', Inset, use_lowercase);
		end			

		if utilities.is_set ( Sections ) then
			Section = sepc .. " " .. wrap_msg ('sections', Sections, use_lowercase);
		elseif utilities.is_set ( Section ) then
			Section = sepc .. " " .. wrap_msg ('section', Section, use_lowercase);
		end
		At = At .. Inset .. Section;		
	end	

	local Others = A['Others'];
	if utilities.is_set (Others) and 0 == #a and 0 == #e then					-- add maint cat when |others= has value and used without |author=, |editor=
		if config.CitationClass == "AV-media-notes"
		or config.CitationClass == "audio-visual" then							-- special maint for AV/M which has a lot of 'false' positives right now
			utilities.set_message ('maint_others_avm')
		else
			utilities.set_message ('maint_others');
		end
	end
	Others = utilities.is_set (Others) and (sepc .. " " .. Others) or "";
	
	if utilities.is_set (Translators) then
		Others = safe_join ({sepc .. ' ', wrap_msg ('translated', Translators, use_lowercase), Others}, sepc);
	end
	if utilities.is_set (Interviewers) then
		Others = safe_join ({sepc .. ' ', wrap_msg ('interview', Interviewers, use_lowercase), Others}, sepc);
	end
	
	local TitleNote = A['TitleNote'];
	TitleNote = utilities.is_set (TitleNote) and (sepc .. " " .. TitleNote) or "";
	if utilities.is_set (Edition) then
		if Edition:match ('%f[%a][Ee]d%n?%.?$') or Edition:match ('%f[%a][Ee]dition$') then -- Ed, ed, Ed., ed., Edn, edn, Edn., edn.
			utilities.set_message ('err_extra_text_edition');					 -- add error message
		end
		Edition = " " .. wrap_msg ('edition', Edition);
	else
		Edition = '';
	end

	Series = utilities.is_set (Series) and wrap_msg ('series', {sepc, Series}) or "";	-- not the same as SeriesNum
	local Agency = A['Agency'] or '';											-- |agency= only supported in {{cite news}}, {{cite press release}}, {{cite web}} and certain {{citation}} templates
	if utilities.is_set (Agency) then											-- this testing done here because {{citation}} supports 'news' citations
		if utilities.in_array (config.CitationClass, {'news', 'pressrelease', 'web'}) or ('citation' == config.CitationClass and utilities.in_array (Periodical_origin, {"newspaper", "work"})) then
			Agency = wrap_msg ('agency', {sepc, Agency});						-- format for rendering
		else
			Agency = '';														-- unset; not supported
			utilities.set_message ('err_parameter_ignored', {'agency'});		-- add error message
		end
	end
	
	Volume = format_volume_issue (Volume, Issue, ArticleNumber, config.CitationClass, Periodical_origin, sepc, use_lowercase);

	if utilities.is_set (AccessDate) then
		local retrv_text = " " .. cfg.messages['retrieved']

		AccessDate = nowrap_date (AccessDate);									-- wrap in nowrap span if date in appropriate format
		if (sepc ~= ".") then retrv_text = retrv_text:lower() end				-- if mode is cs2, lower case
		AccessDate = utilities.substitute (retrv_text, AccessDate);				-- add retrieved text

		AccessDate = utilities.substitute (cfg.presentation['accessdate'], {sepc, AccessDate});	-- allow editors to hide accessdates
	end
	
	if utilities.is_set (ID) then ID = sepc .. " " .. ID; end
	
	local Docket = A['Docket'];
   	if "thesis" == config.CitationClass and utilities.is_set (Docket) then
		ID = sepc .. " Docket " .. Docket .. ID;
	end
   	if "report" == config.CitationClass and utilities.is_set (Docket) then		-- for cite report when |docket= is set
		ID = sepc .. ' ' .. Docket;												-- overwrite ID even if |id= is set
	end

	if utilities.is_set (URL) then
		URL = " " .. external_link( URL, nil, URL_origin, UrlAccess );
	end

	local Quote = A['Quote'];
	local TransQuote = A['TransQuote'];
	local ScriptQuote = A['ScriptQuote'];
	if utilities.is_set (Quote) or utilities.is_set (TransQuote) or utilities.is_set (ScriptQuote) then

		if utilities.is_set (Quote) then
			if Quote:sub(1, 1) == '"' and Quote:sub(-1, -1) == '"' then			-- if first and last characters of quote are quote marks
				Quote = Quote:sub(2, -2);										-- strip them off
			end
		end
		
		Quote = kern_quotes (Quote);											-- kern if needed
		Quote = utilities.wrap_style ('quoted-text', Quote );					-- wrap in &lt;q&gt;...&lt;/q&gt; tags
	
		if utilities.is_set (ScriptQuote) then
			Quote = script_concatenate (Quote, ScriptQuote, 'script-quote');	-- &lt;bdi&gt; tags, lang attribute, categorization, etc.; must be done after quote is wrapped
		end

		if utilities.is_set (TransQuote) then
			if TransQuote:sub(1, 1) == '"' and TransQuote:sub(-1, -1) == '"' then -- if first and last characters of |trans-quote are quote marks
				TransQuote = TransQuote:sub(2, -2); -- strip them off
			end
			Quote = Quote .. " " .. utilities.wrap_style ('trans-quoted-title', TransQuote );
		end

		if utilities.is_set (QuotePage) or utilities.is_set (QuotePages) then	-- add page prefix
			local quote_prefix = '';
			if utilities.is_set (QuotePage) then
				extra_text_in_page_check (QuotePage, 'quote-page');				-- add to maint cat if |quote-page= value begins with what looks like p., pp., etc.
				if not NoPP then
					quote_prefix = utilities.substitute (cfg.messages['p-prefix'], {sepc, QuotePage}), '', '', '';
				else
					quote_prefix = utilities.substitute (cfg.messages['nopp'], {sepc, QuotePage}), '', '', '';
				end
			elseif utilities.is_set (QuotePages) then
				extra_text_in_page_check (QuotePages, 'quote-pages');			-- add to maint cat if |quote-pages= value begins with what looks like p., pp., etc.
				if tonumber(QuotePages) ~= nil and not NoPP then				-- if only digits, assume single page
					quote_prefix = utilities.substitute (cfg.messages['p-prefix'], {sepc, QuotePages}), '', '';
				elseif not NoPP then
					quote_prefix = utilities.substitute (cfg.messages['pp-prefix'], {sepc, QuotePages}), '', '';
				else
					quote_prefix = utilities.substitute (cfg.messages['nopp'], {sepc, QuotePages}), '', '';
				end
			end
                        
			Quote = quote_prefix .. ": " .. Quote;
		else
			Quote = sepc .. " " .. Quote;
		end

		PostScript = "";														-- cs1|2 does not supply terminal punctuation when |quote= is set
	end
	
	-- We check length of PostScript here because it will have been nuked by
	-- the quote parameters. We'd otherwise emit a message even if there wasn't
	-- a displayed postscript.
	-- TODO: Should the max size (1) be configurable?
	-- TODO: Should we check a specific pattern?
	if utilities.is_set(PostScript) and mw.ustring.len(PostScript) &gt; 1 then
		utilities.set_message ('maint_postscript')
	end
	
	local Archived;
	if utilities.is_set (ArchiveURL) then
		if not utilities.is_set (ArchiveDate) then								-- ArchiveURL set but ArchiveDate not set
			utilities.set_message ('err_archive_missing_date');					-- emit an error message
			ArchiveURL = '';													-- empty string for concatenation
			ArchiveDate = '';													-- empty string for concatenation
		end
	else														
		if utilities.is_set (ArchiveDate) then									-- ArchiveURL not set but ArchiveDate is set
			utilities.set_message ('err_archive_date_missing_url');				-- emit an error message
			ArchiveURL = '';													-- empty string for concatenation
			ArchiveDate = '';													-- empty string for concatenation
		end
	end

	if utilities.is_set (ArchiveURL) then
		local arch_text;
		if "live" == UrlStatus then
			arch_text = cfg.messages['archived'];
			if sepc ~= "." then arch_text = arch_text:lower() end
			if utilities.is_set (ArchiveDate) then
				Archived = sepc .. ' ' .. utilities.substitute ( cfg.messages['archived-live'],
					{external_link( ArchiveURL, arch_text, A:ORIGIN('ArchiveURL'), nil) .. ArchiveFormat, ArchiveDate } );
			else
				Archived = '';
			end
			if not utilities.is_set (OriginalURL) then
				utilities.set_message ('err_archive_missing_url');
				Archived = '';													-- empty string for concatenation
			end
		elseif utilities.is_set (OriginalURL) then								-- UrlStatus is empty, 'dead', 'unfit', 'usurped', 'bot: unknown'
			if utilities.in_array (UrlStatus, {'unfit', 'usurped', 'bot: unknown'}) then
				arch_text = cfg.messages['archived-unfit'];
				if sepc ~= "." then arch_text = arch_text:lower() end
				Archived = sepc .. ' ' .. arch_text .. ArchiveDate;				-- format already styled
				if 'bot: unknown' == UrlStatus then
					utilities.set_message ('maint_bot_unknown');				-- and add a category if not already added
				else
					utilities.set_message ('maint_unfit');						-- and add a category if not already added
				end
			else																-- UrlStatus is empty, 'dead'
				arch_text = cfg.messages['archived-dead'];
				if sepc ~= "." then arch_text = arch_text:lower() end
				if utilities.is_set (ArchiveDate) then
					Archived = sepc .. " " .. utilities.substitute ( arch_text,
						{ external_link( OriginalURL, cfg.messages['original'], OriginalURL_origin, OriginalAccess ) .. OriginalFormat, ArchiveDate } );	-- format already styled
				else
					Archived = '';												-- unset for concatenation
				end
			end	
		else																	-- OriginalUrl not set
			utilities.set_message ('err_archive_missing_url');
			Archived = '';														-- empty string for concatenation
		end
	elseif utilities.is_set (ArchiveFormat) then
		Archived = ArchiveFormat;												-- if set and ArchiveURL not set ArchiveFormat has error message
	else
		Archived = '';
	end
	
	local TranscriptURL = A['TranscriptURL']
	local TranscriptFormat = A['TranscriptFormat'];
	TranscriptFormat = style_format (TranscriptFormat, TranscriptURL, 'transcript-format', 'transcripturl');
	local Transcript = A['Transcript'];
	local TranscriptURL_origin = A:ORIGIN('TranscriptURL');						-- get name of parameter that holds TranscriptURL
	if utilities.is_set (Transcript) then
		if utilities.is_set (TranscriptURL) then
			Transcript = external_link( TranscriptURL, Transcript, TranscriptURL_origin, nil );
		end
		Transcript = sepc .. ' ' .. Transcript .. TranscriptFormat;
	elseif utilities.is_set (TranscriptURL) then
		Transcript = external_link( TranscriptURL, nil, TranscriptURL_origin, nil );
	end

	local Publisher;
	if utilities.is_set (PublicationDate) then
		PublicationDate = wrap_msg ('published', PublicationDate);
	end
	if utilities.is_set (PublisherName) then
		if utilities.is_set (PublicationPlace) then
			Publisher = sepc .. " " .. PublicationPlace .. ": " .. PublisherName .. PublicationDate;
		else
			Publisher = sepc .. " " .. PublisherName .. PublicationDate;  
		end			
	elseif utilities.is_set (PublicationPlace) then 
		Publisher= sepc .. " " .. PublicationPlace .. PublicationDate;
	else 
		Publisher = PublicationDate;
	end
	
	-- Several of the above rely upon detecting this as nil, so do it last.
	if (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical) or utilities.is_set (TransPeriodical)) then
		if utilities.is_set (Title) or utilities.is_set (TitleNote) then 
			Periodical = sepc .. " " .. format_periodical (ScriptPeriodical, ScriptPeriodical_origin, Periodical, TransPeriodical, TransPeriodical_origin);
		else 
			Periodical = format_periodical (ScriptPeriodical, ScriptPeriodical_origin, Periodical, TransPeriodical, TransPeriodical_origin);
		end
	end
	
	local Language = A['Language'];
	if utilities.is_set (Language) then
		Language = language_parameter (Language);								-- format, categories, name from ISO639-1, etc.
	else
		Language='';															-- language not specified so make sure this is an empty string;
	--[[ TODO: need to extract the wrap_msg from language_parameter
	so that we can solve parentheses bunching problem with Format/Language/TitleType
	]]
	end

	--[[
	Handle the oddity that is cite speech.  This code overrides whatever may be the value assigned to TitleNote (through |department=) and forces it to be " (Speech)" so that
	the annotation directly follows the |title= parameter value in the citation rather than the |event= parameter value (if provided).
	]]
	if "speech" == config.CitationClass then									-- cite speech only
		TitleNote = TitleType;													-- move TitleType to TitleNote so that it renders ahead of |event=
		TitleType = '';															-- and unset

		if utilities.is_set (Periodical) then									-- if Periodical, perhaps because of an included |website= or |journal= parameter 
			if utilities.is_set (Conference) then								-- and if |event= is set
				Conference = Conference .. sepc .. " ";							-- then add appropriate punctuation to the end of the Conference variable before rendering
			end
		end
	end

	-- Piece all bits together at last.  Here, all should be non-nil.
	-- We build things this way because it is more efficient in LUA
	-- not to keep reassigning to the same string variable over and over.

	local tcommon;
	local tcommon2;																-- used for book cite when |contributor= is set
	
	if utilities.in_array (config.CitationClass, {"book", "citation"}) and not utilities.is_set (Periodical) then		-- special cases for book cites
		if utilities.is_set (Contributors) then									-- when we are citing foreword, preface, introduction, etc.
			tcommon = safe_join ({Title, TitleNote}, sepc);						-- author and other stuff will come after this and before tcommon2
			tcommon2 = safe_join ({TitleType, Series, Language, Volume, Others, Edition, Publisher}, sepc);
		else
			tcommon = safe_join ({Title, TitleNote, TitleType, Series, Language, Volume, Others, Edition, Publisher}, sepc);
		end

	elseif 'map' == config.CitationClass then									-- special cases for cite map
		if utilities.is_set (Chapter) then										-- map in a book; TitleType is part of Chapter
			tcommon = safe_join ({Title, Edition, Scale, Series, Language, Cartography, Others, Publisher, Volume}, sepc);
		elseif utilities.is_set (Periodical) then								-- map in a periodical
			tcommon = safe_join ({Title, TitleType, Periodical, Scale, Series, Language, Cartography, Others, Publisher, Volume}, sepc);
		else																	-- a sheet or stand-alone map
			tcommon = safe_join ({Title, TitleType, Edition, Scale, Series, Language, Cartography, Others, Publisher}, sepc);
		end
		
	elseif 'episode' == config.CitationClass then								-- special case for cite episode
		tcommon = safe_join ({Title, TitleNote, TitleType, Series, Language, Edition, Publisher}, sepc);

	else																		-- all other CS1 templates
		tcommon = safe_join ({Title, TitleNote, Conference, Periodical, TitleType, Series, Language, Volume, Others, Edition, Publisher, Agency}, sepc);
	end
	
	if #ID_list &gt; 0 then
		ID_list = safe_join( { sepc .. " ",  table.concat( ID_list, sepc .. " " ), ID }, sepc );
	else
		ID_list = ID;
	end
	
	local Via = A['Via'];
	Via = utilities.is_set (Via) and  wrap_msg ('via', Via) or '';
	local idcommon;
	if 'audio-visual' == config.CitationClass or 'episode' == config.CitationClass then	-- special case for cite AV media &amp; cite episode position transcript
		idcommon = safe_join( { ID_list, URL, Archived, Transcript, AccessDate, Via, Quote }, sepc );
	else
		idcommon = safe_join( { ID_list, URL, Archived, AccessDate, Via, Quote }, sepc );
	end
	
	local text;
	local pgtext = Position .. Sheet .. Sheets .. Page .. Pages .. At;

	local OrigDate = A['OrigDate'];
	OrigDate = utilities.is_set (OrigDate) and wrap_msg ('origdate', OrigDate) or '';
	if utilities.is_set (Date) then
		if utilities.is_set (Authors) or utilities.is_set (Editors) then		-- date follows authors or editors when authors not set
			Date = " (" .. Date .. ")" .. OrigDate .. sepc .. " ";				-- in parentheses
		else																	-- neither of authors and editors set
			if (string.sub(tcommon, -1, -1) == sepc) then						-- if the last character of tcommon is sepc
				Date = " " .. Date .. OrigDate;									-- Date does not begin with sepc
			else
				Date = sepc .. " " .. Date .. OrigDate;							-- Date begins with sepc
			end
		end
	end	
	if utilities.is_set (Authors) then
		if (not utilities.is_set (Date)) then									-- when date is set it's in parentheses; no Authors termination
			Authors = terminate_name_list (Authors, sepc);						-- when no date, terminate with 0 or 1 sepc and a space
		end
		if utilities.is_set (Editors) then
			local in_text = '';
			local post_text = '';
			if utilities.is_set (Chapter) and 0 == #c then
				in_text = cfg.messages['in'] .. ' ';
				if (sepc ~= '.') then
					in_text = in_text:lower();									-- lowercase for cs2
				end
			end
			if EditorCount &lt;= 1 then
				post_text = ' (' .. cfg.messages['editor'] .. ')';				-- be consistent with no-author, no-date case
			else
				post_text = ' (' .. cfg.messages['editors'] .. ')';
			end
			Editors = terminate_name_list (in_text .. Editors .. post_text, sepc);	-- terminate with 0 or 1 sepc and a space
		end
		if utilities.is_set (Contributors) then									-- book cite and we're citing the intro, preface, etc.
			local by_text = sepc .. ' ' .. cfg.messages['by'] .. ' ';
			if (sepc ~= '.') then by_text = by_text:lower() end					-- lowercase for cs2
			Authors = by_text .. Authors;										-- author follows title so tweak it here
			if utilities.is_set (Editors) and utilities.is_set (Date) then		-- when Editors make sure that Authors gets terminated
				Authors = terminate_name_list (Authors, sepc);					-- terminate with 0 or 1 sepc and a space
			end
			if (not utilities.is_set (Date)) then								-- when date is set it's in parentheses; no Contributors termination
				Contributors = terminate_name_list (Contributors, sepc);		-- terminate with 0 or 1 sepc and a space
			end
			text = safe_join( {Contributors, Date, Chapter, tcommon, Authors, Place, Editors, tcommon2, pgtext, idcommon }, sepc );
		else
			text = safe_join( {Authors, Date, Chapter, Place, Editors, tcommon, pgtext, idcommon }, sepc );
		end
	elseif utilities.is_set (Editors) then
		if utilities.is_set (Date) then
			if EditorCount &lt;= 1 then
				Editors = Editors .. cfg.presentation['sep_name'] .. cfg.messages['editor'];
			else
				Editors = Editors .. cfg.presentation['sep_name'] .. cfg.messages['editors'];
			end
		else
			if EditorCount &lt;= 1 then
				Editors = Editors .. " (" .. cfg.messages['editor'] .. ")" .. sepc .. " "
			else
				Editors = Editors .. " (" .. cfg.messages['editors'] .. ")" .. sepc .. " "
			end
		end
		text = safe_join( {Editors, Date, Chapter, Place, tcommon, pgtext, idcommon}, sepc );
	else
		if utilities.in_array (config.CitationClass, {"journal", "citation"}) and utilities.is_set (Periodical) then
			text = safe_join( {Chapter, Place, tcommon, pgtext, Date, idcommon}, sepc );
		else
			text = safe_join( {Chapter, Place, tcommon, Date, pgtext, idcommon}, sepc );
		end
	end

	if utilities.is_set (PostScript) and PostScript ~= sepc then
		text = safe_join( {text, sepc}, sepc ); 								-- Deals with italics, spaces, etc.
		if '.' == sepc then														-- remove final seperator if present
			text = text:gsub ('%' .. sepc .. '$', '');							-- dot must be escaped here
		else
			text = mw.ustring.gsub (text, sepc .. '$', '');						-- using ustring for non-dot sepc (likely a non-Latin character)
		end
	end	
	
	text = safe_join( {text, PostScript}, sepc );

	-- Now enclose the whole thing in a &lt;cite&gt; element
	local options_t = {};
	options_t.class = cite_class_attribute_make (config.CitationClass, Mode);

	local Ref = is_valid_parameter_value (A['Ref'], A:ORIGIN('Ref'), cfg.keywords_lists['ref'], nil, true);	-- nil when |ref=harv; A['Ref'] else

	if 'none' ~= cfg.keywords_xlate[(Ref and Ref:lower()) or ''] then
		local namelist_t = {};													-- holds selected contributor, author, editor name list
		local year = first_set ({Year, anchor_year}, 2);						-- Year first for legacy citations and for YMD dates that require disambiguation

		if #c &gt; 0 then															-- if there is a contributor list
			namelist_t = c;														-- select it
		elseif #a &gt; 0 then														-- or an author list
			namelist_t = a;
		elseif #e &gt; 0 then														-- or an editor list
			namelist_t = e;
		end
		local citeref_id;
		if #namelist_t &gt; 0 then													-- if there are names in namelist_t
			citeref_id = make_citeref_id (namelist_t, year);					-- go make the CITEREF anchor
			if mw.uri.anchorEncode (citeref_id) == ((Ref and mw.uri.anchorEncode (Ref)) or '') then	-- Ref may already be encoded (by {{sfnref}}) so citeref_id must be encoded before comparison
				utilities.set_message ('maint_ref_duplicates_default');
			end
		else
			citeref_id = '';													-- unset
		end
		options_t.id = Ref or citeref_id;
	end

	if string.len (text:gsub('%b&lt;&gt;', '')) &lt;= 2 then								-- remove html and html-like tags; then get length of what remains; 
		z.error_cats_t = {};													-- blank the categories list
		z.error_msgs_t = {};													-- blank the error messages list
		OCinSoutput = nil;														-- blank the metadata string
		text = '';																-- blank the the citation
		utilities.set_message ('err_empty_citation');							-- set empty citation message and category
	end
	
	local render_t = {};														-- here we collect the final bits for concatenation into the rendered citation

	if utilities.is_set (options_t.id) then										-- here we wrap the rendered citation in &lt;cite ...&gt;...&lt;/cite&gt; tags
		table.insert (render_t, utilities.substitute (cfg.presentation['cite-id'], {mw.uri.anchorEncode(options_t.id), mw.text.nowiki(options_t.class), text}));	-- when |ref= is set or when there is a namelist
	else
		table.insert (render_t, utilities.substitute (cfg.presentation['cite'], {mw.text.nowiki(options_t.class), text}));	-- when |ref=none or when namelist_t empty and |ref= is missing or is empty
	end		

	if OCinSoutput then															-- blanked when citation is 'empty' so don't bother to add boilerplate metadata span
		table.insert (render_t, utilities.substitute (cfg.presentation['ocins'], OCinSoutput));	-- format and append metadata to the citation
	end

	local template_name = ('citation' == config.CitationClass) and 'citation' or 'cite ' .. (cfg.citation_class_map_t[config.CitationClass] or config.CitationClass);
	local template_link = '[[Template:' .. template_name .. '|' .. template_name .. ']]';
	local msg_prefix = '&lt;code class="cs1-code"&gt;{{' .. template_link .. '}}&lt;/code&gt;: ';

	if 0 ~= #z.error_msgs_t then
		mw.addWarning (utilities.substitute (cfg.messages.warning_msg_e, template_link));

		table.insert (render_t, ' ');											-- insert a space between citation and its error messages
		table.sort (z.error_msgs_t);											-- sort the error messages list; sorting includes wrapping &lt;span&gt; and &lt;code&gt; tags; hidden-error sorts ahead of visible-error

		local hidden = true;													-- presume that the only error messages emited by this template are hidden
		for _, v in ipairs (z.error_msgs_t) do									-- spin through the list of error messages
			if v:find ('cs1-visible-error', 1, true) then						-- look for the visible error class name
				hidden = false;													-- found one; so don't hide the error message prefix
				break;															-- and done because no need to look further
			end
		end

		z.error_msgs_t[1] = table.concat ({utilities.error_comment (msg_prefix, hidden), z.error_msgs_t[1]});	-- add error message prefix to first error message to prevent extraneous punctuation
		table.insert (render_t, table.concat (z.error_msgs_t, '; '));			-- make a big string of error messages and add it to the rendering
	end

	if 0 ~= #z.maint_cats_t then
		mw.addWarning (utilities.substitute (cfg.messages.warning_msg_m, template_link));

		table.sort (z.maint_cats_t);											-- sort the maintenance messages list

		local maint_msgs_t = {};												-- here we collect all of the maint messages

		if 0 == #z.error_msgs_t then											-- if no error messages
			table.insert (maint_msgs_t, msg_prefix);							-- insert message prefix in maint message livery
		end
		
		for _, v in ipairs( z.maint_cats_t ) do									-- append maintenance categories
			table.insert (maint_msgs_t, 										-- assemble new maint message and add it to the maint_msgs_t table
				table.concat ({v, ' (', utilities.substitute (cfg.messages[':cat wikilink'], v), ')'})
				);
		end
		table.insert (render_t, utilities.substitute (cfg.presentation['hidden-maint'], table.concat (maint_msgs_t, ' ')));	-- wrap the group of maint messages with proper presentation and save
	end

	if not no_tracking_cats then
		local sort_key;
		local cat_wikilink = 'cat wikilink';
		if cfg.enable_sort_keys then											-- when namespace sort keys enabled
			local namespace_number = mw.title.getCurrentTitle().namespace;		-- get namespace number for this wikitext
			sort_key = (0 ~= namespace_number and (cfg.name_space_sort_keys[namespace_number] or cfg.name_space_sort_keys.other)) or nil;	-- get sort key character; nil for mainspace
			cat_wikilink = (not sort_key and 'cat wikilink') or 'cat wikilink sk';	-- make &lt;cfg.messages&gt; key
		end				

		for _, v in ipairs (z.error_cats_t) do									-- append error categories
			table.insert (render_t, utilities.substitute (cfg.messages[cat_wikilink], {v, sort_key}));
		end
		for _, v in ipairs (z.maint_cats_t) do									-- append maintenance categories
			table.insert (render_t, utilities.substitute (cfg.messages[cat_wikilink], {v, sort_key}));
		end

		for _, v in ipairs (z.prop_cats_t) do									-- append properties categories
			table.insert (render_t, utilities.substitute (cfg.messages['cat wikilink'], v));	-- no sort keys
		end
	end

	return table.concat (render_t);												-- make a big string and done
end


--[[--------------------------&lt; V A L I D A T E &gt;--------------------------------------------------------------

Looks for a parameter's name in one of several whitelists.

Parameters in the whitelist can have three values:
	true - active, supported parameters
	false - deprecated, supported parameters
	nil - unsupported parameters
	
]]

local function validate (name, cite_class, empty)
	local name = tostring (name);
	local enum_name;															-- parameter name with enumerator (if any) replaced with '#'
	local state;
	local function state_test (state, name)										-- local function to do testing of state values
		if true == state then return true; end									-- valid actively supported parameter
		if false == state then
			if empty then return nil; end										-- empty deprecated parameters are treated as unknowns
			deprecated_parameter (name);										-- parameter is deprecated but still supported
			return true;
		end
		if 'tracked' == state then
			local base_name = name:gsub ('%d', '');								-- strip enumerators from parameter names that have them to get the base name
			utilities.add_prop_cat ('tracked-param', {base_name}, base_name);	-- add a properties category; &lt;base_name&gt; modifies &lt;key&gt;
			return true;
		end
		return nil;
	end		

	if name:find ('#') then														-- # is a cs1|2 reserved character so parameters with # not permitted
		return nil;
	end
																				-- replace enumerator digit(s) with # (|last25= becomes |last#=) (mw.ustring because non-Western 'local' digits)
	enum_name = mw.ustring.gsub (name, '%d+$', '#');							-- where enumerator is last charaters in parameter name (these to protect |s2cid=)
	enum_name = mw.ustring.gsub (enum_name, '%d+([%-l])', '#%1');				-- where enumerator is in the middle of the parameter name; |author#link= is the oddity

	if 'document' == cite_class then											-- special case for {{cite document}}
		state = whitelist.document_parameters_t[enum_name];						-- this list holds enumerated and nonenumerated parameters
		if true == state_test (state, name) then return true; end
		
		return false;
	end

	if utilities.in_array (cite_class, whitelist.preprint_template_list_t) then	-- limited parameter sets allowed for these templates
		state = whitelist.limited_parameters_t[enum_name];						-- this list holds enumerated and nonenumerated parameters
		if true == state_test (state, name) then return true; end

		state = whitelist.preprint_arguments_t[cite_class][name];				-- look in the parameter-list for the template identified by cite_class
		if true == state_test (state, name) then return true; end

		return false;															-- not supported because not found or name is set to nil
	end																			-- end limited parameter-set templates

	if utilities.in_array (cite_class, whitelist.unique_param_template_list_t) then 	-- template-specific parameters for templates that accept parameters from the basic argument list
		state = whitelist.unique_arguments_t[cite_class][name];					-- look in the template-specific parameter-lists for the template identified by cite_class
		if true == state_test (state, name) then return true; end
	end																			-- if here, fall into general validation

	state = whitelist.common_parameters_t[enum_name];							-- all other templates; all normal parameters allowed; this list holds enumerated and nonenumerated parameters
	if true == state_test (state, name) then return true; end

	return false;																-- not supported because not found or name is set to nil
end


--[=[-------------------------&lt; I N T E R _ W I K I _ C H E C K &gt;----------------------------------------------

check &lt;value&gt; for inter-language interwiki-link markup.  &lt;prefix&gt; must be a MediaWiki-recognized language
code.  when these values have the form (without leading colon):
	[[&lt;prefix&gt;:link|label]] return label as plain-text
	[[&lt;prefix&gt;:link]] return &lt;prefix&gt;:link as plain-text

return value as is else

]=]

local function inter_wiki_check (parameter, value)
	local prefix = value:match ('%[%[(%a+):');									-- get an interwiki prefix if one exists
	local _;
	
	if prefix and cfg.inter_wiki_map[prefix:lower()] then						-- if prefix is in the map, needs preceding colon so
		utilities.set_message ('err_bad_paramlink', parameter);					-- emit an error message
		_, value, _ = utilities.is_wikilink (value);							-- extract label portion from wikilink
	end
	return value;
end


--[[--------------------------&lt; M I S S I N G _ P I P E _ C H E C K &gt;------------------------------------------

Look at the contents of a parameter. If the content has a string of characters and digits followed by an equal
sign, compare the alphanumeric string to the list of cs1|2 parameters.  If found, then the string is possibly a
parameter that is missing its pipe.  There are two tests made:
	{{cite ... |title=Title access-date=2016-03-17}}	-- the first parameter has a value and whitespace separates that value from the missing pipe parameter name
	{{cite ... |title=access-date=2016-03-17}}			-- the first parameter has no value (whitespace after the first = is trimmed by MediaWiki)
cs1|2 shares some parameter names with XML/HTML attributes: class=, title=, etc.  To prevent false positives XML/HTML
tags are removed before the search.

If a missing pipe is detected, this function adds the missing pipe maintenance category.

]]

local function missing_pipe_check (parameter, value)
	local capture;
	value = value:gsub ('%b&lt;&gt;', '');											-- remove XML/HTML tags because attributes: class=, title=, etc.

	capture = value:match ('%s+(%a[%w%-]+)%s*=') or value:match ('^(%a[%w%-]+)%s*=');	-- find and categorize parameters with possible missing pipes
	if capture and validate (capture) then										-- if the capture is a valid parameter name
		utilities.set_message ('err_missing_pipe', parameter);
	end
end


--[[--------------------------&lt; H A S _ E X T R A N E O U S _ P U N C T &gt;--------------------------------------

look for extraneous terminal punctuation in most parameter values; parameters listed in skip table are not checked

]]

local function has_extraneous_punc (param, value)
	if 'number' == type (param) then
		return;
	end
	
	param = param:gsub ('%d+', '#');											-- enumerated name-list mask params allow terminal punct; normalize 
	if cfg.punct_skip[param] then
		return;																	-- parameter name found in the skip table so done
	end
	
	if value:match ('[,;:]$') then
		utilities.set_message ('maint_extra_punct');							-- has extraneous punctuation; add maint cat
	end
	if value:match ('^=') then													-- sometimes an extraneous '=' character appears ...
		utilities.set_message ('maint_extra_punct');							-- has extraneous punctuation; add maint cat
	end
end


--[[--------------------------&lt; H A S _ E X T R A N E O U S _ U R L &gt;------------------------------------------

look for extraneous url parameter values; parameters listed in skip table are not checked

]]

local function has_extraneous_url (url_param_t)
	local url_error_t = {};
	
	check_for_url (url_param_t, url_error_t);									-- extraneous url check
	if 0 ~= #url_error_t then													-- non-zero when there are errors
		table.sort (url_error_t);
		utilities.set_message ('err_param_has_ext_link', {utilities.make_sep_list (#url_error_t, url_error_t)});	-- add this error message
	end
end


--[[--------------------------&lt; C I T A T I O N &gt;--------------------------------------------------------------

This is used by templates such as {{cite book}} to create the actual citation text.

]]

local function citation(frame)
	Frame = frame;																-- save a copy in case we need to display an error message in preview mode

	local config = {};															-- table to store parameters from the module {{#invoke:}}
	for k, v in pairs( frame.args ) do											-- get parameters from the {{#invoke}} frame
		config[k] = v;
	--	args[k] = v;															-- crude debug support that allows us to render a citation from module {{#invoke:}}; skips parameter validation; TODO: keep?
	end	
																				-- i18n: set the name that your wiki uses to identify sandbox subpages from sandbox template invoke (or can be set here)
	local sandbox = ((config.SandboxPath and '' ~= config.SandboxPath) and config.SandboxPath) or '/sandbox';	-- sandbox path from {{#invoke:Citation/CS1/sandbox|citation|SandboxPath=/...}}
	is_sandbox = nil ~= string.find (frame:getTitle(), sandbox, 1, true);		-- is this invoke the sandbox module?
	sandbox = is_sandbox and sandbox or '';										-- use i18n sandbox to load sandbox modules when this module is the sandox; live modules else

	local pframe = frame:getParent()
	local styles;
	
	cfg = mw.loadData ('Module:Citation/CS1/Configuration' .. sandbox);			-- load sandbox versions of support modules when {{#invoke:Citation/CS1/sandbox|...}}; live modules else
	whitelist = mw.loadData ('Module:Citation/CS1/Whitelist' .. sandbox);
	utilities = require ('Module:Citation/CS1/Utilities' .. sandbox);
	validation = require ('Module:Citation/CS1/Date_validation' .. sandbox);
	identifiers = require ('Module:Citation/CS1/Identifiers' .. sandbox);
	metadata = require ('Module:Citation/CS1/COinS' .. sandbox);
	styles = 'Module:Citation/CS1' .. sandbox .. '/styles.css';

	utilities.set_selected_modules (cfg);										-- so that functions in Utilities can see the selected cfg tables
	identifiers.set_selected_modules (cfg, utilities);							-- so that functions in Identifiers can see the selected cfg tables and selected Utilities module
	validation.set_selected_modules (cfg, utilities);							-- so that functions in Date validataion can see selected cfg tables and the selected Utilities module
	metadata.set_selected_modules (cfg, utilities);								-- so that functions in COinS can see the selected cfg tables and selected Utilities module

	z = utilities.z;															-- table of error and category tables in Module:Citation/CS1/Utilities

	is_preview_mode = not utilities.is_set (frame:preprocess ('{{REVISIONID}}'));

	local args = {};															-- table where we store all of the template's arguments
	local suggestions = {};														-- table where we store suggestions if we need to loadData them
	local error_text;															-- used as a flag

	local capture;																-- the single supported capture when matching unknown parameters using patterns
	local empty_unknowns = {};													-- sequence table to hold empty unknown params for error message listing
	for k, v in pairs( pframe.args ) do											-- get parameters from the parent (template) frame
		v = mw.ustring.gsub (v, '^%s*(.-)%s*$', '%1');							-- trim leading/trailing whitespace; when v is only whitespace, becomes empty string
		if v ~= '' then
			if ('string' == type (k)) then
				k = mw.ustring.gsub (k, '%d', cfg.date_names.local_digits);		-- for enumerated parameters, translate 'local' digits to Western 0-9
			end
			if not validate( k, config.CitationClass ) then			
				if type (k) ~= 'string' then									-- exclude empty numbered parameters
					if v:match("%S+") ~= nil then
						error_text = utilities.set_message ('err_text_ignored', {v});
					end
				elseif validate (k:lower(), config.CitationClass) then 
					error_text = utilities.set_message ('err_parameter_ignored_suggest', {k, k:lower()});	-- suggest the lowercase version of the parameter
				else
					if nil == suggestions.suggestions then						-- if this table is nil then we need to load it
						suggestions = mw.loadData ('Module:Citation/CS1/Suggestions' .. sandbox);	--load sandbox version of suggestion module when {{#invoke:Citation/CS1/sandbox|...}}; live module else
					end
					for pattern, param in pairs (suggestions.patterns) do		-- loop through the patterns to see if we can suggest a proper parameter
						capture = k:match (pattern);							-- the whole match if no capture in pattern else the capture if a match
						if capture then											-- if the pattern matches 
							param = utilities.substitute (param, capture);		-- add the capture to the suggested parameter (typically the enumerator)
							if validate (param, config.CitationClass) then		-- validate the suggestion to make sure that the suggestion is supported by this template (necessary for limited parameter lists)
								error_text = utilities.set_message ('err_parameter_ignored_suggest', {k, param});	-- set the suggestion error message
							else
								error_text = utilities.set_message ('err_parameter_ignored', {k});	-- suggested param not supported by this template
								v = '';											-- unset
							end
						end
					end
					if not utilities.is_set (error_text) then					-- couldn't match with a pattern, is there an explicit suggestion?						
						if (suggestions.suggestions[ k:lower() ] ~= nil) and validate (suggestions.suggestions[ k:lower() ], config.CitationClass) then
							utilities.set_message ('err_parameter_ignored_suggest', {k, suggestions.suggestions[ k:lower() ]});
						else
							utilities.set_message ('err_parameter_ignored', {k});
							v = '';												-- unset value assigned to unrecognized parameters (this for the limited parameter lists)
						end
					end
				end				  
			end

			args[k] = v;														-- save this parameter and its value

		elseif not utilities.is_set (v) then									-- for empty parameters
			if not validate (k, config.CitationClass, true) then				-- is this empty parameter a valid parameter
				k = ('' == k) and '(empty string)' or k;						-- when k is empty string (or was space(s) trimmed to empty string), replace with descriptive text
				table.insert (empty_unknowns, utilities.wrap_style ('parameter', k));	-- format for error message and add to the list
			end
																				-- crude debug support that allows us to render a citation from module {{#invoke:}} TODO: keep?
	--	elseif args[k] ~= nil or (k == 'postscript') then						-- when args[k] has a value from {{#invoke}} frame (we don't normally do that)
	--		args[k] = v;														-- overwrite args[k] with empty string from pframe.args[k] (template frame); v is empty string here
		end																		-- not sure about the postscript bit; that gets handled in parameter validation; historical artifact?
	end	

	if 0 ~= #empty_unknowns then												-- create empty unknown error message
		utilities.set_message ('err_param_unknown_empty', {
			1 == #empty_unknowns and '' or 's',
			utilities.make_sep_list (#empty_unknowns, empty_unknowns)
			});
	end

	local url_param_t = {};

	for k, v in pairs( args ) do
		if 'string' == type (k) then											-- don't evaluate positional parameters
			has_invisible_chars (k, v);											-- look for invisible characters
		end
		has_extraneous_punc (k, v);												-- look for extraneous terminal punctuation in parameter values
		missing_pipe_check (k, v);												-- do we think that there is a parameter that is missing a pipe?
		args[k] = inter_wiki_check (k, v);										-- when language interwiki-linked parameter missing leading colon replace with wiki-link label

		if 'string' == type (k) and not cfg.url_skip[k] then					-- when parameter k is not positional and not in url skip table
			url_param_t[k] = v;													-- make a parameter/value list for extraneous url check
		end
	end

	has_extraneous_url (url_param_t);											-- look for url in parameter values where a url does not belong

	return table.concat ({
		frame:extensionTag ('templatestyles', '', {src=styles}),
		citation0( config, args)
	});
end


--[[--------------------------&lt; E X P O R T E D   F U N C T I O N S &gt;------------------------------------------
]]

return {citation = citation};</text>
      <sha1>7sahwn7umrpjn8voh7tpvtm2yhs02x8</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Configuration</title>
    <ns>828</ns>
    <id>820</id>
    <revision>
      <id>155779</id>
      <parentid>155778</parentid>
      <timestamp>2024-07-17T07:52:43Z</timestamp>
      <contributor>
        <username>Immanuelle</username>
        <id>2</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:wikipedia:Module:Citation/CS1/Configuration]]</comment>
      <origin>155778</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="111447" sha1="tv7z805z1dd8uf6dr9d216rtxx7edd2" xml:space="preserve">local lang_obj = mw.language.getContentLanguage();								-- make a language object for the local language; used here for languages and dates 


--[[--------------------------&lt; S E T T I N G S &gt;--------------------------------------------------------------

boolean settings used to control various things.  these setting located here to make them easy to find

]]
																				-- these settings local to this module only
local local_digits_from_mediawiki = false;										-- for i18n; when true, module fills date_names['local_digits'] from MediaWiki; manual fill required else; always false at en.wiki
local local_date_names_from_mediawiki = false;									-- for i18n; when true, module fills date_names['local']['long'] and date_names['local']['short'] from MediaWiki;
																				-- manual translation required else; ; always false at en.wiki

																				-- these settings exported to other modules
local use_identifier_redirects = true;											-- when true use redirect name for identifier label links; always true at en.wiki
local local_lang_cat_enable = false;											-- when true categorizes pages where |language=&lt;local wiki's language&gt;; always false at en.wiki
local date_name_auto_xlate_enable = false;										-- when true translates English month-names to the local-wiki's language month names; always false at en.wiki
local date_digit_auto_xlate_enable = false;										-- when true translates Western date digit to the local-wiki's language digits (date_names['local_digits']); always false at en.wiki
local enable_sort_keys = true;													-- when true module adds namespace sort keys to error and maintenance category links


--[[--------------------------&lt; U N C A T E G O R I Z E D _ N A M E S P A C E S &gt;------------------------------

List of namespaces identifiers for namespaces that will not be included in citation error categories.
Same as setting notracking = true by default.

For wikis that have a current version of Module:cs1 documentation support, this #invoke will return an unordered
list of namespace names and their associated identifiers:
	{{#invoke:cs1 documentation support|uncategorized_namespace_lister|all=&lt;anything&gt;}}

]]

uncategorized_namespaces_t = {[2]=true};										-- init with user namespace id
for k, _ in pairs (mw.site.talkNamespaces) do									-- add all talk namespace ids
	uncategorized_namespaces_t[k] = true;
end

local uncategorized_subpages = {'/[Ss]andbox', '/[Tt]estcases', '/[^/]*[Ll]og', '/[Aa]rchive'};		-- list of Lua patterns found in page names of pages we should not categorize

--[[
at en.wiki Greek characters are used as sort keys for certain items in a category so that those items are
placed at the end of a category page.  See Wikipedia:Categorization#Sort_keys.  That works well for en.wiki
because English is written using the Latn script.  This may not work well for other languages.  At en.wiki it
is desireable to place content from certain namespaces at the end of a category listing so the module adds sort
keys to error and maintenance category links when rendering a cs1|2 template on a page in that namespace.

i18n: if this does not work well for your language, set &lt;enable_sort_keys&gt; to false.
]]

local name_space_sort_keys = {													-- sort keys to be used with these namespaces:
	[4] = 'ω',																	-- wikipedia; omega
	[10] = 'τ',																	-- template; tau
	[118] = 'Δ', 																-- draft; delta
	['other'] = 'ο',															-- all other non-talk namespaces except main (article); omicron
	}

--[[--------------------------&lt; M E S S A G E S &gt;--------------------------------------------------------------

Translation table

The following contains fixed text that may be output as part of a citation.
This is separated from the main body to aid in future translations of this
module.

]]

local messages = {
	['agency'] = '$1 $2',														-- $1 is sepc, $2 is agency
	['archived-dead'] = 'Archived from $1 on $2',
	['archived-live'] = '$1 from the original on $2',
	['archived-unfit'] = 'Archived from the original on ',
	['archived'] = 'Archived',
	['by'] = 'By',																-- contributions to authored works: introduction, foreword, afterword
	['cartography'] = 'Cartography by $1',
	['editor'] = 'ed.',
	['editors'] = 'eds.',
	['edition'] = '($1&amp;nbsp;ed.)',
	['episode'] = 'Episode $1',
	['et al'] = 'et&amp;nbsp;al.',
	['in'] = 'In',																-- edited works
	['inactive'] = 'inactive',
	['inset'] = '$1 inset',
	['interview'] = 'Interviewed by $1',										
	['mismatch'] = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; / &lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt; mismatch',	-- $1 is year param name; $2 is date param name
	['newsgroup'] = '[[Usenet newsgroup|Newsgroup]]:&amp;nbsp;$1',
	['notitle'] = 'No title',													-- for |title=(()) and (in the future) |title=none
	['original'] = 'the original',
	['origdate'] = ' [$1]',
	['published'] = ' (published $1)',
	['retrieved'] = 'Retrieved $1',
	['season'] = 'Season $1',
	['section'] = '§&amp;nbsp;$1',
	['sections'] = '§§&amp;nbsp;$1',
	['series'] = '$1 $2',														-- $1 is sepc, $2 is series
	['seriesnum'] = 'Series $1',
	['translated'] = 'Translated by $1',
	['type'] = ' ($1)',															-- for titletype
	['written'] = 'Written at $1',

	['vol'] = '$1 Vol.&amp;nbsp;$2',												-- $1 is sepc; bold journal style volume is in presentation{}
	['vol-no'] = '$1 Vol.&amp;nbsp;$2, no.&amp;nbsp;$3',								-- sepc, volume, issue (alternatively insert $1 after $2, but then we'd also have to change capitalization)
	['issue'] = '$1 No.&amp;nbsp;$2',												-- $1 is sepc

	['art'] = '$1 Art.&amp;nbsp;$2',												-- $1 is sepc; for {{cite conference}} only
	['vol-art'] = '$1 Vol.&amp;nbsp;$2, art.&amp;nbsp;$3',								-- sepc, volume, article-number; for {{cite conference}} only

	['j-vol'] = '$1 $2',														-- sepc, volume; bold journal volume is in presentation{}
	['j-issue'] = ' ($1)',
	['j-article-num'] = ' $1',													-- TODO: any punctuation here? static text?

	['nopp'] = '$1 $2';															-- page(s) without prefix; $1 is sepc

	['p-prefix'] = "$1 p.&amp;nbsp;$2",												-- $1 is sepc
	['pp-prefix'] = "$1 pp.&amp;nbsp;$2",											-- $1 is sepc
	['j-page(s)'] = ': $1',														-- same for page and pages

	['sheet'] = '$1 Sheet&amp;nbsp;$2',												-- $1 is sepc
	['sheets'] = '$1 Sheets&amp;nbsp;$2',											-- $1 is sepc
	['j-sheet'] = ': Sheet&amp;nbsp;$1',
	['j-sheets'] = ': Sheets&amp;nbsp;$1',
	
	['language'] = '(in $1)',
	['via'] = " &amp;ndash; via $1",
	['event'] = 'Event occurs at',
	['minutes'] = 'minutes in',
	
	-- Determines the location of the help page
	['help page link'] = 'Help:CS1 errors',
	['help page label'] = 'help',
	
	-- categories
	['cat wikilink'] = '[[Category:$1]]',										-- $1 is the category name
	['cat wikilink sk'] = '[[Category:$1|$2]]',									-- $1 is the category name; $2 is namespace sort key
	[':cat wikilink'] = '[[:Category:$1|link]]',								-- category name as maintenance message wikilink; $1 is the category name

	-- Internal errors (should only occur if configuration is bad)
	['undefined_error'] = 'Called with an undefined error condition',
	['unknown_ID_key'] = 'Unrecognized ID key: ',								-- an ID key in id_handlers not found in ~/Identifiers func_map{}
	['unknown_ID_access'] = 'Unrecognized ID access keyword: ',					-- an ID access keyword in id_handlers not found in keywords_lists['id-access']{}
	['unknown_argument_map'] = 'Argument map not defined for this variable',
	['bare_url_no_origin'] = 'Bare URL found but origin indicator is nil or empty',
	
	['warning_msg_e'] = '&lt;span style="color:#d33"&gt;One or more &lt;code style="color: inherit; background: inherit; border: none; padding: inherit;"&gt;&amp;#123;{$1}}&lt;/code&gt; templates have errors&lt;/span&gt;; messages may be hidden ([[Help:CS1_errors#Controlling_error_message_display|help]]).';	-- $1 is template link
	['warning_msg_m'] = '&lt;span style="color:#3a3"&gt;One or more &lt;code style="color: inherit; background: inherit; border: none; padding: inherit;"&gt;&amp;#123;{$1}}&lt;/code&gt; templates have maintenance messages&lt;/span&gt;; messages may be hidden ([[Help:CS1_errors#Controlling_error_message_display|help]]).';	-- $1 is template link
	}


--[[--------------------------&lt; C I T A T I O N _ C L A S S _ M A P &gt;------------------------------------------

this table maps the value assigned to |CitationClass= in the cs1|2 templates to the canonical template name when
the value assigned to |CitationClass= is different from the canonical template name.  |CitationClass= values are
used as class attributes in the &lt;cite&gt; tag that encloses the citation so these names may not contain spaces while
the canonical template name may.  These names are used in warning_msg_e and warning_msg_m to create links to the
template's documentation when an article is displayed in preview mode.

Most cs1|2 template |CitationClass= values at en.wiki match their canonical template names so are not listed here.

]]

	local citation_class_map_t = {												-- TODO: if kept, these and all other config.CitationClass 'names' require some sort of i18n
		['arxiv'] = 'arXiv',
		['audio-visual'] = 'AV media',
		['AV-media-notes'] = 'AV media notes',
		['biorxiv'] = 'bioRxiv',
		['citeseerx'] = 'CiteSeerX',
		['encyclopaedia'] = 'encyclopedia',
		['mailinglist'] = 'mailing list',
		['medrxiv'] = 'medRxiv',
		['pressrelease'] = 'press release',
		['ssrn'] = 'SSRN',
		['techreport'] = 'tech report',
		}


--[=[-------------------------&lt; E T _ A L _ P A T T E R N S &gt;--------------------------------------------------

This table provides Lua patterns for the phrase "et al" and variants in name text
(author, editor, etc.). The main module uses these to identify and emit the 'etal' message.

]=]

local et_al_patterns = {
	"[;,]? *[\"']*%f[%a][Ee][Tt]%.? *[Aa][Ll][%.;,\"']*$",						-- variations on the 'et al' theme
	"[;,]? *[\"']*%f[%a][Ee][Tt]%.? *[Aa][Ll][Ii][AaIi][Ee]?[%.;,\"']*$",		-- variations on the 'et alia', 'et alii' and 'et aliae' themes (false positive 'et aliie' unlikely to match)
	"[;,]? *%f[%a]and [Oo]thers",												-- an alternative to et al.
	"%[%[ *[Ee][Tt]%.? *[Aa][Ll]%.? *%]%]",										-- a wikilinked form
	"%(%( *[Ee][Tt]%.? *[Aa][Ll]%.? *%)%)",										-- a double-bracketed form (to counter partial removal of ((...)) syntax)
	"[%(%[] *[Ee][Tt]%.? *[Aa][Ll]%.? *[%)%]]",									-- a bracketed form
	}


--[[--------------------------&lt; P R E S E N T A T I O N &gt;------------------------

Fixed presentation markup.  Originally part of citation_config.messages it has
been moved into its own, more semantically correct place.

]]

local presentation = 
	{
	-- .citation-comment class is specified at Help:CS1_errors#Controlling_error_message_display
	['hidden-error'] = '&lt;span class="cs1-hidden-error citation-comment"&gt;$1&lt;/span&gt;',
	['visible-error'] = '&lt;span class="cs1-visible-error citation-comment"&gt;$1&lt;/span&gt;',
	['hidden-maint'] = '&lt;span class="cs1-maint citation-comment"&gt;$1&lt;/span&gt;',
	
	['accessdate'] = '&lt;span class="reference-accessdate"&gt;$1$2&lt;/span&gt;',			-- to allow editors to hide accessdate using personal CSS

	['bdi'] = '&lt;bdi$1&gt;$2&lt;/bdi&gt;',												-- bidirectional isolation used with |script-title= and the like

	['cite'] = '&lt;cite class="$1"&gt;$2&lt;/cite&gt;';									-- for use when citation does not have a namelist and |ref= not set so no id="..." attribute
	['cite-id'] = '&lt;cite id="$1" class="$2"&gt;$3&lt;/cite&gt;';							-- for use when when |ref= is set or when citation has a namelist

	['format'] = ' &lt;span class="cs1-format"&gt;($1)&lt;/span&gt;',						-- for |format=, |chapter-format=, etc.
	['interwiki'] = ' &lt;span class="cs1-format"&gt;[in $1]&lt;/span&gt;',					-- for interwiki-language-linked author, editor, etc
	['interproj'] = ' &lt;span class="cs1-format"&gt;[at $1]&lt;/span&gt;',					-- for interwiki-project-linked author, editor, etc (:d: and :s: supported; :w: ignored)

	-- various access levels, for |access=, |doi-access=, |arxiv=, ...
	-- narrow no-break space &amp;#8239; may work better than nowrap CSS. Or not? Browser support?

	['ext-link-access-signal'] = '&lt;span class="$1" title="$2"&gt;$3&lt;/span&gt;',		-- external link with appropriate lock icon
		['free'] = {class='id-lock-free', title='Freely accessible'},			-- classes defined in Module:Citation/CS1/styles.css
		['registration'] = {class='id-lock-registration', title='Free registration required'},
		['limited'] = {class='id-lock-limited', title='Free access subject to limited trial, subscription normally required'},
		['subscription'] = {class='id-lock-subscription', title='Paid subscription required'},

	['interwiki-icon'] = '&lt;span class="$1" title="$2"&gt;$3&lt;/span&gt;',
		['class-wikisource'] = 'cs1-ws-icon',

	['italic-title'] = "''$1''",

	['kern-left'] = '&lt;span class="cs1-kern-left"&gt;&lt;/span&gt;$1',					-- spacing to use when title contains leading single or double quote mark
	['kern-right'] = '$1&lt;span class="cs1-kern-right"&gt;&lt;/span&gt;',					-- spacing to use when title contains trailing single or double quote mark

	['nowrap1'] = '&lt;span class="nowrap"&gt;$1&lt;/span&gt;',								-- for nowrapping an item: &lt;span ...&gt;yyyy-mm-dd&lt;/span&gt;
	['nowrap2'] = '&lt;span class="nowrap"&gt;$1&lt;/span&gt; $2',							-- for nowrapping portions of an item: &lt;span ...&gt;dd mmmm&lt;/span&gt; yyyy (note white space)

	['ocins'] = '&lt;span title="$1" class="Z3988"&gt;&lt;/span&gt;',
	
	['parameter'] = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',
	
	['ps_cs1'] = '.';															-- CS1 style postscript (terminal) character
	['ps_cs2'] = '';															-- CS2 style postscript (terminal) character (empty string)

	['quoted-text'] = '&lt;q&gt;$1&lt;/q&gt;',												-- for wrapping |quote= content
	['quoted-title'] = '"$1"',

	['sep_cs1'] = '.',															-- CS1 element separator
	['sep_cs2'] = ',',															-- CS2 separator
	['sep_nl'] = ';',															-- CS1|2 style name-list separator between names is a semicolon
	['sep_nl_and'] = ' and ',													-- used as last nl sep when |name-list-style=and and list has 2 items
	['sep_nl_end'] = '; and ',													-- used as last nl sep when |name-list-style=and and list has 3+ names
	['sep_name'] = ', ',														-- CS1|2 style last/first separator is &lt;comma&gt;&lt;space&gt;
	['sep_nl_vanc'] = ',',														-- Vancouver style name-list separator between authors is a comma
	['sep_name_vanc'] = ' ',													-- Vancouver style last/first separator is a space

	['sep_list'] = ', ',														-- used for |language= when list has 3+ items except for last sep which uses sep_list_end
	['sep_list_pair'] = ' and ',												-- used for |language= when list has 2 items
	['sep_list_end'] = ', and ',												-- used as last list sep for |language= when list has 3+ items
	
	['trans-italic-title'] = "&amp;#91;''$1''&amp;#93;",
	['trans-quoted-title'] = "&amp;#91;$1&amp;#93;",									-- for |trans-title= and |trans-quote=
	['vol-bold'] = '$1 &lt;b&gt;$2&lt;/b&gt;',												-- sepc, volume; for bold journal cites; for other cites ['vol'] in messages{}
	}

	
--[[--------------------------&lt; A L I A S E S &gt;---------------------------------

Aliases table for commonly passed parameters.

Parameter names on the right side in the assignments in this table must have been
defined in the Whitelist before they will be recognized as valid parameter names

]]

local aliases = {
	['AccessDate'] = {'access-date', 'accessdate'},								-- Used by InternetArchiveBot
	['Agency'] = 'agency',
	['ArchiveDate'] = {'archive-date', 'archivedate'},							-- Used by InternetArchiveBot
	['ArchiveFormat'] = 'archive-format',
	['ArchiveURL'] = {'archive-url', 'archiveurl'},								-- Used by InternetArchiveBot
	['ArticleNumber'] = 'article-number',
	['ASINTLD'] = 'asin-tld',
	['At'] = 'at',																-- Used by InternetArchiveBot
	['Authors'] = {'people', 'credits'},
	['BookTitle'] = {'book-title', 'booktitle'},
	['Cartography'] = 'cartography',
	['Chapter'] = {'chapter', 'contribution', 'entry', 'article', 'section'},
	['ChapterFormat'] = {'chapter-format', 'contribution-format', 'entry-format',
		'article-format', 'section-format'};
	['ChapterURL'] = {'chapter-url', 'contribution-url', 'entry-url', 'article-url', 'section-url'},	-- Used by InternetArchiveBot
	['ChapterUrlAccess'] = {'chapter-url-access', 'contribution-url-access',
		'entry-url-access', 'article-url-access', 'section-url-access'},		-- Used by InternetArchiveBot
	['Class'] = 'class',														-- cite arxiv and arxiv identifier
	['Collaboration'] = 'collaboration',
	['Conference'] = {'conference', 'event'},
	['ConferenceFormat'] = 'conference-format',
	['ConferenceURL'] = 'conference-url',										-- Used by InternetArchiveBot
	['Date'] = {'date', 'air-date', 'airdate'},									-- air-date and airdate for cite episode and cite serial only
	['Degree'] = 'degree',
	['DF'] = 'df',
	['DisplayAuthors'] = {'display-authors', 'display-subjects'},
	['DisplayContributors'] = 'display-contributors',
	['DisplayEditors'] = 'display-editors',
	['DisplayInterviewers'] = 'display-interviewers',
	['DisplayTranslators'] = 'display-translators',
	['Docket'] = 'docket',
	['DoiBroken'] = 'doi-broken-date',
	['Edition'] = 'edition',
	['Embargo'] = 'pmc-embargo-date',
	['Encyclopedia'] = {'encyclopedia', 'encyclopaedia', 'dictionary'},			-- cite encyclopedia only
	['Episode'] = 'episode',													-- cite serial only TODO: make available to cite episode?
	['Format'] = 'format',
	['ID'] = {'id', 'ID'},
	['Inset'] = 'inset',
	['Issue'] = {'issue', 'number'},
	['Language'] = {'language', 'lang'},
	['MailingList'] = {'mailing-list', 'mailinglist'},							-- cite mailing list only
	['Map'] = 'map',															-- cite map only
	['MapFormat'] = 'map-format',												-- cite map only
	['MapURL'] = {'map-url', 'mapurl'},											-- cite map only -- Used by InternetArchiveBot
	['MapUrlAccess'] = 'map-url-access',										-- cite map only -- Used by InternetArchiveBot
	['Minutes'] = 'minutes',
	['Mode'] = 'mode',
	['NameListStyle'] = 'name-list-style',
	['Network'] = 'network',
	['Newsgroup'] = 'newsgroup',												-- cite newsgroup only
	['NoPP'] = {'no-pp', 'nopp'},
	['NoTracking'] = {'no-tracking', 'template-doc-demo'},
	['Number'] = 'number',														-- this case only for cite techreport
	['OrigDate'] = {'orig-date', 'orig-year', 'origyear'},
	['Others'] = 'others',
	['Page'] = {'page', 'p'},													-- Used by InternetArchiveBot
	['Pages'] = {'pages', 'pp'},												-- Used by InternetArchiveBot
	['Periodical'] = {'journal', 'magazine', 'newspaper', 'periodical', 'website', 'work'},
	['Place'] = {'place', 'location'},
	['PostScript'] = 'postscript',
	['PublicationDate'] = {'publication-date', 'publicationdate'},
	['PublicationPlace'] = {'publication-place', 'publicationplace'},
	['PublisherName'] = {'publisher', 'institution'},
	['Quote'] = {'quote', 'quotation'},
	['QuotePage'] = 'quote-page',
	['QuotePages'] = 'quote-pages',
	['Ref'] = 'ref',
	['Scale'] = 'scale',
	['ScriptChapter'] = {'script-chapter', 'script-contribution', 'script-entry',
		'script-article', 'script-section'},
	['ScriptEncyclopedia'] = {'script-encyclopedia', 'script-encyclopaedia'},	-- cite encyclopedia only
	['ScriptMap'] = 'script-map',
	['ScriptPeriodical'] = {'script-journal', 'script-magazine', 'script-newspaper',
		'script-periodical', 'script-website', 'script-work'},
	['ScriptQuote'] = 'script-quote',
	['ScriptTitle'] = 'script-title',											-- Used by InternetArchiveBot
	['Season'] = 'season',
	['Sections'] = 'sections',													-- cite map only
	['Series'] = {'series', 'version'},
	['SeriesLink'] = {'series-link', 'serieslink'},
	['SeriesNumber'] = {'series-number', 'series-no'},
	['Sheet'] = 'sheet',														-- cite map only
	['Sheets'] = 'sheets',														-- cite map only
	['Station'] = 'station',
	['Time'] = 'time',
	['TimeCaption'] = 'time-caption',
	['Title'] = 'title',														-- Used by InternetArchiveBot
	['TitleLink'] = {'title-link', 'episode-link', 'episodelink'},				-- Used by InternetArchiveBot
	['TitleNote'] = {'title-note', 'department'},
	['TitleType'] = {'type', 'medium'},
	['TransChapter'] = {'trans-article', 'trans-chapter', 'trans-contribution',
		'trans-entry', 'trans-section'},
	['Transcript'] = 'transcript',
	['TranscriptFormat'] = 'transcript-format',	
	['TranscriptURL'] = 'transcript-url',										-- Used by InternetArchiveBot
	['TransEncyclopedia'] = {'trans-encyclopedia', 'trans-encyclopaedia'},		-- cite encyclopedia only
	['TransMap'] = 'trans-map',													-- cite map only
	['TransPeriodical'] = {'trans-journal', 'trans-magazine', 'trans-newspaper',
		'trans-periodical', 'trans-website', 'trans-work'},
	['TransQuote'] = 'trans-quote',
	['TransTitle'] = 'trans-title',												-- Used by InternetArchiveBot
	['URL'] = {'url', 'URL'},													-- Used by InternetArchiveBot
	['UrlAccess'] = 'url-access',												-- Used by InternetArchiveBot
	['UrlStatus'] = 'url-status',												-- Used by InternetArchiveBot
	['Vauthors'] = 'vauthors',
	['Veditors'] = 'veditors',
	['Via'] = 'via',
	['Volume'] = 'volume',
	['Year'] = 'year',

	['AuthorList-First'] = {"first#", "author-first#", "author#-first", "author-given#", "author#-given",
		"subject-first#", "subject#-first", "subject-given#", "subject#-given",
		"given#"},
	['AuthorList-Last'] = {"last#", "author-last#", "author#-last", "author-surname#", "author#-surname",
		"subject-last#", "subject#-last", "subject-surname#", "subject#-surname",
		"author#", 'host#', "subject#", "surname#"},
	['AuthorList-Link'] = {"author-link#", "author#-link", "subject-link#",
		"subject#-link", "authorlink#", "author#link"},
	['AuthorList-Mask'] = {"author-mask#", "author#-mask", "subject-mask#", "subject#-mask"},

	['ContributorList-First'] = {'contributor-first#', 'contributor#-first',
		'contributor-given#', 'contributor#-given'},
	['ContributorList-Last'] = {'contributor-last#', 'contributor#-last',
		'contributor-surname#', 'contributor#-surname', 'contributor#'},
	['ContributorList-Link'] = {'contributor-link#', 'contributor#-link'},
	['ContributorList-Mask'] = {'contributor-mask#', 'contributor#-mask'},

	['EditorList-First'] = {"editor-first#", "editor#-first", "editor-given#", "editor#-given"},
	['EditorList-Last'] = {"editor-last#", "editor#-last", "editor-surname#",
		"editor#-surname", "editor#"},
	['EditorList-Link'] = {"editor-link#", "editor#-link"},
	['EditorList-Mask'] = {"editor-mask#", "editor#-mask"},
	
	['InterviewerList-First'] = {'interviewer-first#', 'interviewer#-first',
		'interviewer-given#', 'interviewer#-given'},
	['InterviewerList-Last'] = {'interviewer-last#', 'interviewer#-last',
		'interviewer-surname#', 'interviewer#-surname', 'interviewer#'},
	['InterviewerList-Link'] = {'interviewer-link#', 'interviewer#-link'},
	['InterviewerList-Mask'] = {'interviewer-mask#', 'interviewer#-mask'},

	['TranslatorList-First'] = {'translator-first#', 'translator#-first',
		'translator-given#', 'translator#-given'},
	['TranslatorList-Last'] = {'translator-last#', 'translator#-last',
		'translator-surname#', 'translator#-surname', 'translator#'},
	['TranslatorList-Link'] = {'translator-link#', 'translator#-link'},
	['TranslatorList-Mask'] = {'translator-mask#', 'translator#-mask'},
	}


--[[--------------------------&lt; P U N C T _ S K I P &gt;---------------------------

builds a table of parameter names that the extraneous terminal punctuation check should not check.

]]

local punct_meta_params = {														-- table of aliases[] keys (meta parameters); each key has a table of parameter names for a value
	'BookTitle', 'Chapter', 'ScriptChapter', 'ScriptTitle', 'Title', 'TransChapter', 'Transcript', 'TransMap',	'TransTitle',	-- title-holding parameters
	'AuthorList-Mask', 'ContributorList-Mask', 'EditorList-Mask', 'InterviewerList-Mask', 'TranslatorList-Mask',	-- name-list mask may have name separators
	'PostScript', 'Quote', 'ScriptQuote', 'TransQuote', 'Ref',											-- miscellaneous
	'ArchiveURL', 'ChapterURL', 'ConferenceURL', 'MapURL', 'TranscriptURL', 'URL',						-- URL-holding parameters
	}

local url_meta_params = {														-- table of aliases[] keys (meta parameters); each key has a table of parameter names for a value
	'ArchiveURL', 'ChapterURL', 'ConferenceURL', 'ID', 'MapURL', 'TranscriptURL', 'URL',		-- parameters allowed to hold urls
	'Page', 'Pages', 'At', 'QuotePage', 'QuotePages',							-- insource locators allowed to hold urls
	}

local function build_skip_table (skip_t, meta_params)
	for _, meta_param in ipairs (meta_params) do								-- for each meta parameter key
		local params = aliases[meta_param];										-- get the parameter or the table of parameters associated with the meta parameter name
		if 'string' == type (params) then
			skip_t[params] = 1;													-- just a single parameter
		else
			for _, param in ipairs (params) do									-- get the parameter name
				skip_t[param] = 1;												-- add the parameter name to the skip table
				local count;
				param, count = param:gsub ('#', '');							-- remove enumerator marker from enumerated parameters
				if 0 ~= count then												-- if removed
					skip_t[param] = 1;											-- add param name without enumerator marker
				end
			end
		end
	end
	return skip_t;
end

local punct_skip = {};
local url_skip = {};


--[[--------------------------&lt; S I N G L E - L E T T E R   S E C O N D - L E V E L   D O M A I N S &gt;----------

this is a list of tlds that are known to have single-letter second-level domain names.  This list does not include
ccTLDs which are accepted in is_domain_name().

]]

local single_letter_2nd_lvl_domains_t = {'cash', 'company', 'foundation', 'media', 'org', 'today'};


--[[-----------&lt; S P E C I A L   C A S E   T R A N S L A T I O N S &gt;------------

This table is primarily here to support internationalization.  Translations in
this table are used, for example, when an error message, category name, etc.,
is extracted from the English alias key.  There may be other cases where
this translation table may be useful.

]]
local is_Latn = 'A-Za-z\195\128-\195\150\195\152-\195\182\195\184-\198\191\199\132-\201\143\225\184\128-\225\187\191';
local special_case_translation = {
	['AuthorList'] = 'authors list',											-- used to assemble maintenance category names
	['ContributorList'] = 'contributors list',									-- translation of these names plus translation of the base maintenance category names in maint_cats{} table below
	['EditorList'] = 'editors list',											-- must match the names of the actual categories
	['InterviewerList'] = 'interviewers list',									-- this group or translations used by name_has_ed_markup() and name_has_mult_names()
	['TranslatorList'] = 'translators list',
	
																				-- Lua patterns to match pseudo-titles used by InternetArchiveBot and others as placeholder for unknown |title= value
	['archived_copy'] = {														-- used with CS1 maint: Archive[d] copy as title
		['en'] = '^archived?%s+copy$',											-- for English; translators: keep this because templates imported from en.wiki
		['local'] = nil,														-- translators: replace ['local'] = nil with lowercase translation only when bots or tools create generic titles in your language
		},

																				-- Lua patterns to match generic titles; usually created by bots or reference filling tools
																				-- translators: replace ['local'] = nil with lowercase translation only when bots or tools create generic titles in your language
		-- generic titles and patterns in this table should be lowercase only
		-- leave ['local'] nil except when there is a matching generic title in your language
		-- boolean 'true' for plain-text searches; 'false' for pattern searches

	['generic_titles'] = {
		['accept'] = {
			},
		['reject'] = {
			{['en'] = {'^wayback%s+machine$', false},				['local'] = nil},
			{['en'] = {'are you a robot', true},					['local'] = nil},
			{['en'] = {'hugedomains.com', true},					['local'] = nil},
			{['en'] = {'^[%(%[{&lt;]?no +title[&gt;}%]%)]?$', false},		['local'] = nil},
			{['en'] = {'page not found', true},						['local'] = nil},
			{['en'] = {'subscribe to read', true},					['local'] = nil},
			{['en'] = {'^[%(%[{&lt;]?unknown[&gt;}%]%)]?$', false},		['local'] = nil},
			{['en'] = {'website is for sale', true},				['local'] = nil},
			{['en'] = {'^404', false},								['local'] = nil},
			{['en'] = {'internet archive wayback machine', true},	['local'] = nil},
			{['en'] = {'log into facebook', true},					['local'] = nil},
			{['en'] = {'login • instagram', true},					['local'] = nil},
			{['en'] = {'redirecting...', true},						['local'] = nil},
			{['en'] = {'usurped title', true},						['local'] = nil},	-- added by a GreenC bot
			{['en'] = {'webcite query result', true},				['local'] = nil},
			{['en'] = {'wikiwix\'s cache', true},					['local'] = nil},
			}
		},

		-- boolean 'true' for plain-text searches, search string must be lowercase only
		-- boolean 'false' for pattern searches
		-- leave ['local'] nil except when there is a matching generic name in your language

	['generic_names'] = {
		['accept'] = {
			{['en'] = {'%[%[[^|]*%(author%) *|[^%]]*%]%]', false},				['local'] = nil},
			},
		['reject'] = {
			{['en'] = {'about us', true},										['local'] = nil},
			{['en'] = {'%f[%a][Aa]dvisor%f[%A]', false},						['local'] = nil},
			{['en'] = {'allmusic', true},										['local'] = nil},
			{['en'] = {'%f[%a][Aa]uthor%f[%A]', false},							['local'] = nil},
			{['en'] = {'business', true},										['local'] = nil},
			{['en'] = {'cnn', true},											['local'] = nil},
			{['en'] = {'collaborator', true},									['local'] = nil},
			{['en'] = {'contributor', true},									['local'] = nil},
			{['en'] = {'contact us', true},										['local'] = nil},
			{['en'] = {'directory', true},										['local'] = nil},
			{['en'] = {'%f[%(%[][%(%[]%s*eds?%.?%s*[%)%]]?$', false},			['local'] = nil},
			{['en'] = {'[,%.%s]%f[e]eds?%.?$', false},							['local'] = nil},
			{['en'] = {'^eds?[%.,;]', false},									['local'] = nil},
			{['en'] = {'^[%(%[]%s*[Ee][Dd][Ss]?%.?%s*[%)%]]', false},			['local'] = nil},
			{['en'] = {'%f[%a][Ee]dited%f[%A]', false},							['local'] = nil},
			{['en'] = {'%f[%a][Ee]ditors?%f[%A]', false},						['local'] = nil},
			{['en'] = {'%f[%a]]Ee]mail%f[%A]', false},							['local'] = nil},
			{['en'] = {'facebook', true},										['local'] = nil},
			{['en'] = {'google', true},											['local'] = nil},
			{['en'] = {'home page', true},										['local'] = nil},
			{['en'] = {'^[Ii]nc%.?$', false},									['local'] = nil},
			{['en'] = {'instagram', true},										['local'] = nil},
			{['en'] = {'interviewer', true},									['local'] = nil},
			{['en'] = {'linkedIn', true},										['local'] = nil},
			{['en'] = {'^[Nn]ews$', false},										['local'] = nil},
			{['en'] = {'pinterest', true},										['local'] = nil},
			{['en'] = {'policy', true},											['local'] = nil},
			{['en'] = {'privacy', true},										['local'] = nil},
			{['en'] = {'reuters', true},										['local'] = nil},
			{['en'] = {'translator', true},										['local'] = nil},
			{['en'] = {'tumblr', true},											['local'] = nil},
			{['en'] = {'twitter', true},										['local'] = nil},
			{['en'] = {'site name', true},										['local'] = nil},
			{['en'] = {'statement', true},										['local'] = nil},
			{['en'] = {'submitted', true},										['local'] = nil},
			{['en'] = {'super.?user', false},									['local'] = nil},
			{['en'] = {'%f['..is_Latn..'][Uu]ser%f[^'..is_Latn..']', false},	['local'] = nil},
			{['en'] = {'verfasser', true},										['local'] = nil},
			}
	}
	}


--[[--------------------------&lt; D A T E _ N A M E S &gt;----------------------------------------------------------

This table of tables lists local language date names and fallback English date names.
The code in Date_validation will look first in the local table for valid date names.
If date names are not found in the local table, the code will look in the English table.

Because citations can be copied to the local wiki from en.wiki, the English is
required when the date-name translation function date_name_xlate() is used.

In these tables, season numbering is defined by
Extended Date/Time Format (EDTF) Specification (https://www.loc.gov/standards/datetime/)
which became part of ISO 8601 in 2019.  See '§Sub-year groupings'. The standard
defines various divisions using numbers 21-41. CS1|2 only supports generic seasons.
EDTF does support the distinction between north and south hemisphere seasons
but CS1|2 has no way to make that distinction.

33-36 = Quarter 1, Quarter 2, Quarter 3, Quarter 4 (3 months each)

The standard does not address 'named' dates so, for the purposes of CS1|2,
Easter and Christmas are defined here as 98 and 99, which should be out of the
ISO 8601 (EDTF) range of uses for a while.

local_date_names_from_mediawiki is a boolean.  When set to:
	true – module will fetch local month names from MediaWiki for both date_names['local']['long'] and date_names['local']['short']; this will unconditionally overwrite manual translations
	false – module will *not* fetch local month names from MediaWiki

Caveat lector:  There is no guarantee that MediaWiki will provide short month names.  At your wiki you can test
the results of the MediaWiki fetch in the debug console with this command (the result is alpha sorted):
	=mw.dumpObject (p.date_names['local'])

While the module can fetch month names from MediaWiki, it cannot fetch the quarter, season, and named date names
from MediaWiki.  Those must be translated manually.

]]

local local_date_names_from_mediawiki = true;									-- when false, manual translation required for date_names['local']['long'] and date_names['local']['short']; overwrites manual translations
																				-- when true, module fetches long and short month names from MediaWiki
local date_names = {
	['en'] = {																	-- English
		['long']	= {['January'] = 1, ['February'] = 2, ['March'] = 3, ['April'] = 4, ['May'] = 5, ['June'] = 6, ['July'] = 7, ['August'] = 8, ['September'] = 9, ['October'] = 10, ['November'] = 11, ['December'] = 12},
		['short']	= {['Jan'] = 1, ['Feb'] = 2, ['Mar'] = 3, ['Apr'] = 4, ['May'] = 5, ['Jun'] = 6, ['Jul'] = 7, ['Aug'] = 8, ['Sep'] = 9, ['Oct'] = 10, ['Nov'] = 11, ['Dec'] = 12},
		['quarter'] = {['First Quarter'] = 33, ['Second Quarter'] = 34, ['Third Quarter'] = 35, ['Fourth Quarter'] = 36},
		['season']	= {['Winter'] = 24, ['Spring'] = 21, ['Summer'] = 22, ['Fall'] = 23, ['Autumn'] = 23},
		['named']	= {['Easter'] = 98, ['Christmas'] = 99},
		},
																				-- when local_date_names_from_mediawiki = false
	['local'] = {																-- replace these English date names with the local language equivalents
		['long']	= {['January'] = 1, ['February'] = 2, ['March'] = 3, ['April'] = 4, ['May'] = 5, ['June'] = 6, ['July'] = 7, ['August'] = 8, ['September'] = 9, ['October'] = 10, ['November'] = 11, ['December'] = 12},
		['short']	= {['Jan'] = 1, ['Feb'] = 2, ['Mar'] = 3, ['Apr'] = 4, ['May'] = 5, ['Jun'] = 6, ['Jul'] = 7, ['Aug'] = 8, ['Sep'] = 9, ['Oct'] = 10, ['Nov'] = 11, ['Dec'] = 12},
		['quarter'] = {['First Quarter'] = 33, ['Second Quarter'] = 34, ['Third Quarter'] = 35, ['Fourth Quarter'] = 36},
		['season']	= {['Winter'] = 24, ['Spring'] = 21, ['Summer'] = 22, ['Fall'] = 23, ['Autumn'] = 23},
		['named']	= {['Easter'] = 98, ['Christmas'] = 99},
		},
	['inv_local_long'] = {},													-- used in date reformatting &amp; translation; copy of date_names['local'].long where k/v are inverted: [1]='&lt;local name&gt;' etc.
	['inv_local_short'] = {},													-- used in date reformatting &amp; translation; copy of date_names['local'].short where k/v are inverted: [1]='&lt;local name&gt;' etc.
	['inv_local_quarter'] = {},													-- used in date translation; copy of date_names['local'].quarter where k/v are inverted: [1]='&lt;local name&gt;' etc.
	['inv_local_season'] = {},													-- used in date translation; copy of date_names['local'].season where k/v are inverted: [1]='&lt;local name&gt;' etc.
	['inv_local_named'] = {},													-- used in date translation; copy of date_names['local'].named where k/v are inverted: [1]='&lt;local name&gt;' etc.
	['local_digits'] = {['0'] = '0', ['1'] = '1', ['2'] = '2', ['3'] = '3', ['4'] = '4', ['5'] = '5', ['6'] = '6', ['7'] = '7', ['8'] = '8', ['9'] = '9'},	-- used to convert local language digits to Western 0-9
	['xlate_digits'] = {},
	}

if local_date_names_from_mediawiki then											-- if fetching local month names from MediaWiki is enabled
	local long_t = {};
	local short_t = {};
	for i=1, 12 do																-- loop 12x and 
		local name = lang_obj:formatDate('F', '2022-' .. i .. '-1');			-- get long month name for each i
		long_t[name] = i;														-- save it
		name = lang_obj:formatDate('M', '2022-' .. i .. '-1');					-- get short month name for each i
		short_t[name] = i;														-- save it
	end
	date_names['local']['long'] = long_t;										-- write the long table – overwrites manual translation
	date_names['local']['short'] = short_t;										-- write the short table – overwrites manual translation
end
																				-- create inverted date-name tables for reformatting and/or translation
for _, invert_t in pairs {{'long', 'inv_local_long'}, {'short', 'inv_local_short'}, {'quarter', 'inv_local_quarter'}, {'season', 'inv_local_season'}, {'named', 'inv_local_named'}} do
	for name, i in pairs (date_names['local'][invert_t[1]]) do					-- this table is ['name'] = i
		date_names[invert_t[2]][i] = name;										-- invert to get [i] = 'name' for conversions from ymd
	end
end

if local_digits_from_mediawiki then												-- if fetching local digits from MediaWiki is enabled
	local digits_t = {};
	for i=0, 9 do																-- loop 10x and 
		digits_t [lang_obj:formatNum (i)] = tostring (i);						-- format the loop indexer as local lang table index and assign loop indexer (a string) as the value
	end
	date_names['local_digits'] = digits_t;
end

for ld, ed in pairs (date_names.local_digits) do								-- make a digit translation table for simple date translation from en to local language using local_digits table
	date_names.xlate_digits [ed] = ld;											-- en digit becomes index with local digit as the value
end

local df_template_patterns = {													-- table of redirects to {{Use dmy dates}} and {{Use mdy dates}}
	'{{ *[Uu]se +(dmy) +dates *[|}]',	-- 1159k								-- sorted by approximate transclusion count
	'{{ *[Uu]se +(mdy) +dates *[|}]',	-- 212k
	'{{ *[Uu]se +(MDY) +dates *[|}]',	-- 788
	'{{ *[Uu]se +(DMY) +dates *[|}]',	-- 343
	'{{ *([Mm]dy) *[|}]',				-- 176
	'{{ *[Uu]se *(dmy) *[|}]',			-- 156 + 18
	'{{ *[Uu]se *(mdy) *[|}]',			-- 149 + 11
	'{{ *([Dd]my) *[|}]',				-- 56
	'{{ *[Uu]se +(MDY) *[|}]',			-- 5
	'{{ *([Dd]MY) *[|}]',				-- 3
	'{{ *[Uu]se(mdy)dates *[|}]',		-- 1
	'{{ *[Uu]se +(DMY) *[|}]',			-- 0
	'{{ *([Mm]DY) *[|}]',				-- 0
	}

local title_object = mw.title.getCurrentTitle();
local content;																	-- done this way  so that unused templates appear in unused-template-reports; self-transcluded makes them look like they are used
if 10 ~= title_object.namespace then											-- all namespaces except Template
	content = title_object:getContent() or '';									-- get the content of the article or ''; new pages edited w/ve do not have 'content' until saved; ve does not preview; phab:T221625
end

local function get_date_format ()
	if not content then															-- nil content when we're in template
		return nil;																-- auto-formatting does not work in Template space so don't set global_df
	end
	for _, pattern in ipairs (df_template_patterns) do							-- loop through the patterns looking for {{Use dmy dates}} or {{Use mdy dates}} or any of their redirects
		local start, _, match = content:find(pattern);							-- match is the three letters indicating desired date format
		if match then
			local use_dates_template = content:match ('%b{}', start);			-- get the whole template
			if use_dates_template:match ('| *cs1%-dates *= *[lsy][sy]?') then	-- look for |cs1-dates=publication date length access-/archive-date length
				return match:lower() .. '-' .. use_dates_template:match ('| *cs1%-dates *= *([lsy][sy]?)');
			else
				return match:lower() .. '-all';									-- no |cs1-dates= k/v pair; return value appropriate for use in |df=
			end
		end
	end
end

local global_df;																-- TODO: add this to &lt;global_cs1_config_t&gt;?


--[[-----------------&lt; V O L U M E ,  I S S U E ,  P A G E S &gt;------------------

These tables hold cite class values (from the template invocation) and identify those templates that support
|volume=, |issue=, and |page(s)= parameters.  Cite conference and cite map require further qualification which
is handled in the main module.

]]

local templates_using_volume = {'citation', 'audio-visual', 'book', 'conference', 'encyclopaedia', 'interview', 'journal', 'magazine', 'map', 'news', 'report', 'techreport', 'thesis'}
local templates_using_issue = {'citation', 'conference', 'episode', 'interview', 'journal', 'magazine', 'map', 'news', 'podcast'}
local templates_not_using_page = {'audio-visual', 'episode', 'mailinglist', 'newsgroup', 'podcast', 'serial', 'sign', 'speech'}

--[[

These tables control when it is appropriate for {{citation}} to render |volume= and/or |issue=.  The parameter
names in the tables constrain {{citation}} so that its renderings match the renderings of the equivalent cs1
templates.  For example, {{cite web}} does not support |volume= so the equivalent {{citation |website=...}} must
not support |volume=.

]]

local citation_no_volume_t = {													-- {{citation}} does not render |volume= when these parameters are used
	'website', 'mailinglist', 'script-website',
	}
local citation_issue_t = {														-- {{citation}} may render |issue= when these parameters are used
	'journal', 'magazine', 'newspaper', 'periodical', 'work',
	'script-journal', 'script-magazine', 'script-newspaper', 'script-periodical', 'script-work',
	}

--[[

Patterns for finding extra text in |volume=, |issue=, |page=, |pages=

]]

local vol_iss_pg_patterns = {
	good_ppattern = '^P[^%.PpGg]',												-- OK to begin with uppercase P: P7 (page 7 of section P), but not p123 (page 123); TODO: this allows 'Pages' which it should not
	bad_ppatterns = {															-- patterns for |page= and |pages=
		'^[Pp][PpGg]?%.?[ %d]',
		'^[Pp][Pp]?%.&amp;nbsp;',													-- from {{p.}} and {{pp.}} templates
		'^[Pp]ages?',
		'^[Pp]gs.?',
		},
	vi_patterns_t = {															-- combined to catch volume-like text in |issue= and issue-like text in |volume=
		'^volumes?',															-- volume-like text
		'^vols?[%.:=]?',

		'^issues?',																--issue-like text
		'^iss[%.:=]?',
		'^numbers?',
		'^nos?%A',																-- don't match 'november' or 'nostradamus'
		'^nr[%.:=]?',
		'^n[%.:= ]',															-- might be a valid issue without separator (space char is sep char here)
		'^n°',																	-- 'n' with degree sign (U+00B0)
		'^№',																	-- precomposed unicode numero character (U+2116)
		},
	}

--[[--------------------------&lt; K E Y W O R D S &gt;-------------------------------

These tables hold keywords for those parameters that have defined sets of acceptable keywords.

]]

--[[-------------------&lt; K E Y W O R D S   T A B L E &gt;--------------------------

this is a list of keywords; each key in the list is associated with a table of
synonymous keywords possibly from different languages.

for I18N: add local-language keywords to value table; do not change the key.
For example, adding the German keyword 'ja':
	['affirmative'] = {'yes', 'true', 'y', 'ja'},

Because CS1|2 templates from en.wiki articles are often copied to other local wikis,
it is recommended that the English keywords remain in these tables.

]]

local keywords = {
	['amp'] = {'&amp;', 'amp', 'ampersand'}, 										-- |name-list-style=
	['and'] = {'and', 'serial'},												-- |name-list-style=
	['affirmative'] = {'yes', 'true', 'y'},										-- |no-tracking=, |no-pp= -- Used by InternetArchiveBot
	['afterword'] = {'afterword'},												-- |contribution=
	['bot: unknown'] = {'bot: unknown'},										-- |url-status= -- Used by InternetArchiveBot
	['cs1'] = {'cs1'},															-- |mode=
	['cs2'] = {'cs2'},															-- |mode=
	['dead'] = {'dead', 'deviated'},											-- |url-status= -- Used by InternetArchiveBot
	['dmy'] = {'dmy'},															-- |df=
	['dmy-all'] = {'dmy-all'},													-- |df=
	['foreword'] = {'foreword'},												-- |contribution=
	['free'] = {'free'},														-- |&lt;id&gt;-access= -- Used by InternetArchiveBot
	['harv'] = {'harv'},														-- |ref=; this no longer supported; is_valid_parameter_value() called with &lt;invert&gt; = true
	['introduction'] = {'introduction'},										-- |contribution=
	['limited'] = {'limited'},													-- |url-access= -- Used by InternetArchiveBot
	['live'] = {'live'},														-- |url-status= -- Used by InternetArchiveBot
	['mdy'] = {'mdy'},															-- |df=
	['mdy-all'] = {'mdy-all'},													-- |df=
	['none'] = {'none'},														-- |postscript=, |ref=, |title=, |type= -- Used by InternetArchiveBot
	['off'] = {'off'},															-- |title= (potentially also: |title-link=, |postscript=, |ref=, |type=)
	['preface'] = {'preface'},													-- |contribution=
	['registration'] = {'registration'},										-- |url-access= -- Used by InternetArchiveBot
	['subscription'] = {'subscription'},										-- |url-access= -- Used by InternetArchiveBot
	['unfit'] = {'unfit'},														-- |url-status= -- Used by InternetArchiveBot
	['usurped'] = {'usurped'},													-- |url-status= -- Used by InternetArchiveBot
	['vanc'] = {'vanc'},														-- |name-list-style=
	['ymd'] = {'ymd'},															-- |df=
	['ymd-all'] = {'ymd-all'},													-- |df=
	--	['yMd'] = {'yMd'},														-- |df=; not supported at en.wiki
	--	['yMd-all'] = {'yMd-all'},												-- |df=; not supported at en.wiki
	}


--[[------------------------&lt; X L A T E _ K E Y W O R D S &gt;---------------------

this function builds a list, keywords_xlate{}, of the keywords found in keywords{} where the values from keywords{}
become the keys in keywords_xlate{} and the keys from keywords{} become the values in keywords_xlate{}:
	['affirmative'] = {'yes', 'true', 'y'},		-- in keywords{}
becomes
	['yes'] = 'affirmative',					-- in keywords_xlate{}
	['true'] = 'affirmative',
	['y'] = 'affirmative',

the purpose of this function is to act as a translator between a non-English keyword and its English equivalent
that may be used in other modules of this suite

]]

local function xlate_keywords ()
	local out_table = {};														-- output goes here
	for k, keywords_t in pairs (keywords) do									-- spin through the keywords table
		for _, keyword in ipairs (keywords_t) do								-- for each keyword
			out_table[keyword] = k;												-- create an entry in the output table where keyword is the key
		end
	end
	
	return out_table;
end

local keywords_xlate = xlate_keywords ();										-- the list of translated keywords


--[[----------------&lt; M A K E _ K E Y W O R D S _ L I S T &gt;---------------------

this function assembles, for parameter-value validation, the list of keywords appropriate to that parameter.

keywords_lists{}, is a table of tables from keywords{}

]]

local function make_keywords_list (keywords_lists)
	local out_table = {};														-- output goes here
	
	for _, keyword_list in ipairs (keywords_lists) do							-- spin through keywords_lists{} and get a table of keywords
		for _, keyword in ipairs (keyword_list) do								-- spin through keyword_list{} and add each keyword, ...
			table.insert (out_table, keyword);									-- ... as plain text, to the output list
		end
	end
	return out_table;
end


--[[----------------&lt; K E Y W O R D S _ L I S T S &gt;-----------------------------

this is a list of lists of valid keywords for the various parameters in [key].
Generally the keys in this table are the canonical en.wiki parameter names though
some are contrived because of use in multiple differently named parameters:
['yes_true_y'], ['id-access'].

The function make_keywords_list() extracts the individual keywords from the
appropriate list in keywords{}.

The lists in this table are used to validate the keyword assignment for the
parameters named in this table's keys.

]]

local keywords_lists = {
	['yes_true_y'] = make_keywords_list ({keywords.affirmative}),
	['contribution'] = make_keywords_list ({keywords.afterword, keywords.foreword, keywords.introduction, keywords.preface}),
	['df'] = make_keywords_list ({keywords.dmy, keywords['dmy-all'], keywords.mdy, keywords['mdy-all'], keywords.ymd, keywords['ymd-all']}),
	--	['df'] = make_keywords_list ({keywords.dmy, keywords['dmy-all'], keywords.mdy, keywords['mdy-all'], keywords.ymd, keywords['ymd-all'], keywords.yMd, keywords['yMd-all']}),	-- not supported at en.wiki
	['mode'] = make_keywords_list ({keywords.cs1, keywords.cs2}),
	['name-list-style'] = make_keywords_list ({keywords.amp, keywords['and'], keywords.vanc}),
	['ref'] = make_keywords_list ({keywords.harv}),								-- inverted check; |ref=harv no longer supported
	['url-access'] = make_keywords_list ({keywords.subscription, keywords.limited, keywords.registration}),
	['url-status'] = make_keywords_list ({keywords.dead, keywords.live, keywords.unfit, keywords.usurped, keywords['bot: unknown']}),
	['id-access'] = make_keywords_list ({keywords.free}),
	}


--[[--------------------------&lt; C S 1 _ C O N F I G _ G E T &gt;--------------------------------------------------

fetch and validate values from {{cs1 config}} template to fill &lt;global_cs1_config_t&gt;

no error messages; when errors are detected, the parameter value from {{cs1 config}} is blanked.

Supports all parameters and aliases associated with the metaparameters: DisplayAuthors, DisplayContributors,
DisplayEditors, DisplayInterviewers, DisplayTranslators, NameListStyle, and Mode.  The DisplayWhatever metaparameters
accept numeric values only (|display-authors=etal and the like is not supported).

]]

local global_cs1_config_t = {};													-- TODO: add value returned from get_date_format() to this table?

local function get_cs1_config ()
	if not content then															-- nil content when we're in template
		return nil;																-- auto-formatting does not work in Template space so don't set global_df
	end

	local start = content:find('{{ *[Cc][Ss]1 config *[|}]');					-- &lt;start&gt; is offset into &lt;content&gt; when {{cs1 config}} found; nil else
	if start then
		local cs1_config_template = content:match ('%b{}', start);				-- get the whole template

		if not cs1_config_template then
			return nil;
		end

		local params_t = mw.text.split (cs1_config_template:gsub ('^{{%s*', ''):gsub ('%s*}}$', ''), '%s*|%s*');	-- remove '{{' and '}}'; make a sequence of parameter/value pairs (split on the pipe)
		table.remove (params_t, 1);												-- remove the template name because it isn't a parameter/value pair

		local config_meta_params_t = {'DisplayAuthors', 'DisplayContributors', 'DisplayEditors', 'DisplayInterviewers', 'DisplayTranslators', 'NameListStyle', 'Mode'};
		local meta_param_map_t = {};											-- list of accepted parameter names usable in {{cs1 config}} goes here
		
		for _, meta_param in ipairs (config_meta_params_t) do					-- for i18n using &lt;config_meta_params_t&gt;, map template parameter names to their metaparameter equivalents
			if 'table' == type (aliases[meta_param]) then						-- if &lt;meta_param&gt; is a sequence, 
				for _, param in ipairs (aliases[meta_param]) do					-- extract its contents
					meta_param_map_t[param] = meta_param;						-- and add to &lt;meta_param_map_t&gt;
				end
			else
				meta_param_map_t[aliases[meta_param]] = meta_param;				-- not a sequence so just add the parameter to &lt;meta_param_map_t&gt;
			end
		end

		local keywords_t = {};													-- map valid keywords to their associate metaparameter; reverse form of &lt;keyword_lists[key] for these metaparameters
		for _, metaparam_t in ipairs ({{'NameListStyle', 'name-list-style'}, {'Mode', 'mode'}}) do	-- only these metaparameter / keywords_lists key pairs
			for _, keyword in ipairs (keywords_lists[metaparam_t[2]]) do		-- spin through the list of keywords
				keywords_t[keyword] = metaparam_t[1];							-- add [keyword] = metaparameter to the map
			end
		end

		for _, param in ipairs (params_t) do									-- spin through the {{cs1 config}} parameters and fill &lt;global_cs1_config_t&gt;
			local k, v = param:match ('([^=]-)%s*=%s*(.+)');					-- &lt;k&gt; is the parameter name; &lt;v&gt; is parameter's assigned value
			if k then
				if k:find ('^display') then										-- if &lt;k&gt; is one of the |display-&lt;namelist&gt;= parameters
					if v:match ('%d+') then										-- the assigned value must be digits; doesn't accept 'etal'
						global_cs1_config_t[meta_param_map_t[k]]=v;				-- add the display param and its value to globals table
					end
				else
					if keywords_t[v] == meta_param_map_t[k] then				-- keywords_t[v] returns nil or the metaparam name; these must be the same
						global_cs1_config_t[meta_param_map_t[k]]=v;				-- add the parameter and its value to globals table
					end
				end
			end
		end
	end
end

get_cs1_config ();																-- fill &lt;global_cs1_config_t&gt;


--[[---------------------&lt; S T R I P M A R K E R S &gt;----------------------------

Common pattern definition location for stripmarkers so that we don't have to go
hunting for them if (when) MediaWiki changes their form.

]]

local stripmarkers = {
	['any'] = '\127[^\127]*UNIQ%-%-(%a+)%-[%a%d]+%-QINU[^\127]*\127',			-- capture returns name of stripmarker
	['math'] = '\127[^\127]*UNIQ%-%-math%-[%a%d]+%-QINU[^\127]*\127'			-- math stripmarkers used in coins_cleanup() and coins_replace_math_stripmarker()
	}


--[[------------&lt; I N V I S I B L E _ C H A R A C T E R S &gt;---------------------

This table holds non-printing or invisible characters indexed either by name or
by Unicode group. Values are decimal representations of UTF-8 codes.  The table
is organized as a table of tables because the Lua pairs keyword returns table
data in an arbitrary order.  Here, we want to process the table from top to bottom
because the entries at the top of the table are also found in the ranges specified
by the entries at the bottom of the table.

Also here is a pattern that recognizes stripmarkers that begin and end with the
delete characters.  The nowiki stripmarker is not an error but some others are
because the parameter values that include them become part of the template's
metadata before stripmarker replacement.

]]

local invisible_defs = {
	del = '\127',																-- used to distinguish between stripmarker and del char
	zwj = '\226\128\141',														-- used with capture because zwj may be allowed
	}

local invisible_chars = {
	{'replacement', '\239\191\189'},											-- U+FFFD, EF BF BD
	{'zero width joiner', '('.. invisible_defs.zwj .. ')'},						-- U+200D, E2 80 8D; capture because zwj may be allowed
	{'zero width space', '\226\128\139'},										-- U+200B, E2 80 8B
	{'hair space', '\226\128\138'},												-- U+200A, E2 80 8A
	{'soft hyphen', '\194\173'},												-- U+00AD, C2 AD
	{'horizontal tab', '\009'},													-- U+0009 (HT), 09
	{'line feed', '\010'},														-- U+000A (LF), 0A
	{'no-break space', '\194\160'},												-- U+00A0 (NBSP), C2 A0
	{'carriage return', '\013'},												-- U+000D (CR), 0D
	{'stripmarker', stripmarkers.any},											-- stripmarker; may or may not be an error; capture returns the stripmaker type
	{'delete', '('.. invisible_defs.del .. ')'},								-- U+007F (DEL), 7F; must be done after stripmarker test; capture to distinguish isolated del chars not part of stripmarker
	{'C0 control', '[\000-\008\011\012\014-\031]'},								-- U+0000–U+001F (NULL–US), 00–1F (except HT, LF, CR (09, 0A, 0D))
	{'C1 control', '[\194\128-\194\159]'},										-- U+0080–U+009F (XXX–APC), C2 80 – C2 9F
	--	{'Specials', '[\239\191\185-\239\191\191]'},								-- U+FFF9-U+FFFF, EF BF B9 – EF BF BF
	--	{'Private use area', '[\238\128\128-\239\163\191]'},						-- U+E000–U+F8FF, EE 80 80 – EF A3 BF
	--	{'Supplementary Private Use Area-A', '[\243\176\128\128-\243\191\191\189]'},	-- U+F0000–U+FFFFD, F3 B0 80 80 – F3 BF BF BD
	--	{'Supplementary Private Use Area-B', '[\244\128\128\128-\244\143\191\189]'},	-- U+100000–U+10FFFD, F4 80 80 80 – F4 8F BF BD
	}

--[[

Indic script makes use of zero width joiner as a character modifier so zwj
characters must be left in.  This pattern covers all of the unicode characters
for these languages:
	Devanagari					0900–097F – https://unicode.org/charts/PDF/U0900.pdf
		Devanagari extended		A8E0–A8FF – https://unicode.org/charts/PDF/UA8E0.pdf
	Bengali						0980–09FF – https://unicode.org/charts/PDF/U0980.pdf
	Gurmukhi					0A00–0A7F – https://unicode.org/charts/PDF/U0A00.pdf
	Gujarati					0A80–0AFF – https://unicode.org/charts/PDF/U0A80.pdf
	Oriya						0B00–0B7F – https://unicode.org/charts/PDF/U0B00.pdf
	Tamil						0B80–0BFF – https://unicode.org/charts/PDF/U0B80.pdf
	Telugu						0C00–0C7F – https://unicode.org/charts/PDF/U0C00.pdf
	Kannada						0C80–0CFF – https://unicode.org/charts/PDF/U0C80.pdf
	Malayalam					0D00–0D7F – https://unicode.org/charts/PDF/U0D00.pdf
plus the not-necessarily Indic scripts for Sinhala and Burmese:
	Sinhala						0D80-0DFF - https://unicode.org/charts/PDF/U0D80.pdf
	Myanmar						1000-109F - https://unicode.org/charts/PDF/U1000.pdf
		Myanmar extended A		AA60-AA7F - https://unicode.org/charts/PDF/UAA60.pdf
		Myanmar extended B		A9E0-A9FF - https://unicode.org/charts/PDF/UA9E0.pdf
the pattern is used by has_invisible_chars() and coins_cleanup()

]]

local indic_script = '[\224\164\128-\224\181\191\224\163\160-\224\183\191\225\128\128-\225\130\159\234\167\160-\234\167\191\234\169\160-\234\169\191]';

-- list of emoji that use a zwj character (U+200D) to combine with another emoji
-- from: https://unicode.org/Public/emoji/15.1/emoji-zwj-sequences.txt; version: 15.1; 2023-06-05
-- table created by: [[:en:Module:Make emoji zwj table]]
local emoji_t = {																-- indexes are decimal forms of the hex values in U+xxxx
	[8596] = true,																-- U+2194 ↔ left right arrow
	[8597] = true,																-- U+2195 ↕ up down arrow
	[9760] = true,																-- U+2620 ☠ skull and crossbones
	[9792] = true,																-- U+2640 ♀ female sign
	[9794] = true,																-- U+2642 ♂ male sign
	[9877] = true,																-- U+2695 ⚕ staff of aesculapius
	[9878] = true,																-- U+2696 ⚖ scales
	[9895] = true,																-- U+26A7 ⚧ male with stroke and male and female sign
	[9992] = true,																-- U+2708 ✈ airplane
	[10052] = true,																-- U+2744 ❄ snowflake
	[10084] = true,																-- U+2764 ❤ heavy black heart
	[10145] = true,																-- U+27A1 ➡ black rightwards arrow
	[11035] = true,																-- U+2B1B ⬛ black large square
	[127752] = true,															-- U+1F308 🌈 rainbow
	[127787] = true,															-- U+1F32B 🌫 fog
	[127806] = true,															-- U+1F33E 🌾 ear of rice
	[127859] = true,															-- U+1F373 🍳 cooking
	[127868] = true,															-- U+1F37C 🍼 baby bottle
	[127876] = true,															-- U+1F384 🎄 christmas tree
	[127891] = true,															-- U+1F393 🎓 graduation cap
	[127908] = true,															-- U+1F3A4 🎤 microphone
	[127912] = true,															-- U+1F3A8 🎨 artist palette
	[127979] = true,															-- U+1F3EB 🏫 school
	[127981] = true,															-- U+1F3ED 🏭 factory
	[128102] = true,															-- U+1F466 👦 boy
	[128103] = true,															-- U+1F467 👧 girl
	[128104] = true,															-- U+1F468 👨 man
	[128105] = true,															-- U+1F469 👩 woman
	[128139] = true,															-- U+1F48B 💋 kiss mark
	[128165] = true,															-- U+1F4A5 💥 collision symbol
	[128168] = true,															-- U+1F4A8 💨 dash symbol
	[128171] = true,															-- U+1F4AB 💫 dizzy symbol
	[128187] = true,															-- U+1F4BB 💻 personal computer
	[128188] = true,															-- U+1F4BC 💼 brief case
	[128293] = true,															-- U+1F525 🔥 fire
	[128295] = true,															-- U+1F527 🔧 wrench
	[128300] = true,															-- U+1F52C 🔬 microscope
	[128488] = true,															-- U+1F5E8 🗨 left speech bubble
	[128640] = true,															-- U+1F680 🚀 rocket
	[128658] = true,															-- U+1F692 🚒 fire engine
	[129001] = true,															-- U+1F7E9 🟩 large green square
	[129003] = true,															-- U+1F7EB 🟫 large brown square
	[129309] = true,															-- U+1F91D 🤝 handshake
	[129455] = true,															-- U+1F9AF 🦯 probing cane
	[129456] = true,															-- U+1F9B0 🦰 emoji component red hair
	[129457] = true,															-- U+1F9B1 🦱 emoji component curly hair
	[129458] = true,															-- U+1F9B2 🦲 emoji component bald
	[129459] = true,															-- U+1F9B3 🦳 emoji component white hair
	[129466] = true,															-- U+1F9BA 🦺 safety vest
	[129468] = true,															-- U+1F9BC 🦼 motorized wheelchair
	[129469] = true,															-- U+1F9BD 🦽 manual wheelchair
	[129489] = true,															-- U+1F9D1 🧑 adult
	[129490] = true,															-- U+1F9D2 🧒 child
	[129657] = true,															-- U+1FA79 🩹 adhesive bandage
	[129778] = true,															-- U+1FAF2 🫲 leftwards hand
	}


--[[----------------------&lt; L A N G U A G E   S U P P O R T &gt;-------------------

These tables and constants support various language-specific functionality.

]]

--local this_wiki_code = mw.getContentLanguage():getCode();						-- get this wiki's language code
local this_wiki_code = lang_obj:getCode();										-- get this wiki's language code
if string.match (mw.site.server, 'wikidata') then
		this_wiki_code = mw.getCurrentFrame():callParserFunction('int', {'lang'}); -- on Wikidata so use interface language setting instead
	end

local mw_languages_by_tag_t = mw.language.fetchLanguageNames (this_wiki_code, 'all');	-- get a table of language tag/name pairs known to Wikimedia; used for interwiki tests
local mw_languages_by_name_t = {};
	for k, v in pairs (mw_languages_by_tag_t) do								-- build a 'reversed' table name/tag language pairs know to MediaWiki; used for |language=
		v = mw.ustring.lower (v);												-- lowercase for tag fetch; get name's proper case from mw_languages_by_tag_t[&lt;tag&gt;]
		if mw_languages_by_name_t[v] then										-- when name already in the table
			if 2 == #k or 3 == #k then											-- if tag does not have subtags
				mw_languages_by_name_t[v] = k;									-- prefer the shortest tag for this name
			end
		else																	-- here when name not in the table
			mw_languages_by_name_t[v] = k;										-- so add name and matching tag
		end
	end

local inter_wiki_map = {};														-- map of interwiki prefixes that are language-code prefixes
	for k, v in pairs (mw.site.interwikiMap ('local')) do						-- spin through the base interwiki map (limited to local)
		if mw_languages_by_tag_t[v["prefix"]] then								-- if the prefix matches a known language tag
			inter_wiki_map[v["prefix"]] = true;									-- add it to our local map
		end
	end


--[[--------------------&lt; S C R I P T _ L A N G _ C O D E S &gt;-------------------

This table is used to hold ISO 639-1 two-character and ISO 639-3 three-character
language codes that apply only to |script-title= and |script-chapter=

]]

local script_lang_codes = {
	'ab', 'am', 'ar', 'be', 'bg', 'bn', 'bo', 'bs', 'dv', 'dz', 'el', 'fa', 'gu', 'he',
	'hi', 'hy', 'ja', 'ka', 'kk', 'km', 'kn', 'ko', 'ku', 'ky', 'lo', 'mk',	'ml', 'mn',
	'mni', 'mr', 'my', 'ne', 'or', 'ota', 'pa', 'ps', 'ru', 'sd', 'si', 'sr', 'syc', 'ta',
	'te', 'tg', 'th', 'ti', 'tt', 'ug', 'uk', 'ur', 'uz', 'yi', 'yue', 'zh'
	};


--[[---------------&lt; L A N G U A G E   R E M A P P I N G &gt;----------------------

These tables hold language information that is different (correct) from MediaWiki's definitions

For each ['&lt;tag&gt;'] = 'language name' in lang_code_remap{} there must be a matching ['language name'] = {'language name', '&lt;tag&gt;'} in lang_name_remap{}

lang_tag_remap{}:
	key is always lowercase ISO 639-1, -2, -3 language tag or a valid lowercase IETF language tag
	value is properly spelled and capitalized language name associated with &lt;tag&gt;
	only one language name per &lt;tag&gt;;
	key/value pair must have matching entry in lang_name_remap{}

lang_name_remap{}:
	key is always lowercase language name
	value is a table the holds correctly spelled and capitalized language name [1] and associated tag [2] (tag must match a tag key in lang_tag_remap{})
	may have multiple keys referring to a common preferred name and tag; For example:
		['kolsch'] and ['kölsch'] both refer to 'Kölsch' and 'ksh'

]]

local lang_tag_remap = {														-- used for |language= and |script-title= / |script-chapter=
	['als'] = 'Tosk Albanian',													-- MediaWiki returns Alemannisch 
	['bh'] = 'Bihari',															-- MediaWiki uses 'bh' as a subdomain name for Bhojpuri Wikipedia: bh.wikipedia.org
	['bla'] = 'Blackfoot',														-- MediaWiki/IANA/ISO 639: Siksika; use en.wiki preferred name
	['bn'] = 'Bengali',															-- MediaWiki returns Bangla
	['ca-valencia'] = 'Valencian',												-- IETF variant of Catalan
	['fkv'] = 'Kven',															-- MediaWiki returns Kvensk
	['gsw'] = 'Swiss German',
	['ilo'] = 'Ilocano',														-- MediaWiki/IANA/ISO 639: Iloko; use en.wiki preferred name
	['ksh'] = 'Kölsch',															-- MediaWiki: Colognian; use IANA/ISO 639 preferred name
	['ksh-x-colog'] = 'Colognian',												-- override MediaWiki ksh; no IANA/ISO 639 code for Colognian; IETF private code created at Module:Lang/data
	['mis-x-ripuar'] = 'Ripuarian',												-- override MediaWiki ksh; no IANA/ISO 639 code for Ripuarian; IETF private code created at Module:Lang/data
	['nan-tw'] = 'Taiwanese Hokkien',											-- make room for MediaWiki/IANA/ISO 639 nan: Min Nan Chinese and support en.wiki preferred name
	['sr-ec'] = 'Serbian (Cyrillic script)',									-- MediaWiki returns српски (ћирилица)
	['sr-el'] = 'Serbian (Latin script)',										-- MediaWiki returns srpski (latinica)
	}

local lang_name_remap = {														-- used for |language=; names require proper capitalization; tags must be lowercase
	['alemannic'] = {'Swiss German', 'gsw'},									-- ISO 639-2, -3 alternate for Swiss German; MediaWiki mediawiki returns Alemannic for gsw; en.wiki preferred name
	['alemannisch'] = {'Swiss German', 'gsw'},									-- not an ISO or IANA language name; MediaWiki uses 'als' as a subdomain name for Alemannic Wikipedia: als.wikipedia.org
	['bangla'] = {'Bengali', 'bn'},												-- MediaWiki returns Bangla (the endonym) but we want Bengali (the exonym); here we remap
	['bengali'] = {'Bengali', 'bn'},											-- MediaWiki doesn't use exonym so here we provide correct language name and 639-1 code
	['bhojpuri'] = {'Bhojpuri', 'bho'},											-- MediaWiki uses 'bh' as a subdomain name for Bhojpuri Wikipedia: bh.wikipedia.org
	['bihari'] = {'Bihari', 'bh'},												-- MediaWiki replaces 'Bihari' with 'Bhojpuri' so 'Bihari' cannot be found
	['blackfoot'] = {'Blackfoot', 'bla'},										-- MediaWiki/IANA/ISO 639: Siksika; use en.wiki preferred name
	['colognian'] = {'Colognian', 'ksh-x-colog'},								-- MediaWiki preferred name for ksh
	['ilocano'] = {'Ilocano', 'ilo'},											-- MediaWiki/IANA/ISO 639: Iloko; use en.wiki preferred name
	['kolsch'] = {'Kölsch', 'ksh'},												-- use IANA/ISO 639 preferred name (use non-diacritical o instead of umlaut ö)
	['kölsch'] = {'Kölsch', 'ksh'},												-- use IANA/ISO 639 preferred name
	['kven'] = {'Kven', 'fkv'},													-- Unicode CLDR have decided not to support English language name for these two...
	['kvensk'] = {'Kven', 'fkv'},												-- ...they say to refer to IANA registry for English names
	['ripuarian'] = {'Ripuarian', 'mis-x-ripuar'},								-- group of dialects; no code in MediaWiki or in IANA/ISO 639
	['serbian (cyrillic script)'] = {'Serbian (Cyrillic script)', 'sr-cyrl'},	-- special case to get correct tag when |language=sr-ec
	['serbian (latin script)'] = {'Serbian (Latin script)', 'sr-latn'},			-- special case to get correct tag when |language=sr-el
	['swiss german'] = {'Swiss German', 'gsw'},
	['taiwanese hokkien'] = {'Taiwanese Hokkien', 'nan-tw'},					-- make room for MediaWiki/IANA/ISO 639 nan: Min Nan Chinese 
	['tosk albanian'] = {'Tosk Albanian', 'als'},								-- MediaWiki replaces 'Tosk Albanian' with 'Alemannisch' so 'Tosk Albanian' cannot be found
	['valencian'] = {'Valencian', 'ca-valencia'},								-- variant of Catalan; categorizes as Valencian
	}


--[[---------------&lt; P R O P E R T I E S _ C A T E G O R I E S &gt;----------------

Properties categories. These are used for investigating qualities of citations.

]]

local prop_cats = {
	['foreign-lang-source'] = 'CS1 $1-language sources ($2)',					-- |language= categories; $1 is foreign-language name, $2 is ISO639-1 code
	['foreign-lang-source-2'] = 'CS1 foreign language sources (ISO 639-2)|$1',	-- |language= category; a cat for ISO639-2 languages; $1 is the ISO 639-2 code used as a sort key
	['local-lang-source'] = 'CS1 $1-language sources ($2)',						-- |language= categories; $1 is local-language name, $2 is ISO639-1 code; not emitted when local_lang_cat_enable is false
	['location-test'] = 'CS1 location test',
	['long-vol'] = 'CS1: long volume value',									-- probably temporary cat to identify scope of |volume= values longer than 4 characters
	['script'] = 'CS1 uses $1-language script ($2)',							-- |script-title=xx: has matching category; $1 is language name, $2 is ISO639-1 code
	['tracked-param'] = 'CS1 tracked parameter: $1',							-- $1 is base (enumerators removed) parameter name
	['year-range-abbreviated'] = 'CS1: abbreviated year range',					-- probably temporary cat to identify scope of |date=, |year= values using YYYY–YY form
	}


--[[-------------------&lt; T I T L E _ T Y P E S &gt;--------------------------------

Here we map a template's CitationClass to TitleType (default values for |type= parameter)

]]

local title_types = {
	['AV-media-notes'] = 'Media notes',
	['document'] = 'Document',
	['interview'] = 'Interview',
	['mailinglist'] = 'Mailing list',
	['map'] = 'Map',
	['podcast'] = 'Podcast',
	['pressrelease'] = 'Press release',
	['report'] = 'Report',
	['speech'] = 'Speech',
	['techreport'] = 'Technical report',
	['thesis'] = 'Thesis',
	}


--[[--------------------------&lt; B U I L D _ K N O W N _ F R E E _ D O I _ R E G I S T R A N T S _ T A B L E &gt;--

build a table of doi registrants known to be free-to-read  In a doi, the registrant ID is the series of digits
between the '10.' and the first '/': in doi 10.1100/sommat, 1100 is the registrant ID

see §3.2.2 DOI prefix of the Doi Handbook p. 43
https://www.doi.org/doi-handbook/DOI_Handbook_Final.pdf#page=43

]]

local function build_free_doi_registrants_table()
	local registrants_t = {};
	for _, v in ipairs ({
		'1045', '1074', '1096', '1100', '1155', '1186', '1194', '1371', '1629', '1989', '1999', '2147', '2196', '3285', '3389', '3390',
		'3748', '3814', '3847', '3897', '4061', '4089', '4103', '4172', '4175', '4249', '4236', '4239', '4240', '4251',
		'4252', '4253', '4254', '4291', '4292', '4329', '4330', '4331', '5194', '5210', '5306', '5312', '5313', '5314',
		'5315', '5316', '5317', '5318', '5319', '5320', '5321', '5334', '5402', '5409', '5410', '5411', '5412',
		'5492', '5493', '5494', '5495', '5496', '5497', '5498', '5499', '5500', '5501', '5527', '5528', '5662',
		'6064', '6219', '7167', '7217', '7287', '7482', '7490', '7554', '7717', '7759', '7766', '11131', '11569', '11647',
		'11648', '12688', '12703', '12715', '12998', '13105', '14256', '14293', '14303', '15215', '15347', '15412', '15560', '16995',
		'17645', '19080', '19173', '20944', '21037', '21468', '21767', '22261', '22323', '22459', '24105', '24196', '24966',
		'26775', '30845', '32545', '35711', '35712', '35713', '35995', '36648', '37126', '37532', '37871', '47128',
		'47622', '47959', '52437', '52975', '53288', '54081', '54947', '55667', '55914', '57009', '58647', '59081',
		}) do
			registrants_t[v] = true;											-- build a k/v table of known free-to-read doi registrants
	end

	return registrants_t;
end


--[[===================&lt;&lt; E R R O R   M E S S A G I N G &gt;&gt;======================
]]

--[[----------&lt; E R R O R   M E S S A G E   S U P P L I M E N T S &gt;-------------

I18N for those messages that are supplemented with additional specific text that
describes the reason for the error

TODO: merge this with special_case_translations{}?
]]

local err_msg_supl = {
	['char'] = 'invalid character',												-- |isbn=, |sbn=
	['check'] = 'checksum',														-- |isbn=, |sbn=
	['flag'] = 'flag',															-- |archive-url=
	['form'] = 'invalid form',													-- |isbn=, |sbn=
	['group'] = 'invalid group id',												-- |isbn=
	['initials'] = 'initials',													-- Vancouver
	['invalid language code'] = 'invalid language code',						-- |script-&lt;param&gt;=
	['journal'] = 'journal',													-- |bibcode=
	['length'] = 'length',														-- |isbn=, |bibcode=, |sbn=
	['liveweb'] = 'liveweb',													-- |archive-url=
	['missing comma'] = 'missing comma',										-- Vancouver
	['missing prefix'] = 'missing prefix',										-- |script-&lt;param&gt;=
	['missing title part'] = 'missing title part',								-- |script-&lt;param&gt;=
	['name'] = 'name',															-- Vancouver
	['non-Latin char'] = 'non-Latin character',									-- Vancouver
	['path'] = 'path',															-- |archive-url=
	['prefix'] = 'invalid prefix',												-- |isbn=
	['punctuation'] = 'punctuation',											-- Vancouver
	['save'] = 'save command',													-- |archive-url=
	['suffix'] = 'suffix',														-- Vancouver
	['timestamp'] = 'timestamp',												-- |archive-url=
	['unknown language code'] = 'unknown language code',						-- |script-&lt;param&gt;=
	['value'] = 'value',														-- |bibcode=
	['year'] = 'year',															-- |bibcode=
	}


--[[--------------&lt; E R R O R _ C O N D I T I O N S &gt;---------------------------

Error condition table.  This table has two sections: errors at the top, maintenance
at the bottom.  Maint 'messaging' does not have a 'message' (message=nil)

The following contains a list of IDs for various error conditions defined in the
code.  For each ID, we specify a text message to display, an error category to
include, and whether the error message should be wrapped as a hidden comment.

Anchor changes require identical changes to matching anchor in Help:CS1 errors

TODO: rename error_conditions{} to something more generic; create separate error
and maint tables inside that?

]]

local error_conditions = {
	err_accessdate_missing_url = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;access-date=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'accessdate_missing_url',
		category = 'CS1 errors: access-date without URL',
		hidden = false
 		},
	err_apostrophe_markup = {
		message = 'Italic or bold markup not allowed in: &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'apostrophe_markup',
		category = 'CS1 errors: markup',
		hidden = false
 		},
	err_archive_date_missing_url = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;archive-date=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;archive-url=&lt;/code&gt;',
		anchor = 'archive_date_missing_url',
		category = 'CS1 errors: archive-url',
		hidden = false
		},
	err_archive_date_url_ts_mismatch = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;archive-date=&lt;/code&gt; / &lt;code class="cs1-code"&gt;&amp;#124;archive-url=&lt;/code&gt; timestamp mismatch; $1 suggested',
		anchor = 'archive_date_url_ts_mismatch',
		category = 'CS1 errors: archive-url',
		hidden = false
		},
	err_archive_missing_date = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;archive-url=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;archive-date=&lt;/code&gt;',
		anchor = 'archive_missing_date',
		category = 'CS1 errors: archive-url',
		hidden = false
		},
	err_archive_missing_url = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;archive-url=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'archive_missing_url',
		category = 'CS1 errors: archive-url',
		hidden = false
		},
	err_archive_url = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;archive-url=&lt;/code&gt; is malformed: $1',	-- $1 is error message detail
		anchor = 'archive_url',
		category = 'CS1 errors: archive-url',
		hidden = false
		},
	err_arxiv_missing = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;arxiv=&lt;/code&gt; required',
		anchor = 'arxiv_missing',
		category = 'CS1 errors: arXiv',											-- same as bad arxiv
		hidden = false
		},
	err_asintld_missing_asin = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;asin=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'asintld_missing_asin',
		category = 'CS1 errors: ASIN TLD',
		hidden = false
		},
	err_bad_arxiv = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;arxiv=&lt;/code&gt; value',
		anchor = 'bad_arxiv',
		category = 'CS1 errors: arXiv',
		hidden = false
		},
	err_bad_asin = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;asin=&lt;/code&gt; value',
		anchor = 'bad_asin',
		category ='CS1 errors: ASIN',
		hidden = false
		},
	err_bad_asin_tld = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;asin-tld=&lt;/code&gt; value',
		anchor = 'bad_asin_tld',
		category ='CS1 errors: ASIN TLD',
		hidden = false
		},
	err_bad_bibcode = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;bibcode=&lt;/code&gt; $1',		-- $1 is error message detail
		anchor = 'bad_bibcode',
		category = 'CS1 errors: bibcode',
		hidden = false
		},
	err_bad_biorxiv = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;biorxiv=&lt;/code&gt; value',
		anchor = 'bad_biorxiv',
		category = 'CS1 errors: bioRxiv',
		hidden = false
		},
	err_bad_citeseerx = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;citeseerx=&lt;/code&gt; value',
		anchor = 'bad_citeseerx',
		category = 'CS1 errors: citeseerx',
		hidden = false
		},
	err_bad_date = {
		message = 'Check date values in: $1',									-- $1 is a parameter name list
		anchor = 'bad_date',
		category = 'CS1 errors: dates',
		hidden = false
		},
	err_bad_doi = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;doi=&lt;/code&gt; value',
		anchor = 'bad_doi',
		category = 'CS1 errors: DOI',
		hidden = false
		},
	err_bad_hdl = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;hdl=&lt;/code&gt; value',
		anchor = 'bad_hdl',
		category = 'CS1 errors: HDL',
		hidden = false
		},
	err_bad_isbn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;isbn=&lt;/code&gt; value: $1',	-- $1 is error message detail
		anchor = 'bad_isbn',
		category = 'CS1 errors: ISBN',
		hidden = false
		},
	err_bad_ismn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;ismn=&lt;/code&gt; value',
		anchor = 'bad_ismn',
		category = 'CS1 errors: ISMN',
		hidden = false
		},
	err_bad_issn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;$1issn=&lt;/code&gt; value',	-- $1 is 'e' or '' for eissn or issn
		anchor = 'bad_issn',
		category = 'CS1 errors: ISSN',
		hidden = false
		},
	err_bad_jfm = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;jfm=&lt;/code&gt; value',
		anchor = 'bad_jfm',
		category = 'CS1 errors: JFM',
		hidden = false
		},
	err_bad_jstor = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;jstor=&lt;/code&gt; value',
		anchor = 'bad_jstor',
		category = 'CS1 errors: JSTOR',
		hidden = false
		},
	err_bad_lccn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;lccn=&lt;/code&gt; value',
		anchor = 'bad_lccn',
		category = 'CS1 errors: LCCN',
		hidden = false
		},
	err_bad_medrxiv = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;medrxiv=&lt;/code&gt; value',
		anchor = 'bad_medrxiv',
		category = 'CS1 errors: medRxiv',
		hidden = false
		},
	err_bad_mr = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;mr=&lt;/code&gt; value',
		anchor = 'bad_mr',
		category = 'CS1 errors: MR',
		hidden = false
		},
	err_bad_oclc = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;oclc=&lt;/code&gt; value',
		anchor = 'bad_oclc',
		category = 'CS1 errors: OCLC',
		hidden = false
		},
	err_bad_ol = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;ol=&lt;/code&gt; value',
		anchor = 'bad_ol',
		category = 'CS1 errors: OL',
		hidden = false
		},
	err_bad_osti = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;osti=&lt;/code&gt; value',
		anchor = 'bad_osti',
		category = 'CS1 errors: OSTI',
		hidden = false
		},
	err_bad_paramlink = {														-- for |title-link=, |author/editor/translator-link=, |series-link=, |episode-link=
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; value',		-- $1 is parameter name
		anchor = 'bad_paramlink',
		category = 'CS1 errors: parameter link',
		hidden = false
		},
	err_bad_pmc = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;pmc=&lt;/code&gt; value',
		anchor = 'bad_pmc',
		category = 'CS1 errors: PMC',
		hidden = false
		},
	err_bad_pmid = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;pmid=&lt;/code&gt; value',
		anchor = 'bad_pmid',
		category = 'CS1 errors: PMID',
		hidden = false
		},
	err_bad_rfc = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;rfc=&lt;/code&gt; value',
		anchor = 'bad_rfc',
		category = 'CS1 errors: RFC',
		hidden = false
		},
	err_bad_s2cid = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;s2cid=&lt;/code&gt; value',
		anchor = 'bad_s2cid',
		category = 'CS1 errors: S2CID',
		hidden = false
		},
	err_bad_sbn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;sbn=&lt;/code&gt; value: $1',	-- $1 is error message detail
		anchor = 'bad_sbn',
		category = 'CS1 errors: SBN',
		hidden = false
		},
	err_bad_ssrn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;ssrn=&lt;/code&gt; value',
		anchor = 'bad_ssrn',
		category = 'CS1 errors: SSRN',
		hidden = false
		},
	err_bad_url = {
		message = 'Check $1 value',												-- $1 is parameter name
		anchor = 'bad_url',
		category = 'CS1 errors: URL',
		hidden = false
		},
	err_bad_usenet_id = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;message-id=&lt;/code&gt; value',
		anchor = 'bad_message_id',
		category = 'CS1 errors: message-id',
		hidden = false
		},
	err_bad_zbl = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;zbl=&lt;/code&gt; value',
		anchor = 'bad_zbl',
		category = 'CS1 errors: Zbl',
		hidden = false
		},
	err_bare_url_missing_title = {
		message = '$1 missing title',											-- $1 is parameter name
		anchor = 'bare_url_missing_title',
		category = 'CS1 errors: bare URL',
		hidden = false
		},
	err_biorxiv_missing = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;biorxiv=&lt;/code&gt; required',
		anchor = 'biorxiv_missing',
		category = 'CS1 errors: bioRxiv',										-- same as bad bioRxiv
		hidden = false
		},
	err_chapter_ignored = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; ignored',			-- $1 is parameter name
		anchor = 'chapter_ignored',
		category = 'CS1 errors: chapter ignored',
		hidden = false
		},
	err_citation_missing_title = {
		message = 'Missing or empty &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'citation_missing_title',
		category = 'CS1 errors: missing title',
		hidden = false
		},
	err_citeseerx_missing = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;citeseerx=&lt;/code&gt; required',
		anchor = 'citeseerx_missing',
		category = 'CS1 errors: citeseerx',										-- same as bad citeseerx
		hidden = false
		},
	err_cite_web_url = {														-- this error applies to cite web and to cite podcast
		message = 'Missing or empty &lt;code class="cs1-code"&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'cite_web_url',
		category = 'CS1 errors: requires URL',
		hidden = false
		},
	err_class_ignored = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;class=&lt;/code&gt; ignored',
		anchor = 'class_ignored',
		category = 'CS1 errors: class',
		hidden = false
		},
	err_contributor_ignored = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;contributor=&lt;/code&gt; ignored',
		anchor = 'contributor_ignored',
		category = 'CS1 errors: contributor',
		hidden = false
		},
	err_contributor_missing_required_param = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;contributor=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'contributor_missing_required_param',
		category = 'CS1 errors: contributor',
		hidden = false
		},
	err_deprecated_params = {
		message = 'Cite uses deprecated parameter &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'deprecated_params',
		category = 'CS1 errors: deprecated parameters',
		hidden = false
		},
	err_disp_name = {
		message = 'Invalid &lt;code class="cs1-code"&gt;&amp;#124;$1=$2&lt;/code&gt;',			-- $1 is parameter name; $2 is the assigned value
		anchor = 'disp_name',
		category = 'CS1 errors: display-names',
		hidden = false,
		},
	err_doibroken_missing_doi = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;doi=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'doibroken_missing_doi',
		category = 'CS1 errors: DOI',
		hidden = false
		},
	err_embargo_missing_pmc = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;pmc=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'embargo_missing_pmc',
		category = 'CS1 errors: PMC embargo',
		hidden = false
		},
	err_empty_citation = {
		message = 'Empty citation',
		anchor = 'empty_citation',
		category = 'CS1 errors: empty citation',
		hidden = false
		},
	err_etal = {
		message = 'Explicit use of et al. in: &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'explicit_et_al',
		category = 'CS1 errors: explicit use of et al.',
		hidden = false
		},
	err_extra_text_edition = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;edition=&lt;/code&gt; has extra text',
		anchor = 'extra_text_edition',
		category = 'CS1 errors: extra text: edition',
		hidden = false,
		},
	err_extra_text_issue = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; has extra text',		-- $1 is parameter name
		anchor = 'extra_text_issue',
		category = 'CS1 errors: extra text: issue',
		hidden = false,
		},
	err_extra_text_pages = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; has extra text',		-- $1 is parameter name
		anchor = 'extra_text_pages',
		category = 'CS1 errors: extra text: pages',
		hidden = false,
		},
	err_extra_text_volume = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; has extra text',		-- $1 is parameter name
		anchor = 'extra_text_volume',
		category = 'CS1 errors: extra text: volume',
		hidden = false,
		},
	err_first_missing_last = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; missing &lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt;',	-- $1 is first alias, $2 is matching last alias
		anchor = 'first_missing_last',
		category = 'CS1 errors: missing name',									-- author, contributor, editor, interviewer, translator
		hidden = false
		},
	err_format_missing_url = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt;',	-- $1 is format parameter $2 is url parameter
		anchor = 'format_missing_url',
		category = 'CS1 errors: format without URL',
		hidden = false
		},
	err_generic_name = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; has generic name',	-- $1 is parameter name
		anchor = 'generic_name',
		category = 'CS1 errors: generic name',
		hidden = false,
		},
	err_generic_title = {
		message = 'Cite uses generic title',
		anchor = 'generic_title',
		category = 'CS1 errors: generic title',
		hidden = false,
		},
	err_invalid_param_val = {
		message = 'Invalid &lt;code class="cs1-code"&gt;&amp;#124;$1=$2&lt;/code&gt;',			-- $1 is parameter name $2 is parameter value
		anchor = 'invalid_param_val',
		category = 'CS1 errors: invalid parameter value',
		hidden = false
		},
	err_invisible_char = {
		message = '$1 in $2 at position $3',									-- $1 is invisible char $2 is parameter name $3 is position number
		anchor = 'invisible_char',
		category = 'CS1 errors: invisible characters',
		hidden = false
		},
	err_medrxiv_missing = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;medrxiv=&lt;/code&gt; required',
		anchor = 'medrxiv_missing',
		category = 'CS1 errors: medRxiv',										-- same as bad medRxiv
		hidden = false
		},
	err_missing_name = {
		message = 'Missing &lt;code class="cs1-code"&gt;&amp;#124;$1$2=&lt;/code&gt;',			-- $1 is modified NameList; $2 is enumerator
		anchor = 'missing_name',
		category = 'CS1 errors: missing name',									-- author, contributor, editor, interviewer, translator
		hidden = false
		},
	err_missing_periodical = {
		message = 'Cite $1 requires &lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt;',	-- $1 is cs1 template name; $2 is canonical periodical parameter name for cite $1
		anchor = 'missing_periodical',
		category = 'CS1 errors: missing periodical',
		hidden = false
		},
	err_missing_pipe = {
		message = 'Missing pipe in: &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'missing_pipe',
		category = 'CS1 errors: missing pipe',
		hidden = false
		},
	err_missing_publisher = {
		message = 'Cite $1 requires &lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt;',	-- $1 is cs1 template name; $2 is canonical publisher parameter name for cite $1
		anchor = 'missing_publisher',
		category = 'CS1 errors: missing publisher',
		hidden = false
		},
	err_numeric_names = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; has numeric name',	-- $1 is parameter name',
		anchor = 'numeric_names',
		category = 'CS1 errors: numeric name',
		hidden = false,
		},
	err_param_access_requires_param = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1-access=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'param_access_requires_param',
		category = 'CS1 errors: param-access',
		hidden = false
		},
	err_param_has_ext_link = {
		message = 'External link in &lt;code class="cs1-code"&gt;$1&lt;/code&gt;',			-- $1 is parameter name
		anchor = 'param_has_ext_link',
		category = 'CS1 errors: external links',
		hidden = false
		},
	err_parameter_ignored = {
		message = 'Unknown parameter &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; ignored',	-- $1 is parameter name
		anchor = 'parameter_ignored',
		category = 'CS1 errors: unsupported parameter',
		hidden = false
		},
	err_parameter_ignored_suggest = {
		message = 'Unknown parameter &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; ignored (&lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt; suggested)',	-- $1 is unknown parameter $2 is suggested parameter name
		anchor = 'parameter_ignored_suggest',
		category = 'CS1 errors: unsupported parameter',
		hidden = false
		},
	err_periodical_ignored = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; ignored',			-- $1 is parameter name
		anchor = 'periodical_ignored',
		category = 'CS1 errors: periodical ignored',
		hidden = false
		},
	err_redundant_parameters = {
		message = 'More than one of $1 specified',								-- $1 is error message detail
		anchor = 'redundant_parameters',
		category = 'CS1 errors: redundant parameter',
		hidden = false
		},
	err_script_parameter = {
		message = 'Invalid &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;: $2',		-- $1 is parameter name $2 is script language code or error detail
		anchor = 'script_parameter',
		category = 'CS1 errors: script parameters',
		hidden = false
		},
	err_ssrn_missing = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;ssrn=&lt;/code&gt; required',
		anchor = 'ssrn_missing',
		category = 'CS1 errors: SSRN',
		hidden = false
		},
	err_text_ignored = {
		message = 'Text "$1" ignored',											-- $1 is ignored text
		anchor = 'text_ignored',
		category = 'CS1 errors: unrecognized parameter',
		hidden = false
		},
	err_trans_missing_title = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;trans-$1=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; or &lt;code class="cs1-code"&gt;&amp;#124;script-$1=&lt;/code&gt;',	-- $1 is base parameter name
		anchor = 'trans_missing_title',
		category = 'CS1 errors: translated title',
		hidden = false
		},
	err_param_unknown_empty = {
		message = 'Cite has empty unknown parameter$1: $2',						-- $1 is 's' or empty space; $2 is emty unknown param list
		anchor = 'param_unknown_empty',
		category = 'CS1 errors: empty unknown parameters',
		hidden = false
		},
	err_vancouver = {
		message = 'Vancouver style error: $1 in name $2',						-- $1 is error detail, $2 is the nth name
		anchor = 'vancouver',
		category = 'CS1 errors: Vancouver style',
		hidden = false
		},
	err_wikilink_in_url = {
		message = 'URL–wikilink conflict',										-- uses ndash
		anchor = 'wikilink_in_url',
		category = 'CS1 errors: URL–wikilink conflict',							-- uses ndash
		hidden = false
		},


--[[--------------------------&lt; M A I N T &gt;-------------------------------------

maint messages do not have a message (message = nil); otherwise the structure
is the same as error messages

]]

	maint_archived_copy = {
		message = nil,
		anchor = 'archived_copy',
		category = 'CS1 maint: archived copy as title',
		hidden = true,
		},
	maint_bibcode = {
		message = nil,
		anchor = 'bibcode',
		category = 'CS1 maint: bibcode',
		hidden = true,
		},
	maint_location_no_publisher = {												-- cite book, conference, encyclopedia; citation as book cite or encyclopedia cite
		message = nil,
		anchor = 'location_no_publisher',
		category = 'CS1 maint: location missing publisher',
		hidden = true,
		},
	maint_bot_unknown = {
		message = nil,
		anchor = 'bot:_unknown',
		category = 'CS1 maint: bot: original URL status unknown',
		hidden = true,
		},
	maint_date_auto_xlated = {													-- date auto-translation not supported by en.wiki
		message = nil,
		anchor = 'date_auto_xlated',
		category = 'CS1 maint: date auto-translated',
		hidden = true,
		},
	maint_date_format = {
		message = nil,
		anchor = 'date_format',
		category = 'CS1 maint: date format',
		hidden = true,
		},
	maint_date_year = {
		message = nil,
		anchor = 'date_year',
		category = 'CS1 maint: date and year',
		hidden = true,
		},
	maint_doi_ignore = {
		message = nil,
		anchor = 'doi_ignore',
		category = 'CS1 maint: ignored DOI errors',
		hidden = true,
		},
	maint_doi_inactive = {
		message = nil,
		anchor = 'doi_inactive',
		category = 'CS1 maint: DOI inactive',
		hidden = true,
		},
	maint_doi_inactive_dated = {
		message = nil,
		anchor = 'doi_inactive_dated',
		category = 'CS1 maint: DOI inactive as of $2$3$1',						-- $1 is year, $2 is month-name or empty string, $3 is space or empty string
		hidden = true,
		},
	maint_doi_unflagged_free = {
		message = nil,
		anchor = 'doi_unflagged_free',
		category = 'CS1 maint: unflagged free DOI',
		hidden = true,
		},
	maint_extra_punct = {
		message = nil,
		anchor = 'extra_punct',
		category = 'CS1 maint: extra punctuation',
		hidden = true,
		},
	maint_isbn_ignore = {
		message = nil,
		anchor = 'ignore_isbn_err',
		category = 'CS1 maint: ignored ISBN errors',
		hidden = true,
		},
	maint_issn_ignore = {
		message = nil,
		anchor = 'ignore_issn',
		category = 'CS1 maint: ignored ISSN errors',
		hidden = true,
		},
	maint_jfm_format = {
		message = nil,
		anchor = 'jfm_format',
		category = 'CS1 maint: JFM format',
		hidden = true,
		},
	maint_location = {
		message = nil,
		anchor = 'location',
		category = 'CS1 maint: location',
		hidden = true,
		},
	maint_mr_format = {
		message = nil,
		anchor = 'mr_format',
		category = 'CS1 maint: MR format',
		hidden = true,
		},
	maint_mult_names = {
		message = nil,
		anchor = 'mult_names',
		category = 'CS1 maint: multiple names: $1',								-- $1 is '&lt;name&gt;s list'; gets value from special_case_translation table
		hidden = true,
		},
	maint_numeric_names = {
		message = nil,
		anchor = 'numeric_names',
		category = 'CS1 maint: numeric names: $1',								-- $1 is '&lt;name&gt;s list'; gets value from special_case_translation table
		hidden = true,
		},
	maint_others = {
		message = nil,
		anchor = 'others',
		category = 'CS1 maint: others',
		hidden = true,
		},
	maint_others_avm = {
		message = nil,
		anchor = 'others_avm',
		category = 'CS1 maint: others in cite AV media (notes)',
		hidden = true,
		},
	maint_overridden_setting = {
		message = nil,
		anchor = 'overridden',
		category = 'CS1 maint: overridden setting',
		hidden = true,
		},
	maint_pmc_embargo = {
		message = nil,
		anchor = 'embargo',
		category = 'CS1 maint: PMC embargo expired',
		hidden = true,
		},
	maint_pmc_format = {
		message = nil,
		anchor = 'pmc_format',
		category = 'CS1 maint: PMC format',
		hidden = true,
		},
	maint_postscript = {
		message = nil,
		anchor = 'postscript',
		category = 'CS1 maint: postscript',
		hidden = true,
	},
	maint_ref_duplicates_default = {
		message = nil,
		anchor = 'ref_default',
		category = 'CS1 maint: ref duplicates default',
		hidden = true,
	},
	maint_unfit = {
		message = nil,
		anchor = 'unfit',
		category = 'CS1 maint: unfit URL',
		hidden = true,
		},
	maint_unknown_lang = {
		message = nil,
		anchor = 'unknown_lang',
		category = 'CS1 maint: unrecognized language',
		hidden = true,
		},
	maint_untitled = {
		message = nil,
		anchor = 'untitled',
		category = 'CS1 maint: untitled periodical',
		hidden = true,
		},
	maint_url_status = {
		message = nil,
		anchor = 'url_status',
		category = 'CS1 maint: url-status',
		hidden = true,
		},
	maint_zbl = {
		message = nil,
		anchor = 'zbl',
		category = 'CS1 maint: Zbl',
		hidden = true,
		},
	}


--[[--------------------------&lt; I D _ L I M I T S _ D A T A _ T &gt;----------------------------------------------

fetch id limits for certain identifiers from c:Data:CS1/Identifier limits.tab.  This source is a json tabular 
data file maintained at wikipedia commons.  Convert the json format to a table of k/v pairs.

The values from &lt;id_limits_data_t&gt; are used to set handle.id_limit.

]]

local id_limits_data_t = {};
for _, limit_t in ipairs (mw.ext.data.get ("CS1/Identifier limits.tab").data) do
	id_limits_data_t[limit_t[1]] = limit_t[2];									-- &lt;limit[1]&gt; is identifier; &lt;limit[2]&gt; is upper limit for that identifier
end


--[[--------------------------&lt; I D _ H A N D L E R S &gt;--------------------------------------------------------

The following contains a list of values for various defined identifiers.  For each
identifier we specify a variety of information necessary to properly render the
identifier in the citation.

	parameters: a list of parameter aliases for this identifier; first in the list is the canonical form
	link: Wikipedia article name
	redirect: a local redirect to a local Wikipedia article name;  at en.wiki, 'ISBN (identifier)' is a redirect to 'International Standard Book Number'
	q: Wikidata q number for the identifier
	label: the label preceding the identifier; label is linked to a Wikipedia article (in this order):
		redirect from id_handlers['&lt;id&gt;'].redirect when use_identifier_redirects is true
		Wikidata-supplied article name for the local wiki from id_handlers['&lt;id&gt;'].q
		local article name from id_handlers['&lt;id&gt;'].link
	prefix: the first part of a URL that will be concatenated with a second part which usually contains the identifier
	suffix: optional third part to be added after the identifier
	encode: true if URI should be percent-encoded; otherwise false
	COinS: identifier link or keyword for use in COinS:
		for identifiers registered at info-uri.info use: info:.... where '...' is the appropriate identifier label 
		for identifiers that have COinS keywords, use the keyword: rft.isbn, rft.issn, rft.eissn
		for |asin= and |ol=, which require assembly, use the keyword: url
		for others make a URL using the value in prefix/suffix and #label, use the keyword: pre (not checked; any text other than 'info', 'rft', or 'url' works here)
		set to nil to leave the identifier out of the COinS
	separator: character or text between label and the identifier in the rendered citation
	id_limit: for those identifiers with established limits, this property holds the upper limit
	access: use this parameter to set the access level for all instances of this identifier.
		the value must be a valid access level for an identifier (see ['id-access'] in this file).
	custom_access: to enable custom access level for an identifier, set this parameter
		to the parameter that should control it (normally 'id-access')
		
]]

local id_handlers = {
	['ARXIV'] = {
		parameters = {'arxiv', 'eprint'},
		link = 'arXiv',
		redirect = 'arXiv (identifier)',
		q = 'Q118398',
		label = 'arXiv',
		prefix = 'https://arxiv.org/abs/',
		encode = false,
		COinS = 'info:arxiv',
		separator = ':',
		access = 'free',														-- free to read
		},
	['ASIN'] = {
		parameters = { 'asin', 'ASIN' },
		link = 'Amazon Standard Identification Number',
		redirect = 'ASIN (identifier)',
		q = 'Q1753278',
		label = 'ASIN',
		prefix = 'https://www.amazon.',
		COinS = 'url',
		separator = '&amp;nbsp;',
		encode = false;
		},
	['BIBCODE'] = {
		parameters = {'bibcode'},
		link = 'Bibcode',
		redirect = 'Bibcode (identifier)',
		q = 'Q25754',
		label = 'Bibcode',
		prefix = 'https://ui.adsabs.harvard.edu/abs/',
		encode = false,
		COinS = 'info:bibcode',
		separator = ':',
		custom_access = 'bibcode-access',
		},
	['BIORXIV'] = {
		parameters = {'biorxiv'},
		link = 'bioRxiv',
		redirect = 'bioRxiv (identifier)',
		q = 'Q19835482',
		label = 'bioRxiv',
		prefix = 'https://doi.org/',
		COinS = 'pre',															-- use prefix value
		access = 'free',														-- free to read
		encode = true,
		separator = '&amp;nbsp;',
		},
	['CITESEERX'] = {
		parameters = {'citeseerx'},
		link = 'CiteSeerX',
		redirect = 'CiteSeerX (identifier)',
		q = 'Q2715061',
		label = 'CiteSeerX',
		prefix = 'https://citeseerx.ist.psu.edu/viewdoc/summary?doi=',
		COinS =  'pre',															-- use prefix value
		access = 'free',														-- free to read
		encode = true,
		separator = '&amp;nbsp;',
		},
	['DOI'] = {																	-- Used by InternetArchiveBot
		parameters = { 'doi', 'DOI'},
		link = 'Digital object identifier',
		redirect = 'doi (identifier)',
		q = 'Q25670',
		label = 'doi',
		prefix = 'https://doi.org/',
		COinS = 'info:doi',
		separator = ':',
		encode = true,
		custom_access = 'doi-access',
		},
	['EISSN'] = {
		parameters = {'eissn', 'EISSN'},
		link = 'International Standard Serial Number#Electronic ISSN',
		redirect = 'eISSN (identifier)',
		q = 'Q46339674',
		label = 'eISSN',
		prefix = 'https://www.worldcat.org/issn/',
		COinS = 'rft.eissn',
		encode = false,
		separator = '&amp;nbsp;',
		},
	['HDL'] = {
		parameters = { 'hdl', 'HDL' },
		link = 'Handle System',
		redirect = 'hdl (identifier)',
		q = 'Q3126718',
		label = 'hdl',
		prefix = 'https://hdl.handle.net/',
		COinS = 'info:hdl',
		separator = ':',
		encode = true,
		custom_access = 'hdl-access',
		},
	['ISBN'] = {																-- Used by InternetArchiveBot
		parameters = {'isbn', 'ISBN'},
		link = 'International Standard Book Number',
		redirect = 'ISBN (identifier)',
		q = 'Q33057',
		label = 'ISBN',
		prefix = 'Special:BookSources/',
		COinS = 'rft.isbn',
		separator = '&amp;nbsp;',
		},
	['ISMN'] = {
		parameters = {'ismn', 'ISMN'},
		link = 'International Standard Music Number',
		redirect = 'ISMN (identifier)',
		q = 'Q1666938',
		label = 'ISMN',
		prefix = '',															-- not currently used;
		COinS = nil,															-- nil because we can't use pre or rft or info:
		separator = '&amp;nbsp;',
		},
	['ISSN'] = {
		parameters = {'issn', 'ISSN'},
		link = 'International Standard Serial Number',
		redirect = 'ISSN (identifier)',
		q = 'Q131276',
		label = 'ISSN',
		prefix = 'https://www.worldcat.org/issn/',
		COinS = 'rft.issn',
		encode = false,
		separator = '&amp;nbsp;',
		},
	['JFM'] = {
		parameters = {'jfm', 'JFM'},
		link = 'Jahrbuch über die Fortschritte der Mathematik',
		redirect = 'JFM (identifier)',
		q = '',
		label = 'JFM',
		prefix = 'https://zbmath.org/?format=complete&amp;q=an:',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		},
	['JSTOR'] = {
		parameters = {'jstor', 'JSTOR'},
		link = 'JSTOR',
		redirect = 'JSTOR (identifier)',
		q = 'Q1420342',
		label = 'JSTOR',
		prefix = 'https://www.jstor.org/stable/',
		COinS = 'pre',															-- use prefix value
		encode = false,
		separator = '&amp;nbsp;',
		custom_access = 'jstor-access',
		},
	['LCCN'] = {
		parameters = {'lccn', 'LCCN'},
		link = 'Library of Congress Control Number',
		redirect = 'LCCN (identifier)',
		q = 'Q620946',
		label = 'LCCN',
		prefix = 'https://lccn.loc.gov/',
		COinS = 'info:lccn',
		encode = false,
		separator = '&amp;nbsp;',
		},
	['MEDRXIV'] = {
		parameters = {'medrxiv'},
		link = 'medRxiv',
		redirect = 'medRxiv (identifier)',
		q = 'Q58465838',
		label = 'medRxiv',
		prefix = 'https://www.medrxiv.org/content/',
		COinS = 'pre',															-- use prefix value
		access = 'free',														-- free to read
		encode = false,
		separator = '&amp;nbsp;',
		},
	['MR'] = {
		parameters = {'mr', 'MR'},
		link = 'Mathematical Reviews',
		redirect = 'MR (identifier)',
		q = 'Q211172',
		label = 'MR',
		prefix = 'https://mathscinet.ams.org/mathscinet-getitem?mr=',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		},
	['OCLC'] = {
		parameters = {'oclc', 'OCLC'},
		link = 'OCLC',
		redirect = 'OCLC (identifier)',
		q = 'Q190593',
		label = 'OCLC',
		prefix = 'https://www.worldcat.org/oclc/',
		COinS = 'info:oclcnum',
		encode = true,
		separator = '&amp;nbsp;',
		id_limit = id_limits_data_t.OCLC or 0,
		},
	['OL'] = {
		parameters = { 'ol', 'OL' },
		link = 'Open Library',
		redirect = 'OL (identifier)',
		q = 'Q1201876',
		label = 'OL',
		prefix = 'https://openlibrary.org/',
		COinS = 'url',
		separator = '&amp;nbsp;',
		encode = true,
		custom_access = 'ol-access',
		},
	['OSTI'] = {
		parameters = {'osti', 'OSTI'},
		link = 'Office of Scientific and Technical Information',
		redirect = 'OSTI (identifier)',
		q = 'Q2015776',
		label = 'OSTI',
		prefix = 'https://www.osti.gov/biblio/',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		id_limit = id_limits_data_t.OSTI or 0,
		custom_access = 'osti-access',
		},
	['PMC'] = {
		parameters = {'pmc', 'PMC'},
		link = 'PubMed Central',
		redirect = 'PMC (identifier)',
		q = 'Q229883',
		label = 'PMC',
		prefix = 'https://www.ncbi.nlm.nih.gov/pmc/articles/PMC',
		suffix = '',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		id_limit = id_limits_data_t.PMC or 0,
		access = 'free',														-- free to read
		},
	['PMID'] = {
		parameters = {'pmid', 'PMID'},
		link = 'PubMed Identifier',
		redirect = 'PMID (identifier)',
		q = 'Q2082879',
		label = 'PMID',
		prefix = 'https://pubmed.ncbi.nlm.nih.gov/',
		COinS = 'info:pmid',
		encode = false,
		separator = '&amp;nbsp;',
		id_limit = id_limits_data_t.PMID or 0,
		},
	['RFC'] = {
		parameters = {'rfc', 'RFC'},
		link = 'Request for Comments',
		redirect = 'RFC (identifier)',
		q = 'Q212971',
		label = 'RFC',
		prefix = 'https://tools.ietf.org/html/rfc',
		COinS = 'pre',															-- use prefix value
		encode = false,
		separator = '&amp;nbsp;',
		id_limit = id_limits_data_t.RFC or 0,
		access = 'free',														-- free to read
		},
	['SBN'] = {
		parameters = {'sbn', 'SBN'},
		link = 'Standard Book Number',											-- redirect to International_Standard_Book_Number#History
		redirect = 'SBN (identifier)',
		label = 'SBN',
		prefix = 'Special:BookSources/0-',										-- prefix has leading zero necessary to make 9-digit sbn a 10-digit isbn
		COinS = nil,															-- nil because we can't use pre or rft or info:
		separator = '&amp;nbsp;',
		},
	['SSRN'] = {
		parameters = {'ssrn', 'SSRN'},
		link = 'Social Science Research Network',
		redirect = 'SSRN (identifier)',
		q = 'Q7550801',
		label = 'SSRN',
		prefix = 'https://papers.ssrn.com/sol3/papers.cfm?abstract_id=',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		id_limit = id_limits_data_t.SSRN or 0,
		custom_access = 'ssrn-access',
		},
	['S2CID'] = {
		parameters = {'s2cid', 'S2CID'},
		link = 'Semantic Scholar',
		redirect = 'S2CID (identifier)',
		q = 'Q22908627',
		label = 'S2CID',
		prefix = 'https://api.semanticscholar.org/CorpusID:',
		COinS = 'pre',															-- use prefix value
		encode = false,
		separator = '&amp;nbsp;',
		id_limit = id_limits_data_t.S2CID or 0,
		custom_access = 's2cid-access',
		},
	['USENETID'] = {
		parameters = {'message-id'},
		link = 'Usenet',
		redirect = 'Usenet (identifier)',
		q = 'Q193162',
		label = 'Usenet:',
		prefix = 'news:',
		encode = false,
		COinS = 'pre',															-- use prefix value
		separator = '&amp;nbsp;',
		},
	['ZBL'] = {
		parameters = {'zbl', 'ZBL' },
		link = 'Zentralblatt MATH',
		redirect = 'Zbl (identifier)',
		q = 'Q190269',
		label = 'Zbl',
		prefix = 'https://zbmath.org/?format=complete&amp;q=an:',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		},
	}


--[[--------------------------&lt; E X P O R T S &gt;---------------------------------
]]

return 	{
	use_identifier_redirects = use_identifier_redirects,						-- booleans defined in the settings at the top of this module
	local_lang_cat_enable = local_lang_cat_enable,
	date_name_auto_xlate_enable = date_name_auto_xlate_enable,
	date_digit_auto_xlate_enable = date_digit_auto_xlate_enable,
	enable_sort_keys = enable_sort_keys,
	
																				-- tables and variables created when this module is loaded
	global_df = get_date_format (),												-- this line can be replaced with "global_df = 'dmy-all'," to have all dates auto translated to dmy format.
	global_cs1_config_t = global_cs1_config_t,									-- global settings from {{cs1 config}}
	punct_skip = build_skip_table (punct_skip, punct_meta_params),
	url_skip = build_skip_table (url_skip, url_meta_params),
	known_free_doi_registrants_t = build_free_doi_registrants_table(),

	name_space_sort_keys = name_space_sort_keys,
	aliases = aliases,
	special_case_translation = special_case_translation,
	date_names = date_names,
	err_msg_supl = err_msg_supl,
	error_conditions = error_conditions,
	editor_markup_patterns = editor_markup_patterns,
	et_al_patterns = et_al_patterns,
	id_handlers = id_handlers,
	keywords_lists = keywords_lists,
	keywords_xlate = keywords_xlate,
	stripmarkers = stripmarkers,
	invisible_chars = invisible_chars,
	invisible_defs = invisible_defs,
	indic_script = indic_script,
	emoji_t = emoji_t,
	maint_cats = maint_cats,
	messages = messages,
	presentation = presentation,
	prop_cats = prop_cats,
	script_lang_codes = script_lang_codes,
	lang_tag_remap = lang_tag_remap,
	lang_name_remap = lang_name_remap,
	this_wiki_code = this_wiki_code,
	title_types = title_types,
	uncategorized_namespaces = uncategorized_namespaces_t,
	uncategorized_subpages = uncategorized_subpages,
	templates_using_volume = templates_using_volume,
	templates_using_issue = templates_using_issue,
	templates_not_using_page = templates_not_using_page,
	vol_iss_pg_patterns = vol_iss_pg_patterns,
	single_letter_2nd_lvl_domains_t = single_letter_2nd_lvl_domains_t,
	
	inter_wiki_map = inter_wiki_map,
	mw_languages_by_tag_t = mw_languages_by_tag_t,
	mw_languages_by_name_t = mw_languages_by_name_t,
	citation_class_map_t = citation_class_map_t,

	citation_issue_t = citation_issue_t,
	citation_no_volume_t = citation_no_volume_t,
	}</text>
      <sha1>tv7z805z1dd8uf6dr9d216rtxx7edd2</sha1>
    </revision>
  </page>
</mediawiki>

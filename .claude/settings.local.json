{
  "permissions": {
    "allow": [
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(grep:*)",
      "Bash(rmdir:*)",
      "Bash(mv:*)",
      "Bash(rd:*)",
      "Bash(ren:*)",
      "Bash(rm:*)",
      "Bash(python:*)",
      "Bash(cp:*)",
      "Bash(git rm:*)",
      "Bash(git check-ignore:*)",
      "Bash(git remote add:*)",
      "Bash(git fetch:*)",
      "Bash(git push:*)",
      "Bash(find:*)",
      "Bash(dir:*)",
      "Bash(del:*)",
      "Bash(for file in *.md)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(wc:*)",
      "Bash(done)",
      "Bash(for file in chapter_*.md)",
      "WebFetch(domain:en.wikipedia.org)",
      "Bash(pip install:*)",
      "Bash(where python)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_mongo_merger.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" efficient_gedcom_merger.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" simple_mongo_export.py)",
      "Bash(rg:*)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" comprehensive_mongo_export.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" safe_gedcom_concatenator.py)",
      "Bash(sqlite3:*)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_trimming_analyzer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\Gaiad.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\simple_gedcom_analyzer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\Gaiad.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\final_gedcom_analyzer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\Gaiad.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\final_gedcom_analyzer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_1200_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1200.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_flexible_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1100.ged\" 1100)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_flexible_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1000.ged\" 1000)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_date_scanner.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_fixed_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_fixed_trimmed_1000bc.ged\" -1000)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_improved_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_fixed_trimmed_1000bc.ged\" -1000)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_robust_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_fixed_trimmed_1000bc.ged\" -1000)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_date_standardizer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\date_analysis.csv\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\merged_standardized.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_robust_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\merged_standardized.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1000.ged\" -1000)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_simple_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1000.ged\" -1000)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_fast_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1000.ged\" -1000)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_fast_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1100.ged\" -1100)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_fast_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1200.ged\" -1200)",
      "Bash(sed:*)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_fast_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1000.ged\" 1000)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_date_analyzer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\comprehensive_date_analysis.csv\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_date_standardizer_comprehensive.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\merged_standardized_dates.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\date_standardization_log.csv\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_fast_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\merged_standardized_dates.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_standardized_trimmed_1000.ged\" 1000)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_fast_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1100.ged\" 1100)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_fast_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1200.ged\" 1200)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_issue_analyzer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1000.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\date_issue_summary.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\jewish_genealogy_analyzer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\merged_attempt_cleaned.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1000.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\comprehensive_date_analyzer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\comprehensive_date_analysis_v2.csv\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\improved_date_standardizer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined_standardized.ged\")",
      "Bash(git restore:*)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\improved_date_standardizer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_flexible_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1000.ged\" 1000)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_flexible_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1100.ged\" 1100)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_flexible_trimmer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1200.ged\" 1200)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\jewish_genealogy_analyzer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\gaiad_trimmed_1000.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\comprehensive_gedcom_cleaner.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\comprehensive_gedcom_cleaner.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined_cleaned.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\comprehensive_date_analyzer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\cleaned_date_analysis.csv\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\final_date_fixer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\date_format_standardizer.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\")",
      "Bash(git checkout:*)",
      "Bash(touch:*)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\improved_date_standardizer_v2.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\fix_negative_years.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\fix_circa_only.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\Aelaki\\aelaki_morphology.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\genealogy_issues_fixer.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\ftb_to_fh_duplicates_converter.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\gedcom_mongo_merger.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\wikidata_qid_extractor.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\evolutionism_qid_adder.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\")",
      "WebFetch(domain:evolutionism.miraheze.org)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\wikibase_inspector.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\wikibase_basic_check.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\gedcom_wikibase_uploader.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\gedcom_wikibase_uploader.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\" \"1996ToOmega!\")",
      "WebFetch(domain:login.miraheze.org)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\miraheze_login_test.py\")",
      "WebFetch(domain:meta.miraheze.org)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\test_mwclient_access.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\test_session_like_working.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\refn_patch_script.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\repair_then_upload.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\chinese_repair_upload.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\chinese_genealogy_sample.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\japanese_repair_upload.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\japan_genealogy_sample.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\complete_master_uploader.py\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\new_gedcoms\\source gedcoms\\master_combined.ged\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\wikibase_discovery_mapper.py\")",
      "Bash(cat:*)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\japanese_gedcom_repair.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\japanese_gedcom_repair.py\" --dry-run)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\check_japanese_duplicates.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\master_gedcom_repair.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\chinese_gedcom_repair.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\master_gedcom_repair_continued.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\chinese_gedcom_creator.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\master_gedcom_creator.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\master_creator_from_i10000.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\japanese_gedcom_creator.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\master_gedcom_creator_fixed.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\database_reviewer.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\master_notes_repair.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\quick_refn_fixer.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\chinese_family_relationships.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\family_analyzer.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\japanese_family_relationships.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\master_notes_creator.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\notes_distribution_analyzer.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\chinese_relationships_working.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\japanese_relationships_working.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\family_properties_creator.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\chinese_relationships_final.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\japanese_relationships_final.py\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\quick_refn_fixer_continued.py\")",
      "Bash(echo:*)",
      "Bash(for file in *uploader*.py *repair*.py refn_patch_script.py)",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(then echo -n \"$file: \")",
      "Bash(if rg -q \"''bot'': 1\" \"$file\")",
      "Bash(then echo \"DONE\")",
      "Bash(else echo \"NEEDS BOT FLAG\")",
      "Bash(fi)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" \"C:\\Users\\Immanuelle\\Documents\\Github\\Gaiad-Genealogy\\gedcom_tools\\master_relationships_final.py\")",
      "Bash(git add:*)",
      "Bash(git subtree:*)",
      "Bash(git commit:*)",
      "Bash(git read-tree:*)",
      "Bash(for file in *.py)",
      "Bash(do if rg -q \"(wbeditentity|wbcreateclaim|wbsetlabel|wbsetaliases|wbsetdescription|wbremoveclaims|''action'': ''edit'')\" \"$file\")",
      "Bash(then if ! rg -q \"''bot'': 1\" \"$file\")",
      "Bash(then echo \"NEEDS BOT FLAG: $file\")",
      "Bash(for:*)",
      "Bash(then echo \"$file\")",
      "Bash(/bashes)",
      "Bash(tasklist)",
      "Bash(taskkill:*)",
      "Bash(kill:*)",
      "Bash(git pull:*)",
      "Bash(do if rg -q \"(wbeditentity|wbcreateclaim|wbsetlabel|wbsetaliases|wbsetdescription|wbremoveclaims|''action'': ''edit'')\" \"$file\")",
      "Bash(dotnet --version)",
      "Bash(dotnet build:*)",
      "Bash(dotnet run:*)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" quick_refn_fixer_continued.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/quick_refn_fixer_continued.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/japanese_relationships_final.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/database_reviewer.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/master_relationships_final.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/master_notes_creator.py)",
      "Bash(timeout:*)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/master_multiple_names_extractor.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/master_aliases_uploader.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/gaiad_calendar_properties_creator.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/gaiad_calendar_months_creator.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/gaiad_calendar_months_simple.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/gaiad_calendar_days_creator.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/gaiad_calendar_full_creator.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" zodiac_wiki_pages.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" test_wiki_auth.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" test_single_zodiac_page.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" test_zodiac_minimal.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" debug_horus.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" trace_horus_error.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" find_53_week_years.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/long_notes_analyzer.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/substantial_notes_creator.py)",
      "Bash(tasklist:*)",
      "Bash(wmic:*)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/suffix_processor.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/master_relationships_from_start.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/missing_individuals_checker.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/missing_individuals_creator.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/missing_individuals_families_processor.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" check_remaining_missing.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" create_final_missing_individuals.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" create_esquire_individuals.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" debug_families_processor.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/missing_individuals_families_processor_fixed.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" get_remaining_names.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/non_latin_names_processor.py non_latin_names_with_translation_v2.csv)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/non_latin_names_processor.py non_latin_names_with_translation_v2.csv ImmanuelleBot \"1996ToOmega!\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/non_latin_names_processor.py non_latin_names_with_translation_v2.csv Immanuelle \"1996ToOmega!\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/non_latin_names_processor.py test_sample.csv Immanuelle \"1996ToOmega!\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_relationships_processor.py \"new_gedcoms/source gedcoms/master_combined.ged\" Immanuelle \"1996ToOmega!\")",
      "Bash(awk:*)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/master_gedcom_repair.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/database_reviewer_from_start.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/quick_refn_fixer.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/missing_individuals_relationships_fixed.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/japanese_individuals_repair.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/duplicate_properties_remover.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/duplicate_mapping_finder.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/master_relationships_narmer.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/master_relationships_middle.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/test_merger_i56212.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/auto_merger_i56212.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/complete_merger_i56212.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/bulk_duplicate_merger.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/individual_merger.py Q115039 Q126699 Q136398)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/specific_merger_q115039.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_database_fixer.py 138402 138402)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/debug_entity.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_database_fixer.py 144935 144935)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_database_fixer.py 85065 85065)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_database_fixer.py 115039 115039)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/specific_merger_q65705.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_database_fixer.py 1 160000)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_database_fixer.py 65705 65705)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_database_fixer.py 90309 90309)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_database_fixer.py 144936 144936)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_database_fixer.py 600 160000)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/gedcom_aliases_uploader.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/individual_merger.py Q85820 Q97505)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/specific_merger_q85820.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/hebrew_names_processor.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/latin_alias_promoter.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/duplicate_checker.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/csv_duplicate_merger.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/wiki_xml_exporter.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/namespace_checker.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport requests\nsession = requests.Session()\nsession.headers.update({''User-Agent'': ''Test''})\n\n# Check multiple namespaces for Q entities\nfor ns in [0, 860]:\n    params = {\n        ''action'': ''query'',\n        ''list'': ''allpages'',\n        ''apnamespace'': ns,\n        ''aplimit'': 5,\n        ''apprefix'': ''Q'',\n        ''format'': ''json''\n    }\n    \n    response = session.get(''https://evolutionism.miraheze.org/w/api.php'', params=params)\n    data = response.json()\n    \n    if ''query'' in data and ''allpages'' in data[''query'']:\n        pages = data[''query''][''allpages'']\n        if pages:\n            print(f''Namespace {ns}: Found {len(pages)} Q pages'')\n            for page in pages[:3]:\n                print(f''  {page[\"\"title\"\"]}'')\n        else:\n            print(f''Namespace {ns}: No Q pages found'')\n\")",
      "Bash(docker-compose up:*)",
      "Bash(docker:*)",
      "Bash(where docker)",
      "Bash(Get-Command docker -ErrorAction SilentlyContinue)",
      "Bash(refreshenv)",
      "Bash(export PATH=\"$PATH:/c/Program Files/Docker/Docker/resources/bin\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/simple_xml_export.py)",
      "Bash(curl:*)",
      "Bash(net start:*)",
      "Bash(\"C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_database_fixer.py 18001 160000 Immanuelle \"1996ToOmega!\" http://localhost:8080)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_database_fixer.py 1 10 Immanuelle \"1996ToOmega!\" http://localhost:8080)",
      "Bash(do echo:*)",
      "Bash(head:*)",
      "Bash(php:*)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_database_fixer.py 18001 160000 Immanuelle \"1996ToOmega!\")",
      "Bash(wsl:*)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/property_exporter.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_database_fixer_resumable.py 18001 160000 Immanuelle \"1996ToOmega!\" http://localhost:8080)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/comprehensive_database_fixer.py 21001 160000 Immanuelle \"1996ToOmega!\" http://localhost:8080)",
      "Bash(where mongod)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pip install pymongo python-Levenshtein)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\ntry:\n    client = pymongo.MongoClient(''mongodb://localhost:27017/'', serverSelectionTimeoutMS=5000)\n    client.server_info()\n    print(''✓ MongoDB connection successful'')\n    print(''✓ Server info:'', client.server_info()[''version''])\n    client.close()\nexcept Exception as e:\n    print(''✗ MongoDB connection failed:'', e)\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\ntry:\n    client = pymongo.MongoClient(''mongodb://localhost:27017/'', serverSelectionTimeoutMS=5000)\n    client.server_info()\n    print(''MongoDB connection successful'')\n    print(''Server version:'', client.server_info()[''version''])\n    \n    # Test new database\n    db = client[''gaiad_processing_db'']\n    collection = db[''test'']\n    collection.insert_one({''test'': ''data''})\n    print(''Database gaiad_processing_db created successfully'')\n    client.close()\nexcept Exception as e:\n    print(''MongoDB connection failed:'', str(e))\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/mongodb_pipeline.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/mongodb_xml_importer.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/debug_xml_parser.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/mongodb_pipeline.py merge)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/mongodb_pipeline.py export)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== PROPERTY ANALYSIS ==='')\nprint()\n\n# Get all unique property IDs\npipeline = [\n    {''$project'': {''properties'': {''$objectToArray'': ''$properties''}}},\n    {''$unwind'': ''$properties''},\n    {''$group'': {''_id'': ''$properties.k'', ''count'': {''$sum'': 1}}},\n    {''$sort'': {''count'': -1}}\n]\n\nprint(''Top 20 most common properties:'')\nfor result in collection.aggregate(pipeline):\n    if result[''count''] > 100:  # Only show common ones\n        print(f''{result[\"\"_id\"\"]}: {result[\"\"count\"\"]:,} entities'')\n\nprint()\nprint(''=== SEX PROPERTY CHECK ==='')\n# Check for sex-related properties\nsex_props = [''P11'', ''P21'', ''P55'', ''P21'']\nfor prop in sex_props:\n    count = collection.count_documents({f''properties.{prop}'': {''$exists'': True}})\n    print(f''{prop}: {count:,} entities'')\n    \n    if count > 0:\n        # Show sample values\n        sample = collection.find_one({f''properties.{prop}'': {''$exists'': True}})\n        if sample and prop in sample.get(''properties'', {}):\n            values = sample[''properties''][prop][:3]  # First 3 claims\n            print(f''  Sample values: {values}'')\n\nprint()\nprint(''=== DATE PROPERTY CHECK ==='')\n# Check for date properties\ndate_props = [''P7'', ''P8'', ''P56'', ''P57'', ''P569'', ''P570'']\nfor prop in date_props:\n    count = collection.count_documents({f''properties.{prop}'': {''$exists'': True}})\n    print(f''{prop}: {count:,} entities'')\n    \n    if count > 0:\n        # Show sample values\n        sample = collection.find_one({f''properties.{prop}'': {''$exists'': True}})\n        if sample and prop in sample.get(''properties'', {}):\n            values = sample[''properties''][prop][:3]\n            print(f''  Sample values: {values}'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\nfrom collections import Counter\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== QUICK PROPERTY ANALYSIS ==='')\nprint()\n\n# Sample a few entities to see what properties exist\nsample_entities = list(collection.find().limit(100))\nall_props = Counter()\n\nfor entity in sample_entities:\n    if ''properties'' in entity:\n        for prop_id in entity[''properties''].keys():\n            all_props[prop_id] += 1\n\nprint(''Properties found in sample of 100 entities:'')\nfor prop, count in all_props.most_common(20):\n    print(f''{prop}: {count} entities'')\n\nprint()\nprint(''=== SEX PROPERTY CHECK ==='')\n# Check for sex-related properties\nsex_props = [''P11'', ''P21'', ''P55'', ''P569'']\nfor prop in sex_props:\n    count = collection.count_documents({f''properties.{prop}'': {''$exists'': True}})\n    print(f''{prop}: {count:,} entities'')\n    \n    if count > 0:\n        # Show sample\n        sample = collection.find_one({f''properties.{prop}'': {''$exists'': True}})\n        if sample and prop in sample.get(''properties'', {}):\n            print(f''  Sample: {sample[\"\"properties\"\"][prop][:2]}'')\n\nprint()\nprint(''=== DATE PROPERTY CHECK ==='')\n# Check for date properties  \ndate_props = [''P7'', ''P8'', ''P56'', ''P57'', ''P569'', ''P570'']\nfor prop in date_props:\n    count = collection.count_documents({f''properties.{prop}'': {''$exists'': True}})\n    print(f''{prop}: {count:,} entities'')\n    \n    if count > 0:\n        sample = collection.find_one({f''properties.{prop}'': {''$exists'': True}})\n        if sample and prop in sample.get(''properties'', {}):\n            print(f''  Sample: {sample[\"\"properties\"\"][prop][:2]}'')\n\nprint()\nprint(''=== GENI ID CHECK ==='')\n# Check P41 REFN values\nrefn_count = collection.count_documents({''properties.P41'': {''$exists'': True}})\nprint(f''P41 (REFN): {refn_count:,} entities'')\n\nif refn_count > 0:\n    # Look at sample REFN values\n    samples = list(collection.find({''properties.P41'': {''$exists'': True}}).limit(20))\n    print(''Sample REFN values:'')\n    for sample in samples[:10]:\n        refn_claims = sample[''properties''][''P41'']\n        for claim in refn_claims[:3]:  # First 3 claims\n            value = claim.get(''value'', '''')\n            print(f''  {value}'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== PROCESSED DATA ANALYSIS ==='')\nprint()\n\n# Check what we actually have\ntotal = collection.count_documents({})\nprint(f''Total entities: {total:,}'')\n\n# Check processed properties\np55_count = collection.count_documents({''properties.P55'': {''$exists'': True}})\np56_count = collection.count_documents({''properties.P56'': {''$exists'': True}})  \np57_count = collection.count_documents({''properties.P57'': {''$exists'': True}})\np44_count = collection.count_documents({''properties.P44'': {''$exists'': True}})\np43_count = collection.count_documents({''properties.P43'': {''$exists'': True}})\n\nprint(f''P55 (sex - processed): {p55_count:,} entities'')\nprint(f''P56 (birth date - processed): {p56_count:,} entities'')\nprint(f''P57 (death date - processed): {p57_count:,} entities'') \nprint(f''P44 (Wikidata QID): {p44_count:,} entities'')\nprint(f''P43 (Geni ID): {p43_count:,} entities'')\n\nprint()\nprint(''=== SAMPLE DATA ==='')\n\n# Show samples\nif p55_count > 0:\n    sample = collection.find_one({''properties.P55'': {''$exists'': True}})\n    print(f''P55 sample: {sample[\"\"properties\"\"][\"\"P55\"\"][:2]}'')\n\nif p56_count > 0:\n    sample = collection.find_one({''properties.P56'': {''$exists'': True}})\n    print(f''P56 sample: {sample[\"\"properties\"\"][\"\"P56\"\"][:2]}'')\n\nif p44_count > 0:\n    sample = collection.find_one({''properties.P44'': {''$exists'': True}})  \n    print(f''P44 sample: {sample[\"\"properties\"\"][\"\"P44\"\"][:2]}'')\n\nif p43_count > 0:\n    sample = collection.find_one({''properties.P43'': {''$exists'': True}})\n    print(f''P43 sample: {sample[\"\"properties\"\"][\"\"P43\"\"][:2]}'')\n\nprint()\nprint(''=== CHECK FOR REFERENCE_NUMBERS ==='')\n# Check for REFERENCE_NUMBERS in various places\ndesc_ref = collection.count_documents({''descriptions.en'': {''$regex'': ''REFERENCE_NUMBERS''}})\nlabel_ref = collection.count_documents({''labels.en'': {''$regex'': ''REFERENCE_NUMBERS''}})\n\nprint(f''Descriptions with REFERENCE_NUMBERS: {desc_ref:,}'')\nprint(f''Labels with REFERENCE_NUMBERS: {label_ref:,}'')\n\nif desc_ref > 0:\n    sample = collection.find_one({''descriptions.en'': {''$regex'': ''REFERENCE_NUMBERS''}})\n    print(f''Sample description: {sample[\"\"descriptions\"\"][\"\"en\"\"][:200]}...'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== DATABASE STATE INVESTIGATION ==='')\nprint()\n\n# Get a few random entities and see what they look like\nsamples = list(collection.find().limit(5))\n\nfor i, entity in enumerate(samples):\n    print(f''--- ENTITY {i+1}: {entity[\"\"qid\"\"]} ---'')\n    print(f''Type: {entity[\"\"entity_type\"\"]}'')\n    print(f''Labels: {list(entity.get(\"\"labels\"\", {}).keys())}'')\n    print(f''Descriptions: {list(entity.get(\"\"descriptions\"\", {}).keys())}'')\n    print(f''Properties: {list(entity.get(\"\"properties\"\", {}).keys())}'')\n    \n    # Show some property details\n    props = entity.get(''properties'', {})\n    for prop_id in list(props.keys())[:5]:  # First 5 properties\n        claims = props[prop_id]\n        print(f''  {prop_id}: {len(claims)} claims'')\n        if claims:\n            print(f''    Sample: {claims[0]}'')\n    print()\n\n# Check if there are any entities with the specific properties we''re looking for\nprint(''=== SPECIFIC PROPERTY SEARCH ==='')\nfor prop in [''P11'', ''P7'', ''P8'', ''P41'', ''P44'', ''P43'', ''P55'', ''P56'', ''P57'']:\n    count = collection.count_documents({f''properties.{prop}'': {''$exists'': True}})\n    if count > 0:\n        print(f''{prop}: {count:,} entities'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== ACCURATE PROPERTY COUNTS ==='')\nprint()\n\nproperties_to_check = [''P11'', ''P7'', ''P8'', ''P41'', ''P44'', ''P43'', ''P55'', ''P56'', ''P57'', ''P39'']\n\nfor prop in properties_to_check:\n    count = collection.count_documents({f''properties.{prop}'': {''$exists'': True}})\n    print(f''{prop}: {count:,} entities'')\n    \n    # Show a sample if it exists\n    if count > 0:\n        sample = collection.find_one({f''properties.{prop}'': {''$exists'': True}})\n        sample_claims = sample[''properties''][prop][:2]  # First 2 claims\n        print(f''  Sample: {sample_claims}'')\n        print()\n\nprint()\nprint(''=== ANALYSIS ==='')\n\n# Count entities with Wikidata QIDs\np44_count = collection.count_documents({''properties.P44'': {''$exists'': True}})\n# Count entities with Geni IDs  \np43_count = collection.count_documents({''properties.P43'': {''$exists'': True}})\n# Count entities with ''no identifiers''\np39_no_id = collection.count_documents({\n    ''properties.P39.value'': ''Q153720''\n})\n\nprint(f''Entities with Wikidata QIDs (P44): {p44_count:,}'')\nprint(f''Entities with Geni IDs (P43): {p43_count:,}'')  \nprint(f''Entities marked as no identifiers: {p39_no_id:,}'')\n\n# Check sex properties\np55_count = collection.count_documents({''properties.P55'': {''$exists'': True}})\nprint(f''Entities with sex property (P55): {p55_count:,}'')\n\n# Check date properties\np56_count = collection.count_documents({''properties.P56'': {''$exists'': True}})\np57_count = collection.count_documents({''properties.P57'': {''$exists'': True}})\nprint(f''Entities with birth date (P56): {p56_count:,}'')\nprint(f''Entities with death date (P57): {p57_count:,}'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== DIRECT QUERY DEBUG ==='')\n\n# Find the specific entities I saw earlier\nq16244 = collection.find_one({''qid'': ''Q16244''})\nif q16244:\n    print(f''Q16244 properties: {list(q16244.get(\"\"properties\"\", {}).keys())}'')\n    if ''P44'' in q16244.get(''properties'', {}):\n        print(f''Q16244 P44: {q16244[\"\"properties\"\"][\"\"P44\"\"]}'')\n\n# Try a different query approach\nentities_with_p44 = list(collection.find({''properties.P44'': {''$exists'': True}}).limit(5))\nprint(f''Found {len(entities_with_p44)} entities with P44 using find()'')\n\n# Try aggregate to count\ntry:\n    pipeline = [\n        {''$match'': {''properties.P44'': {''$exists'': True}}},\n        {''$count'': ''total''}\n    ]\n    result = list(collection.aggregate(pipeline))\n    print(f''Aggregate count for P44: {result}'')\nexcept Exception as e:\n    print(f''Aggregate error: {e}'')\n\n# Manual count\nmanual_count = 0\nfor entity in collection.find().limit(1000):\n    if ''P44'' in entity.get(''properties'', {}):\n        manual_count += 1\n\nprint(f''Manual count of P44 in first 1000: {manual_count}'')\n\n# Check if MongoDB is working correctly\ntotal_docs = collection.count_documents({})\nprint(f''Total documents: {total_docs:,}'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/property_analyzer.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== P41 GENI REFERENCE SEARCH ==='')\nprint()\n\ngeni_found = 0\ngeni_samples = []\n\nprint(''Searching through all P41 properties for \"\"geni\"\" references...'')\nprocessed = 0\n\nfor entity in collection.find({''properties.P41'': {''$exists'': True}}):\n    processed += 1\n    if processed % 5000 == 0:\n        print(f''  Checked {processed:,} entities with P41...'')\n    \n    qid = entity[''qid'']\n    p41_claims = entity.get(''properties'', {}).get(''P41'', [])\n    \n    for claim in p41_claims:\n        value = claim.get(''value'', '''')\n        if isinstance(value, str) and ''geni'' in value.lower():\n            geni_found += 1\n            if len(geni_samples) < 10:  # Collect first 10 samples\n                geni_samples.append({\n                    ''qid'': qid,\n                    ''value'': value,\n                    ''claim'': claim\n                })\n\nprint(f''  Checked {processed:,} entities with P41 total'')\nprint()\n\nprint(f''Found {geni_found:,} P41 claims containing \"\"geni\"\"'')\n\nif geni_samples:\n    print()\n    print(''Sample Geni references:'')\n    for sample in geni_samples:\n        print(f''  {sample[\"\"qid\"\"]}: {sample[\"\"value\"\"]}'')\n\n# Also check for different formats\nprint()\nprint(''=== CHECKING OTHER GENI FORMATS ==='')\n\n# Check for numeric patterns that might be Geni IDs\nnumeric_patterns = 0\nurl_patterns = 0\nother_patterns = 0\n\nsample_count = 0\nfor entity in collection.find({''properties.P41'': {''$exists'': True}}).limit(1000):\n    p41_claims = entity.get(''properties'', {}).get(''P41'', [])\n    \n    for claim in p41_claims:\n        value = claim.get(''value'', '''')\n        if isinstance(value, str):\n            if value.isdigit() and len(value) >= 6:  # Potential Geni ID\n                numeric_patterns += 1\n                if sample_count < 5:\n                    print(f''  Numeric (potential Geni): {entity[\"\"qid\"\"]} = {value}'')\n                    sample_count += 1\n            elif ''http'' in value.lower() and ''geni'' in value.lower():\n                url_patterns += 1\n            elif len(value) > 20:  # Long string that might contain Geni info\n                other_patterns += 1\n\nprint(f''In sample of 1000 entities:'')\nprint(f''  Numeric patterns (6+ digits): {numeric_patterns}'')\nprint(f''  URL patterns with geni: {url_patterns}'')\nprint(f''  Other long strings: {other_patterns}'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== DIRECT P41 INVESTIGATION ==='')\nprint()\n\n# Find some entities that should have P41\nsample_entities = list(collection.find().limit(100))\n\np41_count = 0\np41_samples = []\n\nfor entity in sample_entities:\n    properties = entity.get(''properties'', {})\n    if ''P41'' in properties:\n        p41_count += 1\n        if len(p41_samples) < 5:\n            p41_samples.append({\n                ''qid'': entity[''qid''],\n                ''p41_claims'': properties[''P41''][:3]  # First 3 claims\n            })\n\nprint(f''Found {p41_count} entities with P41 in sample of {len(sample_entities)}'')\nprint()\n\nif p41_samples:\n    print(''Sample P41 properties:'')\n    for sample in p41_samples:\n        print(f''{sample[\"\"qid\"\"]}:'')\n        for claim in sample[''p41_claims'']:\n            value = claim.get(''value'', '''')\n            claim_type = claim.get(''type'', '''')\n            print(f''  Value: \"\"{value}\"\" (type: {claim_type})'')\n            \n            # Check for Geni patterns\n            if isinstance(value, str):\n                if ''geni'' in value.lower():\n                    print(f''    -> CONTAINS GENI!'')\n                elif value.isdigit() and len(value) >= 6:\n                    print(f''    -> NUMERIC (potential Geni ID)'')\n                elif value.startswith(''Q'') and value[1:].isdigit():\n                    print(f''    -> WIKIDATA QID'')\n        print()\n\n# Also try the MongoDB exists query to see why it''s not working\nprint(''=== MONGODB QUERY DEBUG ==='')\ntry:\n    # Try different query approaches\n    count1 = collection.count_documents({''properties.P41'': {''$exists'': True}})\n    print(f''count_documents with $exists: {count1}'')\n    \n    # Manual count\n    manual_count = 0\n    for entity in collection.find().limit(1000):\n        if ''P41'' in entity.get(''properties'', {}):\n            manual_count += 1\n    print(f''Manual count in first 1000: {manual_count}'')\n    \nexcept Exception as e:\n    print(f''Query error: {e}'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== COMPREHENSIVE DATABASE CHECK ==='')\nprint()\n\n# Check what properties actually exist\nall_properties = set()\nentity_count = 0\n\nfor entity in collection.find().limit(10000):  # Check first 10k\n    entity_count += 1\n    properties = entity.get(''properties'', {})\n    all_properties.update(properties.keys())\n\nprint(f''Checked {entity_count} entities'')\nprint(f''Found these properties: {sorted(all_properties)}'')\n\n# Count each property in the first 10k entities\nfrom collections import Counter\nprop_counts = Counter()\n\nfor entity in collection.find().limit(10000):\n    properties = entity.get(''properties'', {})\n    for prop in properties.keys():\n        prop_counts[prop] += 1\n\nprint()\nprint(''Property counts in first 10,000 entities:'')\nfor prop, count in sorted(prop_counts.items()):\n    print(f''  {prop}: {count:,}'')\n\n# Check if P41 exists anywhere\nprint()\nprint(''=== SPECIFIC P41 CHECK ==='')\np41_found = False\n\nfor entity in collection.find().limit(10000):\n    if ''P41'' in entity.get(''properties'', {}):\n        p41_found = True\n        print(f''Found P41 in entity {entity[\"\"qid\"\"]}'')\n        print(f''P41 claims: {entity[\"\"properties\"\"][\"\"P41\"\"]}'')\n        break\n\nif not p41_found:\n    print(''No P41 properties found in first 10,000 entities'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\nimport re\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== P41 GENI SEARCH ==='')\nprint()\n\n# Count different types of P41 values\ngeni_references = 0\nnumeric_ids = []\nwikidata_qids = []\nhex_ids = []\nurl_references = []\nother_formats = []\n\nprocessed = 0\nfor entity in collection.find().limit(20000):  # Check first 20k entities\n    processed += 1\n    if processed % 5000 == 0:\n        print(f''  Processed {processed:,} entities...'')\n        \n    properties = entity.get(''properties'', {})\n    if ''P41'' in properties:\n        for claim in properties[''P41'']:\n            value = claim.get(''value'', '''')\n            if isinstance(value, str) and value.strip():\n                value = value.strip()\n                \n                # Check for different patterns\n                if ''geni'' in value.lower():\n                    geni_references += 1\n                    print(f''  GENI FOUND: {entity[\"\"qid\"\"]} = \"\"{value}\"\"'')\n                    \n                elif re.match(r''^\\d{6,}$'', value):  # 6+ digit number\n                    numeric_ids.append((entity[''qid''], value))\n                    \n                elif re.match(r''^Q\\d+$'', value):  # Wikidata QID\n                    wikidata_qids.append((entity[''qid''], value))\n                    \n                elif re.match(r''^[A-F0-9]{20,}$'', value):  # Hex ID\n                    hex_ids.append((entity[''qid''], value))\n                    \n                elif value.startswith(''http''):  # URL\n                    url_references.append((entity[''qid''], value))\n                    \n                else:\n                    other_formats.append((entity[''qid''], value))\n\nprint(f''  Processed {processed:,} entities total'')\nprint()\n\nprint(''=== P41 VALUE ANALYSIS ==='')\nprint(f''Geni references: {geni_references:,}'')\nprint(f''Numeric IDs (6+ digits): {len(numeric_ids):,}'')\nprint(f''Wikidata QIDs: {len(wikidata_qids):,}'')  \nprint(f''Hex IDs: {len(hex_ids):,}'')\nprint(f''URL references: {len(url_references):,}'')\nprint(f''Other formats: {len(other_formats):,}'')\n\nprint()\nprint(''=== SAMPLES ==='')\n\nif numeric_ids:\n    print(''Sample numeric IDs (potential Geni):'')\n    for qid, value in numeric_ids[:5]:\n        print(f''  {qid}: {value}'')\n\nif wikidata_qids:\n    print(''Sample Wikidata QIDs:'')\n    for qid, value in wikidata_qids[:5]:\n        print(f''  {qid}: {value}'')\n        \nif hex_ids:\n    print(''Sample hex IDs:'')\n    for qid, value in hex_ids[:3]:\n        print(f''  {qid}: {value}'')\n\nif other_formats:\n    print(''Sample other formats:'')\n    for qid, value in other_formats[:5]:\n        print(f''  {qid}: {value[:50]}...'' if len(value) > 50 else f''  {qid}: {value}'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/mongodb_bulk_processor.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== INVESTIGATING SEX/DATE PROPERTY ISSUE ==='')\nprint()\n\n# Check if P11 entities exist and what they look like\nprint(''Looking for P11 entities...'')\np11_samples = list(collection.find({''properties.P11'': {''$exists'': True}}).limit(5))\nprint(f''Found {len(p11_samples)} P11 entities in sample'')\n\nfor sample in p11_samples:\n    print(f''Entity {sample[\"\"qid\"\"]}:'')\n    p11_claims = sample[''properties''][''P11'']\n    for claim in p11_claims[:3]:\n        print(f''  P11 claim: {claim}'')\n        value = claim.get(''value'', '''')\n        claim_type = claim.get(''type'', '''')\n        print(f''  Value: \"\"{value}\"\" Type: \"\"{claim_type}\"\"'')\n    print()\n\n# Check if P7 entities exist\nprint(''Looking for P7 entities...'')\np7_samples = list(collection.find({''properties.P7'': {''$exists'': True}}).limit(3))\nprint(f''Found {len(p7_samples)} P7 entities in sample'')\n\nfor sample in p7_samples:\n    print(f''Entity {sample[\"\"qid\"\"]}:'')\n    p7_claims = sample[''properties''][''P7'']\n    for claim in p7_claims[:2]:\n        print(f''  P7 claim: {claim}'')\n    print()\n\n# Check if P8 entities exist\nprint(''Looking for P8 entities...'')\np8_samples = list(collection.find({''properties.P8'': {''$exists'': True}}).limit(3))\nprint(f''Found {len(p8_samples)} P8 entities in sample'')\n\nfor sample in p8_samples:\n    print(f''Entity {sample[\"\"qid\"\"]}:'')\n    p8_claims = sample[''properties''][''P8'']\n    for claim in p8_claims[:2]:\n        print(f''  P8 claim: {claim}'')\n    print()\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/process_remaining_properties.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/debug_property_structure.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/process_edge_case_properties.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== REMAINING P7 SAMPLES ==='')\np7_samples = []\nfor entity in collection.find({''properties.P7'': {''$exists'': True}}).limit(10):\n    p7_claims = entity[''properties''][''P7'']\n    for claim in p7_claims[:2]:\n        p7_samples.append({\n            ''qid'': entity[''qid''],\n            ''value'': claim.get(''value''),\n            ''type'': claim.get(''type'')\n        })\n\nfor sample in p7_samples[:10]:\n    print(f''{sample[\"\"qid\"\"]}: {sample[\"\"value\"\"]} (type: {sample[\"\"type\"\"]})'')\n\nprint()\nprint(''=== REMAINING P8 SAMPLES ==='')\np8_samples = []\nfor entity in collection.find({''properties.P8'': {''$exists'': True}}).limit(10):\n    p8_claims = entity[''properties''][''P8'']\n    for claim in p8_claims[:2]:\n        p8_samples.append({\n            ''qid'': entity[''qid''],\n            ''value'': claim.get(''value''),\n            ''type'': claim.get(''type'')\n        })\n\nfor sample in p8_samples[:10]:\n    print(f''{sample[\"\"qid\"\"]}: {sample[\"\"value\"\"]} (type: {sample[\"\"type\"\"]})'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\n# Direct count check\np7_count = collection.count_documents({''properties.P7'': {''$exists'': True}})\np8_count = collection.count_documents({''properties.P8'': {''$exists'': True}})\np11_count = collection.count_documents({''properties.P11'': {''$exists'': True}})\n\nprint(f''Direct MongoDB queries:'')\nprint(f''P7 entities: {p7_count}'')\nprint(f''P8 entities: {p8_count}'')\nprint(f''P11 entities: {p11_count}'')\n\nif p7_count > 0:\n    print()\n    print(''=== P7 SAMPLE ==='')\n    sample = collection.find_one({''properties.P7'': {''$exists'': True}})\n    if sample:\n        print(f''Entity: {sample[\"\"qid\"\"]}'')\n        print(f''P7: {sample[\"\"properties\"\"][\"\"P7\"\"]}'')\n\nif p8_count > 0:\n    print()\n    print(''=== P8 SAMPLE ==='')\n    sample = collection.find_one({''properties.P8'': {''$exists'': True}})\n    if sample:\n        print(f''Entity: {sample[\"\"qid\"\"]}'')\n        print(f''P8: {sample[\"\"properties\"\"][\"\"P8\"\"]}'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\nfrom collections import Counter\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== DEBUGGING PROPERTY COUNT DISCREPANCY ==='')\nprint()\n\n# Manual property counting like the analyzer does\nproperty_counts = Counter()\nprocessed = 0\n\nfor entity in collection.find():\n    processed += 1\n    if processed % 20000 == 0:\n        print(f''Processed {processed:,} entities...'')\n    \n    properties = entity.get(''properties'', {})\n    for prop_id in properties.keys():\n        property_counts[prop_id] += 1\n\nprint(f''Processed {processed:,} entities total'')\nprint()\n\n# Check for P7, P8, P11\nfor prop in [''P7'', ''P8'', ''P11'']:\n    count = property_counts.get(prop, 0)\n    print(f''{prop}: {count} entities'')\n    \n    if count > 0:\n        # Find a sample\n        sample = collection.find_one({f''properties.{prop}'': {''$exists'': True}})\n        if sample:\n            print(f''  Sample: {sample[\"\"qid\"\"]} has {prop}'')\n        else:\n            print(f''  No sample found despite count of {count}'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== INVESTIGATING PHANTOM PROPERTIES ==='')\nprint()\n\nfound_p7 = 0\nfound_p8 = 0\nchecked = 0\n\nfor entity in collection.find():\n    checked += 1\n    if checked % 20000 == 0:\n        print(f''Checked {checked:,} entities...'')\n    \n    properties = entity.get(''properties'', {})\n    qid = entity[''qid'']\n    \n    if ''P7'' in properties:\n        found_p7 += 1\n        if found_p7 <= 5:  # Show first 5 examples\n            print(f''FOUND P7 in {qid}: {properties[\"\"P7\"\"]}'')\n    \n    if ''P8'' in properties:\n        found_p8 += 1\n        if found_p8 <= 5:  # Show first 5 examples\n            print(f''FOUND P8 in {qid}: {properties[\"\"P8\"\"]}'')\n    \n    # Stop after finding some examples\n    if found_p7 >= 5 and found_p8 >= 5:\n        break\n\nprint(f''Manual search found: P7={found_p7}, P8={found_p8} in first {checked:,} entities'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" gedcom_tools/process_bc_dates.py)",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== FINAL 5 REMAINING P7 ENTITIES ==='')\n\ncount = 0\nfor entity in collection.find({''properties.P7'': {''$exists'': True}}):\n    count += 1\n    qid = entity[''qid'']\n    p7_claims = entity[''properties''][''P7'']\n    \n    print(f''{count}. {qid}:'')\n    for claim in p7_claims:\n        value = claim.get(''value'')\n        if isinstance(value, dict) and ''text'' in value:\n            print(f''   Value: \"\"{value[\"\"text\"\"]}\"\"'')\n        else:\n            print(f''   Value: \"\"{value}\"\"'')\n        print(f''   Type: {claim.get(\"\"type\"\")}'')\n        print(f''   Claim ID: {claim.get(\"\"claim_id\"\")}'')\n    print()\n\nprint(f''Total remaining P7 entities: {count}'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\n# Final verification counts\np11_count = collection.count_documents({''properties.P11'': {''$exists'': True}})\np7_count = collection.count_documents({''properties.P7'': {''$exists'': True}})\np8_count = collection.count_documents({''properties.P8'': {''$exists'': True}})\np41_count = collection.count_documents({''properties.P41'': {''$exists'': True}})\n\n# Processed counts\np55_count = collection.count_documents({''properties.P55'': {''$exists'': True}})\np56_count = collection.count_documents({''properties.P56'': {''$exists'': True}})\np57_count = collection.count_documents({''properties.P57'': {''$exists'': True}})\np44_count = collection.count_documents({''properties.P44'': {''$exists'': True}})\np43_count = collection.count_documents({''properties.P43'': {''$exists'': True}})\np60_count = collection.count_documents({''properties.P60'': {''$exists'': True}})\n\nprint(''=== FINAL PROCESSING SUMMARY ==='')\nprint()\nprint(''UNPROCESSED (should be 0):'')\nprint(f''P11 sex properties: {p11_count}'')\nprint(f''P7 birth dates: {p7_count}'')\nprint(f''P8 death dates: {p8_count}'')\nprint(f''P41 REFN properties: {p41_count}'')\nprint()\nprint(''PROCESSED (converted):'')\nprint(f''P55 sex properties: {p55_count:,}'')\nprint(f''P56 birth dates: {p56_count:,}'')\nprint(f''P57 death dates: {p57_count:,}'')\nprint(f''P44 Wikidata QIDs: {p44_count:,}'')\nprint(f''P43 Geni IDs: {p43_count:,}'')\nprint(f''P60 UUID REFNs: {p60_count:,}'')\n\nclient.close()\n\")",
      "Bash(\"C:\\Users\\Immanuelle\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport pymongo\nfrom collections import Counter\n\nclient = pymongo.MongoClient(''mongodb://localhost:27017/'')\ndb = client[''gaiad_processing_db'']\ncollection = db[''entities'']\n\nprint(''=== COMPREHENSIVE FINAL VERIFICATION ==='')\nprint()\n\n# Manual count of all properties\nproperty_counts = Counter()\ntotal_entities = 0\n\nfor entity in collection.find():\n    total_entities += 1\n    properties = entity.get(''properties'', {})\n    for prop_id in properties.keys():\n        property_counts[prop_id] += 1\n\nprint(f''Total entities: {total_entities:,}'')\nprint()\n\n# Key properties\nkey_props = [''P11'', ''P7'', ''P8'', ''P41'', ''P55'', ''P56'', ''P57'', ''P44'', ''P43'', ''P60'']\nfor prop in key_props:\n    count = property_counts.get(prop, 0)\n    print(f''{prop}: {count:,} entities'')\n\nprint()\nprint(''=== PROCESSING STATUS ==='')\nprint(f''P11 -> P55 conversion: {\"COMPLETE\" if property_counts.get(\"P11\", 0) == 0 else \"INCOMPLETE\"}'')\nprint(f''P7 -> P56 conversion: {\"COMPLETE\" if property_counts.get(\"P7\", 0) == 0 else \"INCOMPLETE\"}'')\nprint(f''P8 -> P57 conversion: {\"COMPLETE\" if property_counts.get(\"P8\", 0) == 0 else \"INCOMPLETE\"}'')\nprint(f''P41 -> P44/P43/P60 conversion: {\"COMPLETE\" if property_counts.get(\"P41\", 0) == 0 else \"INCOMPLETE\"}'')\n\nclient.close()\n\")"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  }
}